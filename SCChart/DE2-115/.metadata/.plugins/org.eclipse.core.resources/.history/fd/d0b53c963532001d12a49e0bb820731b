/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <system.h>
#include <altera_avalon_pio_regs.h>
#include <stdio.h>
#include <stdint.h>
#include <sys/alt_alarm.h>
#include <sys/alt_irq.h>

#include "pacecharts.h"
#include "timing.h"


unsigned int volatile buttonAS;
unsigned int volatile buttonVS;
void button_interrupt_function(void* context, alt_u32 id){
	printf("Button interrupt happened \n"); // delete later
	int* temp = (int*) context; // casting context first
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);

	// clear edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE,0);
	printf("button: %i \n", temp); // delete later
	if(*temp == 1){
		printf("AS interrupt");
		buttonAS = 1;

	}else if (*temp == 4){
		buttonVS = 1;
		printf("VS interrupt");
	}
}

//source from aron, :)
alt_u32 timerISR(void* context){
	int* timeCount = (int*) context;
	(*timeCount)++;
	return 1; // next time out is 1ms
}

void setup_interrupt(int*val){
	void *context_to_be_passed = (void*) val;
	//clear edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE,0);
	// enable interrupts for left and right buttons i.e. button 2 and button 0
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x5);
	// register the ISR
	alt_irq_register(KEYS_IRQ,context_to_be_passed,button_interrupt_function);
}


int main()
{
  printf("Hello from Nios II!\n");

  return 0;
}
