/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */
#include <system.h>
#include <altera_avalon_pio_regs.h>
#include <stdio.h>
#include "pacecharts.h"
#include "timing.h"

void button_interrupt_function(void* context, alt_u32 id){
	printf("Button interrupt happened \n"); // delete later
	int* temp = (int*) context; // casting context first
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);

	// clear edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE,0);
	printf("button: %i \n", temp); // delete later
	if(*temp == 1){
		setAS(*temp);

	}else if (*temp == 2){
		setVS(*temp);
	}
}

int main()
{
	TickData data;
	reset(&data);
	unsigned int uiSwitchValue = 0;

	FILE *lcd;
	printf("Hello from Nios II!\n");
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0xaa);
	lcd = fopen(LCD_NAME, "w");
	while(1)
	{
		unsigned int uiButtonsValue = 0;
		unsigned int uiButtonsValuePrevious = 0;
		uiSwitchValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, uiSwitchValue);
		int switchValueInteger = (int)(uiSwitchValue);

		data.AS =0;// reset on new tick
		data.VS = 0; // reset on new tick

		if (switchValueInteger==1){
			//if condition
						//select mode depdning on switch
			uiButtonsValuePrevious = uiButtonsValue;
			uiButtonsValue = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
			if((int)uiButtonsValue == 6){ // 6 = KEY0
				data.AS = 1;
			}else if ((int)uiButtonsValue == 5){// 5 = KEY1
				data.VS = 1;
			}




		}

		else if (switchValueInteger==2){

			printf("b");

		}
		tick(&data);

		//mode 1

			//intput KEY1 and KEY0 to simulate atrial and ventricular even
			//output green led when pacing both atrial and ventricle.

		//mode 2
			//input from uart connection, A and V stand for AS, VS
			//aaaaa




		//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, uiSwitchValue);
		uiButtonsValuePrevious = uiButtonsValue;
		uiButtonsValue = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
			if(lcd != NULL)
			{
				if(uiButtonsValuePrevious != uiButtonsValue)
				{
					#define ESC 27
					#define CLEAR_LCD_STRING "[2J"
					fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
					fprintf(lcd, "BUTTON VALUE: %d\n", uiButtonsValue);
				}
			}


			tick(&data);
	}
	fclose(lcd);
}
