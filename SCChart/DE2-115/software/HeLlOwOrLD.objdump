
HeLlOwOrLD.elf:     file format elf32-littlenios2
HeLlOwOrLD.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000f46c memsz 0x0000f46c flags r-x
    LOAD off    0x0001048c vaddr 0x0080f48c paddr 0x008110e4 align 2**12
         filesz 0x00001c58 memsz 0x00001c58 flags rw-
    LOAD off    0x00012d3c vaddr 0x00812d3c paddr 0x00812d3c align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ee28  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000420  0080f06c  0080f06c  0001006c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c58  0080f48c  008110e4  0001048c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00812d3c  00812d3c  00012d3c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00812e9c  00812e9c  000120e4  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  000120e4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000120e4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000da0  00000000  00000000  00012108  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00020450  00000000  00000000  00012ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000865d  00000000  00000000  000332f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000aac5  00000000  00000000  0003b955  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001f50  00000000  00000000  0004641c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003f03  00000000  00000000  0004836c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00009725  00000000  00000000  0004c26f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00055994  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000f78  00000000  00000000  000559f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00059959  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0005995c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0005995f  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00059960  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00059961  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0005996a  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00059973  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0005997c  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000043  00000000  00000000  00059988  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b17b  00000000  00000000  000599cb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
0080f06c l    d  .rodata	00000000 .rodata
0080f48c l    d  .rwdata	00000000 .rwdata
00812d3c l    d  .bss	00000000 .bss
00812e9c l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HeLlOwOrLD_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 pacecharts.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
0080f48c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00808988 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008090fc l     F .text	00000008 __fp_unlock
00809110 l     F .text	0000019c __sinit.part.1
008092ac l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080aef8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080b004 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080b030 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080b29c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080b37c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080b468 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080b63c l     F .text	0000003c alt_get_errno
0080b678 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0080b890 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008110d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080bc80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080bdb4 l     F .text	00000034 alt_dev_reg
0080fe60 l     O .rwdata	00001060 jtag_uart
00810ec0 l     O .rwdata	00000120 lcd
00810fe0 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080c0dc l     F .text	0000020c altera_avalon_jtag_uart_irq
0080c2e8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
008110dc l     O .rwdata	00000004 colstart
0080c920 l     F .text	000000b8 lcd_write_command
0080c9d8 l     F .text	000000d8 lcd_write_data
0080cab0 l     F .text	000000d0 lcd_clear_screen
0080cb80 l     F .text	000001ec lcd_repaint_screen
0080cd6c l     F .text	000000cc lcd_scroll_up
0080ce38 l     F .text	000002ac lcd_handle_escape
0080d5bc l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080d7fc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080daac l     F .text	0000009c altera_avalon_uart_irq
0080db48 l     F .text	000000e4 altera_avalon_uart_rxirq
0080dc2c l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080ddc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080dfe0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080e210 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080e8c0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080f30b l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00812d70 g     O .bss	00000004 alt_instruction_exception_handler
00809fc0 g     F .text	00000054 _isatty_r
0080b578 g     F .text	0000007c alt_main
008088b4 g     F .text	000000c0 _puts_r
00812d9c g     O .bss	00000100 alt_irq
0080a014 g     F .text	00000060 _lseek_r
008110e4 g       *ABS*	00000000 __flash_rwdata_start
0080949c g     F .text	000000ac __sflags
00812e9c g       *ABS*	00000000 __alt_heap_start
00808ca4 g     F .text	0000005c __sseek
0080944c g     F .text	00000010 __sinit
008092b4 g     F .text	00000068 __sfmoreglue
0080b618 g     F .text	00000024 __malloc_unlock
0080a2a0 g     F .text	0000015c memmove
008003a4 g     F .text	00000040 getGreenLED
00809434 g     F .text	00000018 _cleanup
008063b0 g     F .text	000000dc .hidden __gtdf2
0080ea30 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00807d08 g     F .text	0000005c _fstat_r
00812d48 g     O .bss	00000004 errno
00808c20 g     F .text	00000008 __seofread
00812d60 g     O .bss	00000004 alt_argv
008190a4 g       *ABS*	00000000 _gp
0080ea00 g     F .text	00000030 usleep
00805650 g     F .text	000001f8 reset
0080fce0 g     O .rwdata	00000180 alt_fd_list
0080e3b0 g     F .text	00000090 alt_find_dev
0080a158 g     F .text	00000148 memcpy
00809104 g     F .text	0000000c _cleanup_r
00807594 g     F .text	000000dc .hidden __floatsidf
0080e984 g     F .text	0000007c alt_io_redirect
0080648c g     F .text	000000f4 .hidden __ltdf2
00800424 g     F .text	00000038 vsLEDISR
0080f06c g       *ABS*	00000000 __DTOR_END__
00808974 g     F .text	00000014 puts
0080ec3c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080c4e0 g     F .text	0000021c altera_avalon_jtag_uart_read
0080ad10 g     F .text	00000064 .hidden __udivsi3
0080b2d8 g     F .text	000000a4 isatty
0080ebac g     F .text	00000090 alt_icache_flush
00812d54 g     O .bss	00000004 __malloc_top_pad
0080997c g     F .text	000004bc __sfvwrite_r
00808b78 g     F .text	00000054 _sbrk_r
0080a3fc g     F .text	00000060 _read_r
008110c4 g     O .rwdata	00000004 alt_max_fd
0080ab14 g     F .text	000000f0 _fclose_r
008090cc g     F .text	00000030 fflush
00812d50 g     O .bss	00000004 __malloc_max_sbrked_mem
0080b11c g     F .text	00000180 alt_irq_register
00805b04 g     F .text	000008ac .hidden __adddf3
0080b4a4 g     F .text	000000d4 lseek
008110a4 g     O .rwdata	00000004 _global_impure_ptr
0080a45c g     F .text	00000564 _realloc_r
00812e9c g       *ABS*	00000000 __bss_end
0080e7d0 g     F .text	000000f0 alt_iic_isr_register
0080bb78 g     F .text	00000108 alt_tick
00807670 g     F .text	000000a8 .hidden __floatunsidf
0080da00 g     F .text	000000ac altera_avalon_uart_init
0080946c g     F .text	00000018 __fp_lock_all
0080e784 g     F .text	0000004c alt_ic_irq_enabled
0080badc g     F .text	0000009c alt_alarm_stop
00812d58 g     O .bss	00000004 alt_irq_active
008078a8 g     F .text	00000444 _fseeko_r
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
0080fcb8 g     O .rwdata	00000028 alt_dev_null
0080e1c8 g     F .text	00000048 alt_dcache_flush_all
008110e4 g       *ABS*	00000000 __ram_rwdata_end
008110bc g     O .rwdata	00000008 alt_dev_list
0080bcbc g     F .text	000000f8 write
0080f48c g       *ABS*	00000000 __ram_rodata_end
0080b06c g     F .text	000000b0 fstat
0080648c g     F .text	000000f4 .hidden __ledf2
00812d3c g     O .bss	00000004 buttonVS
0080ad74 g     F .text	00000058 .hidden __umodsi3
00812e9c g       *ABS*	00000000 end
0080d0e4 g     F .text	000004d8 altera_avalon_lcd_16207_write
00807cec g     F .text	0000001c fseeko
0080e01c g     F .text	000001ac altera_avalon_uart_write
0080788c g     F .text	0000001c fseek
0080c01c g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0080f06c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080d874 g     F .text	0000007c alt_avalon_timer_sc_init
0080d950 g     F .text	00000060 altera_avalon_uart_write_fd
00807718 g     F .text	00000064 .hidden __clzsi2
0080d9b0 g     F .text	00000050 altera_avalon_uart_close_fd
0080c6fc g     F .text	00000224 altera_avalon_jtag_uart_write
0080945c g     F .text	00000004 __sfp_lock_acquire
0080a074 g     F .text	000000e4 memchr
0080966c g     F .text	00000310 _free_r
0080eeb8 g     F .text	00000180 __call_exitprocs
008110ac g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00812d68 g     O .bss	00000004 _alt_tick_rate
00805a94 g     F .text	00000070 .hidden __floatundidf
00812d6c g     O .bss	00000004 _alt_nticks
0080b8cc g     F .text	000000fc read
0080be20 g     F .text	00000098 alt_sys_init
00808854 g     F .text	00000060 _open_r
0080eda0 g     F .text	00000118 __register_exitproc
0080c388 g     F .text	00000068 altera_avalon_jtag_uart_close
0080f48c g       *ABS*	00000000 __ram_rwdata_start
0080f06c g       *ABS*	00000000 __ram_rodata_start
00812d74 g     O .bss	00000028 __malloc_current_mallinfo
0080beb8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080e548 g     F .text	000000a4 alt_get_fd
0080ea54 g     F .text	00000158 alt_busy_sleep
00808e00 g     F .text	00000054 _close_r
0080ed24 g     F .text	0000007c memcmp
0080bf78 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00812e9c g       *ABS*	00000000 __alt_stack_base
0080bfc8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080a9c0 g     F .text	00000154 __swsetup_r
00805848 g     F .text	0000024c tick
0080931c g     F .text	00000118 __sfp
0080f8b0 g     O .rwdata	00000408 __malloc_av_
00809468 g     F .text	00000004 __sinit_lock_release
00806580 g     F .text	00000718 .hidden __muldf3
00808bcc g     F .text	00000054 __sread
0080e440 g     F .text	00000108 alt_find_file
0080e24c g     F .text	000000a4 alt_dev_llist_insert
0080b5f4 g     F .text	00000024 __malloc_lock
0080ba2c g     F .text	000000b0 sbrk
00809070 g     F .text	0000005c _fflush_r
00807870 g     F .text	00000018 fopen
00812d3c g       *ABS*	00000000 __bss_start
0080872c g     F .text	00000128 memset
0080056c g     F .text	00000300 main
00812d64 g     O .bss	00000004 alt_envp
00812d4c g     O .bss	00000004 __malloc_max_total_mem
0080bf18 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080d668 g     F .text	00000134 altera_avalon_lcd_16207_init
00808d00 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080ac04 g     F .text	00000014 fclose
00800290 g     F .text	00000088 button_interrupt_function
00807f20 g     F .text	0000080c _malloc_r
008110c8 g     O .rwdata	00000004 alt_errno
00809e38 g     F .text	000000c4 _fwalk
0080ac18 g     F .text	00000084 .hidden __divsi3
00809548 g     F .text	00000124 _malloc_trim_r
0080f06c g       *ABS*	00000000 __CTOR_END__
00800504 g     F .text	00000068 setup_interrupt
00800494 g     F .text	00000038 apLEDISR
00800318 g     F .text	0000008c setGreenLED
0080f06c g       *ABS*	00000000 __flash_rodata_start
0080f06c g       *ABS*	00000000 __DTOR_LIST__
0080bde8 g     F .text	00000038 alt_irq_init
0080b9c8 g     F .text	00000064 alt_release_fd
0080f0bf g     O .rodata	00000100 .hidden __clz_tab
0080ecd8 g     F .text	00000014 atexit
00808da0 g     F .text	00000060 _write_r
008110a8 g     O .rwdata	00000004 _impure_ptr
00812d5c g     O .bss	00000004 alt_argc
00808e54 g     F .text	0000021c __sflush_r
0080e350 g     F .text	00000060 _do_dtors
00807888 g     F .text	00000004 _fseek_r
008089a4 g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00809484 g     F .text	00000018 __fp_unlock_all
0080d79c g     F .text	00000060 altera_avalon_lcd_16207_write_fd
008110b4 g     O .rwdata	00000008 alt_fs_list
008004cc g     F .text	00000038 vpLEDISR
00800020 g       *ABS*	00000000 __ram_exceptions_start
00812d40 g     O .bss	00000004 turnOffLED
008003e4 g     F .text	00000040 timerISR
0080e620 g     F .text	00000050 alt_ic_isr_register
008110e4 g       *ABS*	00000000 _edata
0080d8f0 g     F .text	00000060 altera_avalon_uart_read_fd
00812e9c g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080c3f0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0080e6f8 g     F .text	0000008c alt_ic_irq_disable
00808c28 g     F .text	0000007c __swrite
008110b0 g     O .rwdata	00000004 __malloc_trim_threshold
0080ecec g     F .text	00000038 exit
00809efc g     F .text	000000c4 _fwalk_reent
0080ac9c g     F .text	00000074 .hidden __modsi3
0080086c g     F .text	00004de4 logic
008110e0 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00809460 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080f20a g     O .rodata	00000101 _ctype_
0080dd74 g     F .text	00000054 altera_avalon_uart_close
0080777c g     F .text	000000f4 _fopen_r
0080f038 g     F .text	00000034 _exit
0080adcc g     F .text	0000012c alt_alarm_start
00807d64 g     F .text	000001bc __smakebuf_r
00808d08 g     F .text	00000098 strlen
0080b73c g     F .text	00000154 open
008063b0 g     F .text	000000dc .hidden __gedf2
0080e5ec g     F .text	00000034 alt_icache_flush_all
008110cc g     O .rwdata	00000004 alt_priority_mask
0080e670 g     F .text	00000088 alt_ic_irq_enable
0080de04 g     F .text	000001dc altera_avalon_uart_read
00806c98 g     F .text	000008fc .hidden __subdf3
008110d4 g     O .rwdata	00000008 alt_alarm_list
0080e2f0 g     F .text	00000060 _do_ctors
00812d44 g     O .bss	00000004 buttonAS
0080af34 g     F .text	000000d0 close
0080b3e4 g     F .text	00000084 alt_load
0080045c g     F .text	00000038 asLEDISR
00809464 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	108b6704 	addi	r2,r2,11676
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	108b6704 	addi	r2,r2,11676
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a73317 	ldw	r2,-25396(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a73317 	ldw	r2,-25396(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6a42914 	ori	gp,gp,37028
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	108b4f14 	ori	r2,r2,11580

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18cba714 	ori	r3,r3,11932

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080b3e40 	call	80b3e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080b5780 	call	80b578 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <button_interrupt_function>:

unsigned int volatile buttonAS;
unsigned int volatile buttonVS;
unsigned int volatile turnOffLED;

void button_interrupt_function(void* context, alt_u32 id){
  800290:	defffc04 	addi	sp,sp,-16
  800294:	df000315 	stw	fp,12(sp)
  800298:	df000304 	addi	fp,sp,12
  80029c:	e13ffe15 	stw	r4,-8(fp)
  8002a0:	e17fff15 	stw	r5,-4(fp)
	int* temp = (int*) context; // casting context first
  8002a4:	e0bffe17 	ldw	r2,-8(fp)
  8002a8:	e0bffd15 	stw	r2,-12(fp)
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  8002ac:	00804074 	movhi	r2,257
  8002b0:	10842b04 	addi	r2,r2,4268
  8002b4:	10c00037 	ldwio	r3,0(r2)
  8002b8:	e0bffd17 	ldw	r2,-12(fp)
  8002bc:	10c00015 	stw	r3,0(r2)

	// clear edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE,0);
  8002c0:	0007883a 	mov	r3,zero
  8002c4:	00804074 	movhi	r2,257
  8002c8:	10842b04 	addi	r2,r2,4268
  8002cc:	10c00035 	stwio	r3,0(r2)
	if(*temp == 2){
  8002d0:	e0bffd17 	ldw	r2,-12(fp)
  8002d4:	10800017 	ldw	r2,0(r2)
  8002d8:	10800098 	cmpnei	r2,r2,2
  8002dc:	1000031e 	bne	r2,zero,8002ec <button_interrupt_function+0x5c>

		buttonAS = 1;
  8002e0:	00800044 	movi	r2,1
  8002e4:	d0a72815 	stw	r2,-25440(gp)

	}else if (*temp == 1){
		buttonVS = 1;
	}
}
  8002e8:	00000606 	br	800304 <button_interrupt_function+0x74>
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE,0);
	if(*temp == 2){

		buttonAS = 1;

	}else if (*temp == 1){
  8002ec:	e0bffd17 	ldw	r2,-12(fp)
  8002f0:	10800017 	ldw	r2,0(r2)
  8002f4:	10800058 	cmpnei	r2,r2,1
  8002f8:	1000021e 	bne	r2,zero,800304 <button_interrupt_function+0x74>
		buttonVS = 1;
  8002fc:	00800044 	movi	r2,1
  800300:	d0a72615 	stw	r2,-25448(gp)
	}
}
  800304:	0001883a 	nop
  800308:	e037883a 	mov	sp,fp
  80030c:	df000017 	ldw	fp,0(sp)
  800310:	dec00104 	addi	sp,sp,4
  800314:	f800283a 	ret

00800318 <setGreenLED>:

void setGreenLED(uint pos, char val) {
  800318:	defffc04 	addi	sp,sp,-16
  80031c:	df000315 	stw	fp,12(sp)
  800320:	df000304 	addi	fp,sp,12
  800324:	e13ffe15 	stw	r4,-8(fp)
  800328:	2805883a 	mov	r2,r5
  80032c:	e0bfff05 	stb	r2,-4(fp)
	int current = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800330:	00804074 	movhi	r2,257
  800334:	10841c04 	addi	r2,r2,4208
  800338:	10800037 	ldwio	r2,0(r2)
  80033c:	e0bffd15 	stw	r2,-12(fp)
	//printf("Setting LED %d to %d\n", pos, val);
	if(val) {
  800340:	e0bfff07 	ldb	r2,-4(fp)
  800344:	10000926 	beq	r2,zero,80036c <setGreenLED+0x54>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, current | (1 << pos));
  800348:	00c00044 	movi	r3,1
  80034c:	e0bffe17 	ldw	r2,-8(fp)
  800350:	1886983a 	sll	r3,r3,r2
  800354:	e0bffd17 	ldw	r2,-12(fp)
  800358:	1886b03a 	or	r3,r3,r2
  80035c:	00804074 	movhi	r2,257
  800360:	10841c04 	addi	r2,r2,4208
  800364:	10c00035 	stwio	r3,0(r2)
	}
	else {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, current & (~(1 << pos)));
	}
}
  800368:	00000906 	br	800390 <setGreenLED+0x78>
	//printf("Setting LED %d to %d\n", pos, val);
	if(val) {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, current | (1 << pos));
	}
	else {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, current & (~(1 << pos)));
  80036c:	00c00044 	movi	r3,1
  800370:	e0bffe17 	ldw	r2,-8(fp)
  800374:	1884983a 	sll	r2,r3,r2
  800378:	0086303a 	nor	r3,zero,r2
  80037c:	e0bffd17 	ldw	r2,-12(fp)
  800380:	1886703a 	and	r3,r3,r2
  800384:	00804074 	movhi	r2,257
  800388:	10841c04 	addi	r2,r2,4208
  80038c:	10c00035 	stwio	r3,0(r2)
	}
}
  800390:	0001883a 	nop
  800394:	e037883a 	mov	sp,fp
  800398:	df000017 	ldw	fp,0(sp)
  80039c:	dec00104 	addi	sp,sp,4
  8003a0:	f800283a 	ret

008003a4 <getGreenLED>:

char getGreenLED(uint pos) {
  8003a4:	defffd04 	addi	sp,sp,-12
  8003a8:	df000215 	stw	fp,8(sp)
  8003ac:	df000204 	addi	fp,sp,8
  8003b0:	e13fff15 	stw	r4,-4(fp)
	int current = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  8003b4:	00804074 	movhi	r2,257
  8003b8:	10841c04 	addi	r2,r2,4208
  8003bc:	10800037 	ldwio	r2,0(r2)
  8003c0:	e0bffe15 	stw	r2,-8(fp)
	return (current >> pos) & 0x1;
  8003c4:	e0fffe17 	ldw	r3,-8(fp)
  8003c8:	e0bfff17 	ldw	r2,-4(fp)
  8003cc:	1885d83a 	sra	r2,r3,r2
  8003d0:	1080004c 	andi	r2,r2,1
}
  8003d4:	e037883a 	mov	sp,fp
  8003d8:	df000017 	ldw	fp,0(sp)
  8003dc:	dec00104 	addi	sp,sp,4
  8003e0:	f800283a 	ret

008003e4 <timerISR>:

//source from aron, :)
alt_u32 timerISR(void* context){
  8003e4:	defffd04 	addi	sp,sp,-12
  8003e8:	df000215 	stw	fp,8(sp)
  8003ec:	df000204 	addi	fp,sp,8
  8003f0:	e13fff15 	stw	r4,-4(fp)
	int* timeCount = (int*) context;
  8003f4:	e0bfff17 	ldw	r2,-4(fp)
  8003f8:	e0bffe15 	stw	r2,-8(fp)
	(*timeCount)++;
  8003fc:	e0bffe17 	ldw	r2,-8(fp)
  800400:	10800017 	ldw	r2,0(r2)
  800404:	10c00044 	addi	r3,r2,1
  800408:	e0bffe17 	ldw	r2,-8(fp)
  80040c:	10c00015 	stw	r3,0(r2)
	return 1; // next time out is 1ms
  800410:	00800044 	movi	r2,1
}
  800414:	e037883a 	mov	sp,fp
  800418:	df000017 	ldw	fp,0(sp)
  80041c:	dec00104 	addi	sp,sp,4
  800420:	f800283a 	ret

00800424 <vsLEDISR>:

alt_u32 vsLEDISR(void* context){
  800424:	defffd04 	addi	sp,sp,-12
  800428:	dfc00215 	stw	ra,8(sp)
  80042c:	df000115 	stw	fp,4(sp)
  800430:	df000104 	addi	fp,sp,4
  800434:	e13fff15 	stw	r4,-4(fp)
	setGreenLED(4, 0);
  800438:	000b883a 	mov	r5,zero
  80043c:	01000104 	movi	r4,4
  800440:	08003180 	call	800318 <setGreenLED>

	return 0;
  800444:	0005883a 	mov	r2,zero
}
  800448:	e037883a 	mov	sp,fp
  80044c:	dfc00117 	ldw	ra,4(sp)
  800450:	df000017 	ldw	fp,0(sp)
  800454:	dec00204 	addi	sp,sp,8
  800458:	f800283a 	ret

0080045c <asLEDISR>:

alt_u32 asLEDISR(void* context){
  80045c:	defffd04 	addi	sp,sp,-12
  800460:	dfc00215 	stw	ra,8(sp)
  800464:	df000115 	stw	fp,4(sp)
  800468:	df000104 	addi	fp,sp,4
  80046c:	e13fff15 	stw	r4,-4(fp)
	setGreenLED(5, 0);
  800470:	000b883a 	mov	r5,zero
  800474:	01000144 	movi	r4,5
  800478:	08003180 	call	800318 <setGreenLED>

	return 0;
  80047c:	0005883a 	mov	r2,zero
}
  800480:	e037883a 	mov	sp,fp
  800484:	dfc00117 	ldw	ra,4(sp)
  800488:	df000017 	ldw	fp,0(sp)
  80048c:	dec00204 	addi	sp,sp,8
  800490:	f800283a 	ret

00800494 <apLEDISR>:

alt_u32 apLEDISR(void* context){
  800494:	defffd04 	addi	sp,sp,-12
  800498:	dfc00215 	stw	ra,8(sp)
  80049c:	df000115 	stw	fp,4(sp)
  8004a0:	df000104 	addi	fp,sp,4
  8004a4:	e13fff15 	stw	r4,-4(fp)
	setGreenLED(1, 0);
  8004a8:	000b883a 	mov	r5,zero
  8004ac:	01000044 	movi	r4,1
  8004b0:	08003180 	call	800318 <setGreenLED>

	return 0;
  8004b4:	0005883a 	mov	r2,zero
}
  8004b8:	e037883a 	mov	sp,fp
  8004bc:	dfc00117 	ldw	ra,4(sp)
  8004c0:	df000017 	ldw	fp,0(sp)
  8004c4:	dec00204 	addi	sp,sp,8
  8004c8:	f800283a 	ret

008004cc <vpLEDISR>:

alt_u32 vpLEDISR(void* context){
  8004cc:	defffd04 	addi	sp,sp,-12
  8004d0:	dfc00215 	stw	ra,8(sp)
  8004d4:	df000115 	stw	fp,4(sp)
  8004d8:	df000104 	addi	fp,sp,4
  8004dc:	e13fff15 	stw	r4,-4(fp)
	setGreenLED(0, 0);
  8004e0:	000b883a 	mov	r5,zero
  8004e4:	0009883a 	mov	r4,zero
  8004e8:	08003180 	call	800318 <setGreenLED>

	return 0;
  8004ec:	0005883a 	mov	r2,zero
}
  8004f0:	e037883a 	mov	sp,fp
  8004f4:	dfc00117 	ldw	ra,4(sp)
  8004f8:	df000017 	ldw	fp,0(sp)
  8004fc:	dec00204 	addi	sp,sp,8
  800500:	f800283a 	ret

00800504 <setup_interrupt>:




void setup_interrupt(int*val){
  800504:	defffc04 	addi	sp,sp,-16
  800508:	dfc00315 	stw	ra,12(sp)
  80050c:	df000215 	stw	fp,8(sp)
  800510:	df000204 	addi	fp,sp,8
  800514:	e13fff15 	stw	r4,-4(fp)
	void *context_to_be_passed = (void*) val;
  800518:	e0bfff17 	ldw	r2,-4(fp)
  80051c:	e0bffe15 	stw	r2,-8(fp)
	//clear edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE,0);
  800520:	0007883a 	mov	r3,zero
  800524:	00804074 	movhi	r2,257
  800528:	10842b04 	addi	r2,r2,4268
  80052c:	10c00035 	stwio	r3,0(r2)
	// enable interrupts for left and right buttons i.e. button 2 and button 0
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0b00111111);// parameter ands value with mask so 7 = 111 which means key2-0 enabled.
  800530:	00c00fc4 	movi	r3,63
  800534:	00804074 	movhi	r2,257
  800538:	10842a04 	addi	r2,r2,4264
  80053c:	10c00035 	stwio	r3,0(r2)
	// register the ISR
	alt_irq_register(KEYS_IRQ,context_to_be_passed,button_interrupt_function);
  800540:	01802034 	movhi	r6,128
  800544:	3180a404 	addi	r6,r6,656
  800548:	e17ffe17 	ldw	r5,-8(fp)
  80054c:	01000104 	movi	r4,4
  800550:	080b11c0 	call	80b11c <alt_irq_register>
}
  800554:	0001883a 	nop
  800558:	e037883a 	mov	sp,fp
  80055c:	dfc00117 	ldw	ra,4(sp)
  800560:	df000017 	ldw	fp,0(sp)
  800564:	dec00204 	addi	sp,sp,8
  800568:	f800283a 	ret

0080056c <main>:

int main()
{
  80056c:	deff7d04 	addi	sp,sp,-524
  800570:	dfc08215 	stw	ra,520(sp)
  800574:	df008115 	stw	fp,516(sp)
  800578:	df008104 	addi	fp,sp,516
	alt_alarm ticker_VSLED;
	alt_alarm ticker_ASLED;
	alt_alarm ticker_APLED;
	alt_alarm ticker_VPLED;

	reset(&data);
  80057c:	e0bf8604 	addi	r2,fp,-488
  800580:	1009883a 	mov	r4,r2
  800584:	08056500 	call	805650 <reset>
	tick(&data);
  800588:	e0bf8604 	addi	r2,fp,-488
  80058c:	1009883a 	mov	r4,r2
  800590:	08058480 	call	805848 <tick>

	unsigned int uiSwitchValue = 0;
  800594:	e03f8115 	stw	zero,-508(fp)
	unsigned int uiButtonsValue;
	unsigned int uiButtonsValuePrevious;


	FILE *lcd;
	printf("Hello from Nios II!\n");
  800598:	01002074 	movhi	r4,129
  80059c:	213c1b04 	addi	r4,r4,-3988
  8005a0:	08089740 	call	808974 <puts>
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
  8005a4:	0007883a 	mov	r3,zero
  8005a8:	00804074 	movhi	r2,257
  8005ac:	10841c04 	addi	r2,r2,4208
  8005b0:	10c00035 	stwio	r3,0(r2)
	lcd = fopen(LCD_NAME, "w");
  8005b4:	01402074 	movhi	r5,129
  8005b8:	297c2004 	addi	r5,r5,-3968
  8005bc:	01002074 	movhi	r4,129
  8005c0:	213c2104 	addi	r4,r4,-3964
  8005c4:	08078700 	call	807870 <fopen>
  8005c8:	e0bf8215 	stw	r2,-504(fp)

	// set up timer for SCChart
	uint64_t prevTime = 0;
  8005cc:	e03f7f15 	stw	zero,-516(fp)
  8005d0:	e03f8015 	stw	zero,-512(fp)
	uint64_t systemTime = 0;
  8005d4:	e03ffe15 	stw	zero,-8(fp)
  8005d8:	e03fff15 	stw	zero,-4(fp)
	void* timerContext = (void*) &systemTime;   //from aron github https://github.com/aron-jeremiah/CompSys303-SCCharts-Examples/blob/main/NiosExamples/SCCharts_Timer_Intergration_Example/main.c
  8005dc:	e0bffe04 	addi	r2,fp,-8
  8005e0:	e0bf8315 	stw	r2,-500(fp)
	alt_alarm_start(&ticker, 1, timerISR, timerContext);
  8005e4:	e0bfdf04 	addi	r2,fp,-132
  8005e8:	e1ff8317 	ldw	r7,-500(fp)
  8005ec:	01802034 	movhi	r6,128
  8005f0:	3180f904 	addi	r6,r6,996
  8005f4:	01400044 	movi	r5,1
  8005f8:	1009883a 	mov	r4,r2
  8005fc:	080adcc0 	call	80adcc <alt_alarm_start>



	while(1)
	{
		data.deltaT = systemTime - prevTime;
  800600:	e13ffe17 	ldw	r4,-8(fp)
  800604:	e17fff17 	ldw	r5,-4(fp)
  800608:	e1bf7f17 	ldw	r6,-516(fp)
  80060c:	e1ff8017 	ldw	r7,-512(fp)
  800610:	2185c83a 	sub	r2,r4,r6
  800614:	2091803a 	cmpltu	r8,r4,r2
  800618:	29c7c83a 	sub	r3,r5,r7
  80061c:	1a09c83a 	sub	r4,r3,r8
  800620:	2007883a 	mov	r3,r4
  800624:	100b883a 	mov	r5,r2
  800628:	180d883a 	mov	r6,r3
  80062c:	2809883a 	mov	r4,r5
  800630:	300b883a 	mov	r5,r6
  800634:	0805a940 	call	805a94 <__floatundidf>
  800638:	1009883a 	mov	r4,r2
  80063c:	180b883a 	mov	r5,r3
  800640:	e13f9a15 	stw	r4,-408(fp)
  800644:	e17f9b15 	stw	r5,-404(fp)
		prevTime = systemTime;
  800648:	e0bffe17 	ldw	r2,-8(fp)
  80064c:	e0bf7f15 	stw	r2,-516(fp)
  800650:	e0bfff17 	ldw	r2,-4(fp)
  800654:	e0bf8015 	stw	r2,-512(fp)



		//update inputs
		tick(&data);
  800658:	e0bf8604 	addi	r2,fp,-488
  80065c:	1009883a 	mov	r4,r2
  800660:	08058480 	call	805848 <tick>
		uiButtonsValue = 0;
  800664:	e03ffd15 	stw	zero,-12(fp)
		uiButtonsValuePrevious = 0;
  800668:	e03f8415 	stw	zero,-496(fp)
		uiSwitchValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  80066c:	00804074 	movhi	r2,257
  800670:	10842404 	addi	r2,r2,4240
  800674:	10800037 	ldwio	r2,0(r2)
  800678:	e0bf8115 	stw	r2,-508(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, uiSwitchValue);
  80067c:	e0ff8117 	ldw	r3,-508(fp)
  800680:	00804074 	movhi	r2,257
  800684:	10842004 	addi	r2,r2,4224
  800688:	10c00035 	stwio	r3,0(r2)
		int switchValueInteger = (int)(uiSwitchValue);
  80068c:	e0bf8117 	ldw	r2,-508(fp)
  800690:	e0bf8515 	stw	r2,-492(fp)

		data.AS =0;// reset on new tick
  800694:	e03f8c05 	stb	zero,-464(fp)
		data.VS = 0; // reset on new tick
  800698:	e03f8c45 	stb	zero,-463(fp)


		if (switchValueInteger==1){ //mode 1
  80069c:	e0bf8517 	ldw	r2,-492(fp)
  8006a0:	10800058 	cmpnei	r2,r2,1
  8006a4:	103fd61e 	bne	r2,zero,800600 <__alt_mem_onchip_mem+0xff7f8600>
			// if have time to do: only print mode 1 once
			//fprintf(lcd, "BUTTON VALUE: %d\n", uiButtonsValue);
			//printf("MODE 1\n");
			setup_interrupt(&uiButtonsValue);
  8006a8:	e0bffd04 	addi	r2,fp,-12
  8006ac:	1009883a 	mov	r4,r2
  8006b0:	08005040 	call	800504 <setup_interrupt>
			if(buttonAS == 1){ // AS = KEY1
  8006b4:	d0a72817 	ldw	r2,-25440(gp)
  8006b8:	10800058 	cmpnei	r2,r2,1
  8006bc:	1000171e 	bne	r2,zero,80071c <main+0x1b0>
				data.AS = 1;
  8006c0:	00800044 	movi	r2,1
  8006c4:	e0bf8c05 	stb	r2,-464(fp)
				buttonAS = 0;
  8006c8:	d0272815 	stw	zero,-25440(gp)
				printf("AS set\n");
  8006cc:	01002074 	movhi	r4,129
  8006d0:	213c2404 	addi	r4,r4,-3952
  8006d4:	08089740 	call	808974 <puts>

					if(!getGreenLED(5)) {
  8006d8:	01000144 	movi	r4,5
  8006dc:	08003a40 	call	8003a4 <getGreenLED>
  8006e0:	10803fcc 	andi	r2,r2,255
  8006e4:	1080201c 	xori	r2,r2,128
  8006e8:	10bfe004 	addi	r2,r2,-128
  8006ec:	1000241e 	bne	r2,zero,800780 <main+0x214>
						setGreenLED(5, 1); // turn on LED 5 for AS
  8006f0:	01400044 	movi	r5,1
  8006f4:	01000144 	movi	r4,5
  8006f8:	08003180 	call	800318 <setGreenLED>
						alt_alarm_start(&ticker_ASLED, 200, asLEDISR, timerContext);
  8006fc:	e0bfeb04 	addi	r2,fp,-84
  800700:	e1ff8317 	ldw	r7,-500(fp)
  800704:	01802034 	movhi	r6,128
  800708:	31811704 	addi	r6,r6,1116
  80070c:	01403204 	movi	r5,200
  800710:	1009883a 	mov	r4,r2
  800714:	080adcc0 	call	80adcc <alt_alarm_start>
  800718:	00001906 	br	800780 <main+0x214>
					}
				}

			else if (buttonVS ==1){// VS = KEY0
  80071c:	d0a72617 	ldw	r2,-25448(gp)
  800720:	10800058 	cmpnei	r2,r2,1
  800724:	1000161e 	bne	r2,zero,800780 <main+0x214>
				data.VS = 1;
  800728:	00800044 	movi	r2,1
  80072c:	e0bf8c45 	stb	r2,-463(fp)
				buttonVS =0;
  800730:	d0272615 	stw	zero,-25448(gp)
				printf("VS set\n");
  800734:	01002074 	movhi	r4,129
  800738:	213c2604 	addi	r4,r4,-3944
  80073c:	08089740 	call	808974 <puts>
				if(!getGreenLED(4)) {
  800740:	01000104 	movi	r4,4
  800744:	08003a40 	call	8003a4 <getGreenLED>
  800748:	10803fcc 	andi	r2,r2,255
  80074c:	1080201c 	xori	r2,r2,128
  800750:	10bfe004 	addi	r2,r2,-128
  800754:	10000a1e 	bne	r2,zero,800780 <main+0x214>
					setGreenLED(4, 1); // turn on LED 4 for VS
  800758:	01400044 	movi	r5,1
  80075c:	01000104 	movi	r4,4
  800760:	08003180 	call	800318 <setGreenLED>
					alt_alarm_start(&ticker_VSLED, 200, vsLEDISR, timerContext);
  800764:	e0bfe504 	addi	r2,fp,-108
  800768:	e1ff8317 	ldw	r7,-500(fp)
  80076c:	01802034 	movhi	r6,128
  800770:	31810904 	addi	r6,r6,1060
  800774:	01403204 	movi	r5,200
  800778:	1009883a 	mov	r4,r2
  80077c:	080adcc0 	call	80adcc <alt_alarm_start>
				}
			}


			if(data.AP==1)
  800780:	e0bf9903 	ldbu	r2,-412(fp)
  800784:	10803fcc 	andi	r2,r2,255
  800788:	1080201c 	xori	r2,r2,128
  80078c:	10bfe004 	addi	r2,r2,-128
  800790:	10800058 	cmpnei	r2,r2,1
  800794:	1000141e 	bne	r2,zero,8007e8 <main+0x27c>
			{	printf("AP is paced\n");
  800798:	01002074 	movhi	r4,129
  80079c:	213c2804 	addi	r4,r4,-3936
  8007a0:	08089740 	call	808974 <puts>
				if(!getGreenLED(1)) {
  8007a4:	01000044 	movi	r4,1
  8007a8:	08003a40 	call	8003a4 <getGreenLED>
  8007ac:	10803fcc 	andi	r2,r2,255
  8007b0:	1080201c 	xori	r2,r2,128
  8007b4:	10bfe004 	addi	r2,r2,-128
  8007b8:	103f911e 	bne	r2,zero,800600 <__alt_mem_onchip_mem+0xff7f8600>
					setGreenLED(1, 1); // turn on LED 1 for AP
  8007bc:	01400044 	movi	r5,1
  8007c0:	01000044 	movi	r4,1
  8007c4:	08003180 	call	800318 <setGreenLED>
					alt_alarm_start(&ticker_APLED, 200, apLEDISR, timerContext);
  8007c8:	e0bff104 	addi	r2,fp,-60
  8007cc:	e1ff8317 	ldw	r7,-500(fp)
  8007d0:	01802034 	movhi	r6,128
  8007d4:	31812504 	addi	r6,r6,1172
  8007d8:	01403204 	movi	r5,200
  8007dc:	1009883a 	mov	r4,r2
  8007e0:	080adcc0 	call	80adcc <alt_alarm_start>
  8007e4:	003f8606 	br	800600 <__alt_mem_onchip_mem+0xff7f8600>
				}
			}


			else if(data.VP==1){
  8007e8:	e0bf9943 	ldbu	r2,-411(fp)
  8007ec:	10803fcc 	andi	r2,r2,255
  8007f0:	1080201c 	xori	r2,r2,128
  8007f4:	10bfe004 	addi	r2,r2,-128
  8007f8:	10800058 	cmpnei	r2,r2,1
  8007fc:	1000141e 	bne	r2,zero,800850 <main+0x2e4>
				printf("VP is paced\n");
  800800:	01002074 	movhi	r4,129
  800804:	213c2b04 	addi	r4,r4,-3924
  800808:	08089740 	call	808974 <puts>
				if(!getGreenLED(0)) {
  80080c:	0009883a 	mov	r4,zero
  800810:	08003a40 	call	8003a4 <getGreenLED>
  800814:	10803fcc 	andi	r2,r2,255
  800818:	1080201c 	xori	r2,r2,128
  80081c:	10bfe004 	addi	r2,r2,-128
  800820:	103f771e 	bne	r2,zero,800600 <__alt_mem_onchip_mem+0xff7f8600>
					setGreenLED(0, 1); // turn on LED 0 for VS
  800824:	01400044 	movi	r5,1
  800828:	0009883a 	mov	r4,zero
  80082c:	08003180 	call	800318 <setGreenLED>

					alt_alarm_start(&ticker_VPLED, 200, vpLEDISR, timerContext);
  800830:	e0bff704 	addi	r2,fp,-36
  800834:	e1ff8317 	ldw	r7,-500(fp)
  800838:	01802034 	movhi	r6,128
  80083c:	31813304 	addi	r6,r6,1228
  800840:	01403204 	movi	r5,200
  800844:	1009883a 	mov	r4,r2
  800848:	080adcc0 	call	80adcc <alt_alarm_start>
  80084c:	003f6c06 	br	800600 <__alt_mem_onchip_mem+0xff7f8600>
			}




		else if (switchValueInteger==2){//mode2
  800850:	e0bf8517 	ldw	r2,-492(fp)
  800854:	10800098 	cmpnei	r2,r2,2
  800858:	103f691e 	bne	r2,zero,800600 <__alt_mem_onchip_mem+0xff7f8600>
			printf("mode 2\n");
  80085c:	01002074 	movhi	r4,129
  800860:	213c2e04 	addi	r4,r4,-3912
  800864:	08089740 	call	808974 <puts>
//				}
//			}


		}
	}
  800868:	003f6506 	br	800600 <__alt_mem_onchip_mem+0xff7f8600>

0080086c <logic>:
 */

#include "pacecharts.h"
#include "timing.h"

void logic(TickData* d) {
  80086c:	defffa04 	addi	sp,sp,-24
  800870:	dfc00515 	stw	ra,20(sp)
  800874:	df000415 	stw	fp,16(sp)
  800878:	dc800315 	stw	r18,12(sp)
  80087c:	dc400215 	stw	r17,8(sp)
  800880:	dc000115 	stw	r16,4(sp)
  800884:	df000404 	addi	fp,sp,16
  800888:	e13ffc15 	stw	r4,-16(fp)
  d->_DDDpacemake2_local_AP_temp = 0;
  80088c:	e0bffc17 	ldw	r2,-16(fp)
  800890:	10001a05 	stb	zero,104(r2)
  d->_DDDpacemake2_local_VP_temp = 0;
  800894:	e0bffc17 	ldw	r2,-16(fp)
  800898:	10001a45 	stb	zero,105(r2)
  d->_DDDpacemake2_local_real_AS = 0;
  80089c:	e0bffc17 	ldw	r2,-16(fp)
  8008a0:	10001a85 	stb	zero,106(r2)
  d->_DDDpacemake2_local_real_VS = 0;
  8008a4:	e0bffc17 	ldw	r2,-16(fp)
  8008a8:	10001ac5 	stb	zero,107(r2)
  d->_DDDpacemake2_local__pre_VP_temp = d->_DDDpacemake2_local__reg_VP_temp;
  8008ac:	e0bffc17 	ldw	r2,-16(fp)
  8008b0:	10c01b03 	ldbu	r3,108(r2)
  8008b4:	e0bffc17 	ldw	r2,-16(fp)
  8008b8:	10c01b45 	stb	r3,109(r2)
  d->_g73 = d->_pg91_e2;
  8008bc:	e0bffc17 	ldw	r2,-16(fp)
  8008c0:	10c05083 	ldbu	r3,322(r2)
  8008c4:	e0bffc17 	ldw	r2,-16(fp)
  8008c8:	10c02cc5 	stb	r3,179(r2)
  d->_cg73 = d->VS || d->_DDDpacemake2_local__pre_VP_temp;
  8008cc:	e0bffc17 	ldw	r2,-16(fp)
  8008d0:	10800643 	ldbu	r2,25(r2)
  8008d4:	10803fcc 	andi	r2,r2,255
  8008d8:	1080201c 	xori	r2,r2,128
  8008dc:	10bfe004 	addi	r2,r2,-128
  8008e0:	1000061e 	bne	r2,zero,8008fc <logic+0x90>
  8008e4:	e0bffc17 	ldw	r2,-16(fp)
  8008e8:	10801b43 	ldbu	r2,109(r2)
  8008ec:	10803fcc 	andi	r2,r2,255
  8008f0:	1080201c 	xori	r2,r2,128
  8008f4:	10bfe004 	addi	r2,r2,-128
  8008f8:	10000226 	beq	r2,zero,800904 <logic+0x98>
  8008fc:	00800044 	movi	r2,1
  800900:	00000106 	br	800908 <logic+0x9c>
  800904:	0005883a 	mov	r2,zero
  800908:	1007883a 	mov	r3,r2
  80090c:	e0bffc17 	ldw	r2,-16(fp)
  800910:	10c04505 	stb	r3,276(r2)
  d->_g97 = d->_g73 && !d->_cg73;
  800914:	e0bffc17 	ldw	r2,-16(fp)
  800918:	10802cc3 	ldbu	r2,179(r2)
  80091c:	10803fcc 	andi	r2,r2,255
  800920:	1080201c 	xori	r2,r2,128
  800924:	10bfe004 	addi	r2,r2,-128
  800928:	10000826 	beq	r2,zero,80094c <logic+0xe0>
  80092c:	e0bffc17 	ldw	r2,-16(fp)
  800930:	10804503 	ldbu	r2,276(r2)
  800934:	10803fcc 	andi	r2,r2,255
  800938:	1080201c 	xori	r2,r2,128
  80093c:	10bfe004 	addi	r2,r2,-128
  800940:	1000021e 	bne	r2,zero,80094c <logic+0xe0>
  800944:	00800044 	movi	r2,1
  800948:	00000106 	br	800950 <logic+0xe4>
  80094c:	0005883a 	mov	r2,zero
  800950:	1007883a 	mov	r3,r2
  800954:	e0bffc17 	ldw	r2,-16(fp)
  800958:	10c03185 	stb	r3,198(r2)
  d->_g98 = d->_g97 && d->AS;
  80095c:	e0bffc17 	ldw	r2,-16(fp)
  800960:	10803183 	ldbu	r2,198(r2)
  800964:	10803fcc 	andi	r2,r2,255
  800968:	1080201c 	xori	r2,r2,128
  80096c:	10bfe004 	addi	r2,r2,-128
  800970:	10000826 	beq	r2,zero,800994 <logic+0x128>
  800974:	e0bffc17 	ldw	r2,-16(fp)
  800978:	10800603 	ldbu	r2,24(r2)
  80097c:	10803fcc 	andi	r2,r2,255
  800980:	1080201c 	xori	r2,r2,128
  800984:	10bfe004 	addi	r2,r2,-128
  800988:	10000226 	beq	r2,zero,800994 <logic+0x128>
  80098c:	00800044 	movi	r2,1
  800990:	00000106 	br	800998 <logic+0x12c>
  800994:	0005883a 	mov	r2,zero
  800998:	1007883a 	mov	r3,r2
  80099c:	e0bffc17 	ldw	r2,-16(fp)
  8009a0:	10c031c5 	stb	r3,199(r2)
  if (d->_g98) {
  8009a4:	e0bffc17 	ldw	r2,-16(fp)
  8009a8:	108031c3 	ldbu	r2,199(r2)
  8009ac:	10803fcc 	andi	r2,r2,255
  8009b0:	1080201c 	xori	r2,r2,128
  8009b4:	10bfe004 	addi	r2,r2,-128
  8009b8:	10000626 	beq	r2,zero,8009d4 <logic+0x168>
    d->_DDDpacemake2_local_real_AS |= 1;
  8009bc:	e0bffc17 	ldw	r2,-16(fp)
  8009c0:	10801a83 	ldbu	r2,106(r2)
  8009c4:	10800054 	ori	r2,r2,1
  8009c8:	1007883a 	mov	r3,r2
  8009cc:	e0bffc17 	ldw	r2,-16(fp)
  8009d0:	10c01a85 	stb	r3,106(r2)
  }
  d->_DDDpacemake2_local__pre_AP_temp = d->_DDDpacemake2_local__reg_AP_temp;
  8009d4:	e0bffc17 	ldw	r2,-16(fp)
  8009d8:	10c01b83 	ldbu	r3,110(r2)
  8009dc:	e0bffc17 	ldw	r2,-16(fp)
  8009e0:	10c01bc5 	stb	r3,111(r2)
  d->_g4 = d->_pg11_e1;
  8009e4:	e0bffc17 	ldw	r2,-16(fp)
  8009e8:	10c050c3 	ldbu	r3,323(r2)
  8009ec:	e0bffc17 	ldw	r2,-16(fp)
  8009f0:	10c01f05 	stb	r3,124(r2)
  d->_cg4 = !d->_DDDpacemake2_local_real_AS && !d->_DDDpacemake2_local__pre_AP_temp;
  8009f4:	e0bffc17 	ldw	r2,-16(fp)
  8009f8:	10801a83 	ldbu	r2,106(r2)
  8009fc:	10803fcc 	andi	r2,r2,255
  800a00:	1080201c 	xori	r2,r2,128
  800a04:	10bfe004 	addi	r2,r2,-128
  800a08:	1000081e 	bne	r2,zero,800a2c <logic+0x1c0>
  800a0c:	e0bffc17 	ldw	r2,-16(fp)
  800a10:	10801bc3 	ldbu	r2,111(r2)
  800a14:	10803fcc 	andi	r2,r2,255
  800a18:	1080201c 	xori	r2,r2,128
  800a1c:	10bfe004 	addi	r2,r2,-128
  800a20:	1000021e 	bne	r2,zero,800a2c <logic+0x1c0>
  800a24:	00800044 	movi	r2,1
  800a28:	00000106 	br	800a30 <logic+0x1c4>
  800a2c:	0005883a 	mov	r2,zero
  800a30:	1007883a 	mov	r3,r2
  800a34:	e0bffc17 	ldw	r2,-16(fp)
  800a38:	10c03f45 	stb	r3,253(r2)
  d->_g5 = d->_g4 && d->_cg4;
  800a3c:	e0bffc17 	ldw	r2,-16(fp)
  800a40:	10801f03 	ldbu	r2,124(r2)
  800a44:	10803fcc 	andi	r2,r2,255
  800a48:	1080201c 	xori	r2,r2,128
  800a4c:	10bfe004 	addi	r2,r2,-128
  800a50:	10000826 	beq	r2,zero,800a74 <logic+0x208>
  800a54:	e0bffc17 	ldw	r2,-16(fp)
  800a58:	10803f43 	ldbu	r2,253(r2)
  800a5c:	10803fcc 	andi	r2,r2,255
  800a60:	1080201c 	xori	r2,r2,128
  800a64:	10bfe004 	addi	r2,r2,-128
  800a68:	10000226 	beq	r2,zero,800a74 <logic+0x208>
  800a6c:	00800044 	movi	r2,1
  800a70:	00000106 	br	800a78 <logic+0x20c>
  800a74:	0005883a 	mov	r2,zero
  800a78:	1007883a 	mov	r3,r2
  800a7c:	e0bffc17 	ldw	r2,-16(fp)
  800a80:	10c01f45 	stb	r3,125(r2)
  if (d->_g5) {
  800a84:	e0bffc17 	ldw	r2,-16(fp)
  800a88:	10801f43 	ldbu	r2,125(r2)
  800a8c:	10803fcc 	andi	r2,r2,255
  800a90:	1080201c 	xori	r2,r2,128
  800a94:	10bfe004 	addi	r2,r2,-128
  800a98:	10000226 	beq	r2,zero,800aa4 <logic+0x238>
    d->VP = 0;
  800a9c:	e0bffc17 	ldw	r2,-16(fp)
  800aa0:	10001345 	stb	zero,77(r2)
  }
  d->_g102 = d->_pg120_e2;
  800aa4:	e0bffc17 	ldw	r2,-16(fp)
  800aa8:	10c05103 	ldbu	r3,324(r2)
  800aac:	e0bffc17 	ldw	r2,-16(fp)
  800ab0:	10c03205 	stb	r3,200(r2)
  d->_cg102 = d->VS || d->_DDDpacemake2_local__pre_VP_temp;
  800ab4:	e0bffc17 	ldw	r2,-16(fp)
  800ab8:	10800643 	ldbu	r2,25(r2)
  800abc:	10803fcc 	andi	r2,r2,255
  800ac0:	1080201c 	xori	r2,r2,128
  800ac4:	10bfe004 	addi	r2,r2,-128
  800ac8:	1000061e 	bne	r2,zero,800ae4 <logic+0x278>
  800acc:	e0bffc17 	ldw	r2,-16(fp)
  800ad0:	10801b43 	ldbu	r2,109(r2)
  800ad4:	10803fcc 	andi	r2,r2,255
  800ad8:	1080201c 	xori	r2,r2,128
  800adc:	10bfe004 	addi	r2,r2,-128
  800ae0:	10000226 	beq	r2,zero,800aec <logic+0x280>
  800ae4:	00800044 	movi	r2,1
  800ae8:	00000106 	br	800af0 <logic+0x284>
  800aec:	0005883a 	mov	r2,zero
  800af0:	1007883a 	mov	r3,r2
  800af4:	e0bffc17 	ldw	r2,-16(fp)
  800af8:	10c04785 	stb	r3,286(r2)
  d->_g103 = d->_g102 && d->_cg102;
  800afc:	e0bffc17 	ldw	r2,-16(fp)
  800b00:	10803203 	ldbu	r2,200(r2)
  800b04:	10803fcc 	andi	r2,r2,255
  800b08:	1080201c 	xori	r2,r2,128
  800b0c:	10bfe004 	addi	r2,r2,-128
  800b10:	10000826 	beq	r2,zero,800b34 <logic+0x2c8>
  800b14:	e0bffc17 	ldw	r2,-16(fp)
  800b18:	10804783 	ldbu	r2,286(r2)
  800b1c:	10803fcc 	andi	r2,r2,255
  800b20:	1080201c 	xori	r2,r2,128
  800b24:	10bfe004 	addi	r2,r2,-128
  800b28:	10000226 	beq	r2,zero,800b34 <logic+0x2c8>
  800b2c:	00800044 	movi	r2,1
  800b30:	00000106 	br	800b38 <logic+0x2cc>
  800b34:	0005883a 	mov	r2,zero
  800b38:	1007883a 	mov	r3,r2
  800b3c:	e0bffc17 	ldw	r2,-16(fp)
  800b40:	10c03245 	stb	r3,201(r2)
  if (d->_g103) {
  800b44:	e0bffc17 	ldw	r2,-16(fp)
  800b48:	10803243 	ldbu	r2,201(r2)
  800b4c:	10803fcc 	andi	r2,r2,255
  800b50:	1080201c 	xori	r2,r2,128
  800b54:	10bfe004 	addi	r2,r2,-128
  800b58:	10000926 	beq	r2,zero,800b80 <logic+0x314>
    d->_DDDpacemake2_local_real_VS |= 1;
  800b5c:	e0bffc17 	ldw	r2,-16(fp)
  800b60:	10801ac3 	ldbu	r2,107(r2)
  800b64:	10800054 	ori	r2,r2,1
  800b68:	1007883a 	mov	r3,r2
  800b6c:	e0bffc17 	ldw	r2,-16(fp)
  800b70:	10c01ac5 	stb	r3,107(r2)
    d->_DDDpacemake2_local_VRP_state = 1;
  800b74:	e0bffc17 	ldw	r2,-16(fp)
  800b78:	00c00044 	movi	r3,1
  800b7c:	10c01905 	stb	r3,100(r2)
  }
  d->_g28 = d->_pg23;
  800b80:	e0bffc17 	ldw	r2,-16(fp)
  800b84:	10c05143 	ldbu	r3,325(r2)
  800b88:	e0bffc17 	ldw	r2,-16(fp)
  800b8c:	10c02405 	stb	r3,144(r2)
  d->_cg28 = d->_DDDpacemake2_local_real_VS;
  800b90:	e0bffc17 	ldw	r2,-16(fp)
  800b94:	10c01ac3 	ldbu	r3,107(r2)
  800b98:	e0bffc17 	ldw	r2,-16(fp)
  800b9c:	10c04145 	stb	r3,261(r2)
  d->_g29 = d->_g28 && d->_cg28;
  800ba0:	e0bffc17 	ldw	r2,-16(fp)
  800ba4:	10802403 	ldbu	r2,144(r2)
  800ba8:	10803fcc 	andi	r2,r2,255
  800bac:	1080201c 	xori	r2,r2,128
  800bb0:	10bfe004 	addi	r2,r2,-128
  800bb4:	10000826 	beq	r2,zero,800bd8 <logic+0x36c>
  800bb8:	e0bffc17 	ldw	r2,-16(fp)
  800bbc:	10804143 	ldbu	r2,261(r2)
  800bc0:	10803fcc 	andi	r2,r2,255
  800bc4:	1080201c 	xori	r2,r2,128
  800bc8:	10bfe004 	addi	r2,r2,-128
  800bcc:	10000226 	beq	r2,zero,800bd8 <logic+0x36c>
  800bd0:	00800044 	movi	r2,1
  800bd4:	00000106 	br	800bdc <logic+0x370>
  800bd8:	0005883a 	mov	r2,zero
  800bdc:	1007883a 	mov	r3,r2
  800be0:	e0bffc17 	ldw	r2,-16(fp)
  800be4:	10c02445 	stb	r3,145(r2)
  if (d->_g29) {
  800be8:	e0bffc17 	ldw	r2,-16(fp)
  800bec:	10802443 	ldbu	r2,145(r2)
  800bf0:	10803fcc 	andi	r2,r2,255
  800bf4:	1080201c 	xori	r2,r2,128
  800bf8:	10bfe004 	addi	r2,r2,-128
  800bfc:	10000326 	beq	r2,zero,800c0c <logic+0x3a0>
    d->_DDDpacemake2_local__Atrig = 1;
  800c00:	e0bffc17 	ldw	r2,-16(fp)
  800c04:	00c00044 	movi	r3,1
  800c08:	10c01c05 	stb	r3,112(r2)
  }
  d->_g153 = d->_pg144_e2;
  800c0c:	e0bffc17 	ldw	r2,-16(fp)
  800c10:	10c05183 	ldbu	r3,326(r2)
  800c14:	e0bffc17 	ldw	r2,-16(fp)
  800c18:	10c03b45 	stb	r3,237(r2)
  d->_cg153 = d->_DDDpacemake2_local_real_VS || d->_DDDpacemake2_local__pre_VP_temp;
  800c1c:	e0bffc17 	ldw	r2,-16(fp)
  800c20:	10801ac3 	ldbu	r2,107(r2)
  800c24:	10803fcc 	andi	r2,r2,255
  800c28:	1080201c 	xori	r2,r2,128
  800c2c:	10bfe004 	addi	r2,r2,-128
  800c30:	1000061e 	bne	r2,zero,800c4c <logic+0x3e0>
  800c34:	e0bffc17 	ldw	r2,-16(fp)
  800c38:	10801b43 	ldbu	r2,109(r2)
  800c3c:	10803fcc 	andi	r2,r2,255
  800c40:	1080201c 	xori	r2,r2,128
  800c44:	10bfe004 	addi	r2,r2,-128
  800c48:	10000226 	beq	r2,zero,800c54 <logic+0x3e8>
  800c4c:	00800044 	movi	r2,1
  800c50:	00000106 	br	800c58 <logic+0x3ec>
  800c54:	0005883a 	mov	r2,zero
  800c58:	1007883a 	mov	r3,r2
  800c5c:	e0bffc17 	ldw	r2,-16(fp)
  800c60:	10c04bc5 	stb	r3,303(r2)
  d->_g154 = d->_g153 && d->_cg153;
  800c64:	e0bffc17 	ldw	r2,-16(fp)
  800c68:	10803b43 	ldbu	r2,237(r2)
  800c6c:	10803fcc 	andi	r2,r2,255
  800c70:	1080201c 	xori	r2,r2,128
  800c74:	10bfe004 	addi	r2,r2,-128
  800c78:	10000826 	beq	r2,zero,800c9c <logic+0x430>
  800c7c:	e0bffc17 	ldw	r2,-16(fp)
  800c80:	10804bc3 	ldbu	r2,303(r2)
  800c84:	10803fcc 	andi	r2,r2,255
  800c88:	1080201c 	xori	r2,r2,128
  800c8c:	10bfe004 	addi	r2,r2,-128
  800c90:	10000226 	beq	r2,zero,800c9c <logic+0x430>
  800c94:	00800044 	movi	r2,1
  800c98:	00000106 	br	800ca0 <logic+0x434>
  800c9c:	0005883a 	mov	r2,zero
  800ca0:	1007883a 	mov	r3,r2
  800ca4:	e0bffc17 	ldw	r2,-16(fp)
  800ca8:	10c03b85 	stb	r3,238(r2)
  if (d->_g154) {
  800cac:	e0bffc17 	ldw	r2,-16(fp)
  800cb0:	10803b83 	ldbu	r2,238(r2)
  800cb4:	10803fcc 	andi	r2,r2,255
  800cb8:	1080201c 	xori	r2,r2,128
  800cbc:	10bfe004 	addi	r2,r2,-128
  800cc0:	10000326 	beq	r2,zero,800cd0 <logic+0x464>
    d->_DDDpacemake2_local_URI_state = 1;
  800cc4:	e0bffc17 	ldw	r2,-16(fp)
  800cc8:	00c00044 	movi	r3,1
  800ccc:	10c01945 	stb	r3,101(r2)
  }
  d->_g212 = d->_pg168;
  800cd0:	e0bffc17 	ldw	r2,-16(fp)
  800cd4:	10c051c3 	ldbu	r3,327(r2)
  800cd8:	e0bffc17 	ldw	r2,-16(fp)
  800cdc:	10c03e85 	stb	r3,250(r2)
  if (d->_g212) {
  800ce0:	e0bffc17 	ldw	r2,-16(fp)
  800ce4:	10803e83 	ldbu	r2,250(r2)
  800ce8:	10803fcc 	andi	r2,r2,255
  800cec:	1080201c 	xori	r2,r2,128
  800cf0:	10bfe004 	addi	r2,r2,-128
  800cf4:	10001226 	beq	r2,zero,800d40 <logic+0x4d4>
    d->URI_counter += d->deltaT;
  800cf8:	e13ffc17 	ldw	r4,-16(fp)
  800cfc:	20801117 	ldw	r2,68(r4)
  800d00:	20c01217 	ldw	r3,72(r4)
  800d04:	e1bffc17 	ldw	r6,-16(fp)
  800d08:	31001417 	ldw	r4,80(r6)
  800d0c:	31401517 	ldw	r5,84(r6)
  800d10:	200d883a 	mov	r6,r4
  800d14:	280f883a 	mov	r7,r5
  800d18:	1009883a 	mov	r4,r2
  800d1c:	180b883a 	mov	r5,r3
  800d20:	0805b040 	call	805b04 <__adddf3>
  800d24:	1009883a 	mov	r4,r2
  800d28:	180b883a 	mov	r5,r3
  800d2c:	2005883a 	mov	r2,r4
  800d30:	2807883a 	mov	r3,r5
  800d34:	e13ffc17 	ldw	r4,-16(fp)
  800d38:	20801115 	stw	r2,68(r4)
  800d3c:	20c01215 	stw	r3,72(r4)
  }
  d->_g166 = d->_pg161;
  800d40:	e0bffc17 	ldw	r2,-16(fp)
  800d44:	10c05203 	ldbu	r3,328(r2)
  800d48:	e0bffc17 	ldw	r2,-16(fp)
  800d4c:	10c03dc5 	stb	r3,247(r2)
  d->_cg166 = d->URI_counter >= d->URI_DEADLINE;
  800d50:	e0bffc17 	ldw	r2,-16(fp)
  800d54:	14001117 	ldw	r16,68(r2)
  800d58:	14401217 	ldw	r17,72(r2)
  800d5c:	e0bffc17 	ldw	r2,-16(fp)
  800d60:	10800117 	ldw	r2,4(r2)
  800d64:	1009883a 	mov	r4,r2
  800d68:	08075940 	call	807594 <__floatsidf>
  800d6c:	1009883a 	mov	r4,r2
  800d70:	180b883a 	mov	r5,r3
  800d74:	04800044 	movi	r18,1
  800d78:	200d883a 	mov	r6,r4
  800d7c:	280f883a 	mov	r7,r5
  800d80:	8009883a 	mov	r4,r16
  800d84:	880b883a 	mov	r5,r17
  800d88:	08063b00 	call	8063b0 <__gedf2>
  800d8c:	1000010e 	bge	r2,zero,800d94 <logic+0x528>
  800d90:	0025883a 	mov	r18,zero
  800d94:	9007883a 	mov	r3,r18
  800d98:	e0bffc17 	ldw	r2,-16(fp)
  800d9c:	10c04cc5 	stb	r3,307(r2)
  d->_g167 = d->_g166 && d->_cg166;
  800da0:	e0bffc17 	ldw	r2,-16(fp)
  800da4:	10803dc3 	ldbu	r2,247(r2)
  800da8:	10803fcc 	andi	r2,r2,255
  800dac:	1080201c 	xori	r2,r2,128
  800db0:	10bfe004 	addi	r2,r2,-128
  800db4:	10000826 	beq	r2,zero,800dd8 <logic+0x56c>
  800db8:	e0bffc17 	ldw	r2,-16(fp)
  800dbc:	10804cc3 	ldbu	r2,307(r2)
  800dc0:	10803fcc 	andi	r2,r2,255
  800dc4:	1080201c 	xori	r2,r2,128
  800dc8:	10bfe004 	addi	r2,r2,-128
  800dcc:	10000226 	beq	r2,zero,800dd8 <logic+0x56c>
  800dd0:	00800044 	movi	r2,1
  800dd4:	00000106 	br	800ddc <logic+0x570>
  800dd8:	0005883a 	mov	r2,zero
  800ddc:	1007883a 	mov	r3,r2
  800de0:	e0bffc17 	ldw	r2,-16(fp)
  800de4:	10c03e05 	stb	r3,248(r2)
  if (d->_g167) {
  800de8:	e0bffc17 	ldw	r2,-16(fp)
  800dec:	10803e03 	ldbu	r2,248(r2)
  800df0:	10803fcc 	andi	r2,r2,255
  800df4:	1080201c 	xori	r2,r2,128
  800df8:	10bfe004 	addi	r2,r2,-128
  800dfc:	10000326 	beq	r2,zero,800e0c <logic+0x5a0>
    d->_DDDpacemake2_local__Atrig11 = 1;
  800e00:	e0bffc17 	ldw	r2,-16(fp)
  800e04:	00c00044 	movi	r3,1
  800e08:	10c01ec5 	stb	r3,123(r2)
  }
  if (d->_g154) {
  800e0c:	e0bffc17 	ldw	r2,-16(fp)
  800e10:	10803b83 	ldbu	r2,238(r2)
  800e14:	10803fcc 	andi	r2,r2,255
  800e18:	1080201c 	xori	r2,r2,128
  800e1c:	10bfe004 	addi	r2,r2,-128
  800e20:	10000526 	beq	r2,zero,800e38 <logic+0x5cc>
    d->URI_counter = 0;
  800e24:	e0bffc17 	ldw	r2,-16(fp)
  800e28:	10001115 	stw	zero,68(r2)
  800e2c:	10001215 	stw	zero,72(r2)
    d->_DDDpacemake2_local__Atrig11 = 0;
  800e30:	e0bffc17 	ldw	r2,-16(fp)
  800e34:	10001ec5 	stb	zero,123(r2)
  }
  d->_g160 = d->_pg159;
  800e38:	e0bffc17 	ldw	r2,-16(fp)
  800e3c:	10c05243 	ldbu	r3,329(r2)
  800e40:	e0bffc17 	ldw	r2,-16(fp)
  800e44:	10c03cc5 	stb	r3,243(r2)
  d->_g163 = d->_pg162;
  800e48:	e0bffc17 	ldw	r2,-16(fp)
  800e4c:	10c05283 	ldbu	r3,330(r2)
  800e50:	e0bffc17 	ldw	r2,-16(fp)
  800e54:	10c03d85 	stb	r3,246(r2)
  d->_g163 = d->_g154 || d->_g160 || d->_g163;
  800e58:	e0bffc17 	ldw	r2,-16(fp)
  800e5c:	10803b83 	ldbu	r2,238(r2)
  800e60:	10803fcc 	andi	r2,r2,255
  800e64:	1080201c 	xori	r2,r2,128
  800e68:	10bfe004 	addi	r2,r2,-128
  800e6c:	10000c1e 	bne	r2,zero,800ea0 <logic+0x634>
  800e70:	e0bffc17 	ldw	r2,-16(fp)
  800e74:	10803cc3 	ldbu	r2,243(r2)
  800e78:	10803fcc 	andi	r2,r2,255
  800e7c:	1080201c 	xori	r2,r2,128
  800e80:	10bfe004 	addi	r2,r2,-128
  800e84:	1000061e 	bne	r2,zero,800ea0 <logic+0x634>
  800e88:	e0bffc17 	ldw	r2,-16(fp)
  800e8c:	10803d83 	ldbu	r2,246(r2)
  800e90:	10803fcc 	andi	r2,r2,255
  800e94:	1080201c 	xori	r2,r2,128
  800e98:	10bfe004 	addi	r2,r2,-128
  800e9c:	10000226 	beq	r2,zero,800ea8 <logic+0x63c>
  800ea0:	00800044 	movi	r2,1
  800ea4:	00000106 	br	800eac <logic+0x640>
  800ea8:	0005883a 	mov	r2,zero
  800eac:	1007883a 	mov	r3,r2
  800eb0:	e0bffc17 	ldw	r2,-16(fp)
  800eb4:	10c03d85 	stb	r3,246(r2)
  d->_cg156 = d->URI_counter < d->URI_DEADLINE;
  800eb8:	e0bffc17 	ldw	r2,-16(fp)
  800ebc:	14001117 	ldw	r16,68(r2)
  800ec0:	14401217 	ldw	r17,72(r2)
  800ec4:	e0bffc17 	ldw	r2,-16(fp)
  800ec8:	10800117 	ldw	r2,4(r2)
  800ecc:	1009883a 	mov	r4,r2
  800ed0:	08075940 	call	807594 <__floatsidf>
  800ed4:	1009883a 	mov	r4,r2
  800ed8:	180b883a 	mov	r5,r3
  800edc:	04800044 	movi	r18,1
  800ee0:	200d883a 	mov	r6,r4
  800ee4:	280f883a 	mov	r7,r5
  800ee8:	8009883a 	mov	r4,r16
  800eec:	880b883a 	mov	r5,r17
  800ef0:	080648c0 	call	80648c <__ledf2>
  800ef4:	10000116 	blt	r2,zero,800efc <logic+0x690>
  800ef8:	0025883a 	mov	r18,zero
  800efc:	9007883a 	mov	r3,r18
  800f00:	e0bffc17 	ldw	r2,-16(fp)
  800f04:	10c04c05 	stb	r3,304(r2)
  d->_g160 = d->_g163 && !d->_cg156;
  800f08:	e0bffc17 	ldw	r2,-16(fp)
  800f0c:	10803d83 	ldbu	r2,246(r2)
  800f10:	10803fcc 	andi	r2,r2,255
  800f14:	1080201c 	xori	r2,r2,128
  800f18:	10bfe004 	addi	r2,r2,-128
  800f1c:	10000826 	beq	r2,zero,800f40 <logic+0x6d4>
  800f20:	e0bffc17 	ldw	r2,-16(fp)
  800f24:	10804c03 	ldbu	r2,304(r2)
  800f28:	10803fcc 	andi	r2,r2,255
  800f2c:	1080201c 	xori	r2,r2,128
  800f30:	10bfe004 	addi	r2,r2,-128
  800f34:	1000021e 	bne	r2,zero,800f40 <logic+0x6d4>
  800f38:	00800044 	movi	r2,1
  800f3c:	00000106 	br	800f44 <logic+0x6d8>
  800f40:	0005883a 	mov	r2,zero
  800f44:	1007883a 	mov	r3,r2
  800f48:	e0bffc17 	ldw	r2,-16(fp)
  800f4c:	10c03cc5 	stb	r3,243(r2)
  d->_cg161 = d->_DDDpacemake2_local__Atrig11;
  800f50:	e0bffc17 	ldw	r2,-16(fp)
  800f54:	10c01ec3 	ldbu	r3,123(r2)
  800f58:	e0bffc17 	ldw	r2,-16(fp)
  800f5c:	10c04c85 	stb	r3,306(r2)
  d->_g162 = d->_g160 && !d->_cg161;
  800f60:	e0bffc17 	ldw	r2,-16(fp)
  800f64:	10803cc3 	ldbu	r2,243(r2)
  800f68:	10803fcc 	andi	r2,r2,255
  800f6c:	1080201c 	xori	r2,r2,128
  800f70:	10bfe004 	addi	r2,r2,-128
  800f74:	10000826 	beq	r2,zero,800f98 <logic+0x72c>
  800f78:	e0bffc17 	ldw	r2,-16(fp)
  800f7c:	10804c83 	ldbu	r2,306(r2)
  800f80:	10803fcc 	andi	r2,r2,255
  800f84:	1080201c 	xori	r2,r2,128
  800f88:	10bfe004 	addi	r2,r2,-128
  800f8c:	1000021e 	bne	r2,zero,800f98 <logic+0x72c>
  800f90:	00800044 	movi	r2,1
  800f94:	00000106 	br	800f9c <logic+0x730>
  800f98:	0005883a 	mov	r2,zero
  800f9c:	1007883a 	mov	r3,r2
  800fa0:	e0bffc17 	ldw	r2,-16(fp)
  800fa4:	10c03d45 	stb	r3,245(r2)
  d->sleepT = 1000.0;
  800fa8:	e0fffc17 	ldw	r3,-16(fp)
  800fac:	18001615 	stw	zero,88(r3)
  800fb0:	009023f4 	movhi	r2,16527
  800fb4:	10900004 	addi	r2,r2,16384
  800fb8:	18801715 	stw	r2,92(r3)
  d->_g156 = d->_g163 && d->_cg156;
  800fbc:	e0bffc17 	ldw	r2,-16(fp)
  800fc0:	10803d83 	ldbu	r2,246(r2)
  800fc4:	10803fcc 	andi	r2,r2,255
  800fc8:	1080201c 	xori	r2,r2,128
  800fcc:	10bfe004 	addi	r2,r2,-128
  800fd0:	10000826 	beq	r2,zero,800ff4 <logic+0x788>
  800fd4:	e0bffc17 	ldw	r2,-16(fp)
  800fd8:	10804c03 	ldbu	r2,304(r2)
  800fdc:	10803fcc 	andi	r2,r2,255
  800fe0:	1080201c 	xori	r2,r2,128
  800fe4:	10bfe004 	addi	r2,r2,-128
  800fe8:	10000226 	beq	r2,zero,800ff4 <logic+0x788>
  800fec:	00800044 	movi	r2,1
  800ff0:	00000106 	br	800ff8 <logic+0x78c>
  800ff4:	0005883a 	mov	r2,zero
  800ff8:	1007883a 	mov	r3,r2
  800ffc:	e0bffc17 	ldw	r2,-16(fp)
  801000:	10c03bc5 	stb	r3,239(r2)
  if (d->_g156) {
  801004:	e0bffc17 	ldw	r2,-16(fp)
  801008:	10803bc3 	ldbu	r2,239(r2)
  80100c:	10803fcc 	andi	r2,r2,255
  801010:	1080201c 	xori	r2,r2,128
  801014:	10bfe004 	addi	r2,r2,-128
  801018:	10003426 	beq	r2,zero,8010ec <logic+0x880>
    d->sleepT = (d->sleepT < (d->URI_DEADLINE - d->URI_counter)) ? d->sleepT : (d->URI_DEADLINE - d->URI_counter);
  80101c:	e0bffc17 	ldw	r2,-16(fp)
  801020:	14001617 	ldw	r16,88(r2)
  801024:	14401717 	ldw	r17,92(r2)
  801028:	e0bffc17 	ldw	r2,-16(fp)
  80102c:	10800117 	ldw	r2,4(r2)
  801030:	1009883a 	mov	r4,r2
  801034:	08075940 	call	807594 <__floatsidf>
  801038:	1011883a 	mov	r8,r2
  80103c:	1813883a 	mov	r9,r3
  801040:	e13ffc17 	ldw	r4,-16(fp)
  801044:	20801117 	ldw	r2,68(r4)
  801048:	20c01217 	ldw	r3,72(r4)
  80104c:	100d883a 	mov	r6,r2
  801050:	180f883a 	mov	r7,r3
  801054:	4009883a 	mov	r4,r8
  801058:	480b883a 	mov	r5,r9
  80105c:	0806c980 	call	806c98 <__subdf3>
  801060:	1009883a 	mov	r4,r2
  801064:	180b883a 	mov	r5,r3
  801068:	2005883a 	mov	r2,r4
  80106c:	2807883a 	mov	r3,r5
  801070:	100d883a 	mov	r6,r2
  801074:	180f883a 	mov	r7,r3
  801078:	8009883a 	mov	r4,r16
  80107c:	880b883a 	mov	r5,r17
  801080:	080648c0 	call	80648c <__ledf2>
  801084:	1000040e 	bge	r2,zero,801098 <logic+0x82c>
  801088:	e13ffc17 	ldw	r4,-16(fp)
  80108c:	20801617 	ldw	r2,88(r4)
  801090:	20c01717 	ldw	r3,92(r4)
  801094:	00001206 	br	8010e0 <logic+0x874>
  801098:	e0bffc17 	ldw	r2,-16(fp)
  80109c:	10800117 	ldw	r2,4(r2)
  8010a0:	1009883a 	mov	r4,r2
  8010a4:	08075940 	call	807594 <__floatsidf>
  8010a8:	1011883a 	mov	r8,r2
  8010ac:	1813883a 	mov	r9,r3
  8010b0:	e13ffc17 	ldw	r4,-16(fp)
  8010b4:	20801117 	ldw	r2,68(r4)
  8010b8:	20c01217 	ldw	r3,72(r4)
  8010bc:	100d883a 	mov	r6,r2
  8010c0:	180f883a 	mov	r7,r3
  8010c4:	4009883a 	mov	r4,r8
  8010c8:	480b883a 	mov	r5,r9
  8010cc:	0806c980 	call	806c98 <__subdf3>
  8010d0:	1009883a 	mov	r4,r2
  8010d4:	180b883a 	mov	r5,r3
  8010d8:	2005883a 	mov	r2,r4
  8010dc:	2807883a 	mov	r3,r5
  8010e0:	e13ffc17 	ldw	r4,-16(fp)
  8010e4:	20801615 	stw	r2,88(r4)
  8010e8:	20c01715 	stw	r3,92(r4)
  }
  d->_cg157 = d->_DDDpacemake2_local__Atrig11;
  8010ec:	e0bffc17 	ldw	r2,-16(fp)
  8010f0:	10c01ec3 	ldbu	r3,123(r2)
  8010f4:	e0bffc17 	ldw	r2,-16(fp)
  8010f8:	10c04c45 	stb	r3,305(r2)
  d->_g159 = d->_g156 && !d->_cg157;
  8010fc:	e0bffc17 	ldw	r2,-16(fp)
  801100:	10803bc3 	ldbu	r2,239(r2)
  801104:	10803fcc 	andi	r2,r2,255
  801108:	1080201c 	xori	r2,r2,128
  80110c:	10bfe004 	addi	r2,r2,-128
  801110:	10000826 	beq	r2,zero,801134 <logic+0x8c8>
  801114:	e0bffc17 	ldw	r2,-16(fp)
  801118:	10804c43 	ldbu	r2,305(r2)
  80111c:	10803fcc 	andi	r2,r2,255
  801120:	1080201c 	xori	r2,r2,128
  801124:	10bfe004 	addi	r2,r2,-128
  801128:	1000021e 	bne	r2,zero,801134 <logic+0x8c8>
  80112c:	00800044 	movi	r2,1
  801130:	00000106 	br	801138 <logic+0x8cc>
  801134:	0005883a 	mov	r2,zero
  801138:	1007883a 	mov	r3,r2
  80113c:	e0bffc17 	ldw	r2,-16(fp)
  801140:	10c03c85 	stb	r3,242(r2)
  d->_g158_e1 = !(d->_g162 || d->_g159);
  801144:	e0bffc17 	ldw	r2,-16(fp)
  801148:	10803d43 	ldbu	r2,245(r2)
  80114c:	10803fcc 	andi	r2,r2,255
  801150:	1080201c 	xori	r2,r2,128
  801154:	10bfe004 	addi	r2,r2,-128
  801158:	1000081e 	bne	r2,zero,80117c <logic+0x910>
  80115c:	e0bffc17 	ldw	r2,-16(fp)
  801160:	10803c83 	ldbu	r2,242(r2)
  801164:	10803fcc 	andi	r2,r2,255
  801168:	1080201c 	xori	r2,r2,128
  80116c:	10bfe004 	addi	r2,r2,-128
  801170:	1000021e 	bne	r2,zero,80117c <logic+0x910>
  801174:	00800044 	movi	r2,1
  801178:	00000106 	br	801180 <logic+0x914>
  80117c:	0005883a 	mov	r2,zero
  801180:	1007883a 	mov	r3,r2
  801184:	e0bffc17 	ldw	r2,-16(fp)
  801188:	10c04fc5 	stb	r3,319(r2)
  d->_g157 = d->_g156 && d->_cg157 || d->_g160 && d->_cg161;
  80118c:	e0bffc17 	ldw	r2,-16(fp)
  801190:	10803bc3 	ldbu	r2,239(r2)
  801194:	10803fcc 	andi	r2,r2,255
  801198:	1080201c 	xori	r2,r2,128
  80119c:	10bfe004 	addi	r2,r2,-128
  8011a0:	10000626 	beq	r2,zero,8011bc <logic+0x950>
  8011a4:	e0bffc17 	ldw	r2,-16(fp)
  8011a8:	10804c43 	ldbu	r2,305(r2)
  8011ac:	10803fcc 	andi	r2,r2,255
  8011b0:	1080201c 	xori	r2,r2,128
  8011b4:	10bfe004 	addi	r2,r2,-128
  8011b8:	10000c1e 	bne	r2,zero,8011ec <logic+0x980>
  8011bc:	e0bffc17 	ldw	r2,-16(fp)
  8011c0:	10803cc3 	ldbu	r2,243(r2)
  8011c4:	10803fcc 	andi	r2,r2,255
  8011c8:	1080201c 	xori	r2,r2,128
  8011cc:	10bfe004 	addi	r2,r2,-128
  8011d0:	10000826 	beq	r2,zero,8011f4 <logic+0x988>
  8011d4:	e0bffc17 	ldw	r2,-16(fp)
  8011d8:	10804c83 	ldbu	r2,306(r2)
  8011dc:	10803fcc 	andi	r2,r2,255
  8011e0:	1080201c 	xori	r2,r2,128
  8011e4:	10bfe004 	addi	r2,r2,-128
  8011e8:	10000226 	beq	r2,zero,8011f4 <logic+0x988>
  8011ec:	00800044 	movi	r2,1
  8011f0:	00000106 	br	8011f8 <logic+0x98c>
  8011f4:	0005883a 	mov	r2,zero
  8011f8:	1007883a 	mov	r3,r2
  8011fc:	e0bffc17 	ldw	r2,-16(fp)
  801200:	10c03c05 	stb	r3,240(r2)
  d->_g161 = d->_g154 || d->_g166 && !d->_cg166;
  801204:	e0bffc17 	ldw	r2,-16(fp)
  801208:	10803b83 	ldbu	r2,238(r2)
  80120c:	10803fcc 	andi	r2,r2,255
  801210:	1080201c 	xori	r2,r2,128
  801214:	10bfe004 	addi	r2,r2,-128
  801218:	10000c1e 	bne	r2,zero,80124c <logic+0x9e0>
  80121c:	e0bffc17 	ldw	r2,-16(fp)
  801220:	10803dc3 	ldbu	r2,247(r2)
  801224:	10803fcc 	andi	r2,r2,255
  801228:	1080201c 	xori	r2,r2,128
  80122c:	10bfe004 	addi	r2,r2,-128
  801230:	10000826 	beq	r2,zero,801254 <logic+0x9e8>
  801234:	e0bffc17 	ldw	r2,-16(fp)
  801238:	10804cc3 	ldbu	r2,307(r2)
  80123c:	10803fcc 	andi	r2,r2,255
  801240:	1080201c 	xori	r2,r2,128
  801244:	10bfe004 	addi	r2,r2,-128
  801248:	1000021e 	bne	r2,zero,801254 <logic+0x9e8>
  80124c:	00800044 	movi	r2,1
  801250:	00000106 	br	801258 <logic+0x9ec>
  801254:	0005883a 	mov	r2,zero
  801258:	1007883a 	mov	r3,r2
  80125c:	e0bffc17 	ldw	r2,-16(fp)
  801260:	10c03d05 	stb	r3,244(r2)
  d->_g154 = !d->_g161;
  801264:	e0bffc17 	ldw	r2,-16(fp)
  801268:	10803d03 	ldbu	r2,244(r2)
  80126c:	10803fcc 	andi	r2,r2,255
  801270:	1080201c 	xori	r2,r2,128
  801274:	10bfe004 	addi	r2,r2,-128
  801278:	1005003a 	cmpeq	r2,r2,zero
  80127c:	1007883a 	mov	r3,r2
  801280:	e0bffc17 	ldw	r2,-16(fp)
  801284:	10c03b85 	stb	r3,238(r2)
  d->_g166 = (d->_g158_e1 || d->_g157) && (d->_g154 || d->_g167) && (d->_g157 || d->_g167);
  801288:	e0bffc17 	ldw	r2,-16(fp)
  80128c:	10804fc3 	ldbu	r2,319(r2)
  801290:	10803fcc 	andi	r2,r2,255
  801294:	1080201c 	xori	r2,r2,128
  801298:	10bfe004 	addi	r2,r2,-128
  80129c:	1000061e 	bne	r2,zero,8012b8 <logic+0xa4c>
  8012a0:	e0bffc17 	ldw	r2,-16(fp)
  8012a4:	10803c03 	ldbu	r2,240(r2)
  8012a8:	10803fcc 	andi	r2,r2,255
  8012ac:	1080201c 	xori	r2,r2,128
  8012b0:	10bfe004 	addi	r2,r2,-128
  8012b4:	10001a26 	beq	r2,zero,801320 <logic+0xab4>
  8012b8:	e0bffc17 	ldw	r2,-16(fp)
  8012bc:	10803b83 	ldbu	r2,238(r2)
  8012c0:	10803fcc 	andi	r2,r2,255
  8012c4:	1080201c 	xori	r2,r2,128
  8012c8:	10bfe004 	addi	r2,r2,-128
  8012cc:	1000061e 	bne	r2,zero,8012e8 <logic+0xa7c>
  8012d0:	e0bffc17 	ldw	r2,-16(fp)
  8012d4:	10803e03 	ldbu	r2,248(r2)
  8012d8:	10803fcc 	andi	r2,r2,255
  8012dc:	1080201c 	xori	r2,r2,128
  8012e0:	10bfe004 	addi	r2,r2,-128
  8012e4:	10000e26 	beq	r2,zero,801320 <logic+0xab4>
  8012e8:	e0bffc17 	ldw	r2,-16(fp)
  8012ec:	10803c03 	ldbu	r2,240(r2)
  8012f0:	10803fcc 	andi	r2,r2,255
  8012f4:	1080201c 	xori	r2,r2,128
  8012f8:	10bfe004 	addi	r2,r2,-128
  8012fc:	1000061e 	bne	r2,zero,801318 <logic+0xaac>
  801300:	e0bffc17 	ldw	r2,-16(fp)
  801304:	10803e03 	ldbu	r2,248(r2)
  801308:	10803fcc 	andi	r2,r2,255
  80130c:	1080201c 	xori	r2,r2,128
  801310:	10bfe004 	addi	r2,r2,-128
  801314:	10000226 	beq	r2,zero,801320 <logic+0xab4>
  801318:	00800044 	movi	r2,1
  80131c:	00000106 	br	801324 <logic+0xab8>
  801320:	0005883a 	mov	r2,zero
  801324:	1007883a 	mov	r3,r2
  801328:	e0bffc17 	ldw	r2,-16(fp)
  80132c:	10c03dc5 	stb	r3,247(r2)
  if (d->_g166) {
  801330:	e0bffc17 	ldw	r2,-16(fp)
  801334:	10803dc3 	ldbu	r2,247(r2)
  801338:	10803fcc 	andi	r2,r2,255
  80133c:	1080201c 	xori	r2,r2,128
  801340:	10bfe004 	addi	r2,r2,-128
  801344:	10000226 	beq	r2,zero,801350 <logic+0xae4>
    d->_DDDpacemake2_local_URI_state = 0;
  801348:	e0bffc17 	ldw	r2,-16(fp)
  80134c:	10001945 	stb	zero,101(r2)
  }
  d->_g167 = d->_pg134_e1;
  801350:	e0bffc17 	ldw	r2,-16(fp)
  801354:	10c052c3 	ldbu	r3,331(r2)
  801358:	e0bffc17 	ldw	r2,-16(fp)
  80135c:	10c03e05 	stb	r3,248(r2)
  if (d->_g167) {
  801360:	e0bffc17 	ldw	r2,-16(fp)
  801364:	10803e03 	ldbu	r2,248(r2)
  801368:	10803fcc 	andi	r2,r2,255
  80136c:	1080201c 	xori	r2,r2,128
  801370:	10bfe004 	addi	r2,r2,-128
  801374:	10001226 	beq	r2,zero,8013c0 <logic+0xb54>
    d->AVI_counter += d->deltaT;
  801378:	e13ffc17 	ldw	r4,-16(fp)
  80137c:	20800717 	ldw	r2,28(r4)
  801380:	20c00817 	ldw	r3,32(r4)
  801384:	e1bffc17 	ldw	r6,-16(fp)
  801388:	31001417 	ldw	r4,80(r6)
  80138c:	31401517 	ldw	r5,84(r6)
  801390:	200d883a 	mov	r6,r4
  801394:	280f883a 	mov	r7,r5
  801398:	1009883a 	mov	r4,r2
  80139c:	180b883a 	mov	r5,r3
  8013a0:	0805b040 	call	805b04 <__adddf3>
  8013a4:	1009883a 	mov	r4,r2
  8013a8:	180b883a 	mov	r5,r3
  8013ac:	2005883a 	mov	r2,r4
  8013b0:	2807883a 	mov	r3,r5
  8013b4:	e13ffc17 	ldw	r4,-16(fp)
  8013b8:	20800715 	stw	r2,28(r4)
  8013bc:	20c00815 	stw	r3,32(r4)
  }
  d->_g167_e2 = d->_g28 && !d->_cg28;
  8013c0:	e0bffc17 	ldw	r2,-16(fp)
  8013c4:	10802403 	ldbu	r2,144(r2)
  8013c8:	10803fcc 	andi	r2,r2,255
  8013cc:	1080201c 	xori	r2,r2,128
  8013d0:	10bfe004 	addi	r2,r2,-128
  8013d4:	10000826 	beq	r2,zero,8013f8 <logic+0xb8c>
  8013d8:	e0bffc17 	ldw	r2,-16(fp)
  8013dc:	10804143 	ldbu	r2,261(r2)
  8013e0:	10803fcc 	andi	r2,r2,255
  8013e4:	1080201c 	xori	r2,r2,128
  8013e8:	10bfe004 	addi	r2,r2,-128
  8013ec:	1000021e 	bne	r2,zero,8013f8 <logic+0xb8c>
  8013f0:	00800044 	movi	r2,1
  8013f4:	00000106 	br	8013fc <logic+0xb90>
  8013f8:	0005883a 	mov	r2,zero
  8013fc:	1007883a 	mov	r3,r2
  801400:	e0bffc17 	ldw	r2,-16(fp)
  801404:	10c05005 	stb	r3,320(r2)
  d->_cg31 = d->AVI_counter >= d->AVI_DEADLINE && d->_DDDpacemake2_local_URI_state == 1;
  801408:	e0bffc17 	ldw	r2,-16(fp)
  80140c:	14000717 	ldw	r16,28(r2)
  801410:	14400817 	ldw	r17,32(r2)
  801414:	e0bffc17 	ldw	r2,-16(fp)
  801418:	10800017 	ldw	r2,0(r2)
  80141c:	1009883a 	mov	r4,r2
  801420:	08075940 	call	807594 <__floatsidf>
  801424:	1009883a 	mov	r4,r2
  801428:	180b883a 	mov	r5,r3
  80142c:	200d883a 	mov	r6,r4
  801430:	280f883a 	mov	r7,r5
  801434:	8009883a 	mov	r4,r16
  801438:	880b883a 	mov	r5,r17
  80143c:	08063b00 	call	8063b0 <__gedf2>
  801440:	10000916 	blt	r2,zero,801468 <logic+0xbfc>
  801444:	e0bffc17 	ldw	r2,-16(fp)
  801448:	10801943 	ldbu	r2,101(r2)
  80144c:	10803fcc 	andi	r2,r2,255
  801450:	1080201c 	xori	r2,r2,128
  801454:	10bfe004 	addi	r2,r2,-128
  801458:	10800058 	cmpnei	r2,r2,1
  80145c:	1000021e 	bne	r2,zero,801468 <logic+0xbfc>
  801460:	00800044 	movi	r2,1
  801464:	00000106 	br	80146c <logic+0xc00>
  801468:	0005883a 	mov	r2,zero
  80146c:	1007883a 	mov	r3,r2
  801470:	e0bffc17 	ldw	r2,-16(fp)
  801474:	10c04185 	stb	r3,262(r2)
  d->_g158_e1 = d->_g167_e2 && d->_cg31;
  801478:	e0bffc17 	ldw	r2,-16(fp)
  80147c:	10805003 	ldbu	r2,320(r2)
  801480:	10803fcc 	andi	r2,r2,255
  801484:	1080201c 	xori	r2,r2,128
  801488:	10bfe004 	addi	r2,r2,-128
  80148c:	10000826 	beq	r2,zero,8014b0 <logic+0xc44>
  801490:	e0bffc17 	ldw	r2,-16(fp)
  801494:	10804183 	ldbu	r2,262(r2)
  801498:	10803fcc 	andi	r2,r2,255
  80149c:	1080201c 	xori	r2,r2,128
  8014a0:	10bfe004 	addi	r2,r2,-128
  8014a4:	10000226 	beq	r2,zero,8014b0 <logic+0xc44>
  8014a8:	00800044 	movi	r2,1
  8014ac:	00000106 	br	8014b4 <logic+0xc48>
  8014b0:	0005883a 	mov	r2,zero
  8014b4:	1007883a 	mov	r3,r2
  8014b8:	e0bffc17 	ldw	r2,-16(fp)
  8014bc:	10c04fc5 	stb	r3,319(r2)
  if (d->_g158_e1) {
  8014c0:	e0bffc17 	ldw	r2,-16(fp)
  8014c4:	10804fc3 	ldbu	r2,319(r2)
  8014c8:	10803fcc 	andi	r2,r2,255
  8014cc:	1080201c 	xori	r2,r2,128
  8014d0:	10bfe004 	addi	r2,r2,-128
  8014d4:	10000326 	beq	r2,zero,8014e4 <logic+0xc78>
    d->_DDDpacemake2_local__Atrig1 = 1;
  8014d8:	e0bffc17 	ldw	r2,-16(fp)
  8014dc:	00c00044 	movi	r3,1
  8014e0:	10c01c45 	stb	r3,113(r2)
  }
  d->_g158 = d->_g167_e2 && !d->_cg31;
  8014e4:	e0bffc17 	ldw	r2,-16(fp)
  8014e8:	10805003 	ldbu	r2,320(r2)
  8014ec:	10803fcc 	andi	r2,r2,255
  8014f0:	1080201c 	xori	r2,r2,128
  8014f4:	10bfe004 	addi	r2,r2,-128
  8014f8:	10000826 	beq	r2,zero,80151c <logic+0xcb0>
  8014fc:	e0bffc17 	ldw	r2,-16(fp)
  801500:	10804183 	ldbu	r2,262(r2)
  801504:	10803fcc 	andi	r2,r2,255
  801508:	1080201c 	xori	r2,r2,128
  80150c:	10bfe004 	addi	r2,r2,-128
  801510:	1000021e 	bne	r2,zero,80151c <logic+0xcb0>
  801514:	00800044 	movi	r2,1
  801518:	00000106 	br	801520 <logic+0xcb4>
  80151c:	0005883a 	mov	r2,zero
  801520:	1007883a 	mov	r3,r2
  801524:	e0bffc17 	ldw	r2,-16(fp)
  801528:	10c03c45 	stb	r3,241(r2)
  d->_cg33 = d->AVI_counter >= d->AVI_DEADLINE && d->_DDDpacemake2_local_URI_state == 0;
  80152c:	e0bffc17 	ldw	r2,-16(fp)
  801530:	14000717 	ldw	r16,28(r2)
  801534:	14400817 	ldw	r17,32(r2)
  801538:	e0bffc17 	ldw	r2,-16(fp)
  80153c:	10800017 	ldw	r2,0(r2)
  801540:	1009883a 	mov	r4,r2
  801544:	08075940 	call	807594 <__floatsidf>
  801548:	1009883a 	mov	r4,r2
  80154c:	180b883a 	mov	r5,r3
  801550:	200d883a 	mov	r6,r4
  801554:	280f883a 	mov	r7,r5
  801558:	8009883a 	mov	r4,r16
  80155c:	880b883a 	mov	r5,r17
  801560:	08063b00 	call	8063b0 <__gedf2>
  801564:	10000816 	blt	r2,zero,801588 <logic+0xd1c>
  801568:	e0bffc17 	ldw	r2,-16(fp)
  80156c:	10801943 	ldbu	r2,101(r2)
  801570:	10803fcc 	andi	r2,r2,255
  801574:	1080201c 	xori	r2,r2,128
  801578:	10bfe004 	addi	r2,r2,-128
  80157c:	1000021e 	bne	r2,zero,801588 <logic+0xd1c>
  801580:	00800044 	movi	r2,1
  801584:	00000106 	br	80158c <logic+0xd20>
  801588:	0005883a 	mov	r2,zero
  80158c:	1007883a 	mov	r3,r2
  801590:	e0bffc17 	ldw	r2,-16(fp)
  801594:	10c04105 	stb	r3,260(r2)
  d->_g28 = d->_g158 && d->_cg33;
  801598:	e0bffc17 	ldw	r2,-16(fp)
  80159c:	10803c43 	ldbu	r2,241(r2)
  8015a0:	10803fcc 	andi	r2,r2,255
  8015a4:	1080201c 	xori	r2,r2,128
  8015a8:	10bfe004 	addi	r2,r2,-128
  8015ac:	10000826 	beq	r2,zero,8015d0 <logic+0xd64>
  8015b0:	e0bffc17 	ldw	r2,-16(fp)
  8015b4:	10804103 	ldbu	r2,260(r2)
  8015b8:	10803fcc 	andi	r2,r2,255
  8015bc:	1080201c 	xori	r2,r2,128
  8015c0:	10bfe004 	addi	r2,r2,-128
  8015c4:	10000226 	beq	r2,zero,8015d0 <logic+0xd64>
  8015c8:	00800044 	movi	r2,1
  8015cc:	00000106 	br	8015d4 <logic+0xd68>
  8015d0:	0005883a 	mov	r2,zero
  8015d4:	1007883a 	mov	r3,r2
  8015d8:	e0bffc17 	ldw	r2,-16(fp)
  8015dc:	10c02405 	stb	r3,144(r2)
  if (d->_g28) {
  8015e0:	e0bffc17 	ldw	r2,-16(fp)
  8015e4:	10802403 	ldbu	r2,144(r2)
  8015e8:	10803fcc 	andi	r2,r2,255
  8015ec:	1080201c 	xori	r2,r2,128
  8015f0:	10bfe004 	addi	r2,r2,-128
  8015f4:	10000326 	beq	r2,zero,801604 <logic+0xd98>
    d->_DDDpacemake2_local__Atrig2 = 1;
  8015f8:	e0bffc17 	ldw	r2,-16(fp)
  8015fc:	00c00044 	movi	r3,1
  801600:	10c01c85 	stb	r3,114(r2)
  }
  d->_g31 = d->_g4 && !d->_cg4;
  801604:	e0bffc17 	ldw	r2,-16(fp)
  801608:	10801f03 	ldbu	r2,124(r2)
  80160c:	10803fcc 	andi	r2,r2,255
  801610:	1080201c 	xori	r2,r2,128
  801614:	10bfe004 	addi	r2,r2,-128
  801618:	10000826 	beq	r2,zero,80163c <logic+0xdd0>
  80161c:	e0bffc17 	ldw	r2,-16(fp)
  801620:	10803f43 	ldbu	r2,253(r2)
  801624:	10803fcc 	andi	r2,r2,255
  801628:	1080201c 	xori	r2,r2,128
  80162c:	10bfe004 	addi	r2,r2,-128
  801630:	1000021e 	bne	r2,zero,80163c <logic+0xdd0>
  801634:	00800044 	movi	r2,1
  801638:	00000106 	br	801640 <logic+0xdd4>
  80163c:	0005883a 	mov	r2,zero
  801640:	1007883a 	mov	r3,r2
  801644:	e0bffc17 	ldw	r2,-16(fp)
  801648:	10c024c5 	stb	r3,147(r2)
  d->_cg6 = d->_DDDpacemake2_local_real_AS || d->_DDDpacemake2_local__pre_AP_temp;
  80164c:	e0bffc17 	ldw	r2,-16(fp)
  801650:	10801a83 	ldbu	r2,106(r2)
  801654:	10803fcc 	andi	r2,r2,255
  801658:	1080201c 	xori	r2,r2,128
  80165c:	10bfe004 	addi	r2,r2,-128
  801660:	1000061e 	bne	r2,zero,80167c <logic+0xe10>
  801664:	e0bffc17 	ldw	r2,-16(fp)
  801668:	10801bc3 	ldbu	r2,111(r2)
  80166c:	10803fcc 	andi	r2,r2,255
  801670:	1080201c 	xori	r2,r2,128
  801674:	10bfe004 	addi	r2,r2,-128
  801678:	10000226 	beq	r2,zero,801684 <logic+0xe18>
  80167c:	00800044 	movi	r2,1
  801680:	00000106 	br	801688 <logic+0xe1c>
  801684:	0005883a 	mov	r2,zero
  801688:	1007883a 	mov	r3,r2
  80168c:	e0bffc17 	ldw	r2,-16(fp)
  801690:	10c03f05 	stb	r3,252(r2)
  d->_g4 = d->_g31 && d->_cg6;
  801694:	e0bffc17 	ldw	r2,-16(fp)
  801698:	108024c3 	ldbu	r2,147(r2)
  80169c:	10803fcc 	andi	r2,r2,255
  8016a0:	1080201c 	xori	r2,r2,128
  8016a4:	10bfe004 	addi	r2,r2,-128
  8016a8:	10000826 	beq	r2,zero,8016cc <logic+0xe60>
  8016ac:	e0bffc17 	ldw	r2,-16(fp)
  8016b0:	10803f03 	ldbu	r2,252(r2)
  8016b4:	10803fcc 	andi	r2,r2,255
  8016b8:	1080201c 	xori	r2,r2,128
  8016bc:	10bfe004 	addi	r2,r2,-128
  8016c0:	10000226 	beq	r2,zero,8016cc <logic+0xe60>
  8016c4:	00800044 	movi	r2,1
  8016c8:	00000106 	br	8016d0 <logic+0xe64>
  8016cc:	0005883a 	mov	r2,zero
  8016d0:	1007883a 	mov	r3,r2
  8016d4:	e0bffc17 	ldw	r2,-16(fp)
  8016d8:	10c01f05 	stb	r3,124(r2)
  if (d->_g4) {
  8016dc:	e0bffc17 	ldw	r2,-16(fp)
  8016e0:	10801f03 	ldbu	r2,124(r2)
  8016e4:	10803fcc 	andi	r2,r2,255
  8016e8:	1080201c 	xori	r2,r2,128
  8016ec:	10bfe004 	addi	r2,r2,-128
  8016f0:	10000c26 	beq	r2,zero,801724 <logic+0xeb8>
    d->_DDDpacemake2_local_AVI_state = 1;
  8016f4:	e0bffc17 	ldw	r2,-16(fp)
  8016f8:	00c00044 	movi	r3,1
  8016fc:	10c01805 	stb	r3,96(r2)
    d->AVI_counter = 0;
  801700:	e0bffc17 	ldw	r2,-16(fp)
  801704:	10000715 	stw	zero,28(r2)
  801708:	10000815 	stw	zero,32(r2)
    d->_DDDpacemake2_local__Atrig = 0;
  80170c:	e0bffc17 	ldw	r2,-16(fp)
  801710:	10001c05 	stb	zero,112(r2)
    d->_DDDpacemake2_local__Atrig1 = 0;
  801714:	e0bffc17 	ldw	r2,-16(fp)
  801718:	10001c45 	stb	zero,113(r2)
    d->_DDDpacemake2_local__Atrig2 = 0;
  80171c:	e0bffc17 	ldw	r2,-16(fp)
  801720:	10001c85 	stb	zero,114(r2)
  }
  d->_g13 = d->_pg12;
  801724:	e0bffc17 	ldw	r2,-16(fp)
  801728:	10c05303 	ldbu	r3,332(r2)
  80172c:	e0bffc17 	ldw	r2,-16(fp)
  801730:	10c02105 	stb	r3,132(r2)
  d->_g16 = d->_pg15;
  801734:	e0bffc17 	ldw	r2,-16(fp)
  801738:	10c05343 	ldbu	r3,333(r2)
  80173c:	e0bffc17 	ldw	r2,-16(fp)
  801740:	10c021c5 	stb	r3,135(r2)
  d->_g16 = d->_g4 || d->_g13 || d->_g16;
  801744:	e0bffc17 	ldw	r2,-16(fp)
  801748:	10801f03 	ldbu	r2,124(r2)
  80174c:	10803fcc 	andi	r2,r2,255
  801750:	1080201c 	xori	r2,r2,128
  801754:	10bfe004 	addi	r2,r2,-128
  801758:	10000c1e 	bne	r2,zero,80178c <logic+0xf20>
  80175c:	e0bffc17 	ldw	r2,-16(fp)
  801760:	10802103 	ldbu	r2,132(r2)
  801764:	10803fcc 	andi	r2,r2,255
  801768:	1080201c 	xori	r2,r2,128
  80176c:	10bfe004 	addi	r2,r2,-128
  801770:	1000061e 	bne	r2,zero,80178c <logic+0xf20>
  801774:	e0bffc17 	ldw	r2,-16(fp)
  801778:	108021c3 	ldbu	r2,135(r2)
  80177c:	10803fcc 	andi	r2,r2,255
  801780:	1080201c 	xori	r2,r2,128
  801784:	10bfe004 	addi	r2,r2,-128
  801788:	10000226 	beq	r2,zero,801794 <logic+0xf28>
  80178c:	00800044 	movi	r2,1
  801790:	00000106 	br	801798 <logic+0xf2c>
  801794:	0005883a 	mov	r2,zero
  801798:	1007883a 	mov	r3,r2
  80179c:	e0bffc17 	ldw	r2,-16(fp)
  8017a0:	10c021c5 	stb	r3,135(r2)
  d->_cg9 = d->AVI_counter < d->AVI_DEADLINE;
  8017a4:	e0bffc17 	ldw	r2,-16(fp)
  8017a8:	14000717 	ldw	r16,28(r2)
  8017ac:	14400817 	ldw	r17,32(r2)
  8017b0:	e0bffc17 	ldw	r2,-16(fp)
  8017b4:	10800017 	ldw	r2,0(r2)
  8017b8:	1009883a 	mov	r4,r2
  8017bc:	08075940 	call	807594 <__floatsidf>
  8017c0:	1009883a 	mov	r4,r2
  8017c4:	180b883a 	mov	r5,r3
  8017c8:	04800044 	movi	r18,1
  8017cc:	200d883a 	mov	r6,r4
  8017d0:	280f883a 	mov	r7,r5
  8017d4:	8009883a 	mov	r4,r16
  8017d8:	880b883a 	mov	r5,r17
  8017dc:	080648c0 	call	80648c <__ledf2>
  8017e0:	10000116 	blt	r2,zero,8017e8 <logic+0xf7c>
  8017e4:	0025883a 	mov	r18,zero
  8017e8:	9007883a 	mov	r3,r18
  8017ec:	e0bffc17 	ldw	r2,-16(fp)
  8017f0:	10c03f85 	stb	r3,254(r2)
  d->_g13 = d->_g16 && !d->_cg9;
  8017f4:	e0bffc17 	ldw	r2,-16(fp)
  8017f8:	108021c3 	ldbu	r2,135(r2)
  8017fc:	10803fcc 	andi	r2,r2,255
  801800:	1080201c 	xori	r2,r2,128
  801804:	10bfe004 	addi	r2,r2,-128
  801808:	10000826 	beq	r2,zero,80182c <logic+0xfc0>
  80180c:	e0bffc17 	ldw	r2,-16(fp)
  801810:	10803f83 	ldbu	r2,254(r2)
  801814:	10803fcc 	andi	r2,r2,255
  801818:	1080201c 	xori	r2,r2,128
  80181c:	10bfe004 	addi	r2,r2,-128
  801820:	1000021e 	bne	r2,zero,80182c <logic+0xfc0>
  801824:	00800044 	movi	r2,1
  801828:	00000106 	br	801830 <logic+0xfc4>
  80182c:	0005883a 	mov	r2,zero
  801830:	1007883a 	mov	r3,r2
  801834:	e0bffc17 	ldw	r2,-16(fp)
  801838:	10c02105 	stb	r3,132(r2)
  d->_cg14 = d->_DDDpacemake2_local__Atrig || d->_DDDpacemake2_local__Atrig1 || d->_DDDpacemake2_local__Atrig2;
  80183c:	e0bffc17 	ldw	r2,-16(fp)
  801840:	10801c03 	ldbu	r2,112(r2)
  801844:	10803fcc 	andi	r2,r2,255
  801848:	1080201c 	xori	r2,r2,128
  80184c:	10bfe004 	addi	r2,r2,-128
  801850:	10000c1e 	bne	r2,zero,801884 <logic+0x1018>
  801854:	e0bffc17 	ldw	r2,-16(fp)
  801858:	10801c43 	ldbu	r2,113(r2)
  80185c:	10803fcc 	andi	r2,r2,255
  801860:	1080201c 	xori	r2,r2,128
  801864:	10bfe004 	addi	r2,r2,-128
  801868:	1000061e 	bne	r2,zero,801884 <logic+0x1018>
  80186c:	e0bffc17 	ldw	r2,-16(fp)
  801870:	10801c83 	ldbu	r2,114(r2)
  801874:	10803fcc 	andi	r2,r2,255
  801878:	1080201c 	xori	r2,r2,128
  80187c:	10bfe004 	addi	r2,r2,-128
  801880:	10000226 	beq	r2,zero,80188c <logic+0x1020>
  801884:	00800044 	movi	r2,1
  801888:	00000106 	br	801890 <logic+0x1024>
  80188c:	0005883a 	mov	r2,zero
  801890:	1007883a 	mov	r3,r2
  801894:	e0bffc17 	ldw	r2,-16(fp)
  801898:	10c04005 	stb	r3,256(r2)
  d->_g15 = d->_g13 && !d->_cg14;
  80189c:	e0bffc17 	ldw	r2,-16(fp)
  8018a0:	10802103 	ldbu	r2,132(r2)
  8018a4:	10803fcc 	andi	r2,r2,255
  8018a8:	1080201c 	xori	r2,r2,128
  8018ac:	10bfe004 	addi	r2,r2,-128
  8018b0:	10000826 	beq	r2,zero,8018d4 <logic+0x1068>
  8018b4:	e0bffc17 	ldw	r2,-16(fp)
  8018b8:	10804003 	ldbu	r2,256(r2)
  8018bc:	10803fcc 	andi	r2,r2,255
  8018c0:	1080201c 	xori	r2,r2,128
  8018c4:	10bfe004 	addi	r2,r2,-128
  8018c8:	1000021e 	bne	r2,zero,8018d4 <logic+0x1068>
  8018cc:	00800044 	movi	r2,1
  8018d0:	00000106 	br	8018d8 <logic+0x106c>
  8018d4:	0005883a 	mov	r2,zero
  8018d8:	1007883a 	mov	r3,r2
  8018dc:	e0bffc17 	ldw	r2,-16(fp)
  8018e0:	10c02185 	stb	r3,134(r2)
  d->_g9 = d->_g16 && d->_cg9;
  8018e4:	e0bffc17 	ldw	r2,-16(fp)
  8018e8:	108021c3 	ldbu	r2,135(r2)
  8018ec:	10803fcc 	andi	r2,r2,255
  8018f0:	1080201c 	xori	r2,r2,128
  8018f4:	10bfe004 	addi	r2,r2,-128
  8018f8:	10000826 	beq	r2,zero,80191c <logic+0x10b0>
  8018fc:	e0bffc17 	ldw	r2,-16(fp)
  801900:	10803f83 	ldbu	r2,254(r2)
  801904:	10803fcc 	andi	r2,r2,255
  801908:	1080201c 	xori	r2,r2,128
  80190c:	10bfe004 	addi	r2,r2,-128
  801910:	10000226 	beq	r2,zero,80191c <logic+0x10b0>
  801914:	00800044 	movi	r2,1
  801918:	00000106 	br	801920 <logic+0x10b4>
  80191c:	0005883a 	mov	r2,zero
  801920:	1007883a 	mov	r3,r2
  801924:	e0bffc17 	ldw	r2,-16(fp)
  801928:	10c02005 	stb	r3,128(r2)
  if (d->_g9) {
  80192c:	e0bffc17 	ldw	r2,-16(fp)
  801930:	10802003 	ldbu	r2,128(r2)
  801934:	10803fcc 	andi	r2,r2,255
  801938:	1080201c 	xori	r2,r2,128
  80193c:	10bfe004 	addi	r2,r2,-128
  801940:	10003426 	beq	r2,zero,801a14 <logic+0x11a8>
    d->sleepT = (d->sleepT < (d->AVI_DEADLINE - d->AVI_counter)) ? d->sleepT : (d->AVI_DEADLINE - d->AVI_counter);
  801944:	e0bffc17 	ldw	r2,-16(fp)
  801948:	14001617 	ldw	r16,88(r2)
  80194c:	14401717 	ldw	r17,92(r2)
  801950:	e0bffc17 	ldw	r2,-16(fp)
  801954:	10800017 	ldw	r2,0(r2)
  801958:	1009883a 	mov	r4,r2
  80195c:	08075940 	call	807594 <__floatsidf>
  801960:	1011883a 	mov	r8,r2
  801964:	1813883a 	mov	r9,r3
  801968:	e13ffc17 	ldw	r4,-16(fp)
  80196c:	20800717 	ldw	r2,28(r4)
  801970:	20c00817 	ldw	r3,32(r4)
  801974:	100d883a 	mov	r6,r2
  801978:	180f883a 	mov	r7,r3
  80197c:	4009883a 	mov	r4,r8
  801980:	480b883a 	mov	r5,r9
  801984:	0806c980 	call	806c98 <__subdf3>
  801988:	1009883a 	mov	r4,r2
  80198c:	180b883a 	mov	r5,r3
  801990:	2005883a 	mov	r2,r4
  801994:	2807883a 	mov	r3,r5
  801998:	100d883a 	mov	r6,r2
  80199c:	180f883a 	mov	r7,r3
  8019a0:	8009883a 	mov	r4,r16
  8019a4:	880b883a 	mov	r5,r17
  8019a8:	080648c0 	call	80648c <__ledf2>
  8019ac:	1000040e 	bge	r2,zero,8019c0 <logic+0x1154>
  8019b0:	e13ffc17 	ldw	r4,-16(fp)
  8019b4:	20801617 	ldw	r2,88(r4)
  8019b8:	20c01717 	ldw	r3,92(r4)
  8019bc:	00001206 	br	801a08 <logic+0x119c>
  8019c0:	e0bffc17 	ldw	r2,-16(fp)
  8019c4:	10800017 	ldw	r2,0(r2)
  8019c8:	1009883a 	mov	r4,r2
  8019cc:	08075940 	call	807594 <__floatsidf>
  8019d0:	1011883a 	mov	r8,r2
  8019d4:	1813883a 	mov	r9,r3
  8019d8:	e13ffc17 	ldw	r4,-16(fp)
  8019dc:	20800717 	ldw	r2,28(r4)
  8019e0:	20c00817 	ldw	r3,32(r4)
  8019e4:	100d883a 	mov	r6,r2
  8019e8:	180f883a 	mov	r7,r3
  8019ec:	4009883a 	mov	r4,r8
  8019f0:	480b883a 	mov	r5,r9
  8019f4:	0806c980 	call	806c98 <__subdf3>
  8019f8:	1009883a 	mov	r4,r2
  8019fc:	180b883a 	mov	r5,r3
  801a00:	2005883a 	mov	r2,r4
  801a04:	2807883a 	mov	r3,r5
  801a08:	e13ffc17 	ldw	r4,-16(fp)
  801a0c:	20801615 	stw	r2,88(r4)
  801a10:	20c01715 	stw	r3,92(r4)
  }
  d->_cg10 = d->_DDDpacemake2_local__Atrig || d->_DDDpacemake2_local__Atrig1 || d->_DDDpacemake2_local__Atrig2;
  801a14:	e0bffc17 	ldw	r2,-16(fp)
  801a18:	10801c03 	ldbu	r2,112(r2)
  801a1c:	10803fcc 	andi	r2,r2,255
  801a20:	1080201c 	xori	r2,r2,128
  801a24:	10bfe004 	addi	r2,r2,-128
  801a28:	10000c1e 	bne	r2,zero,801a5c <logic+0x11f0>
  801a2c:	e0bffc17 	ldw	r2,-16(fp)
  801a30:	10801c43 	ldbu	r2,113(r2)
  801a34:	10803fcc 	andi	r2,r2,255
  801a38:	1080201c 	xori	r2,r2,128
  801a3c:	10bfe004 	addi	r2,r2,-128
  801a40:	1000061e 	bne	r2,zero,801a5c <logic+0x11f0>
  801a44:	e0bffc17 	ldw	r2,-16(fp)
  801a48:	10801c83 	ldbu	r2,114(r2)
  801a4c:	10803fcc 	andi	r2,r2,255
  801a50:	1080201c 	xori	r2,r2,128
  801a54:	10bfe004 	addi	r2,r2,-128
  801a58:	10000226 	beq	r2,zero,801a64 <logic+0x11f8>
  801a5c:	00800044 	movi	r2,1
  801a60:	00000106 	br	801a68 <logic+0x11fc>
  801a64:	0005883a 	mov	r2,zero
  801a68:	1007883a 	mov	r3,r2
  801a6c:	e0bffc17 	ldw	r2,-16(fp)
  801a70:	10c03fc5 	stb	r3,255(r2)
  d->_g12 = d->_g9 && !d->_cg10;
  801a74:	e0bffc17 	ldw	r2,-16(fp)
  801a78:	10802003 	ldbu	r2,128(r2)
  801a7c:	10803fcc 	andi	r2,r2,255
  801a80:	1080201c 	xori	r2,r2,128
  801a84:	10bfe004 	addi	r2,r2,-128
  801a88:	10000826 	beq	r2,zero,801aac <logic+0x1240>
  801a8c:	e0bffc17 	ldw	r2,-16(fp)
  801a90:	10803fc3 	ldbu	r2,255(r2)
  801a94:	10803fcc 	andi	r2,r2,255
  801a98:	1080201c 	xori	r2,r2,128
  801a9c:	10bfe004 	addi	r2,r2,-128
  801aa0:	1000021e 	bne	r2,zero,801aac <logic+0x1240>
  801aa4:	00800044 	movi	r2,1
  801aa8:	00000106 	br	801ab0 <logic+0x1244>
  801aac:	0005883a 	mov	r2,zero
  801ab0:	1007883a 	mov	r3,r2
  801ab4:	e0bffc17 	ldw	r2,-16(fp)
  801ab8:	10c020c5 	stb	r3,131(r2)
  d->_g11_e1 = !(d->_g15 || d->_g12);
  801abc:	e0bffc17 	ldw	r2,-16(fp)
  801ac0:	10802183 	ldbu	r2,134(r2)
  801ac4:	10803fcc 	andi	r2,r2,255
  801ac8:	1080201c 	xori	r2,r2,128
  801acc:	10bfe004 	addi	r2,r2,-128
  801ad0:	1000081e 	bne	r2,zero,801af4 <logic+0x1288>
  801ad4:	e0bffc17 	ldw	r2,-16(fp)
  801ad8:	108020c3 	ldbu	r2,131(r2)
  801adc:	10803fcc 	andi	r2,r2,255
  801ae0:	1080201c 	xori	r2,r2,128
  801ae4:	10bfe004 	addi	r2,r2,-128
  801ae8:	1000021e 	bne	r2,zero,801af4 <logic+0x1288>
  801aec:	00800044 	movi	r2,1
  801af0:	00000106 	br	801af8 <logic+0x128c>
  801af4:	0005883a 	mov	r2,zero
  801af8:	1007883a 	mov	r3,r2
  801afc:	e0bffc17 	ldw	r2,-16(fp)
  801b00:	10c04d05 	stb	r3,308(r2)
  d->_g14 = d->_g9 && d->_cg10 || d->_g13 && d->_cg14;
  801b04:	e0bffc17 	ldw	r2,-16(fp)
  801b08:	10802003 	ldbu	r2,128(r2)
  801b0c:	10803fcc 	andi	r2,r2,255
  801b10:	1080201c 	xori	r2,r2,128
  801b14:	10bfe004 	addi	r2,r2,-128
  801b18:	10000626 	beq	r2,zero,801b34 <logic+0x12c8>
  801b1c:	e0bffc17 	ldw	r2,-16(fp)
  801b20:	10803fc3 	ldbu	r2,255(r2)
  801b24:	10803fcc 	andi	r2,r2,255
  801b28:	1080201c 	xori	r2,r2,128
  801b2c:	10bfe004 	addi	r2,r2,-128
  801b30:	10000c1e 	bne	r2,zero,801b64 <logic+0x12f8>
  801b34:	e0bffc17 	ldw	r2,-16(fp)
  801b38:	10802103 	ldbu	r2,132(r2)
  801b3c:	10803fcc 	andi	r2,r2,255
  801b40:	1080201c 	xori	r2,r2,128
  801b44:	10bfe004 	addi	r2,r2,-128
  801b48:	10000826 	beq	r2,zero,801b6c <logic+0x1300>
  801b4c:	e0bffc17 	ldw	r2,-16(fp)
  801b50:	10804003 	ldbu	r2,256(r2)
  801b54:	10803fcc 	andi	r2,r2,255
  801b58:	1080201c 	xori	r2,r2,128
  801b5c:	10bfe004 	addi	r2,r2,-128
  801b60:	10000226 	beq	r2,zero,801b6c <logic+0x1300>
  801b64:	00800044 	movi	r2,1
  801b68:	00000106 	br	801b70 <logic+0x1304>
  801b6c:	0005883a 	mov	r2,zero
  801b70:	1007883a 	mov	r3,r2
  801b74:	e0bffc17 	ldw	r2,-16(fp)
  801b78:	10c02145 	stb	r3,133(r2)
  d->_g10 = d->_pg21;
  801b7c:	e0bffc17 	ldw	r2,-16(fp)
  801b80:	10c05383 	ldbu	r3,334(r2)
  801b84:	e0bffc17 	ldw	r2,-16(fp)
  801b88:	10c02045 	stb	r3,129(r2)
  d->_g25 = d->_pg24;
  801b8c:	e0bffc17 	ldw	r2,-16(fp)
  801b90:	10c053c3 	ldbu	r3,335(r2)
  801b94:	e0bffc17 	ldw	r2,-16(fp)
  801b98:	10c023c5 	stb	r3,143(r2)
  d->_g22 = d->_g4 || d->_g10 || d->_g25;
  801b9c:	e0bffc17 	ldw	r2,-16(fp)
  801ba0:	10801f03 	ldbu	r2,124(r2)
  801ba4:	10803fcc 	andi	r2,r2,255
  801ba8:	1080201c 	xori	r2,r2,128
  801bac:	10bfe004 	addi	r2,r2,-128
  801bb0:	10000c1e 	bne	r2,zero,801be4 <logic+0x1378>
  801bb4:	e0bffc17 	ldw	r2,-16(fp)
  801bb8:	10802043 	ldbu	r2,129(r2)
  801bbc:	10803fcc 	andi	r2,r2,255
  801bc0:	1080201c 	xori	r2,r2,128
  801bc4:	10bfe004 	addi	r2,r2,-128
  801bc8:	1000061e 	bne	r2,zero,801be4 <logic+0x1378>
  801bcc:	e0bffc17 	ldw	r2,-16(fp)
  801bd0:	108023c3 	ldbu	r2,143(r2)
  801bd4:	10803fcc 	andi	r2,r2,255
  801bd8:	1080201c 	xori	r2,r2,128
  801bdc:	10bfe004 	addi	r2,r2,-128
  801be0:	10000226 	beq	r2,zero,801bec <logic+0x1380>
  801be4:	00800044 	movi	r2,1
  801be8:	00000106 	br	801bf0 <logic+0x1384>
  801bec:	0005883a 	mov	r2,zero
  801bf0:	1007883a 	mov	r3,r2
  801bf4:	e0bffc17 	ldw	r2,-16(fp)
  801bf8:	10c02305 	stb	r3,140(r2)
  d->_cg18 = d->AVI_counter < d->AVI_DEADLINE;
  801bfc:	e0bffc17 	ldw	r2,-16(fp)
  801c00:	14000717 	ldw	r16,28(r2)
  801c04:	14400817 	ldw	r17,32(r2)
  801c08:	e0bffc17 	ldw	r2,-16(fp)
  801c0c:	10800017 	ldw	r2,0(r2)
  801c10:	1009883a 	mov	r4,r2
  801c14:	08075940 	call	807594 <__floatsidf>
  801c18:	1009883a 	mov	r4,r2
  801c1c:	180b883a 	mov	r5,r3
  801c20:	04800044 	movi	r18,1
  801c24:	200d883a 	mov	r6,r4
  801c28:	280f883a 	mov	r7,r5
  801c2c:	8009883a 	mov	r4,r16
  801c30:	880b883a 	mov	r5,r17
  801c34:	080648c0 	call	80648c <__ledf2>
  801c38:	10000116 	blt	r2,zero,801c40 <logic+0x13d4>
  801c3c:	0025883a 	mov	r18,zero
  801c40:	9007883a 	mov	r3,r18
  801c44:	e0bffc17 	ldw	r2,-16(fp)
  801c48:	10c04045 	stb	r3,257(r2)
  d->_g25 = d->_g22 && !d->_cg18;
  801c4c:	e0bffc17 	ldw	r2,-16(fp)
  801c50:	10802303 	ldbu	r2,140(r2)
  801c54:	10803fcc 	andi	r2,r2,255
  801c58:	1080201c 	xori	r2,r2,128
  801c5c:	10bfe004 	addi	r2,r2,-128
  801c60:	10000826 	beq	r2,zero,801c84 <logic+0x1418>
  801c64:	e0bffc17 	ldw	r2,-16(fp)
  801c68:	10804043 	ldbu	r2,257(r2)
  801c6c:	10803fcc 	andi	r2,r2,255
  801c70:	1080201c 	xori	r2,r2,128
  801c74:	10bfe004 	addi	r2,r2,-128
  801c78:	1000021e 	bne	r2,zero,801c84 <logic+0x1418>
  801c7c:	00800044 	movi	r2,1
  801c80:	00000106 	br	801c88 <logic+0x141c>
  801c84:	0005883a 	mov	r2,zero
  801c88:	1007883a 	mov	r3,r2
  801c8c:	e0bffc17 	ldw	r2,-16(fp)
  801c90:	10c023c5 	stb	r3,143(r2)
  d->_cg23 = d->_DDDpacemake2_local__Atrig || d->_DDDpacemake2_local__Atrig1 || d->_DDDpacemake2_local__Atrig2;
  801c94:	e0bffc17 	ldw	r2,-16(fp)
  801c98:	10801c03 	ldbu	r2,112(r2)
  801c9c:	10803fcc 	andi	r2,r2,255
  801ca0:	1080201c 	xori	r2,r2,128
  801ca4:	10bfe004 	addi	r2,r2,-128
  801ca8:	10000c1e 	bne	r2,zero,801cdc <logic+0x1470>
  801cac:	e0bffc17 	ldw	r2,-16(fp)
  801cb0:	10801c43 	ldbu	r2,113(r2)
  801cb4:	10803fcc 	andi	r2,r2,255
  801cb8:	1080201c 	xori	r2,r2,128
  801cbc:	10bfe004 	addi	r2,r2,-128
  801cc0:	1000061e 	bne	r2,zero,801cdc <logic+0x1470>
  801cc4:	e0bffc17 	ldw	r2,-16(fp)
  801cc8:	10801c83 	ldbu	r2,114(r2)
  801ccc:	10803fcc 	andi	r2,r2,255
  801cd0:	1080201c 	xori	r2,r2,128
  801cd4:	10bfe004 	addi	r2,r2,-128
  801cd8:	10000226 	beq	r2,zero,801ce4 <logic+0x1478>
  801cdc:	00800044 	movi	r2,1
  801ce0:	00000106 	br	801ce8 <logic+0x147c>
  801ce4:	0005883a 	mov	r2,zero
  801ce8:	1007883a 	mov	r3,r2
  801cec:	e0bffc17 	ldw	r2,-16(fp)
  801cf0:	10c040c5 	stb	r3,259(r2)
  d->_g24 = d->_g25 && !d->_cg23;
  801cf4:	e0bffc17 	ldw	r2,-16(fp)
  801cf8:	108023c3 	ldbu	r2,143(r2)
  801cfc:	10803fcc 	andi	r2,r2,255
  801d00:	1080201c 	xori	r2,r2,128
  801d04:	10bfe004 	addi	r2,r2,-128
  801d08:	10000826 	beq	r2,zero,801d2c <logic+0x14c0>
  801d0c:	e0bffc17 	ldw	r2,-16(fp)
  801d10:	108040c3 	ldbu	r2,259(r2)
  801d14:	10803fcc 	andi	r2,r2,255
  801d18:	1080201c 	xori	r2,r2,128
  801d1c:	10bfe004 	addi	r2,r2,-128
  801d20:	1000021e 	bne	r2,zero,801d2c <logic+0x14c0>
  801d24:	00800044 	movi	r2,1
  801d28:	00000106 	br	801d30 <logic+0x14c4>
  801d2c:	0005883a 	mov	r2,zero
  801d30:	1007883a 	mov	r3,r2
  801d34:	e0bffc17 	ldw	r2,-16(fp)
  801d38:	10c02385 	stb	r3,142(r2)
  d->_g18 = d->_g22 && d->_cg18;
  801d3c:	e0bffc17 	ldw	r2,-16(fp)
  801d40:	10802303 	ldbu	r2,140(r2)
  801d44:	10803fcc 	andi	r2,r2,255
  801d48:	1080201c 	xori	r2,r2,128
  801d4c:	10bfe004 	addi	r2,r2,-128
  801d50:	10000826 	beq	r2,zero,801d74 <logic+0x1508>
  801d54:	e0bffc17 	ldw	r2,-16(fp)
  801d58:	10804043 	ldbu	r2,257(r2)
  801d5c:	10803fcc 	andi	r2,r2,255
  801d60:	1080201c 	xori	r2,r2,128
  801d64:	10bfe004 	addi	r2,r2,-128
  801d68:	10000226 	beq	r2,zero,801d74 <logic+0x1508>
  801d6c:	00800044 	movi	r2,1
  801d70:	00000106 	br	801d78 <logic+0x150c>
  801d74:	0005883a 	mov	r2,zero
  801d78:	1007883a 	mov	r3,r2
  801d7c:	e0bffc17 	ldw	r2,-16(fp)
  801d80:	10c02205 	stb	r3,136(r2)
  if (d->_g18) {
  801d84:	e0bffc17 	ldw	r2,-16(fp)
  801d88:	10802203 	ldbu	r2,136(r2)
  801d8c:	10803fcc 	andi	r2,r2,255
  801d90:	1080201c 	xori	r2,r2,128
  801d94:	10bfe004 	addi	r2,r2,-128
  801d98:	10003426 	beq	r2,zero,801e6c <logic+0x1600>
    d->sleepT = (d->sleepT < (d->AVI_DEADLINE - d->AVI_counter)) ? d->sleepT : (d->AVI_DEADLINE - d->AVI_counter);
  801d9c:	e0bffc17 	ldw	r2,-16(fp)
  801da0:	14001617 	ldw	r16,88(r2)
  801da4:	14401717 	ldw	r17,92(r2)
  801da8:	e0bffc17 	ldw	r2,-16(fp)
  801dac:	10800017 	ldw	r2,0(r2)
  801db0:	1009883a 	mov	r4,r2
  801db4:	08075940 	call	807594 <__floatsidf>
  801db8:	1011883a 	mov	r8,r2
  801dbc:	1813883a 	mov	r9,r3
  801dc0:	e13ffc17 	ldw	r4,-16(fp)
  801dc4:	20800717 	ldw	r2,28(r4)
  801dc8:	20c00817 	ldw	r3,32(r4)
  801dcc:	100d883a 	mov	r6,r2
  801dd0:	180f883a 	mov	r7,r3
  801dd4:	4009883a 	mov	r4,r8
  801dd8:	480b883a 	mov	r5,r9
  801ddc:	0806c980 	call	806c98 <__subdf3>
  801de0:	1009883a 	mov	r4,r2
  801de4:	180b883a 	mov	r5,r3
  801de8:	2005883a 	mov	r2,r4
  801dec:	2807883a 	mov	r3,r5
  801df0:	100d883a 	mov	r6,r2
  801df4:	180f883a 	mov	r7,r3
  801df8:	8009883a 	mov	r4,r16
  801dfc:	880b883a 	mov	r5,r17
  801e00:	080648c0 	call	80648c <__ledf2>
  801e04:	1000040e 	bge	r2,zero,801e18 <logic+0x15ac>
  801e08:	e13ffc17 	ldw	r4,-16(fp)
  801e0c:	20801617 	ldw	r2,88(r4)
  801e10:	20c01717 	ldw	r3,92(r4)
  801e14:	00001206 	br	801e60 <logic+0x15f4>
  801e18:	e0bffc17 	ldw	r2,-16(fp)
  801e1c:	10800017 	ldw	r2,0(r2)
  801e20:	1009883a 	mov	r4,r2
  801e24:	08075940 	call	807594 <__floatsidf>
  801e28:	1011883a 	mov	r8,r2
  801e2c:	1813883a 	mov	r9,r3
  801e30:	e13ffc17 	ldw	r4,-16(fp)
  801e34:	20800717 	ldw	r2,28(r4)
  801e38:	20c00817 	ldw	r3,32(r4)
  801e3c:	100d883a 	mov	r6,r2
  801e40:	180f883a 	mov	r7,r3
  801e44:	4009883a 	mov	r4,r8
  801e48:	480b883a 	mov	r5,r9
  801e4c:	0806c980 	call	806c98 <__subdf3>
  801e50:	1009883a 	mov	r4,r2
  801e54:	180b883a 	mov	r5,r3
  801e58:	2005883a 	mov	r2,r4
  801e5c:	2807883a 	mov	r3,r5
  801e60:	e13ffc17 	ldw	r4,-16(fp)
  801e64:	20801615 	stw	r2,88(r4)
  801e68:	20c01715 	stw	r3,92(r4)
  }
  d->_cg19 = d->_DDDpacemake2_local__Atrig || d->_DDDpacemake2_local__Atrig1 || d->_DDDpacemake2_local__Atrig2;
  801e6c:	e0bffc17 	ldw	r2,-16(fp)
  801e70:	10801c03 	ldbu	r2,112(r2)
  801e74:	10803fcc 	andi	r2,r2,255
  801e78:	1080201c 	xori	r2,r2,128
  801e7c:	10bfe004 	addi	r2,r2,-128
  801e80:	10000c1e 	bne	r2,zero,801eb4 <logic+0x1648>
  801e84:	e0bffc17 	ldw	r2,-16(fp)
  801e88:	10801c43 	ldbu	r2,113(r2)
  801e8c:	10803fcc 	andi	r2,r2,255
  801e90:	1080201c 	xori	r2,r2,128
  801e94:	10bfe004 	addi	r2,r2,-128
  801e98:	1000061e 	bne	r2,zero,801eb4 <logic+0x1648>
  801e9c:	e0bffc17 	ldw	r2,-16(fp)
  801ea0:	10801c83 	ldbu	r2,114(r2)
  801ea4:	10803fcc 	andi	r2,r2,255
  801ea8:	1080201c 	xori	r2,r2,128
  801eac:	10bfe004 	addi	r2,r2,-128
  801eb0:	10000226 	beq	r2,zero,801ebc <logic+0x1650>
  801eb4:	00800044 	movi	r2,1
  801eb8:	00000106 	br	801ec0 <logic+0x1654>
  801ebc:	0005883a 	mov	r2,zero
  801ec0:	1007883a 	mov	r3,r2
  801ec4:	e0bffc17 	ldw	r2,-16(fp)
  801ec8:	10c04085 	stb	r3,258(r2)
  d->_g21 = d->_g18 && !d->_cg19;
  801ecc:	e0bffc17 	ldw	r2,-16(fp)
  801ed0:	10802203 	ldbu	r2,136(r2)
  801ed4:	10803fcc 	andi	r2,r2,255
  801ed8:	1080201c 	xori	r2,r2,128
  801edc:	10bfe004 	addi	r2,r2,-128
  801ee0:	10000826 	beq	r2,zero,801f04 <logic+0x1698>
  801ee4:	e0bffc17 	ldw	r2,-16(fp)
  801ee8:	10804083 	ldbu	r2,258(r2)
  801eec:	10803fcc 	andi	r2,r2,255
  801ef0:	1080201c 	xori	r2,r2,128
  801ef4:	10bfe004 	addi	r2,r2,-128
  801ef8:	1000021e 	bne	r2,zero,801f04 <logic+0x1698>
  801efc:	00800044 	movi	r2,1
  801f00:	00000106 	br	801f08 <logic+0x169c>
  801f04:	0005883a 	mov	r2,zero
  801f08:	1007883a 	mov	r3,r2
  801f0c:	e0bffc17 	ldw	r2,-16(fp)
  801f10:	10c022c5 	stb	r3,139(r2)
  d->_g20_e2 = !(d->_g24 || d->_g21);
  801f14:	e0bffc17 	ldw	r2,-16(fp)
  801f18:	10802383 	ldbu	r2,142(r2)
  801f1c:	10803fcc 	andi	r2,r2,255
  801f20:	1080201c 	xori	r2,r2,128
  801f24:	10bfe004 	addi	r2,r2,-128
  801f28:	1000081e 	bne	r2,zero,801f4c <logic+0x16e0>
  801f2c:	e0bffc17 	ldw	r2,-16(fp)
  801f30:	108022c3 	ldbu	r2,139(r2)
  801f34:	10803fcc 	andi	r2,r2,255
  801f38:	1080201c 	xori	r2,r2,128
  801f3c:	10bfe004 	addi	r2,r2,-128
  801f40:	1000021e 	bne	r2,zero,801f4c <logic+0x16e0>
  801f44:	00800044 	movi	r2,1
  801f48:	00000106 	br	801f50 <logic+0x16e4>
  801f4c:	0005883a 	mov	r2,zero
  801f50:	1007883a 	mov	r3,r2
  801f54:	e0bffc17 	ldw	r2,-16(fp)
  801f58:	10c04d45 	stb	r3,309(r2)
  d->_g19 = d->_g18 && d->_cg19 || d->_g25 && d->_cg23;
  801f5c:	e0bffc17 	ldw	r2,-16(fp)
  801f60:	10802203 	ldbu	r2,136(r2)
  801f64:	10803fcc 	andi	r2,r2,255
  801f68:	1080201c 	xori	r2,r2,128
  801f6c:	10bfe004 	addi	r2,r2,-128
  801f70:	10000626 	beq	r2,zero,801f8c <logic+0x1720>
  801f74:	e0bffc17 	ldw	r2,-16(fp)
  801f78:	10804083 	ldbu	r2,258(r2)
  801f7c:	10803fcc 	andi	r2,r2,255
  801f80:	1080201c 	xori	r2,r2,128
  801f84:	10bfe004 	addi	r2,r2,-128
  801f88:	10000c1e 	bne	r2,zero,801fbc <logic+0x1750>
  801f8c:	e0bffc17 	ldw	r2,-16(fp)
  801f90:	108023c3 	ldbu	r2,143(r2)
  801f94:	10803fcc 	andi	r2,r2,255
  801f98:	1080201c 	xori	r2,r2,128
  801f9c:	10bfe004 	addi	r2,r2,-128
  801fa0:	10000826 	beq	r2,zero,801fc4 <logic+0x1758>
  801fa4:	e0bffc17 	ldw	r2,-16(fp)
  801fa8:	108040c3 	ldbu	r2,259(r2)
  801fac:	10803fcc 	andi	r2,r2,255
  801fb0:	1080201c 	xori	r2,r2,128
  801fb4:	10bfe004 	addi	r2,r2,-128
  801fb8:	10000226 	beq	r2,zero,801fc4 <logic+0x1758>
  801fbc:	00800044 	movi	r2,1
  801fc0:	00000106 	br	801fc8 <logic+0x175c>
  801fc4:	0005883a 	mov	r2,zero
  801fc8:	1007883a 	mov	r3,r2
  801fcc:	e0bffc17 	ldw	r2,-16(fp)
  801fd0:	10c02245 	stb	r3,137(r2)
  d->_g23 = d->_g4 || d->_g158 && !d->_cg33;
  801fd4:	e0bffc17 	ldw	r2,-16(fp)
  801fd8:	10801f03 	ldbu	r2,124(r2)
  801fdc:	10803fcc 	andi	r2,r2,255
  801fe0:	1080201c 	xori	r2,r2,128
  801fe4:	10bfe004 	addi	r2,r2,-128
  801fe8:	10000c1e 	bne	r2,zero,80201c <logic+0x17b0>
  801fec:	e0bffc17 	ldw	r2,-16(fp)
  801ff0:	10803c43 	ldbu	r2,241(r2)
  801ff4:	10803fcc 	andi	r2,r2,255
  801ff8:	1080201c 	xori	r2,r2,128
  801ffc:	10bfe004 	addi	r2,r2,-128
  802000:	10000826 	beq	r2,zero,802024 <logic+0x17b8>
  802004:	e0bffc17 	ldw	r2,-16(fp)
  802008:	10804103 	ldbu	r2,260(r2)
  80200c:	10803fcc 	andi	r2,r2,255
  802010:	1080201c 	xori	r2,r2,128
  802014:	10bfe004 	addi	r2,r2,-128
  802018:	1000021e 	bne	r2,zero,802024 <logic+0x17b8>
  80201c:	00800044 	movi	r2,1
  802020:	00000106 	br	802028 <logic+0x17bc>
  802024:	0005883a 	mov	r2,zero
  802028:	1007883a 	mov	r3,r2
  80202c:	e0bffc17 	ldw	r2,-16(fp)
  802030:	10c02345 	stb	r3,141(r2)
  d->_g33 = !d->_g23;
  802034:	e0bffc17 	ldw	r2,-16(fp)
  802038:	10802343 	ldbu	r2,141(r2)
  80203c:	10803fcc 	andi	r2,r2,255
  802040:	1080201c 	xori	r2,r2,128
  802044:	10bfe004 	addi	r2,r2,-128
  802048:	1005003a 	cmpeq	r2,r2,zero
  80204c:	1007883a 	mov	r3,r2
  802050:	e0bffc17 	ldw	r2,-16(fp)
  802054:	10c02545 	stb	r3,149(r2)
  d->_g7 = d->_g29 || d->_g158_e1 || d->_g28;
  802058:	e0bffc17 	ldw	r2,-16(fp)
  80205c:	10802443 	ldbu	r2,145(r2)
  802060:	10803fcc 	andi	r2,r2,255
  802064:	1080201c 	xori	r2,r2,128
  802068:	10bfe004 	addi	r2,r2,-128
  80206c:	10000c1e 	bne	r2,zero,8020a0 <logic+0x1834>
  802070:	e0bffc17 	ldw	r2,-16(fp)
  802074:	10804fc3 	ldbu	r2,319(r2)
  802078:	10803fcc 	andi	r2,r2,255
  80207c:	1080201c 	xori	r2,r2,128
  802080:	10bfe004 	addi	r2,r2,-128
  802084:	1000061e 	bne	r2,zero,8020a0 <logic+0x1834>
  802088:	e0bffc17 	ldw	r2,-16(fp)
  80208c:	10802403 	ldbu	r2,144(r2)
  802090:	10803fcc 	andi	r2,r2,255
  802094:	1080201c 	xori	r2,r2,128
  802098:	10bfe004 	addi	r2,r2,-128
  80209c:	10000226 	beq	r2,zero,8020a8 <logic+0x183c>
  8020a0:	00800044 	movi	r2,1
  8020a4:	00000106 	br	8020ac <logic+0x1840>
  8020a8:	0005883a 	mov	r2,zero
  8020ac:	1007883a 	mov	r3,r2
  8020b0:	e0bffc17 	ldw	r2,-16(fp)
  8020b4:	10c01fc5 	stb	r3,127(r2)
  d->_g34 = (d->_g11_e1 || d->_g14) && (d->_g20_e2 || d->_g19) && (d->_g33 || d->_g7) && (d->_g14 || d->_g19 || d->_g7);
  8020b8:	e0bffc17 	ldw	r2,-16(fp)
  8020bc:	10804d03 	ldbu	r2,308(r2)
  8020c0:	10803fcc 	andi	r2,r2,255
  8020c4:	1080201c 	xori	r2,r2,128
  8020c8:	10bfe004 	addi	r2,r2,-128
  8020cc:	1000061e 	bne	r2,zero,8020e8 <logic+0x187c>
  8020d0:	e0bffc17 	ldw	r2,-16(fp)
  8020d4:	10802143 	ldbu	r2,133(r2)
  8020d8:	10803fcc 	andi	r2,r2,255
  8020dc:	1080201c 	xori	r2,r2,128
  8020e0:	10bfe004 	addi	r2,r2,-128
  8020e4:	10002c26 	beq	r2,zero,802198 <logic+0x192c>
  8020e8:	e0bffc17 	ldw	r2,-16(fp)
  8020ec:	10804d43 	ldbu	r2,309(r2)
  8020f0:	10803fcc 	andi	r2,r2,255
  8020f4:	1080201c 	xori	r2,r2,128
  8020f8:	10bfe004 	addi	r2,r2,-128
  8020fc:	1000061e 	bne	r2,zero,802118 <logic+0x18ac>
  802100:	e0bffc17 	ldw	r2,-16(fp)
  802104:	10802243 	ldbu	r2,137(r2)
  802108:	10803fcc 	andi	r2,r2,255
  80210c:	1080201c 	xori	r2,r2,128
  802110:	10bfe004 	addi	r2,r2,-128
  802114:	10002026 	beq	r2,zero,802198 <logic+0x192c>
  802118:	e0bffc17 	ldw	r2,-16(fp)
  80211c:	10802543 	ldbu	r2,149(r2)
  802120:	10803fcc 	andi	r2,r2,255
  802124:	1080201c 	xori	r2,r2,128
  802128:	10bfe004 	addi	r2,r2,-128
  80212c:	1000061e 	bne	r2,zero,802148 <logic+0x18dc>
  802130:	e0bffc17 	ldw	r2,-16(fp)
  802134:	10801fc3 	ldbu	r2,127(r2)
  802138:	10803fcc 	andi	r2,r2,255
  80213c:	1080201c 	xori	r2,r2,128
  802140:	10bfe004 	addi	r2,r2,-128
  802144:	10001426 	beq	r2,zero,802198 <logic+0x192c>
  802148:	e0bffc17 	ldw	r2,-16(fp)
  80214c:	10802143 	ldbu	r2,133(r2)
  802150:	10803fcc 	andi	r2,r2,255
  802154:	1080201c 	xori	r2,r2,128
  802158:	10bfe004 	addi	r2,r2,-128
  80215c:	10000c1e 	bne	r2,zero,802190 <logic+0x1924>
  802160:	e0bffc17 	ldw	r2,-16(fp)
  802164:	10802243 	ldbu	r2,137(r2)
  802168:	10803fcc 	andi	r2,r2,255
  80216c:	1080201c 	xori	r2,r2,128
  802170:	10bfe004 	addi	r2,r2,-128
  802174:	1000061e 	bne	r2,zero,802190 <logic+0x1924>
  802178:	e0bffc17 	ldw	r2,-16(fp)
  80217c:	10801fc3 	ldbu	r2,127(r2)
  802180:	10803fcc 	andi	r2,r2,255
  802184:	1080201c 	xori	r2,r2,128
  802188:	10bfe004 	addi	r2,r2,-128
  80218c:	10000226 	beq	r2,zero,802198 <logic+0x192c>
  802190:	00800044 	movi	r2,1
  802194:	00000106 	br	80219c <logic+0x1930>
  802198:	0005883a 	mov	r2,zero
  80219c:	1007883a 	mov	r3,r2
  8021a0:	e0bffc17 	ldw	r2,-16(fp)
  8021a4:	10c02585 	stb	r3,150(r2)
  d->_cg35 = d->_DDDpacemake2_local__Atrig;
  8021a8:	e0bffc17 	ldw	r2,-16(fp)
  8021ac:	10c01c03 	ldbu	r3,112(r2)
  8021b0:	e0bffc17 	ldw	r2,-16(fp)
  8021b4:	10c041c5 	stb	r3,263(r2)
  d->_g29 = d->_g34 && d->_cg35;
  8021b8:	e0bffc17 	ldw	r2,-16(fp)
  8021bc:	10802583 	ldbu	r2,150(r2)
  8021c0:	10803fcc 	andi	r2,r2,255
  8021c4:	1080201c 	xori	r2,r2,128
  8021c8:	10bfe004 	addi	r2,r2,-128
  8021cc:	10000826 	beq	r2,zero,8021f0 <logic+0x1984>
  8021d0:	e0bffc17 	ldw	r2,-16(fp)
  8021d4:	108041c3 	ldbu	r2,263(r2)
  8021d8:	10803fcc 	andi	r2,r2,255
  8021dc:	1080201c 	xori	r2,r2,128
  8021e0:	10bfe004 	addi	r2,r2,-128
  8021e4:	10000226 	beq	r2,zero,8021f0 <logic+0x1984>
  8021e8:	00800044 	movi	r2,1
  8021ec:	00000106 	br	8021f4 <logic+0x1988>
  8021f0:	0005883a 	mov	r2,zero
  8021f4:	1007883a 	mov	r3,r2
  8021f8:	e0bffc17 	ldw	r2,-16(fp)
  8021fc:	10c02445 	stb	r3,145(r2)
  if (d->_g29) {
  802200:	e0bffc17 	ldw	r2,-16(fp)
  802204:	10802443 	ldbu	r2,145(r2)
  802208:	10803fcc 	andi	r2,r2,255
  80220c:	1080201c 	xori	r2,r2,128
  802210:	10bfe004 	addi	r2,r2,-128
  802214:	10000426 	beq	r2,zero,802228 <logic+0x19bc>
    d->_DDDpacemake2_local_AVI_state = 0;
  802218:	e0bffc17 	ldw	r2,-16(fp)
  80221c:	10001805 	stb	zero,96(r2)
    d->VP = 0;
  802220:	e0bffc17 	ldw	r2,-16(fp)
  802224:	10001345 	stb	zero,77(r2)
  }
  d->_g32 = d->_pg39;
  802228:	e0bffc17 	ldw	r2,-16(fp)
  80222c:	10c05403 	ldbu	r3,336(r2)
  802230:	e0bffc17 	ldw	r2,-16(fp)
  802234:	10c02505 	stb	r3,148(r2)
  d->_cg39 = d->_DDDpacemake2_local_real_VS;
  802238:	e0bffc17 	ldw	r2,-16(fp)
  80223c:	10c01ac3 	ldbu	r3,107(r2)
  802240:	e0bffc17 	ldw	r2,-16(fp)
  802244:	10c04285 	stb	r3,266(r2)
  d->_g30 = d->_g32 && d->_cg39;
  802248:	e0bffc17 	ldw	r2,-16(fp)
  80224c:	10802503 	ldbu	r2,148(r2)
  802250:	10803fcc 	andi	r2,r2,255
  802254:	1080201c 	xori	r2,r2,128
  802258:	10bfe004 	addi	r2,r2,-128
  80225c:	10000826 	beq	r2,zero,802280 <logic+0x1a14>
  802260:	e0bffc17 	ldw	r2,-16(fp)
  802264:	10804283 	ldbu	r2,266(r2)
  802268:	10803fcc 	andi	r2,r2,255
  80226c:	1080201c 	xori	r2,r2,128
  802270:	10bfe004 	addi	r2,r2,-128
  802274:	10000226 	beq	r2,zero,802280 <logic+0x1a14>
  802278:	00800044 	movi	r2,1
  80227c:	00000106 	br	802284 <logic+0x1a18>
  802280:	0005883a 	mov	r2,zero
  802284:	1007883a 	mov	r3,r2
  802288:	e0bffc17 	ldw	r2,-16(fp)
  80228c:	10c02485 	stb	r3,146(r2)
  if (d->_g30) {
  802290:	e0bffc17 	ldw	r2,-16(fp)
  802294:	10802483 	ldbu	r2,146(r2)
  802298:	10803fcc 	andi	r2,r2,255
  80229c:	1080201c 	xori	r2,r2,128
  8022a0:	10bfe004 	addi	r2,r2,-128
  8022a4:	10000426 	beq	r2,zero,8022b8 <logic+0x1a4c>
    d->VP = 0;
  8022a8:	e0bffc17 	ldw	r2,-16(fp)
  8022ac:	10001345 	stb	zero,77(r2)
    d->_DDDpacemake2_local_AVI_state = 0;
  8022b0:	e0bffc17 	ldw	r2,-16(fp)
  8022b4:	10001805 	stb	zero,96(r2)
  }
  d->_g30_e3 = d->_g32 && !d->_cg39;
  8022b8:	e0bffc17 	ldw	r2,-16(fp)
  8022bc:	10802503 	ldbu	r2,148(r2)
  8022c0:	10803fcc 	andi	r2,r2,255
  8022c4:	1080201c 	xori	r2,r2,128
  8022c8:	10bfe004 	addi	r2,r2,-128
  8022cc:	10000826 	beq	r2,zero,8022f0 <logic+0x1a84>
  8022d0:	e0bffc17 	ldw	r2,-16(fp)
  8022d4:	10804283 	ldbu	r2,266(r2)
  8022d8:	10803fcc 	andi	r2,r2,255
  8022dc:	1080201c 	xori	r2,r2,128
  8022e0:	10bfe004 	addi	r2,r2,-128
  8022e4:	1000021e 	bne	r2,zero,8022f0 <logic+0x1a84>
  8022e8:	00800044 	movi	r2,1
  8022ec:	00000106 	br	8022f4 <logic+0x1a88>
  8022f0:	0005883a 	mov	r2,zero
  8022f4:	1007883a 	mov	r3,r2
  8022f8:	e0bffc17 	ldw	r2,-16(fp)
  8022fc:	10c04d85 	stb	r3,310(r2)
  d->_cg41 = d->_DDDpacemake2_local_URI_state == 0;
  802300:	e0bffc17 	ldw	r2,-16(fp)
  802304:	10801943 	ldbu	r2,101(r2)
  802308:	10803fcc 	andi	r2,r2,255
  80230c:	1080201c 	xori	r2,r2,128
  802310:	10bfe004 	addi	r2,r2,-128
  802314:	1005003a 	cmpeq	r2,r2,zero
  802318:	1007883a 	mov	r3,r2
  80231c:	e0bffc17 	ldw	r2,-16(fp)
  802320:	10c04245 	stb	r3,265(r2)
  d->_g20 = d->_g30_e3 && d->_cg41;
  802324:	e0bffc17 	ldw	r2,-16(fp)
  802328:	10804d83 	ldbu	r2,310(r2)
  80232c:	10803fcc 	andi	r2,r2,255
  802330:	1080201c 	xori	r2,r2,128
  802334:	10bfe004 	addi	r2,r2,-128
  802338:	10000826 	beq	r2,zero,80235c <logic+0x1af0>
  80233c:	e0bffc17 	ldw	r2,-16(fp)
  802340:	10804243 	ldbu	r2,265(r2)
  802344:	10803fcc 	andi	r2,r2,255
  802348:	1080201c 	xori	r2,r2,128
  80234c:	10bfe004 	addi	r2,r2,-128
  802350:	10000226 	beq	r2,zero,80235c <logic+0x1af0>
  802354:	00800044 	movi	r2,1
  802358:	00000106 	br	802360 <logic+0x1af4>
  80235c:	0005883a 	mov	r2,zero
  802360:	1007883a 	mov	r3,r2
  802364:	e0bffc17 	ldw	r2,-16(fp)
  802368:	10c02285 	stb	r3,138(r2)
  if (d->_g20) {
  80236c:	e0bffc17 	ldw	r2,-16(fp)
  802370:	10802283 	ldbu	r2,138(r2)
  802374:	10803fcc 	andi	r2,r2,255
  802378:	1080201c 	xori	r2,r2,128
  80237c:	10bfe004 	addi	r2,r2,-128
  802380:	10000b26 	beq	r2,zero,8023b0 <logic+0x1b44>
    d->VP = 1;
  802384:	e0bffc17 	ldw	r2,-16(fp)
  802388:	00c00044 	movi	r3,1
  80238c:	10c01345 	stb	r3,77(r2)
    d->_DDDpacemake2_local_VP_temp |= 1;
  802390:	e0bffc17 	ldw	r2,-16(fp)
  802394:	10801a43 	ldbu	r2,105(r2)
  802398:	10800054 	ori	r2,r2,1
  80239c:	1007883a 	mov	r3,r2
  8023a0:	e0bffc17 	ldw	r2,-16(fp)
  8023a4:	10c01a45 	stb	r3,105(r2)
    d->_DDDpacemake2_local_AVI_state = 0;
  8023a8:	e0bffc17 	ldw	r2,-16(fp)
  8023ac:	10001805 	stb	zero,96(r2)
  }
  d->_g11 = d->_g34 && !d->_cg35;
  8023b0:	e0bffc17 	ldw	r2,-16(fp)
  8023b4:	10802583 	ldbu	r2,150(r2)
  8023b8:	10803fcc 	andi	r2,r2,255
  8023bc:	1080201c 	xori	r2,r2,128
  8023c0:	10bfe004 	addi	r2,r2,-128
  8023c4:	10000826 	beq	r2,zero,8023e8 <logic+0x1b7c>
  8023c8:	e0bffc17 	ldw	r2,-16(fp)
  8023cc:	108041c3 	ldbu	r2,263(r2)
  8023d0:	10803fcc 	andi	r2,r2,255
  8023d4:	1080201c 	xori	r2,r2,128
  8023d8:	10bfe004 	addi	r2,r2,-128
  8023dc:	1000021e 	bne	r2,zero,8023e8 <logic+0x1b7c>
  8023e0:	00800044 	movi	r2,1
  8023e4:	00000106 	br	8023ec <logic+0x1b80>
  8023e8:	0005883a 	mov	r2,zero
  8023ec:	1007883a 	mov	r3,r2
  8023f0:	e0bffc17 	ldw	r2,-16(fp)
  8023f4:	10c02085 	stb	r3,130(r2)
  d->_cg37 = d->_DDDpacemake2_local__Atrig1;
  8023f8:	e0bffc17 	ldw	r2,-16(fp)
  8023fc:	10c01c43 	ldbu	r3,113(r2)
  802400:	e0bffc17 	ldw	r2,-16(fp)
  802404:	10c04205 	stb	r3,264(r2)
  d->_g20_e2 = d->_g11 && !d->_cg37;
  802408:	e0bffc17 	ldw	r2,-16(fp)
  80240c:	10802083 	ldbu	r2,130(r2)
  802410:	10803fcc 	andi	r2,r2,255
  802414:	1080201c 	xori	r2,r2,128
  802418:	10bfe004 	addi	r2,r2,-128
  80241c:	10000826 	beq	r2,zero,802440 <logic+0x1bd4>
  802420:	e0bffc17 	ldw	r2,-16(fp)
  802424:	10804203 	ldbu	r2,264(r2)
  802428:	10803fcc 	andi	r2,r2,255
  80242c:	1080201c 	xori	r2,r2,128
  802430:	10bfe004 	addi	r2,r2,-128
  802434:	1000021e 	bne	r2,zero,802440 <logic+0x1bd4>
  802438:	00800044 	movi	r2,1
  80243c:	00000106 	br	802444 <logic+0x1bd8>
  802440:	0005883a 	mov	r2,zero
  802444:	1007883a 	mov	r3,r2
  802448:	e0bffc17 	ldw	r2,-16(fp)
  80244c:	10c04d45 	stb	r3,309(r2)
  if (d->_g20_e2) {
  802450:	e0bffc17 	ldw	r2,-16(fp)
  802454:	10804d43 	ldbu	r2,309(r2)
  802458:	10803fcc 	andi	r2,r2,255
  80245c:	1080201c 	xori	r2,r2,128
  802460:	10bfe004 	addi	r2,r2,-128
  802464:	10000b26 	beq	r2,zero,802494 <logic+0x1c28>
    d->VP = 1;
  802468:	e0bffc17 	ldw	r2,-16(fp)
  80246c:	00c00044 	movi	r3,1
  802470:	10c01345 	stb	r3,77(r2)
    d->_DDDpacemake2_local_VP_temp |= 1;
  802474:	e0bffc17 	ldw	r2,-16(fp)
  802478:	10801a43 	ldbu	r2,105(r2)
  80247c:	10800054 	ori	r2,r2,1
  802480:	1007883a 	mov	r3,r2
  802484:	e0bffc17 	ldw	r2,-16(fp)
  802488:	10c01a45 	stb	r3,105(r2)
    d->_DDDpacemake2_local_AVI_state = 0;
  80248c:	e0bffc17 	ldw	r2,-16(fp)
  802490:	10001805 	stb	zero,96(r2)
  }
  d->_g11_e1 = d->_GO || d->_g5 || d->_g29 || d->_g30 || d->_g20 || d->_g20_e2 || d->_g31 && !d->_cg6;
  802494:	e0bffc17 	ldw	r2,-16(fp)
  802498:	10803ec3 	ldbu	r2,251(r2)
  80249c:	10803fcc 	andi	r2,r2,255
  8024a0:	1080201c 	xori	r2,r2,128
  8024a4:	10bfe004 	addi	r2,r2,-128
  8024a8:	10002a1e 	bne	r2,zero,802554 <logic+0x1ce8>
  8024ac:	e0bffc17 	ldw	r2,-16(fp)
  8024b0:	10801f43 	ldbu	r2,125(r2)
  8024b4:	10803fcc 	andi	r2,r2,255
  8024b8:	1080201c 	xori	r2,r2,128
  8024bc:	10bfe004 	addi	r2,r2,-128
  8024c0:	1000241e 	bne	r2,zero,802554 <logic+0x1ce8>
  8024c4:	e0bffc17 	ldw	r2,-16(fp)
  8024c8:	10802443 	ldbu	r2,145(r2)
  8024cc:	10803fcc 	andi	r2,r2,255
  8024d0:	1080201c 	xori	r2,r2,128
  8024d4:	10bfe004 	addi	r2,r2,-128
  8024d8:	10001e1e 	bne	r2,zero,802554 <logic+0x1ce8>
  8024dc:	e0bffc17 	ldw	r2,-16(fp)
  8024e0:	10802483 	ldbu	r2,146(r2)
  8024e4:	10803fcc 	andi	r2,r2,255
  8024e8:	1080201c 	xori	r2,r2,128
  8024ec:	10bfe004 	addi	r2,r2,-128
  8024f0:	1000181e 	bne	r2,zero,802554 <logic+0x1ce8>
  8024f4:	e0bffc17 	ldw	r2,-16(fp)
  8024f8:	10802283 	ldbu	r2,138(r2)
  8024fc:	10803fcc 	andi	r2,r2,255
  802500:	1080201c 	xori	r2,r2,128
  802504:	10bfe004 	addi	r2,r2,-128
  802508:	1000121e 	bne	r2,zero,802554 <logic+0x1ce8>
  80250c:	e0bffc17 	ldw	r2,-16(fp)
  802510:	10804d43 	ldbu	r2,309(r2)
  802514:	10803fcc 	andi	r2,r2,255
  802518:	1080201c 	xori	r2,r2,128
  80251c:	10bfe004 	addi	r2,r2,-128
  802520:	10000c1e 	bne	r2,zero,802554 <logic+0x1ce8>
  802524:	e0bffc17 	ldw	r2,-16(fp)
  802528:	108024c3 	ldbu	r2,147(r2)
  80252c:	10803fcc 	andi	r2,r2,255
  802530:	1080201c 	xori	r2,r2,128
  802534:	10bfe004 	addi	r2,r2,-128
  802538:	10000826 	beq	r2,zero,80255c <logic+0x1cf0>
  80253c:	e0bffc17 	ldw	r2,-16(fp)
  802540:	10803f03 	ldbu	r2,252(r2)
  802544:	10803fcc 	andi	r2,r2,255
  802548:	1080201c 	xori	r2,r2,128
  80254c:	10bfe004 	addi	r2,r2,-128
  802550:	1000021e 	bne	r2,zero,80255c <logic+0x1cf0>
  802554:	00800044 	movi	r2,1
  802558:	00000106 	br	802560 <logic+0x1cf4>
  80255c:	0005883a 	mov	r2,zero
  802560:	1007883a 	mov	r3,r2
  802564:	e0bffc17 	ldw	r2,-16(fp)
  802568:	10c04d05 	stb	r3,308(r2)
  d->_g39 = d->_g11 && d->_cg37 || d->_g30_e3 && !d->_cg41;
  80256c:	e0bffc17 	ldw	r2,-16(fp)
  802570:	10802083 	ldbu	r2,130(r2)
  802574:	10803fcc 	andi	r2,r2,255
  802578:	1080201c 	xori	r2,r2,128
  80257c:	10bfe004 	addi	r2,r2,-128
  802580:	10000626 	beq	r2,zero,80259c <logic+0x1d30>
  802584:	e0bffc17 	ldw	r2,-16(fp)
  802588:	10804203 	ldbu	r2,264(r2)
  80258c:	10803fcc 	andi	r2,r2,255
  802590:	1080201c 	xori	r2,r2,128
  802594:	10bfe004 	addi	r2,r2,-128
  802598:	10000c1e 	bne	r2,zero,8025cc <logic+0x1d60>
  80259c:	e0bffc17 	ldw	r2,-16(fp)
  8025a0:	10804d83 	ldbu	r2,310(r2)
  8025a4:	10803fcc 	andi	r2,r2,255
  8025a8:	1080201c 	xori	r2,r2,128
  8025ac:	10bfe004 	addi	r2,r2,-128
  8025b0:	10000826 	beq	r2,zero,8025d4 <logic+0x1d68>
  8025b4:	e0bffc17 	ldw	r2,-16(fp)
  8025b8:	10804243 	ldbu	r2,265(r2)
  8025bc:	10803fcc 	andi	r2,r2,255
  8025c0:	1080201c 	xori	r2,r2,128
  8025c4:	10bfe004 	addi	r2,r2,-128
  8025c8:	1000021e 	bne	r2,zero,8025d4 <logic+0x1d68>
  8025cc:	00800044 	movi	r2,1
  8025d0:	00000106 	br	8025d8 <logic+0x1d6c>
  8025d4:	0005883a 	mov	r2,zero
  8025d8:	1007883a 	mov	r3,r2
  8025dc:	e0bffc17 	ldw	r2,-16(fp)
  8025e0:	10c02685 	stb	r3,154(r2)
  d->_g35 = d->_pg54_e1;
  8025e4:	e0bffc17 	ldw	r2,-16(fp)
  8025e8:	10c05443 	ldbu	r3,337(r2)
  8025ec:	e0bffc17 	ldw	r2,-16(fp)
  8025f0:	10c025c5 	stb	r3,151(r2)
  d->_cg47 = !d->_DDDpacemake2_local_real_VS && !d->_DDDpacemake2_local_AP_temp;
  8025f4:	e0bffc17 	ldw	r2,-16(fp)
  8025f8:	10801ac3 	ldbu	r2,107(r2)
  8025fc:	10803fcc 	andi	r2,r2,255
  802600:	1080201c 	xori	r2,r2,128
  802604:	10bfe004 	addi	r2,r2,-128
  802608:	1000081e 	bne	r2,zero,80262c <logic+0x1dc0>
  80260c:	e0bffc17 	ldw	r2,-16(fp)
  802610:	10801a03 	ldbu	r2,104(r2)
  802614:	10803fcc 	andi	r2,r2,255
  802618:	1080201c 	xori	r2,r2,128
  80261c:	10bfe004 	addi	r2,r2,-128
  802620:	1000021e 	bne	r2,zero,80262c <logic+0x1dc0>
  802624:	00800044 	movi	r2,1
  802628:	00000106 	br	802630 <logic+0x1dc4>
  80262c:	0005883a 	mov	r2,zero
  802630:	1007883a 	mov	r3,r2
  802634:	e0bffc17 	ldw	r2,-16(fp)
  802638:	10c04305 	stb	r3,268(r2)
  d->_g40 = d->_g35 && d->_cg47;
  80263c:	e0bffc17 	ldw	r2,-16(fp)
  802640:	108025c3 	ldbu	r2,151(r2)
  802644:	10803fcc 	andi	r2,r2,255
  802648:	1080201c 	xori	r2,r2,128
  80264c:	10bfe004 	addi	r2,r2,-128
  802650:	10000826 	beq	r2,zero,802674 <logic+0x1e08>
  802654:	e0bffc17 	ldw	r2,-16(fp)
  802658:	10804303 	ldbu	r2,268(r2)
  80265c:	10803fcc 	andi	r2,r2,255
  802660:	1080201c 	xori	r2,r2,128
  802664:	10bfe004 	addi	r2,r2,-128
  802668:	10000226 	beq	r2,zero,802674 <logic+0x1e08>
  80266c:	00800044 	movi	r2,1
  802670:	00000106 	br	802678 <logic+0x1e0c>
  802674:	0005883a 	mov	r2,zero
  802678:	1007883a 	mov	r3,r2
  80267c:	e0bffc17 	ldw	r2,-16(fp)
  802680:	10c026c5 	stb	r3,155(r2)
  if (d->_g40) {
  802684:	e0bffc17 	ldw	r2,-16(fp)
  802688:	108026c3 	ldbu	r2,155(r2)
  80268c:	10803fcc 	andi	r2,r2,255
  802690:	1080201c 	xori	r2,r2,128
  802694:	10bfe004 	addi	r2,r2,-128
  802698:	10000226 	beq	r2,zero,8026a4 <logic+0x1e38>
    d->AP = 0;
  80269c:	e0bffc17 	ldw	r2,-16(fp)
  8026a0:	10001305 	stb	zero,76(r2)
  }
  d->_g42 = d->_pg53;
  8026a4:	e0bffc17 	ldw	r2,-16(fp)
  8026a8:	10c05483 	ldbu	r3,338(r2)
  8026ac:	e0bffc17 	ldw	r2,-16(fp)
  8026b0:	10c02745 	stb	r3,157(r2)
  d->_cg62 = d->_DDDpacemake2_local_real_AS;
  8026b4:	e0bffc17 	ldw	r2,-16(fp)
  8026b8:	10c01a83 	ldbu	r3,106(r2)
  8026bc:	e0bffc17 	ldw	r2,-16(fp)
  8026c0:	10c04445 	stb	r3,273(r2)
  d->_g43 = d->_g42 && d->_cg62;
  8026c4:	e0bffc17 	ldw	r2,-16(fp)
  8026c8:	10802743 	ldbu	r2,157(r2)
  8026cc:	10803fcc 	andi	r2,r2,255
  8026d0:	1080201c 	xori	r2,r2,128
  8026d4:	10bfe004 	addi	r2,r2,-128
  8026d8:	10000826 	beq	r2,zero,8026fc <logic+0x1e90>
  8026dc:	e0bffc17 	ldw	r2,-16(fp)
  8026e0:	10804443 	ldbu	r2,273(r2)
  8026e4:	10803fcc 	andi	r2,r2,255
  8026e8:	1080201c 	xori	r2,r2,128
  8026ec:	10bfe004 	addi	r2,r2,-128
  8026f0:	10000226 	beq	r2,zero,8026fc <logic+0x1e90>
  8026f4:	00800044 	movi	r2,1
  8026f8:	00000106 	br	802700 <logic+0x1e94>
  8026fc:	0005883a 	mov	r2,zero
  802700:	1007883a 	mov	r3,r2
  802704:	e0bffc17 	ldw	r2,-16(fp)
  802708:	10c02785 	stb	r3,158(r2)
  if (d->_g43) {
  80270c:	e0bffc17 	ldw	r2,-16(fp)
  802710:	10802783 	ldbu	r2,158(r2)
  802714:	10803fcc 	andi	r2,r2,255
  802718:	1080201c 	xori	r2,r2,128
  80271c:	10bfe004 	addi	r2,r2,-128
  802720:	10000326 	beq	r2,zero,802730 <logic+0x1ec4>
    d->_DDDpacemake2_local__Atrig3 = 1;
  802724:	e0bffc17 	ldw	r2,-16(fp)
  802728:	00c00044 	movi	r3,1
  80272c:	10c01cc5 	stb	r3,115(r2)
  }
  d->_g5 = d->_pg147;
  802730:	e0bffc17 	ldw	r2,-16(fp)
  802734:	10c054c3 	ldbu	r3,339(r2)
  802738:	e0bffc17 	ldw	r2,-16(fp)
  80273c:	10c01f45 	stb	r3,125(r2)
  if (d->_g5) {
  802740:	e0bffc17 	ldw	r2,-16(fp)
  802744:	10801f43 	ldbu	r2,125(r2)
  802748:	10803fcc 	andi	r2,r2,255
  80274c:	1080201c 	xori	r2,r2,128
  802750:	10bfe004 	addi	r2,r2,-128
  802754:	10001226 	beq	r2,zero,8027a0 <logic+0x1f34>
    d->AEI_counter += d->deltaT;
  802758:	e13ffc17 	ldw	r4,-16(fp)
  80275c:	20800917 	ldw	r2,36(r4)
  802760:	20c00a17 	ldw	r3,40(r4)
  802764:	e1bffc17 	ldw	r6,-16(fp)
  802768:	31001417 	ldw	r4,80(r6)
  80276c:	31401517 	ldw	r5,84(r6)
  802770:	200d883a 	mov	r6,r4
  802774:	280f883a 	mov	r7,r5
  802778:	1009883a 	mov	r4,r2
  80277c:	180b883a 	mov	r5,r3
  802780:	0805b040 	call	805b04 <__adddf3>
  802784:	1009883a 	mov	r4,r2
  802788:	180b883a 	mov	r5,r3
  80278c:	2005883a 	mov	r2,r4
  802790:	2807883a 	mov	r3,r5
  802794:	e13ffc17 	ldw	r4,-16(fp)
  802798:	20800915 	stw	r2,36(r4)
  80279c:	20c00a15 	stw	r3,40(r4)
  }
  d->_g6 = d->_g42 && !d->_cg62;
  8027a0:	e0bffc17 	ldw	r2,-16(fp)
  8027a4:	10802743 	ldbu	r2,157(r2)
  8027a8:	10803fcc 	andi	r2,r2,255
  8027ac:	1080201c 	xori	r2,r2,128
  8027b0:	10bfe004 	addi	r2,r2,-128
  8027b4:	10000826 	beq	r2,zero,8027d8 <logic+0x1f6c>
  8027b8:	e0bffc17 	ldw	r2,-16(fp)
  8027bc:	10804443 	ldbu	r2,273(r2)
  8027c0:	10803fcc 	andi	r2,r2,255
  8027c4:	1080201c 	xori	r2,r2,128
  8027c8:	10bfe004 	addi	r2,r2,-128
  8027cc:	1000021e 	bne	r2,zero,8027d8 <logic+0x1f6c>
  8027d0:	00800044 	movi	r2,1
  8027d4:	00000106 	br	8027dc <logic+0x1f70>
  8027d8:	0005883a 	mov	r2,zero
  8027dc:	1007883a 	mov	r3,r2
  8027e0:	e0bffc17 	ldw	r2,-16(fp)
  8027e4:	10c01f85 	stb	r3,126(r2)
  d->_cg65 = d->AEI_counter >= d->AEI_DEADLINE;
  8027e8:	e0bffc17 	ldw	r2,-16(fp)
  8027ec:	14000917 	ldw	r16,36(r2)
  8027f0:	14400a17 	ldw	r17,40(r2)
  8027f4:	e0bffc17 	ldw	r2,-16(fp)
  8027f8:	10800217 	ldw	r2,8(r2)
  8027fc:	1009883a 	mov	r4,r2
  802800:	08075940 	call	807594 <__floatsidf>
  802804:	1009883a 	mov	r4,r2
  802808:	180b883a 	mov	r5,r3
  80280c:	04800044 	movi	r18,1
  802810:	200d883a 	mov	r6,r4
  802814:	280f883a 	mov	r7,r5
  802818:	8009883a 	mov	r4,r16
  80281c:	880b883a 	mov	r5,r17
  802820:	08063b00 	call	8063b0 <__gedf2>
  802824:	1000010e 	bge	r2,zero,80282c <logic+0x1fc0>
  802828:	0025883a 	mov	r18,zero
  80282c:	9007883a 	mov	r3,r18
  802830:	e0bffc17 	ldw	r2,-16(fp)
  802834:	10c04405 	stb	r3,272(r2)
  d->_g36 = d->_g6 && d->_cg65;
  802838:	e0bffc17 	ldw	r2,-16(fp)
  80283c:	10801f83 	ldbu	r2,126(r2)
  802840:	10803fcc 	andi	r2,r2,255
  802844:	1080201c 	xori	r2,r2,128
  802848:	10bfe004 	addi	r2,r2,-128
  80284c:	10000826 	beq	r2,zero,802870 <logic+0x2004>
  802850:	e0bffc17 	ldw	r2,-16(fp)
  802854:	10804403 	ldbu	r2,272(r2)
  802858:	10803fcc 	andi	r2,r2,255
  80285c:	1080201c 	xori	r2,r2,128
  802860:	10bfe004 	addi	r2,r2,-128
  802864:	10000226 	beq	r2,zero,802870 <logic+0x2004>
  802868:	00800044 	movi	r2,1
  80286c:	00000106 	br	802874 <logic+0x2008>
  802870:	0005883a 	mov	r2,zero
  802874:	1007883a 	mov	r3,r2
  802878:	e0bffc17 	ldw	r2,-16(fp)
  80287c:	10c02605 	stb	r3,152(r2)
  if (d->_g36) {
  802880:	e0bffc17 	ldw	r2,-16(fp)
  802884:	10802603 	ldbu	r2,152(r2)
  802888:	10803fcc 	andi	r2,r2,255
  80288c:	1080201c 	xori	r2,r2,128
  802890:	10bfe004 	addi	r2,r2,-128
  802894:	10000326 	beq	r2,zero,8028a4 <logic+0x2038>
    d->_DDDpacemake2_local__Atrig4 = 1;
  802898:	e0bffc17 	ldw	r2,-16(fp)
  80289c:	00c00044 	movi	r3,1
  8028a0:	10c01d05 	stb	r3,116(r2)
  }
  d->_g37 = d->_g35 && !d->_cg47;
  8028a4:	e0bffc17 	ldw	r2,-16(fp)
  8028a8:	108025c3 	ldbu	r2,151(r2)
  8028ac:	10803fcc 	andi	r2,r2,255
  8028b0:	1080201c 	xori	r2,r2,128
  8028b4:	10bfe004 	addi	r2,r2,-128
  8028b8:	10000826 	beq	r2,zero,8028dc <logic+0x2070>
  8028bc:	e0bffc17 	ldw	r2,-16(fp)
  8028c0:	10804303 	ldbu	r2,268(r2)
  8028c4:	10803fcc 	andi	r2,r2,255
  8028c8:	1080201c 	xori	r2,r2,128
  8028cc:	10bfe004 	addi	r2,r2,-128
  8028d0:	1000021e 	bne	r2,zero,8028dc <logic+0x2070>
  8028d4:	00800044 	movi	r2,1
  8028d8:	00000106 	br	8028e0 <logic+0x2074>
  8028dc:	0005883a 	mov	r2,zero
  8028e0:	1007883a 	mov	r3,r2
  8028e4:	e0bffc17 	ldw	r2,-16(fp)
  8028e8:	10c02645 	stb	r3,153(r2)
  d->_cg49 = d->_DDDpacemake2_local_real_VS || d->_DDDpacemake2_local_VP_temp;
  8028ec:	e0bffc17 	ldw	r2,-16(fp)
  8028f0:	10801ac3 	ldbu	r2,107(r2)
  8028f4:	10803fcc 	andi	r2,r2,255
  8028f8:	1080201c 	xori	r2,r2,128
  8028fc:	10bfe004 	addi	r2,r2,-128
  802900:	1000061e 	bne	r2,zero,80291c <logic+0x20b0>
  802904:	e0bffc17 	ldw	r2,-16(fp)
  802908:	10801a43 	ldbu	r2,105(r2)
  80290c:	10803fcc 	andi	r2,r2,255
  802910:	1080201c 	xori	r2,r2,128
  802914:	10bfe004 	addi	r2,r2,-128
  802918:	10000226 	beq	r2,zero,802924 <logic+0x20b8>
  80291c:	00800044 	movi	r2,1
  802920:	00000106 	br	802928 <logic+0x20bc>
  802924:	0005883a 	mov	r2,zero
  802928:	1007883a 	mov	r3,r2
  80292c:	e0bffc17 	ldw	r2,-16(fp)
  802930:	10c042c5 	stb	r3,267(r2)
  d->_g41 = d->_g37 && d->_cg49;
  802934:	e0bffc17 	ldw	r2,-16(fp)
  802938:	10802643 	ldbu	r2,153(r2)
  80293c:	10803fcc 	andi	r2,r2,255
  802940:	1080201c 	xori	r2,r2,128
  802944:	10bfe004 	addi	r2,r2,-128
  802948:	10000826 	beq	r2,zero,80296c <logic+0x2100>
  80294c:	e0bffc17 	ldw	r2,-16(fp)
  802950:	108042c3 	ldbu	r2,267(r2)
  802954:	10803fcc 	andi	r2,r2,255
  802958:	1080201c 	xori	r2,r2,128
  80295c:	10bfe004 	addi	r2,r2,-128
  802960:	10000226 	beq	r2,zero,80296c <logic+0x2100>
  802964:	00800044 	movi	r2,1
  802968:	00000106 	br	802970 <logic+0x2104>
  80296c:	0005883a 	mov	r2,zero
  802970:	1007883a 	mov	r3,r2
  802974:	e0bffc17 	ldw	r2,-16(fp)
  802978:	10c02705 	stb	r3,156(r2)
  if (d->_g41) {
  80297c:	e0bffc17 	ldw	r2,-16(fp)
  802980:	10802703 	ldbu	r2,156(r2)
  802984:	10803fcc 	andi	r2,r2,255
  802988:	1080201c 	xori	r2,r2,128
  80298c:	10bfe004 	addi	r2,r2,-128
  802990:	10000a26 	beq	r2,zero,8029bc <logic+0x2150>
    d->_DDDpacemake2_local_AEI_state = 1;
  802994:	e0bffc17 	ldw	r2,-16(fp)
  802998:	00c00044 	movi	r3,1
  80299c:	10c01845 	stb	r3,97(r2)
    d->AEI_counter = 0;
  8029a0:	e0bffc17 	ldw	r2,-16(fp)
  8029a4:	10000915 	stw	zero,36(r2)
  8029a8:	10000a15 	stw	zero,40(r2)
    d->_DDDpacemake2_local__Atrig3 = 0;
  8029ac:	e0bffc17 	ldw	r2,-16(fp)
  8029b0:	10001cc5 	stb	zero,115(r2)
    d->_DDDpacemake2_local__Atrig4 = 0;
  8029b4:	e0bffc17 	ldw	r2,-16(fp)
  8029b8:	10001d05 	stb	zero,116(r2)
  }
  d->_g62 = d->_pg55;
  8029bc:	e0bffc17 	ldw	r2,-16(fp)
  8029c0:	10c05503 	ldbu	r3,340(r2)
  8029c4:	e0bffc17 	ldw	r2,-16(fp)
  8029c8:	10c02ac5 	stb	r3,171(r2)
  d->_g47 = d->_pg58;
  8029cc:	e0bffc17 	ldw	r2,-16(fp)
  8029d0:	10c05543 	ldbu	r3,341(r2)
  8029d4:	e0bffc17 	ldw	r2,-16(fp)
  8029d8:	10c027c5 	stb	r3,159(r2)
  d->_g59 = d->_g41 || d->_g62 || d->_g47;
  8029dc:	e0bffc17 	ldw	r2,-16(fp)
  8029e0:	10802703 	ldbu	r2,156(r2)
  8029e4:	10803fcc 	andi	r2,r2,255
  8029e8:	1080201c 	xori	r2,r2,128
  8029ec:	10bfe004 	addi	r2,r2,-128
  8029f0:	10000c1e 	bne	r2,zero,802a24 <logic+0x21b8>
  8029f4:	e0bffc17 	ldw	r2,-16(fp)
  8029f8:	10802ac3 	ldbu	r2,171(r2)
  8029fc:	10803fcc 	andi	r2,r2,255
  802a00:	1080201c 	xori	r2,r2,128
  802a04:	10bfe004 	addi	r2,r2,-128
  802a08:	1000061e 	bne	r2,zero,802a24 <logic+0x21b8>
  802a0c:	e0bffc17 	ldw	r2,-16(fp)
  802a10:	108027c3 	ldbu	r2,159(r2)
  802a14:	10803fcc 	andi	r2,r2,255
  802a18:	1080201c 	xori	r2,r2,128
  802a1c:	10bfe004 	addi	r2,r2,-128
  802a20:	10000226 	beq	r2,zero,802a2c <logic+0x21c0>
  802a24:	00800044 	movi	r2,1
  802a28:	00000106 	br	802a30 <logic+0x21c4>
  802a2c:	0005883a 	mov	r2,zero
  802a30:	1007883a 	mov	r3,r2
  802a34:	e0bffc17 	ldw	r2,-16(fp)
  802a38:	10c02a85 	stb	r3,170(r2)
  d->_cg52 = d->AEI_counter < d->AEI_DEADLINE;
  802a3c:	e0bffc17 	ldw	r2,-16(fp)
  802a40:	14000917 	ldw	r16,36(r2)
  802a44:	14400a17 	ldw	r17,40(r2)
  802a48:	e0bffc17 	ldw	r2,-16(fp)
  802a4c:	10800217 	ldw	r2,8(r2)
  802a50:	1009883a 	mov	r4,r2
  802a54:	08075940 	call	807594 <__floatsidf>
  802a58:	1009883a 	mov	r4,r2
  802a5c:	180b883a 	mov	r5,r3
  802a60:	04800044 	movi	r18,1
  802a64:	200d883a 	mov	r6,r4
  802a68:	280f883a 	mov	r7,r5
  802a6c:	8009883a 	mov	r4,r16
  802a70:	880b883a 	mov	r5,r17
  802a74:	080648c0 	call	80648c <__ledf2>
  802a78:	10000116 	blt	r2,zero,802a80 <logic+0x2214>
  802a7c:	0025883a 	mov	r18,zero
  802a80:	9007883a 	mov	r3,r18
  802a84:	e0bffc17 	ldw	r2,-16(fp)
  802a88:	10c04345 	stb	r3,269(r2)
  d->_g56 = d->_g59 && !d->_cg52;
  802a8c:	e0bffc17 	ldw	r2,-16(fp)
  802a90:	10802a83 	ldbu	r2,170(r2)
  802a94:	10803fcc 	andi	r2,r2,255
  802a98:	1080201c 	xori	r2,r2,128
  802a9c:	10bfe004 	addi	r2,r2,-128
  802aa0:	10000826 	beq	r2,zero,802ac4 <logic+0x2258>
  802aa4:	e0bffc17 	ldw	r2,-16(fp)
  802aa8:	10804343 	ldbu	r2,269(r2)
  802aac:	10803fcc 	andi	r2,r2,255
  802ab0:	1080201c 	xori	r2,r2,128
  802ab4:	10bfe004 	addi	r2,r2,-128
  802ab8:	1000021e 	bne	r2,zero,802ac4 <logic+0x2258>
  802abc:	00800044 	movi	r2,1
  802ac0:	00000106 	br	802ac8 <logic+0x225c>
  802ac4:	0005883a 	mov	r2,zero
  802ac8:	1007883a 	mov	r3,r2
  802acc:	e0bffc17 	ldw	r2,-16(fp)
  802ad0:	10c029c5 	stb	r3,167(r2)
  d->_cg57 = d->_DDDpacemake2_local__Atrig3 || d->_DDDpacemake2_local__Atrig4;
  802ad4:	e0bffc17 	ldw	r2,-16(fp)
  802ad8:	10801cc3 	ldbu	r2,115(r2)
  802adc:	10803fcc 	andi	r2,r2,255
  802ae0:	1080201c 	xori	r2,r2,128
  802ae4:	10bfe004 	addi	r2,r2,-128
  802ae8:	1000061e 	bne	r2,zero,802b04 <logic+0x2298>
  802aec:	e0bffc17 	ldw	r2,-16(fp)
  802af0:	10801d03 	ldbu	r2,116(r2)
  802af4:	10803fcc 	andi	r2,r2,255
  802af8:	1080201c 	xori	r2,r2,128
  802afc:	10bfe004 	addi	r2,r2,-128
  802b00:	10000226 	beq	r2,zero,802b0c <logic+0x22a0>
  802b04:	00800044 	movi	r2,1
  802b08:	00000106 	br	802b10 <logic+0x22a4>
  802b0c:	0005883a 	mov	r2,zero
  802b10:	1007883a 	mov	r3,r2
  802b14:	e0bffc17 	ldw	r2,-16(fp)
  802b18:	10c043c5 	stb	r3,271(r2)
  d->_g58 = d->_g56 && !d->_cg57;
  802b1c:	e0bffc17 	ldw	r2,-16(fp)
  802b20:	108029c3 	ldbu	r2,167(r2)
  802b24:	10803fcc 	andi	r2,r2,255
  802b28:	1080201c 	xori	r2,r2,128
  802b2c:	10bfe004 	addi	r2,r2,-128
  802b30:	10000826 	beq	r2,zero,802b54 <logic+0x22e8>
  802b34:	e0bffc17 	ldw	r2,-16(fp)
  802b38:	108043c3 	ldbu	r2,271(r2)
  802b3c:	10803fcc 	andi	r2,r2,255
  802b40:	1080201c 	xori	r2,r2,128
  802b44:	10bfe004 	addi	r2,r2,-128
  802b48:	1000021e 	bne	r2,zero,802b54 <logic+0x22e8>
  802b4c:	00800044 	movi	r2,1
  802b50:	00000106 	br	802b58 <logic+0x22ec>
  802b54:	0005883a 	mov	r2,zero
  802b58:	1007883a 	mov	r3,r2
  802b5c:	e0bffc17 	ldw	r2,-16(fp)
  802b60:	10c02a45 	stb	r3,169(r2)
  d->_g52 = d->_g59 && d->_cg52;
  802b64:	e0bffc17 	ldw	r2,-16(fp)
  802b68:	10802a83 	ldbu	r2,170(r2)
  802b6c:	10803fcc 	andi	r2,r2,255
  802b70:	1080201c 	xori	r2,r2,128
  802b74:	10bfe004 	addi	r2,r2,-128
  802b78:	10000826 	beq	r2,zero,802b9c <logic+0x2330>
  802b7c:	e0bffc17 	ldw	r2,-16(fp)
  802b80:	10804343 	ldbu	r2,269(r2)
  802b84:	10803fcc 	andi	r2,r2,255
  802b88:	1080201c 	xori	r2,r2,128
  802b8c:	10bfe004 	addi	r2,r2,-128
  802b90:	10000226 	beq	r2,zero,802b9c <logic+0x2330>
  802b94:	00800044 	movi	r2,1
  802b98:	00000106 	br	802ba0 <logic+0x2334>
  802b9c:	0005883a 	mov	r2,zero
  802ba0:	1007883a 	mov	r3,r2
  802ba4:	e0bffc17 	ldw	r2,-16(fp)
  802ba8:	10c028c5 	stb	r3,163(r2)
  if (d->_g52) {
  802bac:	e0bffc17 	ldw	r2,-16(fp)
  802bb0:	108028c3 	ldbu	r2,163(r2)
  802bb4:	10803fcc 	andi	r2,r2,255
  802bb8:	1080201c 	xori	r2,r2,128
  802bbc:	10bfe004 	addi	r2,r2,-128
  802bc0:	10003426 	beq	r2,zero,802c94 <logic+0x2428>
    d->sleepT = (d->sleepT < (d->AEI_DEADLINE - d->AEI_counter)) ? d->sleepT : (d->AEI_DEADLINE - d->AEI_counter);
  802bc4:	e0bffc17 	ldw	r2,-16(fp)
  802bc8:	14001617 	ldw	r16,88(r2)
  802bcc:	14401717 	ldw	r17,92(r2)
  802bd0:	e0bffc17 	ldw	r2,-16(fp)
  802bd4:	10800217 	ldw	r2,8(r2)
  802bd8:	1009883a 	mov	r4,r2
  802bdc:	08075940 	call	807594 <__floatsidf>
  802be0:	1011883a 	mov	r8,r2
  802be4:	1813883a 	mov	r9,r3
  802be8:	e13ffc17 	ldw	r4,-16(fp)
  802bec:	20800917 	ldw	r2,36(r4)
  802bf0:	20c00a17 	ldw	r3,40(r4)
  802bf4:	100d883a 	mov	r6,r2
  802bf8:	180f883a 	mov	r7,r3
  802bfc:	4009883a 	mov	r4,r8
  802c00:	480b883a 	mov	r5,r9
  802c04:	0806c980 	call	806c98 <__subdf3>
  802c08:	1009883a 	mov	r4,r2
  802c0c:	180b883a 	mov	r5,r3
  802c10:	2005883a 	mov	r2,r4
  802c14:	2807883a 	mov	r3,r5
  802c18:	100d883a 	mov	r6,r2
  802c1c:	180f883a 	mov	r7,r3
  802c20:	8009883a 	mov	r4,r16
  802c24:	880b883a 	mov	r5,r17
  802c28:	080648c0 	call	80648c <__ledf2>
  802c2c:	1000040e 	bge	r2,zero,802c40 <logic+0x23d4>
  802c30:	e13ffc17 	ldw	r4,-16(fp)
  802c34:	20801617 	ldw	r2,88(r4)
  802c38:	20c01717 	ldw	r3,92(r4)
  802c3c:	00001206 	br	802c88 <logic+0x241c>
  802c40:	e0bffc17 	ldw	r2,-16(fp)
  802c44:	10800217 	ldw	r2,8(r2)
  802c48:	1009883a 	mov	r4,r2
  802c4c:	08075940 	call	807594 <__floatsidf>
  802c50:	1011883a 	mov	r8,r2
  802c54:	1813883a 	mov	r9,r3
  802c58:	e13ffc17 	ldw	r4,-16(fp)
  802c5c:	20800917 	ldw	r2,36(r4)
  802c60:	20c00a17 	ldw	r3,40(r4)
  802c64:	100d883a 	mov	r6,r2
  802c68:	180f883a 	mov	r7,r3
  802c6c:	4009883a 	mov	r4,r8
  802c70:	480b883a 	mov	r5,r9
  802c74:	0806c980 	call	806c98 <__subdf3>
  802c78:	1009883a 	mov	r4,r2
  802c7c:	180b883a 	mov	r5,r3
  802c80:	2005883a 	mov	r2,r4
  802c84:	2807883a 	mov	r3,r5
  802c88:	e13ffc17 	ldw	r4,-16(fp)
  802c8c:	20801615 	stw	r2,88(r4)
  802c90:	20c01715 	stw	r3,92(r4)
  }
  d->_cg53 = d->_DDDpacemake2_local__Atrig3 || d->_DDDpacemake2_local__Atrig4;
  802c94:	e0bffc17 	ldw	r2,-16(fp)
  802c98:	10801cc3 	ldbu	r2,115(r2)
  802c9c:	10803fcc 	andi	r2,r2,255
  802ca0:	1080201c 	xori	r2,r2,128
  802ca4:	10bfe004 	addi	r2,r2,-128
  802ca8:	1000061e 	bne	r2,zero,802cc4 <logic+0x2458>
  802cac:	e0bffc17 	ldw	r2,-16(fp)
  802cb0:	10801d03 	ldbu	r2,116(r2)
  802cb4:	10803fcc 	andi	r2,r2,255
  802cb8:	1080201c 	xori	r2,r2,128
  802cbc:	10bfe004 	addi	r2,r2,-128
  802cc0:	10000226 	beq	r2,zero,802ccc <logic+0x2460>
  802cc4:	00800044 	movi	r2,1
  802cc8:	00000106 	br	802cd0 <logic+0x2464>
  802ccc:	0005883a 	mov	r2,zero
  802cd0:	1007883a 	mov	r3,r2
  802cd4:	e0bffc17 	ldw	r2,-16(fp)
  802cd8:	10c04385 	stb	r3,270(r2)
  d->_g55 = d->_g52 && !d->_cg53;
  802cdc:	e0bffc17 	ldw	r2,-16(fp)
  802ce0:	108028c3 	ldbu	r2,163(r2)
  802ce4:	10803fcc 	andi	r2,r2,255
  802ce8:	1080201c 	xori	r2,r2,128
  802cec:	10bfe004 	addi	r2,r2,-128
  802cf0:	10000826 	beq	r2,zero,802d14 <logic+0x24a8>
  802cf4:	e0bffc17 	ldw	r2,-16(fp)
  802cf8:	10804383 	ldbu	r2,270(r2)
  802cfc:	10803fcc 	andi	r2,r2,255
  802d00:	1080201c 	xori	r2,r2,128
  802d04:	10bfe004 	addi	r2,r2,-128
  802d08:	1000021e 	bne	r2,zero,802d14 <logic+0x24a8>
  802d0c:	00800044 	movi	r2,1
  802d10:	00000106 	br	802d18 <logic+0x24ac>
  802d14:	0005883a 	mov	r2,zero
  802d18:	1007883a 	mov	r3,r2
  802d1c:	e0bffc17 	ldw	r2,-16(fp)
  802d20:	10c02985 	stb	r3,166(r2)
  d->_g54_e1 = !(d->_g58 || d->_g55);
  802d24:	e0bffc17 	ldw	r2,-16(fp)
  802d28:	10802a43 	ldbu	r2,169(r2)
  802d2c:	10803fcc 	andi	r2,r2,255
  802d30:	1080201c 	xori	r2,r2,128
  802d34:	10bfe004 	addi	r2,r2,-128
  802d38:	1000081e 	bne	r2,zero,802d5c <logic+0x24f0>
  802d3c:	e0bffc17 	ldw	r2,-16(fp)
  802d40:	10802983 	ldbu	r2,166(r2)
  802d44:	10803fcc 	andi	r2,r2,255
  802d48:	1080201c 	xori	r2,r2,128
  802d4c:	10bfe004 	addi	r2,r2,-128
  802d50:	1000021e 	bne	r2,zero,802d5c <logic+0x24f0>
  802d54:	00800044 	movi	r2,1
  802d58:	00000106 	br	802d60 <logic+0x24f4>
  802d5c:	0005883a 	mov	r2,zero
  802d60:	1007883a 	mov	r3,r2
  802d64:	e0bffc17 	ldw	r2,-16(fp)
  802d68:	10c04dc5 	stb	r3,311(r2)
  d->_g57 = d->_g52 && d->_cg53 || d->_g56 && d->_cg57;
  802d6c:	e0bffc17 	ldw	r2,-16(fp)
  802d70:	108028c3 	ldbu	r2,163(r2)
  802d74:	10803fcc 	andi	r2,r2,255
  802d78:	1080201c 	xori	r2,r2,128
  802d7c:	10bfe004 	addi	r2,r2,-128
  802d80:	10000626 	beq	r2,zero,802d9c <logic+0x2530>
  802d84:	e0bffc17 	ldw	r2,-16(fp)
  802d88:	10804383 	ldbu	r2,270(r2)
  802d8c:	10803fcc 	andi	r2,r2,255
  802d90:	1080201c 	xori	r2,r2,128
  802d94:	10bfe004 	addi	r2,r2,-128
  802d98:	10000c1e 	bne	r2,zero,802dcc <logic+0x2560>
  802d9c:	e0bffc17 	ldw	r2,-16(fp)
  802da0:	108029c3 	ldbu	r2,167(r2)
  802da4:	10803fcc 	andi	r2,r2,255
  802da8:	1080201c 	xori	r2,r2,128
  802dac:	10bfe004 	addi	r2,r2,-128
  802db0:	10000826 	beq	r2,zero,802dd4 <logic+0x2568>
  802db4:	e0bffc17 	ldw	r2,-16(fp)
  802db8:	108043c3 	ldbu	r2,271(r2)
  802dbc:	10803fcc 	andi	r2,r2,255
  802dc0:	1080201c 	xori	r2,r2,128
  802dc4:	10bfe004 	addi	r2,r2,-128
  802dc8:	10000226 	beq	r2,zero,802dd4 <logic+0x2568>
  802dcc:	00800044 	movi	r2,1
  802dd0:	00000106 	br	802dd8 <logic+0x256c>
  802dd4:	0005883a 	mov	r2,zero
  802dd8:	1007883a 	mov	r3,r2
  802ddc:	e0bffc17 	ldw	r2,-16(fp)
  802de0:	10c02a05 	stb	r3,168(r2)
  d->_g53 = d->_g41 || d->_g6 && !d->_cg65;
  802de4:	e0bffc17 	ldw	r2,-16(fp)
  802de8:	10802703 	ldbu	r2,156(r2)
  802dec:	10803fcc 	andi	r2,r2,255
  802df0:	1080201c 	xori	r2,r2,128
  802df4:	10bfe004 	addi	r2,r2,-128
  802df8:	10000c1e 	bne	r2,zero,802e2c <logic+0x25c0>
  802dfc:	e0bffc17 	ldw	r2,-16(fp)
  802e00:	10801f83 	ldbu	r2,126(r2)
  802e04:	10803fcc 	andi	r2,r2,255
  802e08:	1080201c 	xori	r2,r2,128
  802e0c:	10bfe004 	addi	r2,r2,-128
  802e10:	10000826 	beq	r2,zero,802e34 <logic+0x25c8>
  802e14:	e0bffc17 	ldw	r2,-16(fp)
  802e18:	10804403 	ldbu	r2,272(r2)
  802e1c:	10803fcc 	andi	r2,r2,255
  802e20:	1080201c 	xori	r2,r2,128
  802e24:	10bfe004 	addi	r2,r2,-128
  802e28:	1000021e 	bne	r2,zero,802e34 <logic+0x25c8>
  802e2c:	00800044 	movi	r2,1
  802e30:	00000106 	br	802e38 <logic+0x25cc>
  802e34:	0005883a 	mov	r2,zero
  802e38:	1007883a 	mov	r3,r2
  802e3c:	e0bffc17 	ldw	r2,-16(fp)
  802e40:	10c02905 	stb	r3,164(r2)
  d->_g65 = !d->_g53;
  802e44:	e0bffc17 	ldw	r2,-16(fp)
  802e48:	10802903 	ldbu	r2,164(r2)
  802e4c:	10803fcc 	andi	r2,r2,255
  802e50:	1080201c 	xori	r2,r2,128
  802e54:	10bfe004 	addi	r2,r2,-128
  802e58:	1005003a 	cmpeq	r2,r2,zero
  802e5c:	1007883a 	mov	r3,r2
  802e60:	e0bffc17 	ldw	r2,-16(fp)
  802e64:	10c02b85 	stb	r3,174(r2)
  d->_g50 = d->_g43 || d->_g36;
  802e68:	e0bffc17 	ldw	r2,-16(fp)
  802e6c:	10802783 	ldbu	r2,158(r2)
  802e70:	10803fcc 	andi	r2,r2,255
  802e74:	1080201c 	xori	r2,r2,128
  802e78:	10bfe004 	addi	r2,r2,-128
  802e7c:	1000061e 	bne	r2,zero,802e98 <logic+0x262c>
  802e80:	e0bffc17 	ldw	r2,-16(fp)
  802e84:	10802603 	ldbu	r2,152(r2)
  802e88:	10803fcc 	andi	r2,r2,255
  802e8c:	1080201c 	xori	r2,r2,128
  802e90:	10bfe004 	addi	r2,r2,-128
  802e94:	10000226 	beq	r2,zero,802ea0 <logic+0x2634>
  802e98:	00800044 	movi	r2,1
  802e9c:	00000106 	br	802ea4 <logic+0x2638>
  802ea0:	0005883a 	mov	r2,zero
  802ea4:	1007883a 	mov	r3,r2
  802ea8:	e0bffc17 	ldw	r2,-16(fp)
  802eac:	10c02885 	stb	r3,162(r2)
  d->_g66 = (d->_g54_e1 || d->_g57) && (d->_g65 || d->_g50) && (d->_g57 || d->_g50);
  802eb0:	e0bffc17 	ldw	r2,-16(fp)
  802eb4:	10804dc3 	ldbu	r2,311(r2)
  802eb8:	10803fcc 	andi	r2,r2,255
  802ebc:	1080201c 	xori	r2,r2,128
  802ec0:	10bfe004 	addi	r2,r2,-128
  802ec4:	1000061e 	bne	r2,zero,802ee0 <logic+0x2674>
  802ec8:	e0bffc17 	ldw	r2,-16(fp)
  802ecc:	10802a03 	ldbu	r2,168(r2)
  802ed0:	10803fcc 	andi	r2,r2,255
  802ed4:	1080201c 	xori	r2,r2,128
  802ed8:	10bfe004 	addi	r2,r2,-128
  802edc:	10001a26 	beq	r2,zero,802f48 <logic+0x26dc>
  802ee0:	e0bffc17 	ldw	r2,-16(fp)
  802ee4:	10802b83 	ldbu	r2,174(r2)
  802ee8:	10803fcc 	andi	r2,r2,255
  802eec:	1080201c 	xori	r2,r2,128
  802ef0:	10bfe004 	addi	r2,r2,-128
  802ef4:	1000061e 	bne	r2,zero,802f10 <logic+0x26a4>
  802ef8:	e0bffc17 	ldw	r2,-16(fp)
  802efc:	10802883 	ldbu	r2,162(r2)
  802f00:	10803fcc 	andi	r2,r2,255
  802f04:	1080201c 	xori	r2,r2,128
  802f08:	10bfe004 	addi	r2,r2,-128
  802f0c:	10000e26 	beq	r2,zero,802f48 <logic+0x26dc>
  802f10:	e0bffc17 	ldw	r2,-16(fp)
  802f14:	10802a03 	ldbu	r2,168(r2)
  802f18:	10803fcc 	andi	r2,r2,255
  802f1c:	1080201c 	xori	r2,r2,128
  802f20:	10bfe004 	addi	r2,r2,-128
  802f24:	1000061e 	bne	r2,zero,802f40 <logic+0x26d4>
  802f28:	e0bffc17 	ldw	r2,-16(fp)
  802f2c:	10802883 	ldbu	r2,162(r2)
  802f30:	10803fcc 	andi	r2,r2,255
  802f34:	1080201c 	xori	r2,r2,128
  802f38:	10bfe004 	addi	r2,r2,-128
  802f3c:	10000226 	beq	r2,zero,802f48 <logic+0x26dc>
  802f40:	00800044 	movi	r2,1
  802f44:	00000106 	br	802f4c <logic+0x26e0>
  802f48:	0005883a 	mov	r2,zero
  802f4c:	1007883a 	mov	r3,r2
  802f50:	e0bffc17 	ldw	r2,-16(fp)
  802f54:	10c02bc5 	stb	r3,175(r2)
  d->_cg67 = d->_DDDpacemake2_local__Atrig3;
  802f58:	e0bffc17 	ldw	r2,-16(fp)
  802f5c:	10c01cc3 	ldbu	r3,115(r2)
  802f60:	e0bffc17 	ldw	r2,-16(fp)
  802f64:	10c04485 	stb	r3,274(r2)
  d->_g63 = d->_g66 && d->_cg67;
  802f68:	e0bffc17 	ldw	r2,-16(fp)
  802f6c:	10802bc3 	ldbu	r2,175(r2)
  802f70:	10803fcc 	andi	r2,r2,255
  802f74:	1080201c 	xori	r2,r2,128
  802f78:	10bfe004 	addi	r2,r2,-128
  802f7c:	10000826 	beq	r2,zero,802fa0 <logic+0x2734>
  802f80:	e0bffc17 	ldw	r2,-16(fp)
  802f84:	10804483 	ldbu	r2,274(r2)
  802f88:	10803fcc 	andi	r2,r2,255
  802f8c:	1080201c 	xori	r2,r2,128
  802f90:	10bfe004 	addi	r2,r2,-128
  802f94:	10000226 	beq	r2,zero,802fa0 <logic+0x2734>
  802f98:	00800044 	movi	r2,1
  802f9c:	00000106 	br	802fa4 <logic+0x2738>
  802fa0:	0005883a 	mov	r2,zero
  802fa4:	1007883a 	mov	r3,r2
  802fa8:	e0bffc17 	ldw	r2,-16(fp)
  802fac:	10c02b05 	stb	r3,172(r2)
  if (d->_g63) {
  802fb0:	e0bffc17 	ldw	r2,-16(fp)
  802fb4:	10802b03 	ldbu	r2,172(r2)
  802fb8:	10803fcc 	andi	r2,r2,255
  802fbc:	1080201c 	xori	r2,r2,128
  802fc0:	10bfe004 	addi	r2,r2,-128
  802fc4:	10000426 	beq	r2,zero,802fd8 <logic+0x276c>
    d->_DDDpacemake2_local_AEI_state = 0;
  802fc8:	e0bffc17 	ldw	r2,-16(fp)
  802fcc:	10001845 	stb	zero,97(r2)
    d->AP = 0;
  802fd0:	e0bffc17 	ldw	r2,-16(fp)
  802fd4:	10001305 	stb	zero,76(r2)
  }
  d->_g64 = d->_g66 && !d->_cg67;
  802fd8:	e0bffc17 	ldw	r2,-16(fp)
  802fdc:	10802bc3 	ldbu	r2,175(r2)
  802fe0:	10803fcc 	andi	r2,r2,255
  802fe4:	1080201c 	xori	r2,r2,128
  802fe8:	10bfe004 	addi	r2,r2,-128
  802fec:	10000826 	beq	r2,zero,803010 <logic+0x27a4>
  802ff0:	e0bffc17 	ldw	r2,-16(fp)
  802ff4:	10804483 	ldbu	r2,274(r2)
  802ff8:	10803fcc 	andi	r2,r2,255
  802ffc:	1080201c 	xori	r2,r2,128
  803000:	10bfe004 	addi	r2,r2,-128
  803004:	1000021e 	bne	r2,zero,803010 <logic+0x27a4>
  803008:	00800044 	movi	r2,1
  80300c:	00000106 	br	803014 <logic+0x27a8>
  803010:	0005883a 	mov	r2,zero
  803014:	1007883a 	mov	r3,r2
  803018:	e0bffc17 	ldw	r2,-16(fp)
  80301c:	10c02b45 	stb	r3,173(r2)
  if (d->_g64) {
  803020:	e0bffc17 	ldw	r2,-16(fp)
  803024:	10802b43 	ldbu	r2,173(r2)
  803028:	10803fcc 	andi	r2,r2,255
  80302c:	1080201c 	xori	r2,r2,128
  803030:	10bfe004 	addi	r2,r2,-128
  803034:	10000b26 	beq	r2,zero,803064 <logic+0x27f8>
    d->AP = 1;
  803038:	e0bffc17 	ldw	r2,-16(fp)
  80303c:	00c00044 	movi	r3,1
  803040:	10c01305 	stb	r3,76(r2)
    d->_DDDpacemake2_local_AP_temp |= 1;
  803044:	e0bffc17 	ldw	r2,-16(fp)
  803048:	10801a03 	ldbu	r2,104(r2)
  80304c:	10800054 	ori	r2,r2,1
  803050:	1007883a 	mov	r3,r2
  803054:	e0bffc17 	ldw	r2,-16(fp)
  803058:	10c01a05 	stb	r3,104(r2)
    d->_DDDpacemake2_local_AEI_state = 0;
  80305c:	e0bffc17 	ldw	r2,-16(fp)
  803060:	10001845 	stb	zero,97(r2)
  }
  d->_g54_e1 = d->_GO || d->_g40 || d->_g63 || d->_g64 || d->_g37 && !d->_cg49;
  803064:	e0bffc17 	ldw	r2,-16(fp)
  803068:	10803ec3 	ldbu	r2,251(r2)
  80306c:	10803fcc 	andi	r2,r2,255
  803070:	1080201c 	xori	r2,r2,128
  803074:	10bfe004 	addi	r2,r2,-128
  803078:	10001e1e 	bne	r2,zero,8030f4 <logic+0x2888>
  80307c:	e0bffc17 	ldw	r2,-16(fp)
  803080:	108026c3 	ldbu	r2,155(r2)
  803084:	10803fcc 	andi	r2,r2,255
  803088:	1080201c 	xori	r2,r2,128
  80308c:	10bfe004 	addi	r2,r2,-128
  803090:	1000181e 	bne	r2,zero,8030f4 <logic+0x2888>
  803094:	e0bffc17 	ldw	r2,-16(fp)
  803098:	10802b03 	ldbu	r2,172(r2)
  80309c:	10803fcc 	andi	r2,r2,255
  8030a0:	1080201c 	xori	r2,r2,128
  8030a4:	10bfe004 	addi	r2,r2,-128
  8030a8:	1000121e 	bne	r2,zero,8030f4 <logic+0x2888>
  8030ac:	e0bffc17 	ldw	r2,-16(fp)
  8030b0:	10802b43 	ldbu	r2,173(r2)
  8030b4:	10803fcc 	andi	r2,r2,255
  8030b8:	1080201c 	xori	r2,r2,128
  8030bc:	10bfe004 	addi	r2,r2,-128
  8030c0:	10000c1e 	bne	r2,zero,8030f4 <logic+0x2888>
  8030c4:	e0bffc17 	ldw	r2,-16(fp)
  8030c8:	10802643 	ldbu	r2,153(r2)
  8030cc:	10803fcc 	andi	r2,r2,255
  8030d0:	1080201c 	xori	r2,r2,128
  8030d4:	10bfe004 	addi	r2,r2,-128
  8030d8:	10000826 	beq	r2,zero,8030fc <logic+0x2890>
  8030dc:	e0bffc17 	ldw	r2,-16(fp)
  8030e0:	108042c3 	ldbu	r2,267(r2)
  8030e4:	10803fcc 	andi	r2,r2,255
  8030e8:	1080201c 	xori	r2,r2,128
  8030ec:	10bfe004 	addi	r2,r2,-128
  8030f0:	1000021e 	bne	r2,zero,8030fc <logic+0x2890>
  8030f4:	00800044 	movi	r2,1
  8030f8:	00000106 	br	803100 <logic+0x2894>
  8030fc:	0005883a 	mov	r2,zero
  803100:	1007883a 	mov	r3,r2
  803104:	e0bffc17 	ldw	r2,-16(fp)
  803108:	10c04dc5 	stb	r3,311(r2)
  d->_g54 = d->_pg94;
  80310c:	e0bffc17 	ldw	r2,-16(fp)
  803110:	10c05583 	ldbu	r3,342(r2)
  803114:	e0bffc17 	ldw	r2,-16(fp)
  803118:	10c02945 	stb	r3,165(r2)
  d->_g64_e2 = d->_pg98;
  80311c:	e0bffc17 	ldw	r2,-16(fp)
  803120:	10c055c3 	ldbu	r3,343(r2)
  803124:	e0bffc17 	ldw	r2,-16(fp)
  803128:	10c04e05 	stb	r3,312(r2)
  d->_g67 = !(d->_g54 || d->_g64_e2);
  80312c:	e0bffc17 	ldw	r2,-16(fp)
  803130:	10802943 	ldbu	r2,165(r2)
  803134:	10803fcc 	andi	r2,r2,255
  803138:	1080201c 	xori	r2,r2,128
  80313c:	10bfe004 	addi	r2,r2,-128
  803140:	1000081e 	bne	r2,zero,803164 <logic+0x28f8>
  803144:	e0bffc17 	ldw	r2,-16(fp)
  803148:	10804e03 	ldbu	r2,312(r2)
  80314c:	10803fcc 	andi	r2,r2,255
  803150:	1080201c 	xori	r2,r2,128
  803154:	10bfe004 	addi	r2,r2,-128
  803158:	1000021e 	bne	r2,zero,803164 <logic+0x28f8>
  80315c:	00800044 	movi	r2,1
  803160:	00000106 	br	803168 <logic+0x28fc>
  803164:	0005883a 	mov	r2,zero
  803168:	1007883a 	mov	r3,r2
  80316c:	e0bffc17 	ldw	r2,-16(fp)
  803170:	10c02c05 	stb	r3,176(r2)
  d->_g48 = d->_pg95;
  803174:	e0bffc17 	ldw	r2,-16(fp)
  803178:	10c05603 	ldbu	r3,344(r2)
  80317c:	e0bffc17 	ldw	r2,-16(fp)
  803180:	10c02805 	stb	r3,160(r2)
  d->_g49 = d->_g48 && d->AS;
  803184:	e0bffc17 	ldw	r2,-16(fp)
  803188:	10802803 	ldbu	r2,160(r2)
  80318c:	10803fcc 	andi	r2,r2,255
  803190:	1080201c 	xori	r2,r2,128
  803194:	10bfe004 	addi	r2,r2,-128
  803198:	10000826 	beq	r2,zero,8031bc <logic+0x2950>
  80319c:	e0bffc17 	ldw	r2,-16(fp)
  8031a0:	10800603 	ldbu	r2,24(r2)
  8031a4:	10803fcc 	andi	r2,r2,255
  8031a8:	1080201c 	xori	r2,r2,128
  8031ac:	10bfe004 	addi	r2,r2,-128
  8031b0:	10000226 	beq	r2,zero,8031bc <logic+0x2950>
  8031b4:	00800044 	movi	r2,1
  8031b8:	00000106 	br	8031c0 <logic+0x2954>
  8031bc:	0005883a 	mov	r2,zero
  8031c0:	1007883a 	mov	r3,r2
  8031c4:	e0bffc17 	ldw	r2,-16(fp)
  8031c8:	10c02845 	stb	r3,161(r2)
  if (d->_g49) {
  8031cc:	e0bffc17 	ldw	r2,-16(fp)
  8031d0:	10802843 	ldbu	r2,161(r2)
  8031d4:	10803fcc 	andi	r2,r2,255
  8031d8:	1080201c 	xori	r2,r2,128
  8031dc:	10bfe004 	addi	r2,r2,-128
  8031e0:	10000326 	beq	r2,zero,8031f0 <logic+0x2984>
    d->_DDDpacemake2_local__Atrig5 = 1;
  8031e4:	e0bffc17 	ldw	r2,-16(fp)
  8031e8:	00c00044 	movi	r3,1
  8031ec:	10c01d45 	stb	r3,117(r2)
  }
  d->_g68 = d->_pg149;
  8031f0:	e0bffc17 	ldw	r2,-16(fp)
  8031f4:	10c05643 	ldbu	r3,345(r2)
  8031f8:	e0bffc17 	ldw	r2,-16(fp)
  8031fc:	10c02c45 	stb	r3,177(r2)
  if (d->_g68) {
  803200:	e0bffc17 	ldw	r2,-16(fp)
  803204:	10802c43 	ldbu	r2,177(r2)
  803208:	10803fcc 	andi	r2,r2,255
  80320c:	1080201c 	xori	r2,r2,128
  803210:	10bfe004 	addi	r2,r2,-128
  803214:	10001226 	beq	r2,zero,803260 <logic+0x29f4>
    d->PVARP_counter += d->deltaT;
  803218:	e13ffc17 	ldw	r4,-16(fp)
  80321c:	20800b17 	ldw	r2,44(r4)
  803220:	20c00c17 	ldw	r3,48(r4)
  803224:	e1bffc17 	ldw	r6,-16(fp)
  803228:	31001417 	ldw	r4,80(r6)
  80322c:	31401517 	ldw	r5,84(r6)
  803230:	200d883a 	mov	r6,r4
  803234:	280f883a 	mov	r7,r5
  803238:	1009883a 	mov	r4,r2
  80323c:	180b883a 	mov	r5,r3
  803240:	0805b040 	call	805b04 <__adddf3>
  803244:	1009883a 	mov	r4,r2
  803248:	180b883a 	mov	r5,r3
  80324c:	2005883a 	mov	r2,r4
  803250:	2807883a 	mov	r3,r5
  803254:	e13ffc17 	ldw	r4,-16(fp)
  803258:	20800b15 	stw	r2,44(r4)
  80325c:	20c00c15 	stw	r3,48(r4)
  }
  d->_g69 = d->_g48 && !d->AS;
  803260:	e0bffc17 	ldw	r2,-16(fp)
  803264:	10802803 	ldbu	r2,160(r2)
  803268:	10803fcc 	andi	r2,r2,255
  80326c:	1080201c 	xori	r2,r2,128
  803270:	10bfe004 	addi	r2,r2,-128
  803274:	10000826 	beq	r2,zero,803298 <logic+0x2a2c>
  803278:	e0bffc17 	ldw	r2,-16(fp)
  80327c:	10800603 	ldbu	r2,24(r2)
  803280:	10803fcc 	andi	r2,r2,255
  803284:	1080201c 	xori	r2,r2,128
  803288:	10bfe004 	addi	r2,r2,-128
  80328c:	1000021e 	bne	r2,zero,803298 <logic+0x2a2c>
  803290:	00800044 	movi	r2,1
  803294:	00000106 	br	80329c <logic+0x2a30>
  803298:	0005883a 	mov	r2,zero
  80329c:	1007883a 	mov	r3,r2
  8032a0:	e0bffc17 	ldw	r2,-16(fp)
  8032a4:	10c02c85 	stb	r3,178(r2)
  d->_cg92 = d->PVARP_counter >= d->PVARP_DEADLINE;
  8032a8:	e0bffc17 	ldw	r2,-16(fp)
  8032ac:	14000b17 	ldw	r16,44(r2)
  8032b0:	14400c17 	ldw	r17,48(r2)
  8032b4:	e0bffc17 	ldw	r2,-16(fp)
  8032b8:	10800417 	ldw	r2,16(r2)
  8032bc:	1009883a 	mov	r4,r2
  8032c0:	08075940 	call	807594 <__floatsidf>
  8032c4:	1009883a 	mov	r4,r2
  8032c8:	180b883a 	mov	r5,r3
  8032cc:	04800044 	movi	r18,1
  8032d0:	200d883a 	mov	r6,r4
  8032d4:	280f883a 	mov	r7,r5
  8032d8:	8009883a 	mov	r4,r16
  8032dc:	880b883a 	mov	r5,r17
  8032e0:	08063b00 	call	8063b0 <__gedf2>
  8032e4:	1000010e 	bge	r2,zero,8032ec <logic+0x2a80>
  8032e8:	0025883a 	mov	r18,zero
  8032ec:	9007883a 	mov	r3,r18
  8032f0:	e0bffc17 	ldw	r2,-16(fp)
  8032f4:	10c046c5 	stb	r3,283(r2)
  d->_g93 = d->_g69 && d->_cg92;
  8032f8:	e0bffc17 	ldw	r2,-16(fp)
  8032fc:	10802c83 	ldbu	r2,178(r2)
  803300:	10803fcc 	andi	r2,r2,255
  803304:	1080201c 	xori	r2,r2,128
  803308:	10bfe004 	addi	r2,r2,-128
  80330c:	10000826 	beq	r2,zero,803330 <logic+0x2ac4>
  803310:	e0bffc17 	ldw	r2,-16(fp)
  803314:	108046c3 	ldbu	r2,283(r2)
  803318:	10803fcc 	andi	r2,r2,255
  80331c:	1080201c 	xori	r2,r2,128
  803320:	10bfe004 	addi	r2,r2,-128
  803324:	10000226 	beq	r2,zero,803330 <logic+0x2ac4>
  803328:	00800044 	movi	r2,1
  80332c:	00000106 	br	803334 <logic+0x2ac8>
  803330:	0005883a 	mov	r2,zero
  803334:	1007883a 	mov	r3,r2
  803338:	e0bffc17 	ldw	r2,-16(fp)
  80333c:	10c03085 	stb	r3,194(r2)
  if (d->_g93) {
  803340:	e0bffc17 	ldw	r2,-16(fp)
  803344:	10803083 	ldbu	r2,194(r2)
  803348:	10803fcc 	andi	r2,r2,255
  80334c:	1080201c 	xori	r2,r2,128
  803350:	10bfe004 	addi	r2,r2,-128
  803354:	10000326 	beq	r2,zero,803364 <logic+0x2af8>
    d->_DDDpacemake2_local__Atrig6 = 1;
  803358:	e0bffc17 	ldw	r2,-16(fp)
  80335c:	00c00044 	movi	r3,1
  803360:	10c01d85 	stb	r3,118(r2)
  }
  d->_g85 = d->_g64_e2 || d->_g54;
  803364:	e0bffc17 	ldw	r2,-16(fp)
  803368:	10804e03 	ldbu	r2,312(r2)
  80336c:	10803fcc 	andi	r2,r2,255
  803370:	1080201c 	xori	r2,r2,128
  803374:	10bfe004 	addi	r2,r2,-128
  803378:	1000061e 	bne	r2,zero,803394 <logic+0x2b28>
  80337c:	e0bffc17 	ldw	r2,-16(fp)
  803380:	10802943 	ldbu	r2,165(r2)
  803384:	10803fcc 	andi	r2,r2,255
  803388:	1080201c 	xori	r2,r2,128
  80338c:	10bfe004 	addi	r2,r2,-128
  803390:	10000226 	beq	r2,zero,80339c <logic+0x2b30>
  803394:	00800044 	movi	r2,1
  803398:	00000106 	br	8033a0 <logic+0x2b34>
  80339c:	0005883a 	mov	r2,zero
  8033a0:	1007883a 	mov	r3,r2
  8033a4:	e0bffc17 	ldw	r2,-16(fp)
  8033a8:	10c02f05 	stb	r3,188(r2)
  d->_cg80 = d->PVARP_counter < d->PVARP_DEADLINE;
  8033ac:	e0bffc17 	ldw	r2,-16(fp)
  8033b0:	14000b17 	ldw	r16,44(r2)
  8033b4:	14400c17 	ldw	r17,48(r2)
  8033b8:	e0bffc17 	ldw	r2,-16(fp)
  8033bc:	10800417 	ldw	r2,16(r2)
  8033c0:	1009883a 	mov	r4,r2
  8033c4:	08075940 	call	807594 <__floatsidf>
  8033c8:	1009883a 	mov	r4,r2
  8033cc:	180b883a 	mov	r5,r3
  8033d0:	04800044 	movi	r18,1
  8033d4:	200d883a 	mov	r6,r4
  8033d8:	280f883a 	mov	r7,r5
  8033dc:	8009883a 	mov	r4,r16
  8033e0:	880b883a 	mov	r5,r17
  8033e4:	080648c0 	call	80648c <__ledf2>
  8033e8:	10000116 	blt	r2,zero,8033f0 <logic+0x2b84>
  8033ec:	0025883a 	mov	r18,zero
  8033f0:	9007883a 	mov	r3,r18
  8033f4:	e0bffc17 	ldw	r2,-16(fp)
  8033f8:	10c04605 	stb	r3,280(r2)
  d->_g79 = d->_g85 && d->_cg80;
  8033fc:	e0bffc17 	ldw	r2,-16(fp)
  803400:	10802f03 	ldbu	r2,188(r2)
  803404:	10803fcc 	andi	r2,r2,255
  803408:	1080201c 	xori	r2,r2,128
  80340c:	10bfe004 	addi	r2,r2,-128
  803410:	10000826 	beq	r2,zero,803434 <logic+0x2bc8>
  803414:	e0bffc17 	ldw	r2,-16(fp)
  803418:	10804603 	ldbu	r2,280(r2)
  80341c:	10803fcc 	andi	r2,r2,255
  803420:	1080201c 	xori	r2,r2,128
  803424:	10bfe004 	addi	r2,r2,-128
  803428:	10000226 	beq	r2,zero,803434 <logic+0x2bc8>
  80342c:	00800044 	movi	r2,1
  803430:	00000106 	br	803438 <logic+0x2bcc>
  803434:	0005883a 	mov	r2,zero
  803438:	1007883a 	mov	r3,r2
  80343c:	e0bffc17 	ldw	r2,-16(fp)
  803440:	10c02dc5 	stb	r3,183(r2)
  if (d->_g79) {
  803444:	e0bffc17 	ldw	r2,-16(fp)
  803448:	10802dc3 	ldbu	r2,183(r2)
  80344c:	10803fcc 	andi	r2,r2,255
  803450:	1080201c 	xori	r2,r2,128
  803454:	10bfe004 	addi	r2,r2,-128
  803458:	10003426 	beq	r2,zero,80352c <logic+0x2cc0>
    d->sleepT = (d->sleepT < (d->PVARP_DEADLINE - d->PVARP_counter)) ? d->sleepT : (d->PVARP_DEADLINE - d->PVARP_counter);
  80345c:	e0bffc17 	ldw	r2,-16(fp)
  803460:	14001617 	ldw	r16,88(r2)
  803464:	14401717 	ldw	r17,92(r2)
  803468:	e0bffc17 	ldw	r2,-16(fp)
  80346c:	10800417 	ldw	r2,16(r2)
  803470:	1009883a 	mov	r4,r2
  803474:	08075940 	call	807594 <__floatsidf>
  803478:	1011883a 	mov	r8,r2
  80347c:	1813883a 	mov	r9,r3
  803480:	e13ffc17 	ldw	r4,-16(fp)
  803484:	20800b17 	ldw	r2,44(r4)
  803488:	20c00c17 	ldw	r3,48(r4)
  80348c:	100d883a 	mov	r6,r2
  803490:	180f883a 	mov	r7,r3
  803494:	4009883a 	mov	r4,r8
  803498:	480b883a 	mov	r5,r9
  80349c:	0806c980 	call	806c98 <__subdf3>
  8034a0:	1009883a 	mov	r4,r2
  8034a4:	180b883a 	mov	r5,r3
  8034a8:	2005883a 	mov	r2,r4
  8034ac:	2807883a 	mov	r3,r5
  8034b0:	100d883a 	mov	r6,r2
  8034b4:	180f883a 	mov	r7,r3
  8034b8:	8009883a 	mov	r4,r16
  8034bc:	880b883a 	mov	r5,r17
  8034c0:	080648c0 	call	80648c <__ledf2>
  8034c4:	1000040e 	bge	r2,zero,8034d8 <logic+0x2c6c>
  8034c8:	e13ffc17 	ldw	r4,-16(fp)
  8034cc:	20801617 	ldw	r2,88(r4)
  8034d0:	20c01717 	ldw	r3,92(r4)
  8034d4:	00001206 	br	803520 <logic+0x2cb4>
  8034d8:	e0bffc17 	ldw	r2,-16(fp)
  8034dc:	10800417 	ldw	r2,16(r2)
  8034e0:	1009883a 	mov	r4,r2
  8034e4:	08075940 	call	807594 <__floatsidf>
  8034e8:	1011883a 	mov	r8,r2
  8034ec:	1813883a 	mov	r9,r3
  8034f0:	e13ffc17 	ldw	r4,-16(fp)
  8034f4:	20800b17 	ldw	r2,44(r4)
  8034f8:	20c00c17 	ldw	r3,48(r4)
  8034fc:	100d883a 	mov	r6,r2
  803500:	180f883a 	mov	r7,r3
  803504:	4009883a 	mov	r4,r8
  803508:	480b883a 	mov	r5,r9
  80350c:	0806c980 	call	806c98 <__subdf3>
  803510:	1009883a 	mov	r4,r2
  803514:	180b883a 	mov	r5,r3
  803518:	2005883a 	mov	r2,r4
  80351c:	2807883a 	mov	r3,r5
  803520:	e13ffc17 	ldw	r4,-16(fp)
  803524:	20801615 	stw	r2,88(r4)
  803528:	20c01715 	stw	r3,92(r4)
  }
  d->_cg81 = d->_DDDpacemake2_local__Atrig5 || d->_DDDpacemake2_local__Atrig6;
  80352c:	e0bffc17 	ldw	r2,-16(fp)
  803530:	10801d43 	ldbu	r2,117(r2)
  803534:	10803fcc 	andi	r2,r2,255
  803538:	1080201c 	xori	r2,r2,128
  80353c:	10bfe004 	addi	r2,r2,-128
  803540:	1000061e 	bne	r2,zero,80355c <logic+0x2cf0>
  803544:	e0bffc17 	ldw	r2,-16(fp)
  803548:	10801d83 	ldbu	r2,118(r2)
  80354c:	10803fcc 	andi	r2,r2,255
  803550:	1080201c 	xori	r2,r2,128
  803554:	10bfe004 	addi	r2,r2,-128
  803558:	10000226 	beq	r2,zero,803564 <logic+0x2cf8>
  80355c:	00800044 	movi	r2,1
  803560:	00000106 	br	803568 <logic+0x2cfc>
  803564:	0005883a 	mov	r2,zero
  803568:	1007883a 	mov	r3,r2
  80356c:	e0bffc17 	ldw	r2,-16(fp)
  803570:	10c045c5 	stb	r3,279(r2)
  d->_g80 = d->_g85 && !d->_cg80;
  803574:	e0bffc17 	ldw	r2,-16(fp)
  803578:	10802f03 	ldbu	r2,188(r2)
  80357c:	10803fcc 	andi	r2,r2,255
  803580:	1080201c 	xori	r2,r2,128
  803584:	10bfe004 	addi	r2,r2,-128
  803588:	10000826 	beq	r2,zero,8035ac <logic+0x2d40>
  80358c:	e0bffc17 	ldw	r2,-16(fp)
  803590:	10804603 	ldbu	r2,280(r2)
  803594:	10803fcc 	andi	r2,r2,255
  803598:	1080201c 	xori	r2,r2,128
  80359c:	10bfe004 	addi	r2,r2,-128
  8035a0:	1000021e 	bne	r2,zero,8035ac <logic+0x2d40>
  8035a4:	00800044 	movi	r2,1
  8035a8:	00000106 	br	8035b0 <logic+0x2d44>
  8035ac:	0005883a 	mov	r2,zero
  8035b0:	1007883a 	mov	r3,r2
  8035b4:	e0bffc17 	ldw	r2,-16(fp)
  8035b8:	10c02e05 	stb	r3,184(r2)
  d->_cg83 = d->_DDDpacemake2_local__Atrig5 || d->_DDDpacemake2_local__Atrig6;
  8035bc:	e0bffc17 	ldw	r2,-16(fp)
  8035c0:	10801d43 	ldbu	r2,117(r2)
  8035c4:	10803fcc 	andi	r2,r2,255
  8035c8:	1080201c 	xori	r2,r2,128
  8035cc:	10bfe004 	addi	r2,r2,-128
  8035d0:	1000061e 	bne	r2,zero,8035ec <logic+0x2d80>
  8035d4:	e0bffc17 	ldw	r2,-16(fp)
  8035d8:	10801d83 	ldbu	r2,118(r2)
  8035dc:	10803fcc 	andi	r2,r2,255
  8035e0:	1080201c 	xori	r2,r2,128
  8035e4:	10bfe004 	addi	r2,r2,-128
  8035e8:	10000226 	beq	r2,zero,8035f4 <logic+0x2d88>
  8035ec:	00800044 	movi	r2,1
  8035f0:	00000106 	br	8035f8 <logic+0x2d8c>
  8035f4:	0005883a 	mov	r2,zero
  8035f8:	1007883a 	mov	r3,r2
  8035fc:	e0bffc17 	ldw	r2,-16(fp)
  803600:	10c04645 	stb	r3,281(r2)
  d->_g82 = d->_g79 && d->_cg81 || d->_g80 && d->_cg83;
  803604:	e0bffc17 	ldw	r2,-16(fp)
  803608:	10802dc3 	ldbu	r2,183(r2)
  80360c:	10803fcc 	andi	r2,r2,255
  803610:	1080201c 	xori	r2,r2,128
  803614:	10bfe004 	addi	r2,r2,-128
  803618:	10000626 	beq	r2,zero,803634 <logic+0x2dc8>
  80361c:	e0bffc17 	ldw	r2,-16(fp)
  803620:	108045c3 	ldbu	r2,279(r2)
  803624:	10803fcc 	andi	r2,r2,255
  803628:	1080201c 	xori	r2,r2,128
  80362c:	10bfe004 	addi	r2,r2,-128
  803630:	10000c1e 	bne	r2,zero,803664 <logic+0x2df8>
  803634:	e0bffc17 	ldw	r2,-16(fp)
  803638:	10802e03 	ldbu	r2,184(r2)
  80363c:	10803fcc 	andi	r2,r2,255
  803640:	1080201c 	xori	r2,r2,128
  803644:	10bfe004 	addi	r2,r2,-128
  803648:	10000826 	beq	r2,zero,80366c <logic+0x2e00>
  80364c:	e0bffc17 	ldw	r2,-16(fp)
  803650:	10804643 	ldbu	r2,281(r2)
  803654:	10803fcc 	andi	r2,r2,255
  803658:	1080201c 	xori	r2,r2,128
  80365c:	10bfe004 	addi	r2,r2,-128
  803660:	10000226 	beq	r2,zero,80366c <logic+0x2e00>
  803664:	00800044 	movi	r2,1
  803668:	00000106 	br	803670 <logic+0x2e04>
  80366c:	0005883a 	mov	r2,zero
  803670:	1007883a 	mov	r3,r2
  803674:	e0bffc17 	ldw	r2,-16(fp)
  803678:	10c02e85 	stb	r3,186(r2)
  d->_g89 = !d->_g48;
  80367c:	e0bffc17 	ldw	r2,-16(fp)
  803680:	10802803 	ldbu	r2,160(r2)
  803684:	10803fcc 	andi	r2,r2,255
  803688:	1080201c 	xori	r2,r2,128
  80368c:	10bfe004 	addi	r2,r2,-128
  803690:	1005003a 	cmpeq	r2,r2,zero
  803694:	1007883a 	mov	r3,r2
  803698:	e0bffc17 	ldw	r2,-16(fp)
  80369c:	10c02f85 	stb	r3,190(r2)
  d->_g93 = d->_g49 || d->_g93;
  8036a0:	e0bffc17 	ldw	r2,-16(fp)
  8036a4:	10802843 	ldbu	r2,161(r2)
  8036a8:	10803fcc 	andi	r2,r2,255
  8036ac:	1080201c 	xori	r2,r2,128
  8036b0:	10bfe004 	addi	r2,r2,-128
  8036b4:	1000061e 	bne	r2,zero,8036d0 <logic+0x2e64>
  8036b8:	e0bffc17 	ldw	r2,-16(fp)
  8036bc:	10803083 	ldbu	r2,194(r2)
  8036c0:	10803fcc 	andi	r2,r2,255
  8036c4:	1080201c 	xori	r2,r2,128
  8036c8:	10bfe004 	addi	r2,r2,-128
  8036cc:	10000226 	beq	r2,zero,8036d8 <logic+0x2e6c>
  8036d0:	00800044 	movi	r2,1
  8036d4:	00000106 	br	8036dc <logic+0x2e70>
  8036d8:	0005883a 	mov	r2,zero
  8036dc:	1007883a 	mov	r3,r2
  8036e0:	e0bffc17 	ldw	r2,-16(fp)
  8036e4:	10c03085 	stb	r3,194(r2)
  d->_g90 = (d->_g67 || d->_g82) && (d->_g89 || d->_g93) && (d->_g82 || d->_g93);
  8036e8:	e0bffc17 	ldw	r2,-16(fp)
  8036ec:	10802c03 	ldbu	r2,176(r2)
  8036f0:	10803fcc 	andi	r2,r2,255
  8036f4:	1080201c 	xori	r2,r2,128
  8036f8:	10bfe004 	addi	r2,r2,-128
  8036fc:	1000061e 	bne	r2,zero,803718 <logic+0x2eac>
  803700:	e0bffc17 	ldw	r2,-16(fp)
  803704:	10802e83 	ldbu	r2,186(r2)
  803708:	10803fcc 	andi	r2,r2,255
  80370c:	1080201c 	xori	r2,r2,128
  803710:	10bfe004 	addi	r2,r2,-128
  803714:	10001a26 	beq	r2,zero,803780 <logic+0x2f14>
  803718:	e0bffc17 	ldw	r2,-16(fp)
  80371c:	10802f83 	ldbu	r2,190(r2)
  803720:	10803fcc 	andi	r2,r2,255
  803724:	1080201c 	xori	r2,r2,128
  803728:	10bfe004 	addi	r2,r2,-128
  80372c:	1000061e 	bne	r2,zero,803748 <logic+0x2edc>
  803730:	e0bffc17 	ldw	r2,-16(fp)
  803734:	10803083 	ldbu	r2,194(r2)
  803738:	10803fcc 	andi	r2,r2,255
  80373c:	1080201c 	xori	r2,r2,128
  803740:	10bfe004 	addi	r2,r2,-128
  803744:	10000e26 	beq	r2,zero,803780 <logic+0x2f14>
  803748:	e0bffc17 	ldw	r2,-16(fp)
  80374c:	10802e83 	ldbu	r2,186(r2)
  803750:	10803fcc 	andi	r2,r2,255
  803754:	1080201c 	xori	r2,r2,128
  803758:	10bfe004 	addi	r2,r2,-128
  80375c:	1000061e 	bne	r2,zero,803778 <logic+0x2f0c>
  803760:	e0bffc17 	ldw	r2,-16(fp)
  803764:	10803083 	ldbu	r2,194(r2)
  803768:	10803fcc 	andi	r2,r2,255
  80376c:	1080201c 	xori	r2,r2,128
  803770:	10bfe004 	addi	r2,r2,-128
  803774:	10000226 	beq	r2,zero,803780 <logic+0x2f14>
  803778:	00800044 	movi	r2,1
  80377c:	00000106 	br	803784 <logic+0x2f18>
  803780:	0005883a 	mov	r2,zero
  803784:	1007883a 	mov	r3,r2
  803788:	e0bffc17 	ldw	r2,-16(fp)
  80378c:	10c02fc5 	stb	r3,191(r2)
  d->_cg94 = d->_DDDpacemake2_local__Atrig5;
  803790:	e0bffc17 	ldw	r2,-16(fp)
  803794:	10c01d43 	ldbu	r3,117(r2)
  803798:	e0bffc17 	ldw	r2,-16(fp)
  80379c:	10c04745 	stb	r3,285(r2)
  d->_g82_e1 = d->_g90 && !d->_cg94;
  8037a0:	e0bffc17 	ldw	r2,-16(fp)
  8037a4:	10802fc3 	ldbu	r2,191(r2)
  8037a8:	10803fcc 	andi	r2,r2,255
  8037ac:	1080201c 	xori	r2,r2,128
  8037b0:	10bfe004 	addi	r2,r2,-128
  8037b4:	10000826 	beq	r2,zero,8037d8 <logic+0x2f6c>
  8037b8:	e0bffc17 	ldw	r2,-16(fp)
  8037bc:	10804743 	ldbu	r2,285(r2)
  8037c0:	10803fcc 	andi	r2,r2,255
  8037c4:	1080201c 	xori	r2,r2,128
  8037c8:	10bfe004 	addi	r2,r2,-128
  8037cc:	1000021e 	bne	r2,zero,8037d8 <logic+0x2f6c>
  8037d0:	00800044 	movi	r2,1
  8037d4:	00000106 	br	8037dc <logic+0x2f70>
  8037d8:	0005883a 	mov	r2,zero
  8037dc:	1007883a 	mov	r3,r2
  8037e0:	e0bffc17 	ldw	r2,-16(fp)
  8037e4:	10c04e45 	stb	r3,313(r2)
  if (d->_g82_e1) {
  8037e8:	e0bffc17 	ldw	r2,-16(fp)
  8037ec:	10804e43 	ldbu	r2,313(r2)
  8037f0:	10803fcc 	andi	r2,r2,255
  8037f4:	1080201c 	xori	r2,r2,128
  8037f8:	10bfe004 	addi	r2,r2,-128
  8037fc:	10000426 	beq	r2,zero,803810 <logic+0x2fa4>
    d->_DDDpacemake2_local_PVARP_state = 0;
  803800:	e0bffc17 	ldw	r2,-16(fp)
  803804:	100018c5 	stb	zero,99(r2)
    d->_DDDpacemake2_local_AR = 0;
  803808:	e0bffc17 	ldw	r2,-16(fp)
  80380c:	10001985 	stb	zero,102(r2)
  }
  d->_g91_e2 = d->_GO || d->_g82_e1 || d->_g98 || d->_g97 && !d->AS;
  803810:	e0bffc17 	ldw	r2,-16(fp)
  803814:	10803ec3 	ldbu	r2,251(r2)
  803818:	10803fcc 	andi	r2,r2,255
  80381c:	1080201c 	xori	r2,r2,128
  803820:	10bfe004 	addi	r2,r2,-128
  803824:	1000181e 	bne	r2,zero,803888 <logic+0x301c>
  803828:	e0bffc17 	ldw	r2,-16(fp)
  80382c:	10804e43 	ldbu	r2,313(r2)
  803830:	10803fcc 	andi	r2,r2,255
  803834:	1080201c 	xori	r2,r2,128
  803838:	10bfe004 	addi	r2,r2,-128
  80383c:	1000121e 	bne	r2,zero,803888 <logic+0x301c>
  803840:	e0bffc17 	ldw	r2,-16(fp)
  803844:	108031c3 	ldbu	r2,199(r2)
  803848:	10803fcc 	andi	r2,r2,255
  80384c:	1080201c 	xori	r2,r2,128
  803850:	10bfe004 	addi	r2,r2,-128
  803854:	10000c1e 	bne	r2,zero,803888 <logic+0x301c>
  803858:	e0bffc17 	ldw	r2,-16(fp)
  80385c:	10803183 	ldbu	r2,198(r2)
  803860:	10803fcc 	andi	r2,r2,255
  803864:	1080201c 	xori	r2,r2,128
  803868:	10bfe004 	addi	r2,r2,-128
  80386c:	10000826 	beq	r2,zero,803890 <logic+0x3024>
  803870:	e0bffc17 	ldw	r2,-16(fp)
  803874:	10800603 	ldbu	r2,24(r2)
  803878:	10803fcc 	andi	r2,r2,255
  80387c:	1080201c 	xori	r2,r2,128
  803880:	10bfe004 	addi	r2,r2,-128
  803884:	1000021e 	bne	r2,zero,803890 <logic+0x3024>
  803888:	00800044 	movi	r2,1
  80388c:	00000106 	br	803894 <logic+0x3028>
  803890:	0005883a 	mov	r2,zero
  803894:	1007883a 	mov	r3,r2
  803898:	e0bffc17 	ldw	r2,-16(fp)
  80389c:	10c04e85 	stb	r3,314(r2)
  d->_g91 = d->_g73 && d->_cg73;
  8038a0:	e0bffc17 	ldw	r2,-16(fp)
  8038a4:	10802cc3 	ldbu	r2,179(r2)
  8038a8:	10803fcc 	andi	r2,r2,255
  8038ac:	1080201c 	xori	r2,r2,128
  8038b0:	10bfe004 	addi	r2,r2,-128
  8038b4:	10000826 	beq	r2,zero,8038d8 <logic+0x306c>
  8038b8:	e0bffc17 	ldw	r2,-16(fp)
  8038bc:	10804503 	ldbu	r2,276(r2)
  8038c0:	10803fcc 	andi	r2,r2,255
  8038c4:	1080201c 	xori	r2,r2,128
  8038c8:	10bfe004 	addi	r2,r2,-128
  8038cc:	10000226 	beq	r2,zero,8038d8 <logic+0x306c>
  8038d0:	00800044 	movi	r2,1
  8038d4:	00000106 	br	8038dc <logic+0x3070>
  8038d8:	0005883a 	mov	r2,zero
  8038dc:	1007883a 	mov	r3,r2
  8038e0:	e0bffc17 	ldw	r2,-16(fp)
  8038e4:	10c03005 	stb	r3,192(r2)
  if (d->_g91) {
  8038e8:	e0bffc17 	ldw	r2,-16(fp)
  8038ec:	10803003 	ldbu	r2,192(r2)
  8038f0:	10803fcc 	andi	r2,r2,255
  8038f4:	1080201c 	xori	r2,r2,128
  8038f8:	10bfe004 	addi	r2,r2,-128
  8038fc:	10000626 	beq	r2,zero,803918 <logic+0x30ac>
    d->_DDDpacemake2_local_PVARP_state = 1;
  803900:	e0bffc17 	ldw	r2,-16(fp)
  803904:	00c00044 	movi	r3,1
  803908:	10c018c5 	stb	r3,99(r2)
    d->PVARP_counter = 0;
  80390c:	e0bffc17 	ldw	r2,-16(fp)
  803910:	10000b15 	stw	zero,44(r2)
  803914:	10000c15 	stw	zero,48(r2)
  }
  d->_g82 = d->_g90 && d->_cg94;
  803918:	e0bffc17 	ldw	r2,-16(fp)
  80391c:	10802fc3 	ldbu	r2,191(r2)
  803920:	10803fcc 	andi	r2,r2,255
  803924:	1080201c 	xori	r2,r2,128
  803928:	10bfe004 	addi	r2,r2,-128
  80392c:	10000826 	beq	r2,zero,803950 <logic+0x30e4>
  803930:	e0bffc17 	ldw	r2,-16(fp)
  803934:	10804743 	ldbu	r2,285(r2)
  803938:	10803fcc 	andi	r2,r2,255
  80393c:	1080201c 	xori	r2,r2,128
  803940:	10bfe004 	addi	r2,r2,-128
  803944:	10000226 	beq	r2,zero,803950 <logic+0x30e4>
  803948:	00800044 	movi	r2,1
  80394c:	00000106 	br	803954 <logic+0x30e8>
  803950:	0005883a 	mov	r2,zero
  803954:	1007883a 	mov	r3,r2
  803958:	e0bffc17 	ldw	r2,-16(fp)
  80395c:	10c02e85 	stb	r3,186(r2)
  if (d->_g82) {
  803960:	e0bffc17 	ldw	r2,-16(fp)
  803964:	10802e83 	ldbu	r2,186(r2)
  803968:	10803fcc 	andi	r2,r2,255
  80396c:	1080201c 	xori	r2,r2,128
  803970:	10bfe004 	addi	r2,r2,-128
  803974:	10000326 	beq	r2,zero,803984 <logic+0x3118>
    d->_DDDpacemake2_local_AR = 1;
  803978:	e0bffc17 	ldw	r2,-16(fp)
  80397c:	00c00044 	movi	r3,1
  803980:	10c01985 	stb	r3,102(r2)
  }
  d->_g96 = d->_g91 || d->_g82;
  803984:	e0bffc17 	ldw	r2,-16(fp)
  803988:	10803003 	ldbu	r2,192(r2)
  80398c:	10803fcc 	andi	r2,r2,255
  803990:	1080201c 	xori	r2,r2,128
  803994:	10bfe004 	addi	r2,r2,-128
  803998:	1000061e 	bne	r2,zero,8039b4 <logic+0x3148>
  80399c:	e0bffc17 	ldw	r2,-16(fp)
  8039a0:	10802e83 	ldbu	r2,186(r2)
  8039a4:	10803fcc 	andi	r2,r2,255
  8039a8:	1080201c 	xori	r2,r2,128
  8039ac:	10bfe004 	addi	r2,r2,-128
  8039b0:	10000226 	beq	r2,zero,8039bc <logic+0x3150>
  8039b4:	00800044 	movi	r2,1
  8039b8:	00000106 	br	8039c0 <logic+0x3154>
  8039bc:	0005883a 	mov	r2,zero
  8039c0:	1007883a 	mov	r3,r2
  8039c4:	e0bffc17 	ldw	r2,-16(fp)
  8039c8:	10c03145 	stb	r3,197(r2)
  if (d->_g96) {
  8039cc:	e0bffc17 	ldw	r2,-16(fp)
  8039d0:	10803143 	ldbu	r2,197(r2)
  8039d4:	10803fcc 	andi	r2,r2,255
  8039d8:	1080201c 	xori	r2,r2,128
  8039dc:	10bfe004 	addi	r2,r2,-128
  8039e0:	10000426 	beq	r2,zero,8039f4 <logic+0x3188>
    d->_DDDpacemake2_local__Atrig5 = 0;
  8039e4:	e0bffc17 	ldw	r2,-16(fp)
  8039e8:	10001d45 	stb	zero,117(r2)
    d->_DDDpacemake2_local__Atrig6 = 0;
  8039ec:	e0bffc17 	ldw	r2,-16(fp)
  8039f0:	10001d85 	stb	zero,118(r2)
  }
  d->_cg76 = d->PVARP_counter < d->PVARP_DEADLINE;
  8039f4:	e0bffc17 	ldw	r2,-16(fp)
  8039f8:	14000b17 	ldw	r16,44(r2)
  8039fc:	14400c17 	ldw	r17,48(r2)
  803a00:	e0bffc17 	ldw	r2,-16(fp)
  803a04:	10800417 	ldw	r2,16(r2)
  803a08:	1009883a 	mov	r4,r2
  803a0c:	08075940 	call	807594 <__floatsidf>
  803a10:	1009883a 	mov	r4,r2
  803a14:	180b883a 	mov	r5,r3
  803a18:	04800044 	movi	r18,1
  803a1c:	200d883a 	mov	r6,r4
  803a20:	280f883a 	mov	r7,r5
  803a24:	8009883a 	mov	r4,r16
  803a28:	880b883a 	mov	r5,r17
  803a2c:	080648c0 	call	80648c <__ledf2>
  803a30:	10000116 	blt	r2,zero,803a38 <logic+0x31cc>
  803a34:	0025883a 	mov	r18,zero
  803a38:	9007883a 	mov	r3,r18
  803a3c:	e0bffc17 	ldw	r2,-16(fp)
  803a40:	10c04545 	stb	r3,277(r2)
  d->_g97 = d->_g96 && d->_cg76;
  803a44:	e0bffc17 	ldw	r2,-16(fp)
  803a48:	10803143 	ldbu	r2,197(r2)
  803a4c:	10803fcc 	andi	r2,r2,255
  803a50:	1080201c 	xori	r2,r2,128
  803a54:	10bfe004 	addi	r2,r2,-128
  803a58:	10000826 	beq	r2,zero,803a7c <logic+0x3210>
  803a5c:	e0bffc17 	ldw	r2,-16(fp)
  803a60:	10804543 	ldbu	r2,277(r2)
  803a64:	10803fcc 	andi	r2,r2,255
  803a68:	1080201c 	xori	r2,r2,128
  803a6c:	10bfe004 	addi	r2,r2,-128
  803a70:	10000226 	beq	r2,zero,803a7c <logic+0x3210>
  803a74:	00800044 	movi	r2,1
  803a78:	00000106 	br	803a80 <logic+0x3214>
  803a7c:	0005883a 	mov	r2,zero
  803a80:	1007883a 	mov	r3,r2
  803a84:	e0bffc17 	ldw	r2,-16(fp)
  803a88:	10c03185 	stb	r3,198(r2)
  if (d->_g97) {
  803a8c:	e0bffc17 	ldw	r2,-16(fp)
  803a90:	10803183 	ldbu	r2,198(r2)
  803a94:	10803fcc 	andi	r2,r2,255
  803a98:	1080201c 	xori	r2,r2,128
  803a9c:	10bfe004 	addi	r2,r2,-128
  803aa0:	10003426 	beq	r2,zero,803b74 <logic+0x3308>
    d->sleepT = (d->sleepT < (d->PVARP_DEADLINE - d->PVARP_counter)) ? d->sleepT : (d->PVARP_DEADLINE - d->PVARP_counter);
  803aa4:	e0bffc17 	ldw	r2,-16(fp)
  803aa8:	14001617 	ldw	r16,88(r2)
  803aac:	14401717 	ldw	r17,92(r2)
  803ab0:	e0bffc17 	ldw	r2,-16(fp)
  803ab4:	10800417 	ldw	r2,16(r2)
  803ab8:	1009883a 	mov	r4,r2
  803abc:	08075940 	call	807594 <__floatsidf>
  803ac0:	1011883a 	mov	r8,r2
  803ac4:	1813883a 	mov	r9,r3
  803ac8:	e13ffc17 	ldw	r4,-16(fp)
  803acc:	20800b17 	ldw	r2,44(r4)
  803ad0:	20c00c17 	ldw	r3,48(r4)
  803ad4:	100d883a 	mov	r6,r2
  803ad8:	180f883a 	mov	r7,r3
  803adc:	4009883a 	mov	r4,r8
  803ae0:	480b883a 	mov	r5,r9
  803ae4:	0806c980 	call	806c98 <__subdf3>
  803ae8:	1009883a 	mov	r4,r2
  803aec:	180b883a 	mov	r5,r3
  803af0:	2005883a 	mov	r2,r4
  803af4:	2807883a 	mov	r3,r5
  803af8:	100d883a 	mov	r6,r2
  803afc:	180f883a 	mov	r7,r3
  803b00:	8009883a 	mov	r4,r16
  803b04:	880b883a 	mov	r5,r17
  803b08:	080648c0 	call	80648c <__ledf2>
  803b0c:	1000040e 	bge	r2,zero,803b20 <logic+0x32b4>
  803b10:	e13ffc17 	ldw	r4,-16(fp)
  803b14:	20801617 	ldw	r2,88(r4)
  803b18:	20c01717 	ldw	r3,92(r4)
  803b1c:	00001206 	br	803b68 <logic+0x32fc>
  803b20:	e0bffc17 	ldw	r2,-16(fp)
  803b24:	10800417 	ldw	r2,16(r2)
  803b28:	1009883a 	mov	r4,r2
  803b2c:	08075940 	call	807594 <__floatsidf>
  803b30:	1011883a 	mov	r8,r2
  803b34:	1813883a 	mov	r9,r3
  803b38:	e13ffc17 	ldw	r4,-16(fp)
  803b3c:	20800b17 	ldw	r2,44(r4)
  803b40:	20c00c17 	ldw	r3,48(r4)
  803b44:	100d883a 	mov	r6,r2
  803b48:	180f883a 	mov	r7,r3
  803b4c:	4009883a 	mov	r4,r8
  803b50:	480b883a 	mov	r5,r9
  803b54:	0806c980 	call	806c98 <__subdf3>
  803b58:	1009883a 	mov	r4,r2
  803b5c:	180b883a 	mov	r5,r3
  803b60:	2005883a 	mov	r2,r4
  803b64:	2807883a 	mov	r3,r5
  803b68:	e13ffc17 	ldw	r4,-16(fp)
  803b6c:	20801615 	stw	r2,88(r4)
  803b70:	20c01715 	stw	r3,92(r4)
  }
  d->_cg77 = d->_DDDpacemake2_local__Atrig5 || d->_DDDpacemake2_local__Atrig6;
  803b74:	e0bffc17 	ldw	r2,-16(fp)
  803b78:	10801d43 	ldbu	r2,117(r2)
  803b7c:	10803fcc 	andi	r2,r2,255
  803b80:	1080201c 	xori	r2,r2,128
  803b84:	10bfe004 	addi	r2,r2,-128
  803b88:	1000061e 	bne	r2,zero,803ba4 <logic+0x3338>
  803b8c:	e0bffc17 	ldw	r2,-16(fp)
  803b90:	10801d83 	ldbu	r2,118(r2)
  803b94:	10803fcc 	andi	r2,r2,255
  803b98:	1080201c 	xori	r2,r2,128
  803b9c:	10bfe004 	addi	r2,r2,-128
  803ba0:	10000226 	beq	r2,zero,803bac <logic+0x3340>
  803ba4:	00800044 	movi	r2,1
  803ba8:	00000106 	br	803bb0 <logic+0x3344>
  803bac:	0005883a 	mov	r2,zero
  803bb0:	1007883a 	mov	r3,r2
  803bb4:	e0bffc17 	ldw	r2,-16(fp)
  803bb8:	10c04585 	stb	r3,278(r2)
  d->_g98 = d->_g97 && !d->_cg77 || d->_g79 && !d->_cg81;
  803bbc:	e0bffc17 	ldw	r2,-16(fp)
  803bc0:	10803183 	ldbu	r2,198(r2)
  803bc4:	10803fcc 	andi	r2,r2,255
  803bc8:	1080201c 	xori	r2,r2,128
  803bcc:	10bfe004 	addi	r2,r2,-128
  803bd0:	10000626 	beq	r2,zero,803bec <logic+0x3380>
  803bd4:	e0bffc17 	ldw	r2,-16(fp)
  803bd8:	10804583 	ldbu	r2,278(r2)
  803bdc:	10803fcc 	andi	r2,r2,255
  803be0:	1080201c 	xori	r2,r2,128
  803be4:	10bfe004 	addi	r2,r2,-128
  803be8:	10000c26 	beq	r2,zero,803c1c <logic+0x33b0>
  803bec:	e0bffc17 	ldw	r2,-16(fp)
  803bf0:	10802dc3 	ldbu	r2,183(r2)
  803bf4:	10803fcc 	andi	r2,r2,255
  803bf8:	1080201c 	xori	r2,r2,128
  803bfc:	10bfe004 	addi	r2,r2,-128
  803c00:	10000826 	beq	r2,zero,803c24 <logic+0x33b8>
  803c04:	e0bffc17 	ldw	r2,-16(fp)
  803c08:	108045c3 	ldbu	r2,279(r2)
  803c0c:	10803fcc 	andi	r2,r2,255
  803c10:	1080201c 	xori	r2,r2,128
  803c14:	10bfe004 	addi	r2,r2,-128
  803c18:	1000021e 	bne	r2,zero,803c24 <logic+0x33b8>
  803c1c:	00800044 	movi	r2,1
  803c20:	00000106 	br	803c28 <logic+0x33bc>
  803c24:	0005883a 	mov	r2,zero
  803c28:	1007883a 	mov	r3,r2
  803c2c:	e0bffc17 	ldw	r2,-16(fp)
  803c30:	10c031c5 	stb	r3,199(r2)
  d->_g73 = d->_g96 && !d->_cg76;
  803c34:	e0bffc17 	ldw	r2,-16(fp)
  803c38:	10803143 	ldbu	r2,197(r2)
  803c3c:	10803fcc 	andi	r2,r2,255
  803c40:	1080201c 	xori	r2,r2,128
  803c44:	10bfe004 	addi	r2,r2,-128
  803c48:	10000826 	beq	r2,zero,803c6c <logic+0x3400>
  803c4c:	e0bffc17 	ldw	r2,-16(fp)
  803c50:	10804543 	ldbu	r2,277(r2)
  803c54:	10803fcc 	andi	r2,r2,255
  803c58:	1080201c 	xori	r2,r2,128
  803c5c:	10bfe004 	addi	r2,r2,-128
  803c60:	1000021e 	bne	r2,zero,803c6c <logic+0x3400>
  803c64:	00800044 	movi	r2,1
  803c68:	00000106 	br	803c70 <logic+0x3404>
  803c6c:	0005883a 	mov	r2,zero
  803c70:	1007883a 	mov	r3,r2
  803c74:	e0bffc17 	ldw	r2,-16(fp)
  803c78:	10c02cc5 	stb	r3,179(r2)
  d->_cg86 = d->_DDDpacemake2_local__Atrig5 || d->_DDDpacemake2_local__Atrig6;
  803c7c:	e0bffc17 	ldw	r2,-16(fp)
  803c80:	10801d43 	ldbu	r2,117(r2)
  803c84:	10803fcc 	andi	r2,r2,255
  803c88:	1080201c 	xori	r2,r2,128
  803c8c:	10bfe004 	addi	r2,r2,-128
  803c90:	1000061e 	bne	r2,zero,803cac <logic+0x3440>
  803c94:	e0bffc17 	ldw	r2,-16(fp)
  803c98:	10801d83 	ldbu	r2,118(r2)
  803c9c:	10803fcc 	andi	r2,r2,255
  803ca0:	1080201c 	xori	r2,r2,128
  803ca4:	10bfe004 	addi	r2,r2,-128
  803ca8:	10000226 	beq	r2,zero,803cb4 <logic+0x3448>
  803cac:	00800044 	movi	r2,1
  803cb0:	00000106 	br	803cb8 <logic+0x344c>
  803cb4:	0005883a 	mov	r2,zero
  803cb8:	1007883a 	mov	r3,r2
  803cbc:	e0bffc17 	ldw	r2,-16(fp)
  803cc0:	10c04685 	stb	r3,282(r2)
  d->_g94 = d->_g80 && !d->_cg83 || d->_g73 && !d->_cg86;
  803cc4:	e0bffc17 	ldw	r2,-16(fp)
  803cc8:	10802e03 	ldbu	r2,184(r2)
  803ccc:	10803fcc 	andi	r2,r2,255
  803cd0:	1080201c 	xori	r2,r2,128
  803cd4:	10bfe004 	addi	r2,r2,-128
  803cd8:	10000626 	beq	r2,zero,803cf4 <logic+0x3488>
  803cdc:	e0bffc17 	ldw	r2,-16(fp)
  803ce0:	10804643 	ldbu	r2,281(r2)
  803ce4:	10803fcc 	andi	r2,r2,255
  803ce8:	1080201c 	xori	r2,r2,128
  803cec:	10bfe004 	addi	r2,r2,-128
  803cf0:	10000c26 	beq	r2,zero,803d24 <logic+0x34b8>
  803cf4:	e0bffc17 	ldw	r2,-16(fp)
  803cf8:	10802cc3 	ldbu	r2,179(r2)
  803cfc:	10803fcc 	andi	r2,r2,255
  803d00:	1080201c 	xori	r2,r2,128
  803d04:	10bfe004 	addi	r2,r2,-128
  803d08:	10000826 	beq	r2,zero,803d2c <logic+0x34c0>
  803d0c:	e0bffc17 	ldw	r2,-16(fp)
  803d10:	10804683 	ldbu	r2,282(r2)
  803d14:	10803fcc 	andi	r2,r2,255
  803d18:	1080201c 	xori	r2,r2,128
  803d1c:	10bfe004 	addi	r2,r2,-128
  803d20:	1000021e 	bne	r2,zero,803d2c <logic+0x34c0>
  803d24:	00800044 	movi	r2,1
  803d28:	00000106 	br	803d30 <logic+0x34c4>
  803d2c:	0005883a 	mov	r2,zero
  803d30:	1007883a 	mov	r3,r2
  803d34:	e0bffc17 	ldw	r2,-16(fp)
  803d38:	10c030c5 	stb	r3,195(r2)
  d->_g95 = d->_g96 || d->_g69 && !d->_cg92;
  803d3c:	e0bffc17 	ldw	r2,-16(fp)
  803d40:	10803143 	ldbu	r2,197(r2)
  803d44:	10803fcc 	andi	r2,r2,255
  803d48:	1080201c 	xori	r2,r2,128
  803d4c:	10bfe004 	addi	r2,r2,-128
  803d50:	10000c1e 	bne	r2,zero,803d84 <logic+0x3518>
  803d54:	e0bffc17 	ldw	r2,-16(fp)
  803d58:	10802c83 	ldbu	r2,178(r2)
  803d5c:	10803fcc 	andi	r2,r2,255
  803d60:	1080201c 	xori	r2,r2,128
  803d64:	10bfe004 	addi	r2,r2,-128
  803d68:	10000826 	beq	r2,zero,803d8c <logic+0x3520>
  803d6c:	e0bffc17 	ldw	r2,-16(fp)
  803d70:	108046c3 	ldbu	r2,283(r2)
  803d74:	10803fcc 	andi	r2,r2,255
  803d78:	1080201c 	xori	r2,r2,128
  803d7c:	10bfe004 	addi	r2,r2,-128
  803d80:	1000021e 	bne	r2,zero,803d8c <logic+0x3520>
  803d84:	00800044 	movi	r2,1
  803d88:	00000106 	br	803d90 <logic+0x3524>
  803d8c:	0005883a 	mov	r2,zero
  803d90:	1007883a 	mov	r3,r2
  803d94:	e0bffc17 	ldw	r2,-16(fp)
  803d98:	10c03105 	stb	r3,196(r2)
  d->_g74 = d->_pg124;
  803d9c:	e0bffc17 	ldw	r2,-16(fp)
  803da0:	10c05683 	ldbu	r3,346(r2)
  803da4:	e0bffc17 	ldw	r2,-16(fp)
  803da8:	10c02d05 	stb	r3,180(r2)
  d->_g77 = d->_pg125;
  803dac:	e0bffc17 	ldw	r2,-16(fp)
  803db0:	10c056c3 	ldbu	r3,347(r2)
  803db4:	e0bffc17 	ldw	r2,-16(fp)
  803db8:	10c02d85 	stb	r3,182(r2)
  d->_g81 = !(d->_g74 || d->_g77);
  803dbc:	e0bffc17 	ldw	r2,-16(fp)
  803dc0:	10802d03 	ldbu	r2,180(r2)
  803dc4:	10803fcc 	andi	r2,r2,255
  803dc8:	1080201c 	xori	r2,r2,128
  803dcc:	10bfe004 	addi	r2,r2,-128
  803dd0:	1000081e 	bne	r2,zero,803df4 <logic+0x3588>
  803dd4:	e0bffc17 	ldw	r2,-16(fp)
  803dd8:	10802d83 	ldbu	r2,182(r2)
  803ddc:	10803fcc 	andi	r2,r2,255
  803de0:	1080201c 	xori	r2,r2,128
  803de4:	10bfe004 	addi	r2,r2,-128
  803de8:	1000021e 	bne	r2,zero,803df4 <logic+0x3588>
  803dec:	00800044 	movi	r2,1
  803df0:	00000106 	br	803df8 <logic+0x358c>
  803df4:	0005883a 	mov	r2,zero
  803df8:	1007883a 	mov	r3,r2
  803dfc:	e0bffc17 	ldw	r2,-16(fp)
  803e00:	10c02e45 	stb	r3,185(r2)
  d->_g86 = d->_pg103;
  803e04:	e0bffc17 	ldw	r2,-16(fp)
  803e08:	10c05703 	ldbu	r3,348(r2)
  803e0c:	e0bffc17 	ldw	r2,-16(fp)
  803e10:	10c02f45 	stb	r3,189(r2)
  d->_g83 = d->_g86 && d->VS;
  803e14:	e0bffc17 	ldw	r2,-16(fp)
  803e18:	10802f43 	ldbu	r2,189(r2)
  803e1c:	10803fcc 	andi	r2,r2,255
  803e20:	1080201c 	xori	r2,r2,128
  803e24:	10bfe004 	addi	r2,r2,-128
  803e28:	10000826 	beq	r2,zero,803e4c <logic+0x35e0>
  803e2c:	e0bffc17 	ldw	r2,-16(fp)
  803e30:	10800643 	ldbu	r2,25(r2)
  803e34:	10803fcc 	andi	r2,r2,255
  803e38:	1080201c 	xori	r2,r2,128
  803e3c:	10bfe004 	addi	r2,r2,-128
  803e40:	10000226 	beq	r2,zero,803e4c <logic+0x35e0>
  803e44:	00800044 	movi	r2,1
  803e48:	00000106 	br	803e50 <logic+0x35e4>
  803e4c:	0005883a 	mov	r2,zero
  803e50:	1007883a 	mov	r3,r2
  803e54:	e0bffc17 	ldw	r2,-16(fp)
  803e58:	10c02ec5 	stb	r3,187(r2)
  if (d->_g83) {
  803e5c:	e0bffc17 	ldw	r2,-16(fp)
  803e60:	10802ec3 	ldbu	r2,187(r2)
  803e64:	10803fcc 	andi	r2,r2,255
  803e68:	1080201c 	xori	r2,r2,128
  803e6c:	10bfe004 	addi	r2,r2,-128
  803e70:	10000326 	beq	r2,zero,803e80 <logic+0x3614>
    d->_DDDpacemake2_local__Atrig7 = 1;
  803e74:	e0bffc17 	ldw	r2,-16(fp)
  803e78:	00c00044 	movi	r3,1
  803e7c:	10c01dc5 	stb	r3,119(r2)
  }
  d->_g92 = d->_pg129;
  803e80:	e0bffc17 	ldw	r2,-16(fp)
  803e84:	10c05743 	ldbu	r3,349(r2)
  803e88:	e0bffc17 	ldw	r2,-16(fp)
  803e8c:	10c03045 	stb	r3,193(r2)
  if (d->_g92) {
  803e90:	e0bffc17 	ldw	r2,-16(fp)
  803e94:	10803043 	ldbu	r2,193(r2)
  803e98:	10803fcc 	andi	r2,r2,255
  803e9c:	1080201c 	xori	r2,r2,128
  803ea0:	10bfe004 	addi	r2,r2,-128
  803ea4:	10001226 	beq	r2,zero,803ef0 <logic+0x3684>
    d->VRP_counter += d->deltaT;
  803ea8:	e13ffc17 	ldw	r4,-16(fp)
  803eac:	20800d17 	ldw	r2,52(r4)
  803eb0:	20c00e17 	ldw	r3,56(r4)
  803eb4:	e1bffc17 	ldw	r6,-16(fp)
  803eb8:	31001417 	ldw	r4,80(r6)
  803ebc:	31401517 	ldw	r5,84(r6)
  803ec0:	200d883a 	mov	r6,r4
  803ec4:	280f883a 	mov	r7,r5
  803ec8:	1009883a 	mov	r4,r2
  803ecc:	180b883a 	mov	r5,r3
  803ed0:	0805b040 	call	805b04 <__adddf3>
  803ed4:	1009883a 	mov	r4,r2
  803ed8:	180b883a 	mov	r5,r3
  803edc:	2005883a 	mov	r2,r4
  803ee0:	2807883a 	mov	r3,r5
  803ee4:	e13ffc17 	ldw	r4,-16(fp)
  803ee8:	20800d15 	stw	r2,52(r4)
  803eec:	20c00e15 	stw	r3,56(r4)
  }
  d->_g75 = d->_g86 && !d->VS;
  803ef0:	e0bffc17 	ldw	r2,-16(fp)
  803ef4:	10802f43 	ldbu	r2,189(r2)
  803ef8:	10803fcc 	andi	r2,r2,255
  803efc:	1080201c 	xori	r2,r2,128
  803f00:	10bfe004 	addi	r2,r2,-128
  803f04:	10000826 	beq	r2,zero,803f28 <logic+0x36bc>
  803f08:	e0bffc17 	ldw	r2,-16(fp)
  803f0c:	10800643 	ldbu	r2,25(r2)
  803f10:	10803fcc 	andi	r2,r2,255
  803f14:	1080201c 	xori	r2,r2,128
  803f18:	10bfe004 	addi	r2,r2,-128
  803f1c:	1000021e 	bne	r2,zero,803f28 <logic+0x36bc>
  803f20:	00800044 	movi	r2,1
  803f24:	00000106 	br	803f2c <logic+0x36c0>
  803f28:	0005883a 	mov	r2,zero
  803f2c:	1007883a 	mov	r3,r2
  803f30:	e0bffc17 	ldw	r2,-16(fp)
  803f34:	10c02d45 	stb	r3,181(r2)
  d->_cg121 = d->VRP_counter >= d->VRP_DEADLINE;
  803f38:	e0bffc17 	ldw	r2,-16(fp)
  803f3c:	14000d17 	ldw	r16,52(r2)
  803f40:	14400e17 	ldw	r17,56(r2)
  803f44:	e0bffc17 	ldw	r2,-16(fp)
  803f48:	10800517 	ldw	r2,20(r2)
  803f4c:	1009883a 	mov	r4,r2
  803f50:	08075940 	call	807594 <__floatsidf>
  803f54:	1009883a 	mov	r4,r2
  803f58:	180b883a 	mov	r5,r3
  803f5c:	04800044 	movi	r18,1
  803f60:	200d883a 	mov	r6,r4
  803f64:	280f883a 	mov	r7,r5
  803f68:	8009883a 	mov	r4,r16
  803f6c:	880b883a 	mov	r5,r17
  803f70:	08063b00 	call	8063b0 <__gedf2>
  803f74:	1000010e 	bge	r2,zero,803f7c <logic+0x3710>
  803f78:	0025883a 	mov	r18,zero
  803f7c:	9007883a 	mov	r3,r18
  803f80:	e0bffc17 	ldw	r2,-16(fp)
  803f84:	10c04945 	stb	r3,293(r2)
  d->_g122 = d->_g75 && d->_cg121;
  803f88:	e0bffc17 	ldw	r2,-16(fp)
  803f8c:	10802d43 	ldbu	r2,181(r2)
  803f90:	10803fcc 	andi	r2,r2,255
  803f94:	1080201c 	xori	r2,r2,128
  803f98:	10bfe004 	addi	r2,r2,-128
  803f9c:	10000826 	beq	r2,zero,803fc0 <logic+0x3754>
  803fa0:	e0bffc17 	ldw	r2,-16(fp)
  803fa4:	10804943 	ldbu	r2,293(r2)
  803fa8:	10803fcc 	andi	r2,r2,255
  803fac:	1080201c 	xori	r2,r2,128
  803fb0:	10bfe004 	addi	r2,r2,-128
  803fb4:	10000226 	beq	r2,zero,803fc0 <logic+0x3754>
  803fb8:	00800044 	movi	r2,1
  803fbc:	00000106 	br	803fc4 <logic+0x3758>
  803fc0:	0005883a 	mov	r2,zero
  803fc4:	1007883a 	mov	r3,r2
  803fc8:	e0bffc17 	ldw	r2,-16(fp)
  803fcc:	10c035c5 	stb	r3,215(r2)
  if (d->_g122) {
  803fd0:	e0bffc17 	ldw	r2,-16(fp)
  803fd4:	108035c3 	ldbu	r2,215(r2)
  803fd8:	10803fcc 	andi	r2,r2,255
  803fdc:	1080201c 	xori	r2,r2,128
  803fe0:	10bfe004 	addi	r2,r2,-128
  803fe4:	10000326 	beq	r2,zero,803ff4 <logic+0x3788>
    d->_DDDpacemake2_local__Atrig8 = 1;
  803fe8:	e0bffc17 	ldw	r2,-16(fp)
  803fec:	00c00044 	movi	r3,1
  803ff0:	10c01e05 	stb	r3,120(r2)
  }
  d->_g114 = d->_g77 || d->_g74;
  803ff4:	e0bffc17 	ldw	r2,-16(fp)
  803ff8:	10802d83 	ldbu	r2,182(r2)
  803ffc:	10803fcc 	andi	r2,r2,255
  804000:	1080201c 	xori	r2,r2,128
  804004:	10bfe004 	addi	r2,r2,-128
  804008:	1000061e 	bne	r2,zero,804024 <logic+0x37b8>
  80400c:	e0bffc17 	ldw	r2,-16(fp)
  804010:	10802d03 	ldbu	r2,180(r2)
  804014:	10803fcc 	andi	r2,r2,255
  804018:	1080201c 	xori	r2,r2,128
  80401c:	10bfe004 	addi	r2,r2,-128
  804020:	10000226 	beq	r2,zero,80402c <logic+0x37c0>
  804024:	00800044 	movi	r2,1
  804028:	00000106 	br	804030 <logic+0x37c4>
  80402c:	0005883a 	mov	r2,zero
  804030:	1007883a 	mov	r3,r2
  804034:	e0bffc17 	ldw	r2,-16(fp)
  804038:	10c03445 	stb	r3,209(r2)
  d->_cg109 = d->VRP_counter < d->VRP_DEADLINE;
  80403c:	e0bffc17 	ldw	r2,-16(fp)
  804040:	14000d17 	ldw	r16,52(r2)
  804044:	14400e17 	ldw	r17,56(r2)
  804048:	e0bffc17 	ldw	r2,-16(fp)
  80404c:	10800517 	ldw	r2,20(r2)
  804050:	1009883a 	mov	r4,r2
  804054:	08075940 	call	807594 <__floatsidf>
  804058:	1009883a 	mov	r4,r2
  80405c:	180b883a 	mov	r5,r3
  804060:	04800044 	movi	r18,1
  804064:	200d883a 	mov	r6,r4
  804068:	280f883a 	mov	r7,r5
  80406c:	8009883a 	mov	r4,r16
  804070:	880b883a 	mov	r5,r17
  804074:	080648c0 	call	80648c <__ledf2>
  804078:	10000116 	blt	r2,zero,804080 <logic+0x3814>
  80407c:	0025883a 	mov	r18,zero
  804080:	9007883a 	mov	r3,r18
  804084:	e0bffc17 	ldw	r2,-16(fp)
  804088:	10c04885 	stb	r3,290(r2)
  d->_g108 = d->_g114 && d->_cg109;
  80408c:	e0bffc17 	ldw	r2,-16(fp)
  804090:	10803443 	ldbu	r2,209(r2)
  804094:	10803fcc 	andi	r2,r2,255
  804098:	1080201c 	xori	r2,r2,128
  80409c:	10bfe004 	addi	r2,r2,-128
  8040a0:	10000826 	beq	r2,zero,8040c4 <logic+0x3858>
  8040a4:	e0bffc17 	ldw	r2,-16(fp)
  8040a8:	10804883 	ldbu	r2,290(r2)
  8040ac:	10803fcc 	andi	r2,r2,255
  8040b0:	1080201c 	xori	r2,r2,128
  8040b4:	10bfe004 	addi	r2,r2,-128
  8040b8:	10000226 	beq	r2,zero,8040c4 <logic+0x3858>
  8040bc:	00800044 	movi	r2,1
  8040c0:	00000106 	br	8040c8 <logic+0x385c>
  8040c4:	0005883a 	mov	r2,zero
  8040c8:	1007883a 	mov	r3,r2
  8040cc:	e0bffc17 	ldw	r2,-16(fp)
  8040d0:	10c03305 	stb	r3,204(r2)
  if (d->_g108) {
  8040d4:	e0bffc17 	ldw	r2,-16(fp)
  8040d8:	10803303 	ldbu	r2,204(r2)
  8040dc:	10803fcc 	andi	r2,r2,255
  8040e0:	1080201c 	xori	r2,r2,128
  8040e4:	10bfe004 	addi	r2,r2,-128
  8040e8:	10003426 	beq	r2,zero,8041bc <logic+0x3950>
    d->sleepT = (d->sleepT < (d->VRP_DEADLINE - d->VRP_counter)) ? d->sleepT : (d->VRP_DEADLINE - d->VRP_counter);
  8040ec:	e0bffc17 	ldw	r2,-16(fp)
  8040f0:	14001617 	ldw	r16,88(r2)
  8040f4:	14401717 	ldw	r17,92(r2)
  8040f8:	e0bffc17 	ldw	r2,-16(fp)
  8040fc:	10800517 	ldw	r2,20(r2)
  804100:	1009883a 	mov	r4,r2
  804104:	08075940 	call	807594 <__floatsidf>
  804108:	1011883a 	mov	r8,r2
  80410c:	1813883a 	mov	r9,r3
  804110:	e13ffc17 	ldw	r4,-16(fp)
  804114:	20800d17 	ldw	r2,52(r4)
  804118:	20c00e17 	ldw	r3,56(r4)
  80411c:	100d883a 	mov	r6,r2
  804120:	180f883a 	mov	r7,r3
  804124:	4009883a 	mov	r4,r8
  804128:	480b883a 	mov	r5,r9
  80412c:	0806c980 	call	806c98 <__subdf3>
  804130:	1009883a 	mov	r4,r2
  804134:	180b883a 	mov	r5,r3
  804138:	2005883a 	mov	r2,r4
  80413c:	2807883a 	mov	r3,r5
  804140:	100d883a 	mov	r6,r2
  804144:	180f883a 	mov	r7,r3
  804148:	8009883a 	mov	r4,r16
  80414c:	880b883a 	mov	r5,r17
  804150:	080648c0 	call	80648c <__ledf2>
  804154:	1000040e 	bge	r2,zero,804168 <logic+0x38fc>
  804158:	e13ffc17 	ldw	r4,-16(fp)
  80415c:	20801617 	ldw	r2,88(r4)
  804160:	20c01717 	ldw	r3,92(r4)
  804164:	00001206 	br	8041b0 <logic+0x3944>
  804168:	e0bffc17 	ldw	r2,-16(fp)
  80416c:	10800517 	ldw	r2,20(r2)
  804170:	1009883a 	mov	r4,r2
  804174:	08075940 	call	807594 <__floatsidf>
  804178:	1011883a 	mov	r8,r2
  80417c:	1813883a 	mov	r9,r3
  804180:	e13ffc17 	ldw	r4,-16(fp)
  804184:	20800d17 	ldw	r2,52(r4)
  804188:	20c00e17 	ldw	r3,56(r4)
  80418c:	100d883a 	mov	r6,r2
  804190:	180f883a 	mov	r7,r3
  804194:	4009883a 	mov	r4,r8
  804198:	480b883a 	mov	r5,r9
  80419c:	0806c980 	call	806c98 <__subdf3>
  8041a0:	1009883a 	mov	r4,r2
  8041a4:	180b883a 	mov	r5,r3
  8041a8:	2005883a 	mov	r2,r4
  8041ac:	2807883a 	mov	r3,r5
  8041b0:	e13ffc17 	ldw	r4,-16(fp)
  8041b4:	20801615 	stw	r2,88(r4)
  8041b8:	20c01715 	stw	r3,92(r4)
  }
  d->_cg110 = d->_DDDpacemake2_local__Atrig7 || d->_DDDpacemake2_local__Atrig8;
  8041bc:	e0bffc17 	ldw	r2,-16(fp)
  8041c0:	10801dc3 	ldbu	r2,119(r2)
  8041c4:	10803fcc 	andi	r2,r2,255
  8041c8:	1080201c 	xori	r2,r2,128
  8041cc:	10bfe004 	addi	r2,r2,-128
  8041d0:	1000061e 	bne	r2,zero,8041ec <logic+0x3980>
  8041d4:	e0bffc17 	ldw	r2,-16(fp)
  8041d8:	10801e03 	ldbu	r2,120(r2)
  8041dc:	10803fcc 	andi	r2,r2,255
  8041e0:	1080201c 	xori	r2,r2,128
  8041e4:	10bfe004 	addi	r2,r2,-128
  8041e8:	10000226 	beq	r2,zero,8041f4 <logic+0x3988>
  8041ec:	00800044 	movi	r2,1
  8041f0:	00000106 	br	8041f8 <logic+0x398c>
  8041f4:	0005883a 	mov	r2,zero
  8041f8:	1007883a 	mov	r3,r2
  8041fc:	e0bffc17 	ldw	r2,-16(fp)
  804200:	10c04845 	stb	r3,289(r2)
  d->_g109 = d->_g114 && !d->_cg109;
  804204:	e0bffc17 	ldw	r2,-16(fp)
  804208:	10803443 	ldbu	r2,209(r2)
  80420c:	10803fcc 	andi	r2,r2,255
  804210:	1080201c 	xori	r2,r2,128
  804214:	10bfe004 	addi	r2,r2,-128
  804218:	10000826 	beq	r2,zero,80423c <logic+0x39d0>
  80421c:	e0bffc17 	ldw	r2,-16(fp)
  804220:	10804883 	ldbu	r2,290(r2)
  804224:	10803fcc 	andi	r2,r2,255
  804228:	1080201c 	xori	r2,r2,128
  80422c:	10bfe004 	addi	r2,r2,-128
  804230:	1000021e 	bne	r2,zero,80423c <logic+0x39d0>
  804234:	00800044 	movi	r2,1
  804238:	00000106 	br	804240 <logic+0x39d4>
  80423c:	0005883a 	mov	r2,zero
  804240:	1007883a 	mov	r3,r2
  804244:	e0bffc17 	ldw	r2,-16(fp)
  804248:	10c03345 	stb	r3,205(r2)
  d->_cg112 = d->_DDDpacemake2_local__Atrig7 || d->_DDDpacemake2_local__Atrig8;
  80424c:	e0bffc17 	ldw	r2,-16(fp)
  804250:	10801dc3 	ldbu	r2,119(r2)
  804254:	10803fcc 	andi	r2,r2,255
  804258:	1080201c 	xori	r2,r2,128
  80425c:	10bfe004 	addi	r2,r2,-128
  804260:	1000061e 	bne	r2,zero,80427c <logic+0x3a10>
  804264:	e0bffc17 	ldw	r2,-16(fp)
  804268:	10801e03 	ldbu	r2,120(r2)
  80426c:	10803fcc 	andi	r2,r2,255
  804270:	1080201c 	xori	r2,r2,128
  804274:	10bfe004 	addi	r2,r2,-128
  804278:	10000226 	beq	r2,zero,804284 <logic+0x3a18>
  80427c:	00800044 	movi	r2,1
  804280:	00000106 	br	804288 <logic+0x3a1c>
  804284:	0005883a 	mov	r2,zero
  804288:	1007883a 	mov	r3,r2
  80428c:	e0bffc17 	ldw	r2,-16(fp)
  804290:	10c048c5 	stb	r3,291(r2)
  d->_g111 = d->_g108 && d->_cg110 || d->_g109 && d->_cg112;
  804294:	e0bffc17 	ldw	r2,-16(fp)
  804298:	10803303 	ldbu	r2,204(r2)
  80429c:	10803fcc 	andi	r2,r2,255
  8042a0:	1080201c 	xori	r2,r2,128
  8042a4:	10bfe004 	addi	r2,r2,-128
  8042a8:	10000626 	beq	r2,zero,8042c4 <logic+0x3a58>
  8042ac:	e0bffc17 	ldw	r2,-16(fp)
  8042b0:	10804843 	ldbu	r2,289(r2)
  8042b4:	10803fcc 	andi	r2,r2,255
  8042b8:	1080201c 	xori	r2,r2,128
  8042bc:	10bfe004 	addi	r2,r2,-128
  8042c0:	10000c1e 	bne	r2,zero,8042f4 <logic+0x3a88>
  8042c4:	e0bffc17 	ldw	r2,-16(fp)
  8042c8:	10803343 	ldbu	r2,205(r2)
  8042cc:	10803fcc 	andi	r2,r2,255
  8042d0:	1080201c 	xori	r2,r2,128
  8042d4:	10bfe004 	addi	r2,r2,-128
  8042d8:	10000826 	beq	r2,zero,8042fc <logic+0x3a90>
  8042dc:	e0bffc17 	ldw	r2,-16(fp)
  8042e0:	108048c3 	ldbu	r2,291(r2)
  8042e4:	10803fcc 	andi	r2,r2,255
  8042e8:	1080201c 	xori	r2,r2,128
  8042ec:	10bfe004 	addi	r2,r2,-128
  8042f0:	10000226 	beq	r2,zero,8042fc <logic+0x3a90>
  8042f4:	00800044 	movi	r2,1
  8042f8:	00000106 	br	804300 <logic+0x3a94>
  8042fc:	0005883a 	mov	r2,zero
  804300:	1007883a 	mov	r3,r2
  804304:	e0bffc17 	ldw	r2,-16(fp)
  804308:	10c033c5 	stb	r3,207(r2)
  d->_g118 = !d->_g86;
  80430c:	e0bffc17 	ldw	r2,-16(fp)
  804310:	10802f43 	ldbu	r2,189(r2)
  804314:	10803fcc 	andi	r2,r2,255
  804318:	1080201c 	xori	r2,r2,128
  80431c:	10bfe004 	addi	r2,r2,-128
  804320:	1005003a 	cmpeq	r2,r2,zero
  804324:	1007883a 	mov	r3,r2
  804328:	e0bffc17 	ldw	r2,-16(fp)
  80432c:	10c034c5 	stb	r3,211(r2)
  d->_g122 = d->_g83 || d->_g122;
  804330:	e0bffc17 	ldw	r2,-16(fp)
  804334:	10802ec3 	ldbu	r2,187(r2)
  804338:	10803fcc 	andi	r2,r2,255
  80433c:	1080201c 	xori	r2,r2,128
  804340:	10bfe004 	addi	r2,r2,-128
  804344:	1000061e 	bne	r2,zero,804360 <logic+0x3af4>
  804348:	e0bffc17 	ldw	r2,-16(fp)
  80434c:	108035c3 	ldbu	r2,215(r2)
  804350:	10803fcc 	andi	r2,r2,255
  804354:	1080201c 	xori	r2,r2,128
  804358:	10bfe004 	addi	r2,r2,-128
  80435c:	10000226 	beq	r2,zero,804368 <logic+0x3afc>
  804360:	00800044 	movi	r2,1
  804364:	00000106 	br	80436c <logic+0x3b00>
  804368:	0005883a 	mov	r2,zero
  80436c:	1007883a 	mov	r3,r2
  804370:	e0bffc17 	ldw	r2,-16(fp)
  804374:	10c035c5 	stb	r3,215(r2)
  d->_g119 = (d->_g81 || d->_g111) && (d->_g118 || d->_g122) && (d->_g111 || d->_g122);
  804378:	e0bffc17 	ldw	r2,-16(fp)
  80437c:	10802e43 	ldbu	r2,185(r2)
  804380:	10803fcc 	andi	r2,r2,255
  804384:	1080201c 	xori	r2,r2,128
  804388:	10bfe004 	addi	r2,r2,-128
  80438c:	1000061e 	bne	r2,zero,8043a8 <logic+0x3b3c>
  804390:	e0bffc17 	ldw	r2,-16(fp)
  804394:	108033c3 	ldbu	r2,207(r2)
  804398:	10803fcc 	andi	r2,r2,255
  80439c:	1080201c 	xori	r2,r2,128
  8043a0:	10bfe004 	addi	r2,r2,-128
  8043a4:	10001a26 	beq	r2,zero,804410 <logic+0x3ba4>
  8043a8:	e0bffc17 	ldw	r2,-16(fp)
  8043ac:	108034c3 	ldbu	r2,211(r2)
  8043b0:	10803fcc 	andi	r2,r2,255
  8043b4:	1080201c 	xori	r2,r2,128
  8043b8:	10bfe004 	addi	r2,r2,-128
  8043bc:	1000061e 	bne	r2,zero,8043d8 <logic+0x3b6c>
  8043c0:	e0bffc17 	ldw	r2,-16(fp)
  8043c4:	108035c3 	ldbu	r2,215(r2)
  8043c8:	10803fcc 	andi	r2,r2,255
  8043cc:	1080201c 	xori	r2,r2,128
  8043d0:	10bfe004 	addi	r2,r2,-128
  8043d4:	10000e26 	beq	r2,zero,804410 <logic+0x3ba4>
  8043d8:	e0bffc17 	ldw	r2,-16(fp)
  8043dc:	108033c3 	ldbu	r2,207(r2)
  8043e0:	10803fcc 	andi	r2,r2,255
  8043e4:	1080201c 	xori	r2,r2,128
  8043e8:	10bfe004 	addi	r2,r2,-128
  8043ec:	1000061e 	bne	r2,zero,804408 <logic+0x3b9c>
  8043f0:	e0bffc17 	ldw	r2,-16(fp)
  8043f4:	108035c3 	ldbu	r2,215(r2)
  8043f8:	10803fcc 	andi	r2,r2,255
  8043fc:	1080201c 	xori	r2,r2,128
  804400:	10bfe004 	addi	r2,r2,-128
  804404:	10000226 	beq	r2,zero,804410 <logic+0x3ba4>
  804408:	00800044 	movi	r2,1
  80440c:	00000106 	br	804414 <logic+0x3ba8>
  804410:	0005883a 	mov	r2,zero
  804414:	1007883a 	mov	r3,r2
  804418:	e0bffc17 	ldw	r2,-16(fp)
  80441c:	10c03505 	stb	r3,212(r2)
  d->_cg123 = d->_DDDpacemake2_local__Atrig7;
  804420:	e0bffc17 	ldw	r2,-16(fp)
  804424:	10c01dc3 	ldbu	r3,119(r2)
  804428:	e0bffc17 	ldw	r2,-16(fp)
  80442c:	10c049c5 	stb	r3,295(r2)
  d->_g111 = d->_g119 && !d->_cg123;
  804430:	e0bffc17 	ldw	r2,-16(fp)
  804434:	10803503 	ldbu	r2,212(r2)
  804438:	10803fcc 	andi	r2,r2,255
  80443c:	1080201c 	xori	r2,r2,128
  804440:	10bfe004 	addi	r2,r2,-128
  804444:	10000826 	beq	r2,zero,804468 <logic+0x3bfc>
  804448:	e0bffc17 	ldw	r2,-16(fp)
  80444c:	108049c3 	ldbu	r2,295(r2)
  804450:	10803fcc 	andi	r2,r2,255
  804454:	1080201c 	xori	r2,r2,128
  804458:	10bfe004 	addi	r2,r2,-128
  80445c:	1000021e 	bne	r2,zero,804468 <logic+0x3bfc>
  804460:	00800044 	movi	r2,1
  804464:	00000106 	br	80446c <logic+0x3c00>
  804468:	0005883a 	mov	r2,zero
  80446c:	1007883a 	mov	r3,r2
  804470:	e0bffc17 	ldw	r2,-16(fp)
  804474:	10c033c5 	stb	r3,207(r2)
  if (d->_g111) {
  804478:	e0bffc17 	ldw	r2,-16(fp)
  80447c:	108033c3 	ldbu	r2,207(r2)
  804480:	10803fcc 	andi	r2,r2,255
  804484:	1080201c 	xori	r2,r2,128
  804488:	10bfe004 	addi	r2,r2,-128
  80448c:	10000426 	beq	r2,zero,8044a0 <logic+0x3c34>
    d->_DDDpacemake2_local_VR = 0;
  804490:	e0bffc17 	ldw	r2,-16(fp)
  804494:	100019c5 	stb	zero,103(r2)
    d->_DDDpacemake2_local_VRP_state = 0;
  804498:	e0bffc17 	ldw	r2,-16(fp)
  80449c:	10001905 	stb	zero,100(r2)
  }
  d->_g120_e2 = d->_GO || d->_g111 || d->_g102 && !d->_cg102;
  8044a0:	e0bffc17 	ldw	r2,-16(fp)
  8044a4:	10803ec3 	ldbu	r2,251(r2)
  8044a8:	10803fcc 	andi	r2,r2,255
  8044ac:	1080201c 	xori	r2,r2,128
  8044b0:	10bfe004 	addi	r2,r2,-128
  8044b4:	1000121e 	bne	r2,zero,804500 <logic+0x3c94>
  8044b8:	e0bffc17 	ldw	r2,-16(fp)
  8044bc:	108033c3 	ldbu	r2,207(r2)
  8044c0:	10803fcc 	andi	r2,r2,255
  8044c4:	1080201c 	xori	r2,r2,128
  8044c8:	10bfe004 	addi	r2,r2,-128
  8044cc:	10000c1e 	bne	r2,zero,804500 <logic+0x3c94>
  8044d0:	e0bffc17 	ldw	r2,-16(fp)
  8044d4:	10803203 	ldbu	r2,200(r2)
  8044d8:	10803fcc 	andi	r2,r2,255
  8044dc:	1080201c 	xori	r2,r2,128
  8044e0:	10bfe004 	addi	r2,r2,-128
  8044e4:	10000826 	beq	r2,zero,804508 <logic+0x3c9c>
  8044e8:	e0bffc17 	ldw	r2,-16(fp)
  8044ec:	10804783 	ldbu	r2,286(r2)
  8044f0:	10803fcc 	andi	r2,r2,255
  8044f4:	1080201c 	xori	r2,r2,128
  8044f8:	10bfe004 	addi	r2,r2,-128
  8044fc:	1000021e 	bne	r2,zero,804508 <logic+0x3c9c>
  804500:	00800044 	movi	r2,1
  804504:	00000106 	br	80450c <logic+0x3ca0>
  804508:	0005883a 	mov	r2,zero
  80450c:	1007883a 	mov	r3,r2
  804510:	e0bffc17 	ldw	r2,-16(fp)
  804514:	10c04f05 	stb	r3,316(r2)
  if (d->_g103) {
  804518:	e0bffc17 	ldw	r2,-16(fp)
  80451c:	10803243 	ldbu	r2,201(r2)
  804520:	10803fcc 	andi	r2,r2,255
  804524:	1080201c 	xori	r2,r2,128
  804528:	10bfe004 	addi	r2,r2,-128
  80452c:	10000326 	beq	r2,zero,80453c <logic+0x3cd0>
    d->VRP_counter = 0;
  804530:	e0bffc17 	ldw	r2,-16(fp)
  804534:	10000d15 	stw	zero,52(r2)
  804538:	10000e15 	stw	zero,56(r2)
  }
  d->_g111_e1 = d->_g119 && d->_cg123;
  80453c:	e0bffc17 	ldw	r2,-16(fp)
  804540:	10803503 	ldbu	r2,212(r2)
  804544:	10803fcc 	andi	r2,r2,255
  804548:	1080201c 	xori	r2,r2,128
  80454c:	10bfe004 	addi	r2,r2,-128
  804550:	10000826 	beq	r2,zero,804574 <logic+0x3d08>
  804554:	e0bffc17 	ldw	r2,-16(fp)
  804558:	108049c3 	ldbu	r2,295(r2)
  80455c:	10803fcc 	andi	r2,r2,255
  804560:	1080201c 	xori	r2,r2,128
  804564:	10bfe004 	addi	r2,r2,-128
  804568:	10000226 	beq	r2,zero,804574 <logic+0x3d08>
  80456c:	00800044 	movi	r2,1
  804570:	00000106 	br	804578 <logic+0x3d0c>
  804574:	0005883a 	mov	r2,zero
  804578:	1007883a 	mov	r3,r2
  80457c:	e0bffc17 	ldw	r2,-16(fp)
  804580:	10c04ec5 	stb	r3,315(r2)
  if (d->_g111_e1) {
  804584:	e0bffc17 	ldw	r2,-16(fp)
  804588:	10804ec3 	ldbu	r2,315(r2)
  80458c:	10803fcc 	andi	r2,r2,255
  804590:	1080201c 	xori	r2,r2,128
  804594:	10bfe004 	addi	r2,r2,-128
  804598:	10000326 	beq	r2,zero,8045a8 <logic+0x3d3c>
    d->_DDDpacemake2_local_VR = 1;
  80459c:	e0bffc17 	ldw	r2,-16(fp)
  8045a0:	00c00044 	movi	r3,1
  8045a4:	10c019c5 	stb	r3,103(r2)
  }
  d->_g120 = d->_g103 || d->_g111_e1;
  8045a8:	e0bffc17 	ldw	r2,-16(fp)
  8045ac:	10803243 	ldbu	r2,201(r2)
  8045b0:	10803fcc 	andi	r2,r2,255
  8045b4:	1080201c 	xori	r2,r2,128
  8045b8:	10bfe004 	addi	r2,r2,-128
  8045bc:	1000061e 	bne	r2,zero,8045d8 <logic+0x3d6c>
  8045c0:	e0bffc17 	ldw	r2,-16(fp)
  8045c4:	10804ec3 	ldbu	r2,315(r2)
  8045c8:	10803fcc 	andi	r2,r2,255
  8045cc:	1080201c 	xori	r2,r2,128
  8045d0:	10bfe004 	addi	r2,r2,-128
  8045d4:	10000226 	beq	r2,zero,8045e0 <logic+0x3d74>
  8045d8:	00800044 	movi	r2,1
  8045dc:	00000106 	br	8045e4 <logic+0x3d78>
  8045e0:	0005883a 	mov	r2,zero
  8045e4:	1007883a 	mov	r3,r2
  8045e8:	e0bffc17 	ldw	r2,-16(fp)
  8045ec:	10c03545 	stb	r3,213(r2)
  if (d->_g120) {
  8045f0:	e0bffc17 	ldw	r2,-16(fp)
  8045f4:	10803543 	ldbu	r2,213(r2)
  8045f8:	10803fcc 	andi	r2,r2,255
  8045fc:	1080201c 	xori	r2,r2,128
  804600:	10bfe004 	addi	r2,r2,-128
  804604:	10000426 	beq	r2,zero,804618 <logic+0x3dac>
    d->_DDDpacemake2_local__Atrig7 = 0;
  804608:	e0bffc17 	ldw	r2,-16(fp)
  80460c:	10001dc5 	stb	zero,119(r2)
    d->_DDDpacemake2_local__Atrig8 = 0;
  804610:	e0bffc17 	ldw	r2,-16(fp)
  804614:	10001e05 	stb	zero,120(r2)
  }
  d->_cg105 = d->VRP_counter < d->VRP_DEADLINE;
  804618:	e0bffc17 	ldw	r2,-16(fp)
  80461c:	14000d17 	ldw	r16,52(r2)
  804620:	14400e17 	ldw	r17,56(r2)
  804624:	e0bffc17 	ldw	r2,-16(fp)
  804628:	10800517 	ldw	r2,20(r2)
  80462c:	1009883a 	mov	r4,r2
  804630:	08075940 	call	807594 <__floatsidf>
  804634:	1009883a 	mov	r4,r2
  804638:	180b883a 	mov	r5,r3
  80463c:	04800044 	movi	r18,1
  804640:	200d883a 	mov	r6,r4
  804644:	280f883a 	mov	r7,r5
  804648:	8009883a 	mov	r4,r16
  80464c:	880b883a 	mov	r5,r17
  804650:	080648c0 	call	80648c <__ledf2>
  804654:	10000116 	blt	r2,zero,80465c <logic+0x3df0>
  804658:	0025883a 	mov	r18,zero
  80465c:	9007883a 	mov	r3,r18
  804660:	e0bffc17 	ldw	r2,-16(fp)
  804664:	10c047c5 	stb	r3,287(r2)
  d->_g102 = d->_g120 && d->_cg105;
  804668:	e0bffc17 	ldw	r2,-16(fp)
  80466c:	10803543 	ldbu	r2,213(r2)
  804670:	10803fcc 	andi	r2,r2,255
  804674:	1080201c 	xori	r2,r2,128
  804678:	10bfe004 	addi	r2,r2,-128
  80467c:	10000826 	beq	r2,zero,8046a0 <logic+0x3e34>
  804680:	e0bffc17 	ldw	r2,-16(fp)
  804684:	108047c3 	ldbu	r2,287(r2)
  804688:	10803fcc 	andi	r2,r2,255
  80468c:	1080201c 	xori	r2,r2,128
  804690:	10bfe004 	addi	r2,r2,-128
  804694:	10000226 	beq	r2,zero,8046a0 <logic+0x3e34>
  804698:	00800044 	movi	r2,1
  80469c:	00000106 	br	8046a4 <logic+0x3e38>
  8046a0:	0005883a 	mov	r2,zero
  8046a4:	1007883a 	mov	r3,r2
  8046a8:	e0bffc17 	ldw	r2,-16(fp)
  8046ac:	10c03205 	stb	r3,200(r2)
  if (d->_g102) {
  8046b0:	e0bffc17 	ldw	r2,-16(fp)
  8046b4:	10803203 	ldbu	r2,200(r2)
  8046b8:	10803fcc 	andi	r2,r2,255
  8046bc:	1080201c 	xori	r2,r2,128
  8046c0:	10bfe004 	addi	r2,r2,-128
  8046c4:	10003426 	beq	r2,zero,804798 <logic+0x3f2c>
    d->sleepT = (d->sleepT < (d->VRP_DEADLINE - d->VRP_counter)) ? d->sleepT : (d->VRP_DEADLINE - d->VRP_counter);
  8046c8:	e0bffc17 	ldw	r2,-16(fp)
  8046cc:	14001617 	ldw	r16,88(r2)
  8046d0:	14401717 	ldw	r17,92(r2)
  8046d4:	e0bffc17 	ldw	r2,-16(fp)
  8046d8:	10800517 	ldw	r2,20(r2)
  8046dc:	1009883a 	mov	r4,r2
  8046e0:	08075940 	call	807594 <__floatsidf>
  8046e4:	1011883a 	mov	r8,r2
  8046e8:	1813883a 	mov	r9,r3
  8046ec:	e13ffc17 	ldw	r4,-16(fp)
  8046f0:	20800d17 	ldw	r2,52(r4)
  8046f4:	20c00e17 	ldw	r3,56(r4)
  8046f8:	100d883a 	mov	r6,r2
  8046fc:	180f883a 	mov	r7,r3
  804700:	4009883a 	mov	r4,r8
  804704:	480b883a 	mov	r5,r9
  804708:	0806c980 	call	806c98 <__subdf3>
  80470c:	1009883a 	mov	r4,r2
  804710:	180b883a 	mov	r5,r3
  804714:	2005883a 	mov	r2,r4
  804718:	2807883a 	mov	r3,r5
  80471c:	100d883a 	mov	r6,r2
  804720:	180f883a 	mov	r7,r3
  804724:	8009883a 	mov	r4,r16
  804728:	880b883a 	mov	r5,r17
  80472c:	080648c0 	call	80648c <__ledf2>
  804730:	1000040e 	bge	r2,zero,804744 <logic+0x3ed8>
  804734:	e13ffc17 	ldw	r4,-16(fp)
  804738:	20801617 	ldw	r2,88(r4)
  80473c:	20c01717 	ldw	r3,92(r4)
  804740:	00001206 	br	80478c <logic+0x3f20>
  804744:	e0bffc17 	ldw	r2,-16(fp)
  804748:	10800517 	ldw	r2,20(r2)
  80474c:	1009883a 	mov	r4,r2
  804750:	08075940 	call	807594 <__floatsidf>
  804754:	1011883a 	mov	r8,r2
  804758:	1813883a 	mov	r9,r3
  80475c:	e13ffc17 	ldw	r4,-16(fp)
  804760:	20800d17 	ldw	r2,52(r4)
  804764:	20c00e17 	ldw	r3,56(r4)
  804768:	100d883a 	mov	r6,r2
  80476c:	180f883a 	mov	r7,r3
  804770:	4009883a 	mov	r4,r8
  804774:	480b883a 	mov	r5,r9
  804778:	0806c980 	call	806c98 <__subdf3>
  80477c:	1009883a 	mov	r4,r2
  804780:	180b883a 	mov	r5,r3
  804784:	2005883a 	mov	r2,r4
  804788:	2807883a 	mov	r3,r5
  80478c:	e13ffc17 	ldw	r4,-16(fp)
  804790:	20801615 	stw	r2,88(r4)
  804794:	20c01715 	stw	r3,92(r4)
  }
  d->_cg106 = d->_DDDpacemake2_local__Atrig7 || d->_DDDpacemake2_local__Atrig8;
  804798:	e0bffc17 	ldw	r2,-16(fp)
  80479c:	10801dc3 	ldbu	r2,119(r2)
  8047a0:	10803fcc 	andi	r2,r2,255
  8047a4:	1080201c 	xori	r2,r2,128
  8047a8:	10bfe004 	addi	r2,r2,-128
  8047ac:	1000061e 	bne	r2,zero,8047c8 <logic+0x3f5c>
  8047b0:	e0bffc17 	ldw	r2,-16(fp)
  8047b4:	10801e03 	ldbu	r2,120(r2)
  8047b8:	10803fcc 	andi	r2,r2,255
  8047bc:	1080201c 	xori	r2,r2,128
  8047c0:	10bfe004 	addi	r2,r2,-128
  8047c4:	10000226 	beq	r2,zero,8047d0 <logic+0x3f64>
  8047c8:	00800044 	movi	r2,1
  8047cc:	00000106 	br	8047d4 <logic+0x3f68>
  8047d0:	0005883a 	mov	r2,zero
  8047d4:	1007883a 	mov	r3,r2
  8047d8:	e0bffc17 	ldw	r2,-16(fp)
  8047dc:	10c04805 	stb	r3,288(r2)
  d->_g125 = d->_g102 && !d->_cg106 || d->_g108 && !d->_cg110;
  8047e0:	e0bffc17 	ldw	r2,-16(fp)
  8047e4:	10803203 	ldbu	r2,200(r2)
  8047e8:	10803fcc 	andi	r2,r2,255
  8047ec:	1080201c 	xori	r2,r2,128
  8047f0:	10bfe004 	addi	r2,r2,-128
  8047f4:	10000626 	beq	r2,zero,804810 <logic+0x3fa4>
  8047f8:	e0bffc17 	ldw	r2,-16(fp)
  8047fc:	10804803 	ldbu	r2,288(r2)
  804800:	10803fcc 	andi	r2,r2,255
  804804:	1080201c 	xori	r2,r2,128
  804808:	10bfe004 	addi	r2,r2,-128
  80480c:	10000c26 	beq	r2,zero,804840 <logic+0x3fd4>
  804810:	e0bffc17 	ldw	r2,-16(fp)
  804814:	10803303 	ldbu	r2,204(r2)
  804818:	10803fcc 	andi	r2,r2,255
  80481c:	1080201c 	xori	r2,r2,128
  804820:	10bfe004 	addi	r2,r2,-128
  804824:	10000826 	beq	r2,zero,804848 <logic+0x3fdc>
  804828:	e0bffc17 	ldw	r2,-16(fp)
  80482c:	10804843 	ldbu	r2,289(r2)
  804830:	10803fcc 	andi	r2,r2,255
  804834:	1080201c 	xori	r2,r2,128
  804838:	10bfe004 	addi	r2,r2,-128
  80483c:	1000021e 	bne	r2,zero,804848 <logic+0x3fdc>
  804840:	00800044 	movi	r2,1
  804844:	00000106 	br	80484c <logic+0x3fe0>
  804848:	0005883a 	mov	r2,zero
  80484c:	1007883a 	mov	r3,r2
  804850:	e0bffc17 	ldw	r2,-16(fp)
  804854:	10c03685 	stb	r3,218(r2)
  d->_g123 = d->_g120 && !d->_cg105;
  804858:	e0bffc17 	ldw	r2,-16(fp)
  80485c:	10803543 	ldbu	r2,213(r2)
  804860:	10803fcc 	andi	r2,r2,255
  804864:	1080201c 	xori	r2,r2,128
  804868:	10bfe004 	addi	r2,r2,-128
  80486c:	10000826 	beq	r2,zero,804890 <logic+0x4024>
  804870:	e0bffc17 	ldw	r2,-16(fp)
  804874:	108047c3 	ldbu	r2,287(r2)
  804878:	10803fcc 	andi	r2,r2,255
  80487c:	1080201c 	xori	r2,r2,128
  804880:	10bfe004 	addi	r2,r2,-128
  804884:	1000021e 	bne	r2,zero,804890 <logic+0x4024>
  804888:	00800044 	movi	r2,1
  80488c:	00000106 	br	804894 <logic+0x4028>
  804890:	0005883a 	mov	r2,zero
  804894:	1007883a 	mov	r3,r2
  804898:	e0bffc17 	ldw	r2,-16(fp)
  80489c:	10c03605 	stb	r3,216(r2)
  d->_cg115 = d->_DDDpacemake2_local__Atrig7 || d->_DDDpacemake2_local__Atrig8;
  8048a0:	e0bffc17 	ldw	r2,-16(fp)
  8048a4:	10801dc3 	ldbu	r2,119(r2)
  8048a8:	10803fcc 	andi	r2,r2,255
  8048ac:	1080201c 	xori	r2,r2,128
  8048b0:	10bfe004 	addi	r2,r2,-128
  8048b4:	1000061e 	bne	r2,zero,8048d0 <logic+0x4064>
  8048b8:	e0bffc17 	ldw	r2,-16(fp)
  8048bc:	10801e03 	ldbu	r2,120(r2)
  8048c0:	10803fcc 	andi	r2,r2,255
  8048c4:	1080201c 	xori	r2,r2,128
  8048c8:	10bfe004 	addi	r2,r2,-128
  8048cc:	10000226 	beq	r2,zero,8048d8 <logic+0x406c>
  8048d0:	00800044 	movi	r2,1
  8048d4:	00000106 	br	8048dc <logic+0x4070>
  8048d8:	0005883a 	mov	r2,zero
  8048dc:	1007883a 	mov	r3,r2
  8048e0:	e0bffc17 	ldw	r2,-16(fp)
  8048e4:	10c04905 	stb	r3,292(r2)
  d->_g124 = d->_g109 && !d->_cg112 || d->_g123 && !d->_cg115;
  8048e8:	e0bffc17 	ldw	r2,-16(fp)
  8048ec:	10803343 	ldbu	r2,205(r2)
  8048f0:	10803fcc 	andi	r2,r2,255
  8048f4:	1080201c 	xori	r2,r2,128
  8048f8:	10bfe004 	addi	r2,r2,-128
  8048fc:	10000626 	beq	r2,zero,804918 <logic+0x40ac>
  804900:	e0bffc17 	ldw	r2,-16(fp)
  804904:	108048c3 	ldbu	r2,291(r2)
  804908:	10803fcc 	andi	r2,r2,255
  80490c:	1080201c 	xori	r2,r2,128
  804910:	10bfe004 	addi	r2,r2,-128
  804914:	10000c26 	beq	r2,zero,804948 <logic+0x40dc>
  804918:	e0bffc17 	ldw	r2,-16(fp)
  80491c:	10803603 	ldbu	r2,216(r2)
  804920:	10803fcc 	andi	r2,r2,255
  804924:	1080201c 	xori	r2,r2,128
  804928:	10bfe004 	addi	r2,r2,-128
  80492c:	10000826 	beq	r2,zero,804950 <logic+0x40e4>
  804930:	e0bffc17 	ldw	r2,-16(fp)
  804934:	10804903 	ldbu	r2,292(r2)
  804938:	10803fcc 	andi	r2,r2,255
  80493c:	1080201c 	xori	r2,r2,128
  804940:	10bfe004 	addi	r2,r2,-128
  804944:	1000021e 	bne	r2,zero,804950 <logic+0x40e4>
  804948:	00800044 	movi	r2,1
  80494c:	00000106 	br	804954 <logic+0x40e8>
  804950:	0005883a 	mov	r2,zero
  804954:	1007883a 	mov	r3,r2
  804958:	e0bffc17 	ldw	r2,-16(fp)
  80495c:	10c03645 	stb	r3,217(r2)
  d->_g103 = d->_g120 || d->_g75 && !d->_cg121;
  804960:	e0bffc17 	ldw	r2,-16(fp)
  804964:	10803543 	ldbu	r2,213(r2)
  804968:	10803fcc 	andi	r2,r2,255
  80496c:	1080201c 	xori	r2,r2,128
  804970:	10bfe004 	addi	r2,r2,-128
  804974:	10000c1e 	bne	r2,zero,8049a8 <logic+0x413c>
  804978:	e0bffc17 	ldw	r2,-16(fp)
  80497c:	10802d43 	ldbu	r2,181(r2)
  804980:	10803fcc 	andi	r2,r2,255
  804984:	1080201c 	xori	r2,r2,128
  804988:	10bfe004 	addi	r2,r2,-128
  80498c:	10000826 	beq	r2,zero,8049b0 <logic+0x4144>
  804990:	e0bffc17 	ldw	r2,-16(fp)
  804994:	10804943 	ldbu	r2,293(r2)
  804998:	10803fcc 	andi	r2,r2,255
  80499c:	1080201c 	xori	r2,r2,128
  8049a0:	10bfe004 	addi	r2,r2,-128
  8049a4:	1000021e 	bne	r2,zero,8049b0 <logic+0x4144>
  8049a8:	00800044 	movi	r2,1
  8049ac:	00000106 	br	8049b4 <logic+0x4148>
  8049b0:	0005883a 	mov	r2,zero
  8049b4:	1007883a 	mov	r3,r2
  8049b8:	e0bffc17 	ldw	r2,-16(fp)
  8049bc:	10c03245 	stb	r3,201(r2)
  d->_g106 = d->_pg137;
  8049c0:	e0bffc17 	ldw	r2,-16(fp)
  8049c4:	10c05783 	ldbu	r3,350(r2)
  8049c8:	e0bffc17 	ldw	r2,-16(fp)
  8049cc:	10c032c5 	stb	r3,203(r2)
  d->_cg142 = d->VS || d->_DDDpacemake2_local__pre_VP_temp;
  8049d0:	e0bffc17 	ldw	r2,-16(fp)
  8049d4:	10800643 	ldbu	r2,25(r2)
  8049d8:	10803fcc 	andi	r2,r2,255
  8049dc:	1080201c 	xori	r2,r2,128
  8049e0:	10bfe004 	addi	r2,r2,-128
  8049e4:	1000061e 	bne	r2,zero,804a00 <logic+0x4194>
  8049e8:	e0bffc17 	ldw	r2,-16(fp)
  8049ec:	10801b43 	ldbu	r2,109(r2)
  8049f0:	10803fcc 	andi	r2,r2,255
  8049f4:	1080201c 	xori	r2,r2,128
  8049f8:	10bfe004 	addi	r2,r2,-128
  8049fc:	10000226 	beq	r2,zero,804a08 <logic+0x419c>
  804a00:	00800044 	movi	r2,1
  804a04:	00000106 	br	804a0c <logic+0x41a0>
  804a08:	0005883a 	mov	r2,zero
  804a0c:	1007883a 	mov	r3,r2
  804a10:	e0bffc17 	ldw	r2,-16(fp)
  804a14:	10c04b45 	stb	r3,301(r2)
  d->_g110 = d->_g106 && d->_cg142;
  804a18:	e0bffc17 	ldw	r2,-16(fp)
  804a1c:	108032c3 	ldbu	r2,203(r2)
  804a20:	10803fcc 	andi	r2,r2,255
  804a24:	1080201c 	xori	r2,r2,128
  804a28:	10bfe004 	addi	r2,r2,-128
  804a2c:	10000826 	beq	r2,zero,804a50 <logic+0x41e4>
  804a30:	e0bffc17 	ldw	r2,-16(fp)
  804a34:	10804b43 	ldbu	r2,301(r2)
  804a38:	10803fcc 	andi	r2,r2,255
  804a3c:	1080201c 	xori	r2,r2,128
  804a40:	10bfe004 	addi	r2,r2,-128
  804a44:	10000226 	beq	r2,zero,804a50 <logic+0x41e4>
  804a48:	00800044 	movi	r2,1
  804a4c:	00000106 	br	804a54 <logic+0x41e8>
  804a50:	0005883a 	mov	r2,zero
  804a54:	1007883a 	mov	r3,r2
  804a58:	e0bffc17 	ldw	r2,-16(fp)
  804a5c:	10c03385 	stb	r3,206(r2)
  if (d->_g110) {
  804a60:	e0bffc17 	ldw	r2,-16(fp)
  804a64:	10803383 	ldbu	r2,206(r2)
  804a68:	10803fcc 	andi	r2,r2,255
  804a6c:	1080201c 	xori	r2,r2,128
  804a70:	10bfe004 	addi	r2,r2,-128
  804a74:	10000326 	beq	r2,zero,804a84 <logic+0x4218>
    d->_DDDpacemake2_local__Atrig9 = 1;
  804a78:	e0bffc17 	ldw	r2,-16(fp)
  804a7c:	00c00044 	movi	r3,1
  804a80:	10c01e45 	stb	r3,121(r2)
  }
  d->_g112 = d->_pg148;
  804a84:	e0bffc17 	ldw	r2,-16(fp)
  804a88:	10c057c3 	ldbu	r3,351(r2)
  804a8c:	e0bffc17 	ldw	r2,-16(fp)
  804a90:	10c03405 	stb	r3,208(r2)
  if (d->_g112) {
  804a94:	e0bffc17 	ldw	r2,-16(fp)
  804a98:	10803403 	ldbu	r2,208(r2)
  804a9c:	10803fcc 	andi	r2,r2,255
  804aa0:	1080201c 	xori	r2,r2,128
  804aa4:	10bfe004 	addi	r2,r2,-128
  804aa8:	10001226 	beq	r2,zero,804af4 <logic+0x4288>
    d->LRI_counter += d->deltaT;
  804aac:	e13ffc17 	ldw	r4,-16(fp)
  804ab0:	20800f17 	ldw	r2,60(r4)
  804ab4:	20c01017 	ldw	r3,64(r4)
  804ab8:	e1bffc17 	ldw	r6,-16(fp)
  804abc:	31001417 	ldw	r4,80(r6)
  804ac0:	31401517 	ldw	r5,84(r6)
  804ac4:	200d883a 	mov	r6,r4
  804ac8:	280f883a 	mov	r7,r5
  804acc:	1009883a 	mov	r4,r2
  804ad0:	180b883a 	mov	r5,r3
  804ad4:	0805b040 	call	805b04 <__adddf3>
  804ad8:	1009883a 	mov	r4,r2
  804adc:	180b883a 	mov	r5,r3
  804ae0:	2005883a 	mov	r2,r4
  804ae4:	2807883a 	mov	r3,r5
  804ae8:	e13ffc17 	ldw	r4,-16(fp)
  804aec:	20800f15 	stw	r2,60(r4)
  804af0:	20c01015 	stw	r3,64(r4)
  }
  d->_g115 = d->_g106 && !d->_cg142;
  804af4:	e0bffc17 	ldw	r2,-16(fp)
  804af8:	108032c3 	ldbu	r2,203(r2)
  804afc:	10803fcc 	andi	r2,r2,255
  804b00:	1080201c 	xori	r2,r2,128
  804b04:	10bfe004 	addi	r2,r2,-128
  804b08:	10000826 	beq	r2,zero,804b2c <logic+0x42c0>
  804b0c:	e0bffc17 	ldw	r2,-16(fp)
  804b10:	10804b43 	ldbu	r2,301(r2)
  804b14:	10803fcc 	andi	r2,r2,255
  804b18:	1080201c 	xori	r2,r2,128
  804b1c:	10bfe004 	addi	r2,r2,-128
  804b20:	1000021e 	bne	r2,zero,804b2c <logic+0x42c0>
  804b24:	00800044 	movi	r2,1
  804b28:	00000106 	br	804b30 <logic+0x42c4>
  804b2c:	0005883a 	mov	r2,zero
  804b30:	1007883a 	mov	r3,r2
  804b34:	e0bffc17 	ldw	r2,-16(fp)
  804b38:	10c03485 	stb	r3,210(r2)
  d->_cg145 = d->LRI_counter >= d->LRI_DEADLINE;
  804b3c:	e0bffc17 	ldw	r2,-16(fp)
  804b40:	14000f17 	ldw	r16,60(r2)
  804b44:	14401017 	ldw	r17,64(r2)
  804b48:	e0bffc17 	ldw	r2,-16(fp)
  804b4c:	10800317 	ldw	r2,12(r2)
  804b50:	1009883a 	mov	r4,r2
  804b54:	08075940 	call	807594 <__floatsidf>
  804b58:	1009883a 	mov	r4,r2
  804b5c:	180b883a 	mov	r5,r3
  804b60:	04800044 	movi	r18,1
  804b64:	200d883a 	mov	r6,r4
  804b68:	280f883a 	mov	r7,r5
  804b6c:	8009883a 	mov	r4,r16
  804b70:	880b883a 	mov	r5,r17
  804b74:	08063b00 	call	8063b0 <__gedf2>
  804b78:	1000010e 	bge	r2,zero,804b80 <logic+0x4314>
  804b7c:	0025883a 	mov	r18,zero
  804b80:	9007883a 	mov	r3,r18
  804b84:	e0bffc17 	ldw	r2,-16(fp)
  804b88:	10c04b05 	stb	r3,300(r2)
  d->_g121 = d->_g115 && d->_cg145;
  804b8c:	e0bffc17 	ldw	r2,-16(fp)
  804b90:	10803483 	ldbu	r2,210(r2)
  804b94:	10803fcc 	andi	r2,r2,255
  804b98:	1080201c 	xori	r2,r2,128
  804b9c:	10bfe004 	addi	r2,r2,-128
  804ba0:	10000826 	beq	r2,zero,804bc4 <logic+0x4358>
  804ba4:	e0bffc17 	ldw	r2,-16(fp)
  804ba8:	10804b03 	ldbu	r2,300(r2)
  804bac:	10803fcc 	andi	r2,r2,255
  804bb0:	1080201c 	xori	r2,r2,128
  804bb4:	10bfe004 	addi	r2,r2,-128
  804bb8:	10000226 	beq	r2,zero,804bc4 <logic+0x4358>
  804bbc:	00800044 	movi	r2,1
  804bc0:	00000106 	br	804bc8 <logic+0x435c>
  804bc4:	0005883a 	mov	r2,zero
  804bc8:	1007883a 	mov	r3,r2
  804bcc:	e0bffc17 	ldw	r2,-16(fp)
  804bd0:	10c03585 	stb	r3,214(r2)
  if (d->_g121) {
  804bd4:	e0bffc17 	ldw	r2,-16(fp)
  804bd8:	10803583 	ldbu	r2,214(r2)
  804bdc:	10803fcc 	andi	r2,r2,255
  804be0:	1080201c 	xori	r2,r2,128
  804be4:	10bfe004 	addi	r2,r2,-128
  804be8:	10000326 	beq	r2,zero,804bf8 <logic+0x438c>
    d->_DDDpacemake2_local__Atrig10 = 1;
  804bec:	e0bffc17 	ldw	r2,-16(fp)
  804bf0:	00c00044 	movi	r3,1
  804bf4:	10c01e85 	stb	r3,122(r2)
  }
  d->_g104 = d->_pg144;
  804bf8:	e0bffc17 	ldw	r2,-16(fp)
  804bfc:	10c05803 	ldbu	r3,352(r2)
  804c00:	e0bffc17 	ldw	r2,-16(fp)
  804c04:	10c03285 	stb	r3,202(r2)
  d->_cg129 = d->VS || d->_DDDpacemake2_local__pre_VP_temp;
  804c08:	e0bffc17 	ldw	r2,-16(fp)
  804c0c:	10800643 	ldbu	r2,25(r2)
  804c10:	10803fcc 	andi	r2,r2,255
  804c14:	1080201c 	xori	r2,r2,128
  804c18:	10bfe004 	addi	r2,r2,-128
  804c1c:	1000061e 	bne	r2,zero,804c38 <logic+0x43cc>
  804c20:	e0bffc17 	ldw	r2,-16(fp)
  804c24:	10801b43 	ldbu	r2,109(r2)
  804c28:	10803fcc 	andi	r2,r2,255
  804c2c:	1080201c 	xori	r2,r2,128
  804c30:	10bfe004 	addi	r2,r2,-128
  804c34:	10000226 	beq	r2,zero,804c40 <logic+0x43d4>
  804c38:	00800044 	movi	r2,1
  804c3c:	00000106 	br	804c44 <logic+0x43d8>
  804c40:	0005883a 	mov	r2,zero
  804c44:	1007883a 	mov	r3,r2
  804c48:	e0bffc17 	ldw	r2,-16(fp)
  804c4c:	10c04a05 	stb	r3,296(r2)
  d->_g142 = d->_g104 && d->_cg129;
  804c50:	e0bffc17 	ldw	r2,-16(fp)
  804c54:	10803283 	ldbu	r2,202(r2)
  804c58:	10803fcc 	andi	r2,r2,255
  804c5c:	1080201c 	xori	r2,r2,128
  804c60:	10bfe004 	addi	r2,r2,-128
  804c64:	10000826 	beq	r2,zero,804c88 <logic+0x441c>
  804c68:	e0bffc17 	ldw	r2,-16(fp)
  804c6c:	10804a03 	ldbu	r2,296(r2)
  804c70:	10803fcc 	andi	r2,r2,255
  804c74:	1080201c 	xori	r2,r2,128
  804c78:	10bfe004 	addi	r2,r2,-128
  804c7c:	10000226 	beq	r2,zero,804c88 <logic+0x441c>
  804c80:	00800044 	movi	r2,1
  804c84:	00000106 	br	804c8c <logic+0x4420>
  804c88:	0005883a 	mov	r2,zero
  804c8c:	1007883a 	mov	r3,r2
  804c90:	e0bffc17 	ldw	r2,-16(fp)
  804c94:	10c03945 	stb	r3,229(r2)
  if (d->_g142) {
  804c98:	e0bffc17 	ldw	r2,-16(fp)
  804c9c:	10803943 	ldbu	r2,229(r2)
  804ca0:	10803fcc 	andi	r2,r2,255
  804ca4:	1080201c 	xori	r2,r2,128
  804ca8:	10bfe004 	addi	r2,r2,-128
  804cac:	10000a26 	beq	r2,zero,804cd8 <logic+0x446c>
    d->_DDDpacemake2_local_LRI_state = 1;
  804cb0:	e0bffc17 	ldw	r2,-16(fp)
  804cb4:	00c00044 	movi	r3,1
  804cb8:	10c01885 	stb	r3,98(r2)
    d->LRI_counter = 0;
  804cbc:	e0bffc17 	ldw	r2,-16(fp)
  804cc0:	10000f15 	stw	zero,60(r2)
  804cc4:	10001015 	stw	zero,64(r2)
    d->_DDDpacemake2_local__Atrig9 = 0;
  804cc8:	e0bffc17 	ldw	r2,-16(fp)
  804ccc:	10001e45 	stb	zero,121(r2)
    d->_DDDpacemake2_local__Atrig10 = 0;
  804cd0:	e0bffc17 	ldw	r2,-16(fp)
  804cd4:	10001e85 	stb	zero,122(r2)
  }
  d->_g136 = d->_pg135;
  804cd8:	e0bffc17 	ldw	r2,-16(fp)
  804cdc:	10c05843 	ldbu	r3,353(r2)
  804ce0:	e0bffc17 	ldw	r2,-16(fp)
  804ce4:	10c03845 	stb	r3,225(r2)
  d->_g139 = d->_pg138;
  804ce8:	e0bffc17 	ldw	r2,-16(fp)
  804cec:	10c05883 	ldbu	r3,354(r2)
  804cf0:	e0bffc17 	ldw	r2,-16(fp)
  804cf4:	10c03905 	stb	r3,228(r2)
  d->_g139 = d->_g142 || d->_g136 || d->_g139;
  804cf8:	e0bffc17 	ldw	r2,-16(fp)
  804cfc:	10803943 	ldbu	r2,229(r2)
  804d00:	10803fcc 	andi	r2,r2,255
  804d04:	1080201c 	xori	r2,r2,128
  804d08:	10bfe004 	addi	r2,r2,-128
  804d0c:	10000c1e 	bne	r2,zero,804d40 <logic+0x44d4>
  804d10:	e0bffc17 	ldw	r2,-16(fp)
  804d14:	10803843 	ldbu	r2,225(r2)
  804d18:	10803fcc 	andi	r2,r2,255
  804d1c:	1080201c 	xori	r2,r2,128
  804d20:	10bfe004 	addi	r2,r2,-128
  804d24:	1000061e 	bne	r2,zero,804d40 <logic+0x44d4>
  804d28:	e0bffc17 	ldw	r2,-16(fp)
  804d2c:	10803903 	ldbu	r2,228(r2)
  804d30:	10803fcc 	andi	r2,r2,255
  804d34:	1080201c 	xori	r2,r2,128
  804d38:	10bfe004 	addi	r2,r2,-128
  804d3c:	10000226 	beq	r2,zero,804d48 <logic+0x44dc>
  804d40:	00800044 	movi	r2,1
  804d44:	00000106 	br	804d4c <logic+0x44e0>
  804d48:	0005883a 	mov	r2,zero
  804d4c:	1007883a 	mov	r3,r2
  804d50:	e0bffc17 	ldw	r2,-16(fp)
  804d54:	10c03905 	stb	r3,228(r2)
  d->_cg132 = d->LRI_counter < d->LRI_DEADLINE;
  804d58:	e0bffc17 	ldw	r2,-16(fp)
  804d5c:	14000f17 	ldw	r16,60(r2)
  804d60:	14401017 	ldw	r17,64(r2)
  804d64:	e0bffc17 	ldw	r2,-16(fp)
  804d68:	10800317 	ldw	r2,12(r2)
  804d6c:	1009883a 	mov	r4,r2
  804d70:	08075940 	call	807594 <__floatsidf>
  804d74:	1009883a 	mov	r4,r2
  804d78:	180b883a 	mov	r5,r3
  804d7c:	04800044 	movi	r18,1
  804d80:	200d883a 	mov	r6,r4
  804d84:	280f883a 	mov	r7,r5
  804d88:	8009883a 	mov	r4,r16
  804d8c:	880b883a 	mov	r5,r17
  804d90:	080648c0 	call	80648c <__ledf2>
  804d94:	10000116 	blt	r2,zero,804d9c <logic+0x4530>
  804d98:	0025883a 	mov	r18,zero
  804d9c:	9007883a 	mov	r3,r18
  804da0:	e0bffc17 	ldw	r2,-16(fp)
  804da4:	10c04a45 	stb	r3,297(r2)
  d->_g136 = d->_g139 && !d->_cg132;
  804da8:	e0bffc17 	ldw	r2,-16(fp)
  804dac:	10803903 	ldbu	r2,228(r2)
  804db0:	10803fcc 	andi	r2,r2,255
  804db4:	1080201c 	xori	r2,r2,128
  804db8:	10bfe004 	addi	r2,r2,-128
  804dbc:	10000826 	beq	r2,zero,804de0 <logic+0x4574>
  804dc0:	e0bffc17 	ldw	r2,-16(fp)
  804dc4:	10804a43 	ldbu	r2,297(r2)
  804dc8:	10803fcc 	andi	r2,r2,255
  804dcc:	1080201c 	xori	r2,r2,128
  804dd0:	10bfe004 	addi	r2,r2,-128
  804dd4:	1000021e 	bne	r2,zero,804de0 <logic+0x4574>
  804dd8:	00800044 	movi	r2,1
  804ddc:	00000106 	br	804de4 <logic+0x4578>
  804de0:	0005883a 	mov	r2,zero
  804de4:	1007883a 	mov	r3,r2
  804de8:	e0bffc17 	ldw	r2,-16(fp)
  804dec:	10c03845 	stb	r3,225(r2)
  d->_cg137 = d->_DDDpacemake2_local__Atrig9 || d->_DDDpacemake2_local__Atrig10;
  804df0:	e0bffc17 	ldw	r2,-16(fp)
  804df4:	10801e43 	ldbu	r2,121(r2)
  804df8:	10803fcc 	andi	r2,r2,255
  804dfc:	1080201c 	xori	r2,r2,128
  804e00:	10bfe004 	addi	r2,r2,-128
  804e04:	1000061e 	bne	r2,zero,804e20 <logic+0x45b4>
  804e08:	e0bffc17 	ldw	r2,-16(fp)
  804e0c:	10801e83 	ldbu	r2,122(r2)
  804e10:	10803fcc 	andi	r2,r2,255
  804e14:	1080201c 	xori	r2,r2,128
  804e18:	10bfe004 	addi	r2,r2,-128
  804e1c:	10000226 	beq	r2,zero,804e28 <logic+0x45bc>
  804e20:	00800044 	movi	r2,1
  804e24:	00000106 	br	804e2c <logic+0x45c0>
  804e28:	0005883a 	mov	r2,zero
  804e2c:	1007883a 	mov	r3,r2
  804e30:	e0bffc17 	ldw	r2,-16(fp)
  804e34:	10c04ac5 	stb	r3,299(r2)
  d->_g138 = d->_g136 && !d->_cg137;
  804e38:	e0bffc17 	ldw	r2,-16(fp)
  804e3c:	10803843 	ldbu	r2,225(r2)
  804e40:	10803fcc 	andi	r2,r2,255
  804e44:	1080201c 	xori	r2,r2,128
  804e48:	10bfe004 	addi	r2,r2,-128
  804e4c:	10000826 	beq	r2,zero,804e70 <logic+0x4604>
  804e50:	e0bffc17 	ldw	r2,-16(fp)
  804e54:	10804ac3 	ldbu	r2,299(r2)
  804e58:	10803fcc 	andi	r2,r2,255
  804e5c:	1080201c 	xori	r2,r2,128
  804e60:	10bfe004 	addi	r2,r2,-128
  804e64:	1000021e 	bne	r2,zero,804e70 <logic+0x4604>
  804e68:	00800044 	movi	r2,1
  804e6c:	00000106 	br	804e74 <logic+0x4608>
  804e70:	0005883a 	mov	r2,zero
  804e74:	1007883a 	mov	r3,r2
  804e78:	e0bffc17 	ldw	r2,-16(fp)
  804e7c:	10c038c5 	stb	r3,227(r2)
  d->_g132 = d->_g139 && d->_cg132;
  804e80:	e0bffc17 	ldw	r2,-16(fp)
  804e84:	10803903 	ldbu	r2,228(r2)
  804e88:	10803fcc 	andi	r2,r2,255
  804e8c:	1080201c 	xori	r2,r2,128
  804e90:	10bfe004 	addi	r2,r2,-128
  804e94:	10000826 	beq	r2,zero,804eb8 <logic+0x464c>
  804e98:	e0bffc17 	ldw	r2,-16(fp)
  804e9c:	10804a43 	ldbu	r2,297(r2)
  804ea0:	10803fcc 	andi	r2,r2,255
  804ea4:	1080201c 	xori	r2,r2,128
  804ea8:	10bfe004 	addi	r2,r2,-128
  804eac:	10000226 	beq	r2,zero,804eb8 <logic+0x464c>
  804eb0:	00800044 	movi	r2,1
  804eb4:	00000106 	br	804ebc <logic+0x4650>
  804eb8:	0005883a 	mov	r2,zero
  804ebc:	1007883a 	mov	r3,r2
  804ec0:	e0bffc17 	ldw	r2,-16(fp)
  804ec4:	10c03745 	stb	r3,221(r2)
  if (d->_g132) {
  804ec8:	e0bffc17 	ldw	r2,-16(fp)
  804ecc:	10803743 	ldbu	r2,221(r2)
  804ed0:	10803fcc 	andi	r2,r2,255
  804ed4:	1080201c 	xori	r2,r2,128
  804ed8:	10bfe004 	addi	r2,r2,-128
  804edc:	10003426 	beq	r2,zero,804fb0 <logic+0x4744>
    d->sleepT = (d->sleepT < (d->LRI_DEADLINE - d->LRI_counter)) ? d->sleepT : (d->LRI_DEADLINE - d->LRI_counter);
  804ee0:	e0bffc17 	ldw	r2,-16(fp)
  804ee4:	14001617 	ldw	r16,88(r2)
  804ee8:	14401717 	ldw	r17,92(r2)
  804eec:	e0bffc17 	ldw	r2,-16(fp)
  804ef0:	10800317 	ldw	r2,12(r2)
  804ef4:	1009883a 	mov	r4,r2
  804ef8:	08075940 	call	807594 <__floatsidf>
  804efc:	1011883a 	mov	r8,r2
  804f00:	1813883a 	mov	r9,r3
  804f04:	e13ffc17 	ldw	r4,-16(fp)
  804f08:	20800f17 	ldw	r2,60(r4)
  804f0c:	20c01017 	ldw	r3,64(r4)
  804f10:	100d883a 	mov	r6,r2
  804f14:	180f883a 	mov	r7,r3
  804f18:	4009883a 	mov	r4,r8
  804f1c:	480b883a 	mov	r5,r9
  804f20:	0806c980 	call	806c98 <__subdf3>
  804f24:	1009883a 	mov	r4,r2
  804f28:	180b883a 	mov	r5,r3
  804f2c:	2005883a 	mov	r2,r4
  804f30:	2807883a 	mov	r3,r5
  804f34:	100d883a 	mov	r6,r2
  804f38:	180f883a 	mov	r7,r3
  804f3c:	8009883a 	mov	r4,r16
  804f40:	880b883a 	mov	r5,r17
  804f44:	080648c0 	call	80648c <__ledf2>
  804f48:	1000040e 	bge	r2,zero,804f5c <logic+0x46f0>
  804f4c:	e13ffc17 	ldw	r4,-16(fp)
  804f50:	20801617 	ldw	r2,88(r4)
  804f54:	20c01717 	ldw	r3,92(r4)
  804f58:	00001206 	br	804fa4 <logic+0x4738>
  804f5c:	e0bffc17 	ldw	r2,-16(fp)
  804f60:	10800317 	ldw	r2,12(r2)
  804f64:	1009883a 	mov	r4,r2
  804f68:	08075940 	call	807594 <__floatsidf>
  804f6c:	1011883a 	mov	r8,r2
  804f70:	1813883a 	mov	r9,r3
  804f74:	e13ffc17 	ldw	r4,-16(fp)
  804f78:	20800f17 	ldw	r2,60(r4)
  804f7c:	20c01017 	ldw	r3,64(r4)
  804f80:	100d883a 	mov	r6,r2
  804f84:	180f883a 	mov	r7,r3
  804f88:	4009883a 	mov	r4,r8
  804f8c:	480b883a 	mov	r5,r9
  804f90:	0806c980 	call	806c98 <__subdf3>
  804f94:	1009883a 	mov	r4,r2
  804f98:	180b883a 	mov	r5,r3
  804f9c:	2005883a 	mov	r2,r4
  804fa0:	2807883a 	mov	r3,r5
  804fa4:	e13ffc17 	ldw	r4,-16(fp)
  804fa8:	20801615 	stw	r2,88(r4)
  804fac:	20c01715 	stw	r3,92(r4)
  }
  d->_cg133 = d->_DDDpacemake2_local__Atrig9 || d->_DDDpacemake2_local__Atrig10;
  804fb0:	e0bffc17 	ldw	r2,-16(fp)
  804fb4:	10801e43 	ldbu	r2,121(r2)
  804fb8:	10803fcc 	andi	r2,r2,255
  804fbc:	1080201c 	xori	r2,r2,128
  804fc0:	10bfe004 	addi	r2,r2,-128
  804fc4:	1000061e 	bne	r2,zero,804fe0 <logic+0x4774>
  804fc8:	e0bffc17 	ldw	r2,-16(fp)
  804fcc:	10801e83 	ldbu	r2,122(r2)
  804fd0:	10803fcc 	andi	r2,r2,255
  804fd4:	1080201c 	xori	r2,r2,128
  804fd8:	10bfe004 	addi	r2,r2,-128
  804fdc:	10000226 	beq	r2,zero,804fe8 <logic+0x477c>
  804fe0:	00800044 	movi	r2,1
  804fe4:	00000106 	br	804fec <logic+0x4780>
  804fe8:	0005883a 	mov	r2,zero
  804fec:	1007883a 	mov	r3,r2
  804ff0:	e0bffc17 	ldw	r2,-16(fp)
  804ff4:	10c04a85 	stb	r3,298(r2)
  d->_g135 = d->_g132 && !d->_cg133;
  804ff8:	e0bffc17 	ldw	r2,-16(fp)
  804ffc:	10803743 	ldbu	r2,221(r2)
  805000:	10803fcc 	andi	r2,r2,255
  805004:	1080201c 	xori	r2,r2,128
  805008:	10bfe004 	addi	r2,r2,-128
  80500c:	10000826 	beq	r2,zero,805030 <logic+0x47c4>
  805010:	e0bffc17 	ldw	r2,-16(fp)
  805014:	10804a83 	ldbu	r2,298(r2)
  805018:	10803fcc 	andi	r2,r2,255
  80501c:	1080201c 	xori	r2,r2,128
  805020:	10bfe004 	addi	r2,r2,-128
  805024:	1000021e 	bne	r2,zero,805030 <logic+0x47c4>
  805028:	00800044 	movi	r2,1
  80502c:	00000106 	br	805034 <logic+0x47c8>
  805030:	0005883a 	mov	r2,zero
  805034:	1007883a 	mov	r3,r2
  805038:	e0bffc17 	ldw	r2,-16(fp)
  80503c:	10c03805 	stb	r3,224(r2)
  d->_g134_e1 = !(d->_g138 || d->_g135);
  805040:	e0bffc17 	ldw	r2,-16(fp)
  805044:	108038c3 	ldbu	r2,227(r2)
  805048:	10803fcc 	andi	r2,r2,255
  80504c:	1080201c 	xori	r2,r2,128
  805050:	10bfe004 	addi	r2,r2,-128
  805054:	1000081e 	bne	r2,zero,805078 <logic+0x480c>
  805058:	e0bffc17 	ldw	r2,-16(fp)
  80505c:	10803803 	ldbu	r2,224(r2)
  805060:	10803fcc 	andi	r2,r2,255
  805064:	1080201c 	xori	r2,r2,128
  805068:	10bfe004 	addi	r2,r2,-128
  80506c:	1000021e 	bne	r2,zero,805078 <logic+0x480c>
  805070:	00800044 	movi	r2,1
  805074:	00000106 	br	80507c <logic+0x4810>
  805078:	0005883a 	mov	r2,zero
  80507c:	1007883a 	mov	r3,r2
  805080:	e0bffc17 	ldw	r2,-16(fp)
  805084:	10c04f45 	stb	r3,317(r2)
  d->_g133 = d->_g132 && d->_cg133 || d->_g136 && d->_cg137;
  805088:	e0bffc17 	ldw	r2,-16(fp)
  80508c:	10803743 	ldbu	r2,221(r2)
  805090:	10803fcc 	andi	r2,r2,255
  805094:	1080201c 	xori	r2,r2,128
  805098:	10bfe004 	addi	r2,r2,-128
  80509c:	10000626 	beq	r2,zero,8050b8 <logic+0x484c>
  8050a0:	e0bffc17 	ldw	r2,-16(fp)
  8050a4:	10804a83 	ldbu	r2,298(r2)
  8050a8:	10803fcc 	andi	r2,r2,255
  8050ac:	1080201c 	xori	r2,r2,128
  8050b0:	10bfe004 	addi	r2,r2,-128
  8050b4:	10000c1e 	bne	r2,zero,8050e8 <logic+0x487c>
  8050b8:	e0bffc17 	ldw	r2,-16(fp)
  8050bc:	10803843 	ldbu	r2,225(r2)
  8050c0:	10803fcc 	andi	r2,r2,255
  8050c4:	1080201c 	xori	r2,r2,128
  8050c8:	10bfe004 	addi	r2,r2,-128
  8050cc:	10000826 	beq	r2,zero,8050f0 <logic+0x4884>
  8050d0:	e0bffc17 	ldw	r2,-16(fp)
  8050d4:	10804ac3 	ldbu	r2,299(r2)
  8050d8:	10803fcc 	andi	r2,r2,255
  8050dc:	1080201c 	xori	r2,r2,128
  8050e0:	10bfe004 	addi	r2,r2,-128
  8050e4:	10000226 	beq	r2,zero,8050f0 <logic+0x4884>
  8050e8:	00800044 	movi	r2,1
  8050ec:	00000106 	br	8050f4 <logic+0x4888>
  8050f0:	0005883a 	mov	r2,zero
  8050f4:	1007883a 	mov	r3,r2
  8050f8:	e0bffc17 	ldw	r2,-16(fp)
  8050fc:	10c03785 	stb	r3,222(r2)
  d->_g137 = d->_g142 || d->_g115 && !d->_cg145;
  805100:	e0bffc17 	ldw	r2,-16(fp)
  805104:	10803943 	ldbu	r2,229(r2)
  805108:	10803fcc 	andi	r2,r2,255
  80510c:	1080201c 	xori	r2,r2,128
  805110:	10bfe004 	addi	r2,r2,-128
  805114:	10000c1e 	bne	r2,zero,805148 <logic+0x48dc>
  805118:	e0bffc17 	ldw	r2,-16(fp)
  80511c:	10803483 	ldbu	r2,210(r2)
  805120:	10803fcc 	andi	r2,r2,255
  805124:	1080201c 	xori	r2,r2,128
  805128:	10bfe004 	addi	r2,r2,-128
  80512c:	10000826 	beq	r2,zero,805150 <logic+0x48e4>
  805130:	e0bffc17 	ldw	r2,-16(fp)
  805134:	10804b03 	ldbu	r2,300(r2)
  805138:	10803fcc 	andi	r2,r2,255
  80513c:	1080201c 	xori	r2,r2,128
  805140:	10bfe004 	addi	r2,r2,-128
  805144:	1000021e 	bne	r2,zero,805150 <logic+0x48e4>
  805148:	00800044 	movi	r2,1
  80514c:	00000106 	br	805154 <logic+0x48e8>
  805150:	0005883a 	mov	r2,zero
  805154:	1007883a 	mov	r3,r2
  805158:	e0bffc17 	ldw	r2,-16(fp)
  80515c:	10c03885 	stb	r3,226(r2)
  d->_g130 = !d->_g137;
  805160:	e0bffc17 	ldw	r2,-16(fp)
  805164:	10803883 	ldbu	r2,226(r2)
  805168:	10803fcc 	andi	r2,r2,255
  80516c:	1080201c 	xori	r2,r2,128
  805170:	10bfe004 	addi	r2,r2,-128
  805174:	1005003a 	cmpeq	r2,r2,zero
  805178:	1007883a 	mov	r3,r2
  80517c:	e0bffc17 	ldw	r2,-16(fp)
  805180:	10c03705 	stb	r3,220(r2)
  d->_g145 = d->_g110 || d->_g121;
  805184:	e0bffc17 	ldw	r2,-16(fp)
  805188:	10803383 	ldbu	r2,206(r2)
  80518c:	10803fcc 	andi	r2,r2,255
  805190:	1080201c 	xori	r2,r2,128
  805194:	10bfe004 	addi	r2,r2,-128
  805198:	1000061e 	bne	r2,zero,8051b4 <logic+0x4948>
  80519c:	e0bffc17 	ldw	r2,-16(fp)
  8051a0:	10803583 	ldbu	r2,214(r2)
  8051a4:	10803fcc 	andi	r2,r2,255
  8051a8:	1080201c 	xori	r2,r2,128
  8051ac:	10bfe004 	addi	r2,r2,-128
  8051b0:	10000226 	beq	r2,zero,8051bc <logic+0x4950>
  8051b4:	00800044 	movi	r2,1
  8051b8:	00000106 	br	8051c0 <logic+0x4954>
  8051bc:	0005883a 	mov	r2,zero
  8051c0:	1007883a 	mov	r3,r2
  8051c4:	e0bffc17 	ldw	r2,-16(fp)
  8051c8:	10c03a05 	stb	r3,232(r2)
  d->_g146 = (d->_g134_e1 || d->_g133) && (d->_g130 || d->_g145) && (d->_g133 || d->_g145);
  8051cc:	e0bffc17 	ldw	r2,-16(fp)
  8051d0:	10804f43 	ldbu	r2,317(r2)
  8051d4:	10803fcc 	andi	r2,r2,255
  8051d8:	1080201c 	xori	r2,r2,128
  8051dc:	10bfe004 	addi	r2,r2,-128
  8051e0:	1000061e 	bne	r2,zero,8051fc <logic+0x4990>
  8051e4:	e0bffc17 	ldw	r2,-16(fp)
  8051e8:	10803783 	ldbu	r2,222(r2)
  8051ec:	10803fcc 	andi	r2,r2,255
  8051f0:	1080201c 	xori	r2,r2,128
  8051f4:	10bfe004 	addi	r2,r2,-128
  8051f8:	10001a26 	beq	r2,zero,805264 <logic+0x49f8>
  8051fc:	e0bffc17 	ldw	r2,-16(fp)
  805200:	10803703 	ldbu	r2,220(r2)
  805204:	10803fcc 	andi	r2,r2,255
  805208:	1080201c 	xori	r2,r2,128
  80520c:	10bfe004 	addi	r2,r2,-128
  805210:	1000061e 	bne	r2,zero,80522c <logic+0x49c0>
  805214:	e0bffc17 	ldw	r2,-16(fp)
  805218:	10803a03 	ldbu	r2,232(r2)
  80521c:	10803fcc 	andi	r2,r2,255
  805220:	1080201c 	xori	r2,r2,128
  805224:	10bfe004 	addi	r2,r2,-128
  805228:	10000e26 	beq	r2,zero,805264 <logic+0x49f8>
  80522c:	e0bffc17 	ldw	r2,-16(fp)
  805230:	10803783 	ldbu	r2,222(r2)
  805234:	10803fcc 	andi	r2,r2,255
  805238:	1080201c 	xori	r2,r2,128
  80523c:	10bfe004 	addi	r2,r2,-128
  805240:	1000061e 	bne	r2,zero,80525c <logic+0x49f0>
  805244:	e0bffc17 	ldw	r2,-16(fp)
  805248:	10803a03 	ldbu	r2,232(r2)
  80524c:	10803fcc 	andi	r2,r2,255
  805250:	1080201c 	xori	r2,r2,128
  805254:	10bfe004 	addi	r2,r2,-128
  805258:	10000226 	beq	r2,zero,805264 <logic+0x49f8>
  80525c:	00800044 	movi	r2,1
  805260:	00000106 	br	805268 <logic+0x49fc>
  805264:	0005883a 	mov	r2,zero
  805268:	1007883a 	mov	r3,r2
  80526c:	e0bffc17 	ldw	r2,-16(fp)
  805270:	10c03a45 	stb	r3,233(r2)
  d->_cg147 = d->_DDDpacemake2_local__Atrig9;
  805274:	e0bffc17 	ldw	r2,-16(fp)
  805278:	10c01e43 	ldbu	r3,121(r2)
  80527c:	e0bffc17 	ldw	r2,-16(fp)
  805280:	10c04b85 	stb	r3,302(r2)
  d->_g143 = d->_g146 && d->_cg147;
  805284:	e0bffc17 	ldw	r2,-16(fp)
  805288:	10803a43 	ldbu	r2,233(r2)
  80528c:	10803fcc 	andi	r2,r2,255
  805290:	1080201c 	xori	r2,r2,128
  805294:	10bfe004 	addi	r2,r2,-128
  805298:	10000826 	beq	r2,zero,8052bc <logic+0x4a50>
  80529c:	e0bffc17 	ldw	r2,-16(fp)
  8052a0:	10804b83 	ldbu	r2,302(r2)
  8052a4:	10803fcc 	andi	r2,r2,255
  8052a8:	1080201c 	xori	r2,r2,128
  8052ac:	10bfe004 	addi	r2,r2,-128
  8052b0:	10000226 	beq	r2,zero,8052bc <logic+0x4a50>
  8052b4:	00800044 	movi	r2,1
  8052b8:	00000106 	br	8052c0 <logic+0x4a54>
  8052bc:	0005883a 	mov	r2,zero
  8052c0:	1007883a 	mov	r3,r2
  8052c4:	e0bffc17 	ldw	r2,-16(fp)
  8052c8:	10c03985 	stb	r3,230(r2)
  if (d->_g143) {
  8052cc:	e0bffc17 	ldw	r2,-16(fp)
  8052d0:	10803983 	ldbu	r2,230(r2)
  8052d4:	10803fcc 	andi	r2,r2,255
  8052d8:	1080201c 	xori	r2,r2,128
  8052dc:	10bfe004 	addi	r2,r2,-128
  8052e0:	10000226 	beq	r2,zero,8052ec <logic+0x4a80>
    d->_DDDpacemake2_local_LRI_state = 0;
  8052e4:	e0bffc17 	ldw	r2,-16(fp)
  8052e8:	10001885 	stb	zero,98(r2)
  }
  d->_g134 = d->_g146 && !d->_cg147;
  8052ec:	e0bffc17 	ldw	r2,-16(fp)
  8052f0:	10803a43 	ldbu	r2,233(r2)
  8052f4:	10803fcc 	andi	r2,r2,255
  8052f8:	1080201c 	xori	r2,r2,128
  8052fc:	10bfe004 	addi	r2,r2,-128
  805300:	10000826 	beq	r2,zero,805324 <logic+0x4ab8>
  805304:	e0bffc17 	ldw	r2,-16(fp)
  805308:	10804b83 	ldbu	r2,302(r2)
  80530c:	10803fcc 	andi	r2,r2,255
  805310:	1080201c 	xori	r2,r2,128
  805314:	10bfe004 	addi	r2,r2,-128
  805318:	1000021e 	bne	r2,zero,805324 <logic+0x4ab8>
  80531c:	00800044 	movi	r2,1
  805320:	00000106 	br	805328 <logic+0x4abc>
  805324:	0005883a 	mov	r2,zero
  805328:	1007883a 	mov	r3,r2
  80532c:	e0bffc17 	ldw	r2,-16(fp)
  805330:	10c037c5 	stb	r3,223(r2)
  if (d->_g134) {
  805334:	e0bffc17 	ldw	r2,-16(fp)
  805338:	108037c3 	ldbu	r2,223(r2)
  80533c:	10803fcc 	andi	r2,r2,255
  805340:	1080201c 	xori	r2,r2,128
  805344:	10bfe004 	addi	r2,r2,-128
  805348:	10000226 	beq	r2,zero,805354 <logic+0x4ae8>
    d->_DDDpacemake2_local_LRI_state = 0;
  80534c:	e0bffc17 	ldw	r2,-16(fp)
  805350:	10001885 	stb	zero,98(r2)
  }
  d->_g144 = d->_GO || d->_g143 || d->_g134 || d->_g104 && !d->_cg129;
  805354:	e0bffc17 	ldw	r2,-16(fp)
  805358:	10803ec3 	ldbu	r2,251(r2)
  80535c:	10803fcc 	andi	r2,r2,255
  805360:	1080201c 	xori	r2,r2,128
  805364:	10bfe004 	addi	r2,r2,-128
  805368:	1000181e 	bne	r2,zero,8053cc <logic+0x4b60>
  80536c:	e0bffc17 	ldw	r2,-16(fp)
  805370:	10803983 	ldbu	r2,230(r2)
  805374:	10803fcc 	andi	r2,r2,255
  805378:	1080201c 	xori	r2,r2,128
  80537c:	10bfe004 	addi	r2,r2,-128
  805380:	1000121e 	bne	r2,zero,8053cc <logic+0x4b60>
  805384:	e0bffc17 	ldw	r2,-16(fp)
  805388:	108037c3 	ldbu	r2,223(r2)
  80538c:	10803fcc 	andi	r2,r2,255
  805390:	1080201c 	xori	r2,r2,128
  805394:	10bfe004 	addi	r2,r2,-128
  805398:	10000c1e 	bne	r2,zero,8053cc <logic+0x4b60>
  80539c:	e0bffc17 	ldw	r2,-16(fp)
  8053a0:	10803283 	ldbu	r2,202(r2)
  8053a4:	10803fcc 	andi	r2,r2,255
  8053a8:	1080201c 	xori	r2,r2,128
  8053ac:	10bfe004 	addi	r2,r2,-128
  8053b0:	10000826 	beq	r2,zero,8053d4 <logic+0x4b68>
  8053b4:	e0bffc17 	ldw	r2,-16(fp)
  8053b8:	10804a03 	ldbu	r2,296(r2)
  8053bc:	10803fcc 	andi	r2,r2,255
  8053c0:	1080201c 	xori	r2,r2,128
  8053c4:	10bfe004 	addi	r2,r2,-128
  8053c8:	1000021e 	bne	r2,zero,8053d4 <logic+0x4b68>
  8053cc:	00800044 	movi	r2,1
  8053d0:	00000106 	br	8053d8 <logic+0x4b6c>
  8053d4:	0005883a 	mov	r2,zero
  8053d8:	1007883a 	mov	r3,r2
  8053dc:	e0bffc17 	ldw	r2,-16(fp)
  8053e0:	10c039c5 	stb	r3,231(r2)
  d->_g144_e2 = d->_GO || d->_g166 || d->_g153 && !d->_cg153;
  8053e4:	e0bffc17 	ldw	r2,-16(fp)
  8053e8:	10803ec3 	ldbu	r2,251(r2)
  8053ec:	10803fcc 	andi	r2,r2,255
  8053f0:	1080201c 	xori	r2,r2,128
  8053f4:	10bfe004 	addi	r2,r2,-128
  8053f8:	1000121e 	bne	r2,zero,805444 <logic+0x4bd8>
  8053fc:	e0bffc17 	ldw	r2,-16(fp)
  805400:	10803dc3 	ldbu	r2,247(r2)
  805404:	10803fcc 	andi	r2,r2,255
  805408:	1080201c 	xori	r2,r2,128
  80540c:	10bfe004 	addi	r2,r2,-128
  805410:	10000c1e 	bne	r2,zero,805444 <logic+0x4bd8>
  805414:	e0bffc17 	ldw	r2,-16(fp)
  805418:	10803b43 	ldbu	r2,237(r2)
  80541c:	10803fcc 	andi	r2,r2,255
  805420:	1080201c 	xori	r2,r2,128
  805424:	10bfe004 	addi	r2,r2,-128
  805428:	10000826 	beq	r2,zero,80544c <logic+0x4be0>
  80542c:	e0bffc17 	ldw	r2,-16(fp)
  805430:	10804bc3 	ldbu	r2,303(r2)
  805434:	10803fcc 	andi	r2,r2,255
  805438:	1080201c 	xori	r2,r2,128
  80543c:	10bfe004 	addi	r2,r2,-128
  805440:	1000021e 	bne	r2,zero,80544c <logic+0x4be0>
  805444:	00800044 	movi	r2,1
  805448:	00000106 	br	805450 <logic+0x4be4>
  80544c:	0005883a 	mov	r2,zero
  805450:	1007883a 	mov	r3,r2
  805454:	e0bffc17 	ldw	r2,-16(fp)
  805458:	10c04f85 	stb	r3,318(r2)
  d->_DDDpacemake2_local__reg_VP_temp = d->_DDDpacemake2_local_VP_temp;
  80545c:	e0bffc17 	ldw	r2,-16(fp)
  805460:	10c01a43 	ldbu	r3,105(r2)
  805464:	e0bffc17 	ldw	r2,-16(fp)
  805468:	10c01b05 	stb	r3,108(r2)
  d->_DDDpacemake2_local__reg_AP_temp = d->_DDDpacemake2_local_AP_temp;
  80546c:	e0bffc17 	ldw	r2,-16(fp)
  805470:	10c01a03 	ldbu	r3,104(r2)
  805474:	e0bffc17 	ldw	r2,-16(fp)
  805478:	10c01b85 	stb	r3,110(r2)
  d->_g134_e1 = d->_GO || d->_g167;
  80547c:	e0bffc17 	ldw	r2,-16(fp)
  805480:	10803ec3 	ldbu	r2,251(r2)
  805484:	10803fcc 	andi	r2,r2,255
  805488:	1080201c 	xori	r2,r2,128
  80548c:	10bfe004 	addi	r2,r2,-128
  805490:	1000061e 	bne	r2,zero,8054ac <logic+0x4c40>
  805494:	e0bffc17 	ldw	r2,-16(fp)
  805498:	10803e03 	ldbu	r2,248(r2)
  80549c:	10803fcc 	andi	r2,r2,255
  8054a0:	1080201c 	xori	r2,r2,128
  8054a4:	10bfe004 	addi	r2,r2,-128
  8054a8:	10000226 	beq	r2,zero,8054b4 <logic+0x4c48>
  8054ac:	00800044 	movi	r2,1
  8054b0:	00000106 	br	8054b8 <logic+0x4c4c>
  8054b4:	0005883a 	mov	r2,zero
  8054b8:	1007883a 	mov	r3,r2
  8054bc:	e0bffc17 	ldw	r2,-16(fp)
  8054c0:	10c04f45 	stb	r3,317(r2)
  d->_g147 = d->_GO || d->_g5;
  8054c4:	e0bffc17 	ldw	r2,-16(fp)
  8054c8:	10803ec3 	ldbu	r2,251(r2)
  8054cc:	10803fcc 	andi	r2,r2,255
  8054d0:	1080201c 	xori	r2,r2,128
  8054d4:	10bfe004 	addi	r2,r2,-128
  8054d8:	1000061e 	bne	r2,zero,8054f4 <logic+0x4c88>
  8054dc:	e0bffc17 	ldw	r2,-16(fp)
  8054e0:	10801f43 	ldbu	r2,125(r2)
  8054e4:	10803fcc 	andi	r2,r2,255
  8054e8:	1080201c 	xori	r2,r2,128
  8054ec:	10bfe004 	addi	r2,r2,-128
  8054f0:	10000226 	beq	r2,zero,8054fc <logic+0x4c90>
  8054f4:	00800044 	movi	r2,1
  8054f8:	00000106 	br	805500 <logic+0x4c94>
  8054fc:	0005883a 	mov	r2,zero
  805500:	1007883a 	mov	r3,r2
  805504:	e0bffc17 	ldw	r2,-16(fp)
  805508:	10c03a85 	stb	r3,234(r2)
  d->_g149 = d->_GO || d->_g68;
  80550c:	e0bffc17 	ldw	r2,-16(fp)
  805510:	10803ec3 	ldbu	r2,251(r2)
  805514:	10803fcc 	andi	r2,r2,255
  805518:	1080201c 	xori	r2,r2,128
  80551c:	10bfe004 	addi	r2,r2,-128
  805520:	1000061e 	bne	r2,zero,80553c <logic+0x4cd0>
  805524:	e0bffc17 	ldw	r2,-16(fp)
  805528:	10802c43 	ldbu	r2,177(r2)
  80552c:	10803fcc 	andi	r2,r2,255
  805530:	1080201c 	xori	r2,r2,128
  805534:	10bfe004 	addi	r2,r2,-128
  805538:	10000226 	beq	r2,zero,805544 <logic+0x4cd8>
  80553c:	00800044 	movi	r2,1
  805540:	00000106 	br	805548 <logic+0x4cdc>
  805544:	0005883a 	mov	r2,zero
  805548:	1007883a 	mov	r3,r2
  80554c:	e0bffc17 	ldw	r2,-16(fp)
  805550:	10c03b05 	stb	r3,236(r2)
  d->_g129 = d->_GO || d->_g92;
  805554:	e0bffc17 	ldw	r2,-16(fp)
  805558:	10803ec3 	ldbu	r2,251(r2)
  80555c:	10803fcc 	andi	r2,r2,255
  805560:	1080201c 	xori	r2,r2,128
  805564:	10bfe004 	addi	r2,r2,-128
  805568:	1000061e 	bne	r2,zero,805584 <logic+0x4d18>
  80556c:	e0bffc17 	ldw	r2,-16(fp)
  805570:	10803043 	ldbu	r2,193(r2)
  805574:	10803fcc 	andi	r2,r2,255
  805578:	1080201c 	xori	r2,r2,128
  80557c:	10bfe004 	addi	r2,r2,-128
  805580:	10000226 	beq	r2,zero,80558c <logic+0x4d20>
  805584:	00800044 	movi	r2,1
  805588:	00000106 	br	805590 <logic+0x4d24>
  80558c:	0005883a 	mov	r2,zero
  805590:	1007883a 	mov	r3,r2
  805594:	e0bffc17 	ldw	r2,-16(fp)
  805598:	10c036c5 	stb	r3,219(r2)
  d->_g148 = d->_GO || d->_g112;
  80559c:	e0bffc17 	ldw	r2,-16(fp)
  8055a0:	10803ec3 	ldbu	r2,251(r2)
  8055a4:	10803fcc 	andi	r2,r2,255
  8055a8:	1080201c 	xori	r2,r2,128
  8055ac:	10bfe004 	addi	r2,r2,-128
  8055b0:	1000061e 	bne	r2,zero,8055cc <logic+0x4d60>
  8055b4:	e0bffc17 	ldw	r2,-16(fp)
  8055b8:	10803403 	ldbu	r2,208(r2)
  8055bc:	10803fcc 	andi	r2,r2,255
  8055c0:	1080201c 	xori	r2,r2,128
  8055c4:	10bfe004 	addi	r2,r2,-128
  8055c8:	10000226 	beq	r2,zero,8055d4 <logic+0x4d68>
  8055cc:	00800044 	movi	r2,1
  8055d0:	00000106 	br	8055d8 <logic+0x4d6c>
  8055d4:	0005883a 	mov	r2,zero
  8055d8:	1007883a 	mov	r3,r2
  8055dc:	e0bffc17 	ldw	r2,-16(fp)
  8055e0:	10c03ac5 	stb	r3,235(r2)
  d->_g168 = d->_GO || d->_g212;
  8055e4:	e0bffc17 	ldw	r2,-16(fp)
  8055e8:	10803ec3 	ldbu	r2,251(r2)
  8055ec:	10803fcc 	andi	r2,r2,255
  8055f0:	1080201c 	xori	r2,r2,128
  8055f4:	10bfe004 	addi	r2,r2,-128
  8055f8:	1000061e 	bne	r2,zero,805614 <logic+0x4da8>
  8055fc:	e0bffc17 	ldw	r2,-16(fp)
  805600:	10803e83 	ldbu	r2,250(r2)
  805604:	10803fcc 	andi	r2,r2,255
  805608:	1080201c 	xori	r2,r2,128
  80560c:	10bfe004 	addi	r2,r2,-128
  805610:	10000226 	beq	r2,zero,80561c <logic+0x4db0>
  805614:	00800044 	movi	r2,1
  805618:	00000106 	br	805620 <logic+0x4db4>
  80561c:	0005883a 	mov	r2,zero
  805620:	1007883a 	mov	r3,r2
  805624:	e0bffc17 	ldw	r2,-16(fp)
  805628:	10c03e45 	stb	r3,249(r2)
}
  80562c:	0001883a 	nop
  805630:	e6fffd04 	addi	sp,fp,-12
  805634:	dfc00417 	ldw	ra,16(sp)
  805638:	df000317 	ldw	fp,12(sp)
  80563c:	dc800217 	ldw	r18,8(sp)
  805640:	dc400117 	ldw	r17,4(sp)
  805644:	dc000017 	ldw	r16,0(sp)
  805648:	dec00504 	addi	sp,sp,20
  80564c:	f800283a 	ret

00805650 <reset>:

void reset(TickData* d) {
  805650:	defffe04 	addi	sp,sp,-8
  805654:	df000115 	stw	fp,4(sp)
  805658:	df000104 	addi	fp,sp,4
  80565c:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  805660:	e0bfff17 	ldw	r2,-4(fp)
  805664:	00c00044 	movi	r3,1
  805668:	10c03ec5 	stb	r3,251(r2)
  d->_TERM = 0;
  80566c:	e0bfff17 	ldw	r2,-4(fp)
  805670:	10005045 	stb	zero,321(r2)
  d->AVI_DEADLINE = AVI_VALUE;
  805674:	e0bfff17 	ldw	r2,-4(fp)
  805678:	00c04b04 	movi	r3,300
  80567c:	10c00015 	stw	r3,0(r2)
  d->URI_DEADLINE = URI_VALUE;
  805680:	e0bfff17 	ldw	r2,-4(fp)
  805684:	00c0e104 	movi	r3,900
  805688:	10c00115 	stw	r3,4(r2)
  d->AEI_DEADLINE = AEI_VALUE;
  80568c:	e0bfff17 	ldw	r2,-4(fp)
  805690:	00c0c804 	movi	r3,800
  805694:	10c00215 	stw	r3,8(r2)
  d->LRI_DEADLINE = LRI_VALUE;
  805698:	e0bfff17 	ldw	r2,-4(fp)
  80569c:	00c0ed84 	movi	r3,950
  8056a0:	10c00315 	stw	r3,12(r2)
  d->PVARP_DEADLINE = PVARP_VALUE;
  8056a4:	e0bfff17 	ldw	r2,-4(fp)
  8056a8:	00c00c84 	movi	r3,50
  8056ac:	10c00415 	stw	r3,16(r2)
  d->VRP_DEADLINE = VRP_VALUE;
  8056b0:	e0bfff17 	ldw	r2,-4(fp)
  8056b4:	00c02584 	movi	r3,150
  8056b8:	10c00515 	stw	r3,20(r2)
  d->AVI_counter = 0.0;
  8056bc:	e0bfff17 	ldw	r2,-4(fp)
  8056c0:	10000715 	stw	zero,28(r2)
  8056c4:	10000815 	stw	zero,32(r2)
  d->AEI_counter = 0.0;
  8056c8:	e0bfff17 	ldw	r2,-4(fp)
  8056cc:	10000915 	stw	zero,36(r2)
  8056d0:	10000a15 	stw	zero,40(r2)
  d->PVARP_counter = 0.0;
  8056d4:	e0bfff17 	ldw	r2,-4(fp)
  8056d8:	10000b15 	stw	zero,44(r2)
  8056dc:	10000c15 	stw	zero,48(r2)
  d->VRP_counter = 0.0;
  8056e0:	e0bfff17 	ldw	r2,-4(fp)
  8056e4:	10000d15 	stw	zero,52(r2)
  8056e8:	10000e15 	stw	zero,56(r2)
  d->LRI_counter = 0.0;
  8056ec:	e0bfff17 	ldw	r2,-4(fp)
  8056f0:	10000f15 	stw	zero,60(r2)
  8056f4:	10001015 	stw	zero,64(r2)
  d->URI_counter = 0.0;
  8056f8:	e0bfff17 	ldw	r2,-4(fp)
  8056fc:	10001115 	stw	zero,68(r2)
  805700:	10001215 	stw	zero,72(r2)
  d->deltaT = 0.0;
  805704:	e0bfff17 	ldw	r2,-4(fp)
  805708:	10001415 	stw	zero,80(r2)
  80570c:	10001515 	stw	zero,84(r2)
  d->sleepT = 0.0;
  805710:	e0bfff17 	ldw	r2,-4(fp)
  805714:	10001615 	stw	zero,88(r2)
  805718:	10001715 	stw	zero,92(r2)
  d->_DDDpacemake2_local__reg_VP_temp = 0;
  80571c:	e0bfff17 	ldw	r2,-4(fp)
  805720:	10001b05 	stb	zero,108(r2)
  d->_DDDpacemake2_local__reg_AP_temp = 0;
  805724:	e0bfff17 	ldw	r2,-4(fp)
  805728:	10001b85 	stb	zero,110(r2)
  d->_pg91_e2 = 0;
  80572c:	e0bfff17 	ldw	r2,-4(fp)
  805730:	10005085 	stb	zero,322(r2)
  d->_pg11_e1 = 0;
  805734:	e0bfff17 	ldw	r2,-4(fp)
  805738:	100050c5 	stb	zero,323(r2)
  d->_pg120_e2 = 0;
  80573c:	e0bfff17 	ldw	r2,-4(fp)
  805740:	10005105 	stb	zero,324(r2)
  d->_pg23 = 0;
  805744:	e0bfff17 	ldw	r2,-4(fp)
  805748:	10005145 	stb	zero,325(r2)
  d->_pg144_e2 = 0;
  80574c:	e0bfff17 	ldw	r2,-4(fp)
  805750:	10005185 	stb	zero,326(r2)
  d->_pg168 = 0;
  805754:	e0bfff17 	ldw	r2,-4(fp)
  805758:	100051c5 	stb	zero,327(r2)
  d->_pg161 = 0;
  80575c:	e0bfff17 	ldw	r2,-4(fp)
  805760:	10005205 	stb	zero,328(r2)
  d->_pg159 = 0;
  805764:	e0bfff17 	ldw	r2,-4(fp)
  805768:	10005245 	stb	zero,329(r2)
  d->_pg162 = 0;
  80576c:	e0bfff17 	ldw	r2,-4(fp)
  805770:	10005285 	stb	zero,330(r2)
  d->_pg134_e1 = 0;
  805774:	e0bfff17 	ldw	r2,-4(fp)
  805778:	100052c5 	stb	zero,331(r2)
  d->_pg12 = 0;
  80577c:	e0bfff17 	ldw	r2,-4(fp)
  805780:	10005305 	stb	zero,332(r2)
  d->_pg15 = 0;
  805784:	e0bfff17 	ldw	r2,-4(fp)
  805788:	10005345 	stb	zero,333(r2)
  d->_pg21 = 0;
  80578c:	e0bfff17 	ldw	r2,-4(fp)
  805790:	10005385 	stb	zero,334(r2)
  d->_pg24 = 0;
  805794:	e0bfff17 	ldw	r2,-4(fp)
  805798:	100053c5 	stb	zero,335(r2)
  d->_pg39 = 0;
  80579c:	e0bfff17 	ldw	r2,-4(fp)
  8057a0:	10005405 	stb	zero,336(r2)
  d->_pg54_e1 = 0;
  8057a4:	e0bfff17 	ldw	r2,-4(fp)
  8057a8:	10005445 	stb	zero,337(r2)
  d->_pg53 = 0;
  8057ac:	e0bfff17 	ldw	r2,-4(fp)
  8057b0:	10005485 	stb	zero,338(r2)
  d->_pg147 = 0;
  8057b4:	e0bfff17 	ldw	r2,-4(fp)
  8057b8:	100054c5 	stb	zero,339(r2)
  d->_pg55 = 0;
  8057bc:	e0bfff17 	ldw	r2,-4(fp)
  8057c0:	10005505 	stb	zero,340(r2)
  d->_pg58 = 0;
  8057c4:	e0bfff17 	ldw	r2,-4(fp)
  8057c8:	10005545 	stb	zero,341(r2)
  d->_pg94 = 0;
  8057cc:	e0bfff17 	ldw	r2,-4(fp)
  8057d0:	10005585 	stb	zero,342(r2)
  d->_pg98 = 0;
  8057d4:	e0bfff17 	ldw	r2,-4(fp)
  8057d8:	100055c5 	stb	zero,343(r2)
  d->_pg95 = 0;
  8057dc:	e0bfff17 	ldw	r2,-4(fp)
  8057e0:	10005605 	stb	zero,344(r2)
  d->_pg149 = 0;
  8057e4:	e0bfff17 	ldw	r2,-4(fp)
  8057e8:	10005645 	stb	zero,345(r2)
  d->_pg124 = 0;
  8057ec:	e0bfff17 	ldw	r2,-4(fp)
  8057f0:	10005685 	stb	zero,346(r2)
  d->_pg125 = 0;
  8057f4:	e0bfff17 	ldw	r2,-4(fp)
  8057f8:	100056c5 	stb	zero,347(r2)
  d->_pg103 = 0;
  8057fc:	e0bfff17 	ldw	r2,-4(fp)
  805800:	10005705 	stb	zero,348(r2)
  d->_pg129 = 0;
  805804:	e0bfff17 	ldw	r2,-4(fp)
  805808:	10005745 	stb	zero,349(r2)
  d->_pg137 = 0;
  80580c:	e0bfff17 	ldw	r2,-4(fp)
  805810:	10005785 	stb	zero,350(r2)
  d->_pg148 = 0;
  805814:	e0bfff17 	ldw	r2,-4(fp)
  805818:	100057c5 	stb	zero,351(r2)
  d->_pg144 = 0;
  80581c:	e0bfff17 	ldw	r2,-4(fp)
  805820:	10005805 	stb	zero,352(r2)
  d->_pg135 = 0;
  805824:	e0bfff17 	ldw	r2,-4(fp)
  805828:	10005845 	stb	zero,353(r2)
  d->_pg138 = 0;
  80582c:	e0bfff17 	ldw	r2,-4(fp)
  805830:	10005885 	stb	zero,354(r2)
}
  805834:	0001883a 	nop
  805838:	e037883a 	mov	sp,fp
  80583c:	df000017 	ldw	fp,0(sp)
  805840:	dec00104 	addi	sp,sp,4
  805844:	f800283a 	ret

00805848 <tick>:

void tick(TickData* d) {
  805848:	defffd04 	addi	sp,sp,-12
  80584c:	dfc00215 	stw	ra,8(sp)
  805850:	df000115 	stw	fp,4(sp)
  805854:	df000104 	addi	fp,sp,4
  805858:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  80585c:	e13fff17 	ldw	r4,-4(fp)
  805860:	080086c0 	call	80086c <logic>

  d->_pg91_e2 = d->_g91_e2;
  805864:	e0bfff17 	ldw	r2,-4(fp)
  805868:	10c04e83 	ldbu	r3,314(r2)
  80586c:	e0bfff17 	ldw	r2,-4(fp)
  805870:	10c05085 	stb	r3,322(r2)
  d->_pg11_e1 = d->_g11_e1;
  805874:	e0bfff17 	ldw	r2,-4(fp)
  805878:	10c04d03 	ldbu	r3,308(r2)
  80587c:	e0bfff17 	ldw	r2,-4(fp)
  805880:	10c050c5 	stb	r3,323(r2)
  d->_pg120_e2 = d->_g120_e2;
  805884:	e0bfff17 	ldw	r2,-4(fp)
  805888:	10c04f03 	ldbu	r3,316(r2)
  80588c:	e0bfff17 	ldw	r2,-4(fp)
  805890:	10c05105 	stb	r3,324(r2)
  d->_pg23 = d->_g23;
  805894:	e0bfff17 	ldw	r2,-4(fp)
  805898:	10c02343 	ldbu	r3,141(r2)
  80589c:	e0bfff17 	ldw	r2,-4(fp)
  8058a0:	10c05145 	stb	r3,325(r2)
  d->_pg144_e2 = d->_g144_e2;
  8058a4:	e0bfff17 	ldw	r2,-4(fp)
  8058a8:	10c04f83 	ldbu	r3,318(r2)
  8058ac:	e0bfff17 	ldw	r2,-4(fp)
  8058b0:	10c05185 	stb	r3,326(r2)
  d->_pg168 = d->_g168;
  8058b4:	e0bfff17 	ldw	r2,-4(fp)
  8058b8:	10c03e43 	ldbu	r3,249(r2)
  8058bc:	e0bfff17 	ldw	r2,-4(fp)
  8058c0:	10c051c5 	stb	r3,327(r2)
  d->_pg161 = d->_g161;
  8058c4:	e0bfff17 	ldw	r2,-4(fp)
  8058c8:	10c03d03 	ldbu	r3,244(r2)
  8058cc:	e0bfff17 	ldw	r2,-4(fp)
  8058d0:	10c05205 	stb	r3,328(r2)
  d->_pg159 = d->_g159;
  8058d4:	e0bfff17 	ldw	r2,-4(fp)
  8058d8:	10c03c83 	ldbu	r3,242(r2)
  8058dc:	e0bfff17 	ldw	r2,-4(fp)
  8058e0:	10c05245 	stb	r3,329(r2)
  d->_pg162 = d->_g162;
  8058e4:	e0bfff17 	ldw	r2,-4(fp)
  8058e8:	10c03d43 	ldbu	r3,245(r2)
  8058ec:	e0bfff17 	ldw	r2,-4(fp)
  8058f0:	10c05285 	stb	r3,330(r2)
  d->_pg134_e1 = d->_g134_e1;
  8058f4:	e0bfff17 	ldw	r2,-4(fp)
  8058f8:	10c04f43 	ldbu	r3,317(r2)
  8058fc:	e0bfff17 	ldw	r2,-4(fp)
  805900:	10c052c5 	stb	r3,331(r2)
  d->_pg12 = d->_g12;
  805904:	e0bfff17 	ldw	r2,-4(fp)
  805908:	10c020c3 	ldbu	r3,131(r2)
  80590c:	e0bfff17 	ldw	r2,-4(fp)
  805910:	10c05305 	stb	r3,332(r2)
  d->_pg15 = d->_g15;
  805914:	e0bfff17 	ldw	r2,-4(fp)
  805918:	10c02183 	ldbu	r3,134(r2)
  80591c:	e0bfff17 	ldw	r2,-4(fp)
  805920:	10c05345 	stb	r3,333(r2)
  d->_pg21 = d->_g21;
  805924:	e0bfff17 	ldw	r2,-4(fp)
  805928:	10c022c3 	ldbu	r3,139(r2)
  80592c:	e0bfff17 	ldw	r2,-4(fp)
  805930:	10c05385 	stb	r3,334(r2)
  d->_pg24 = d->_g24;
  805934:	e0bfff17 	ldw	r2,-4(fp)
  805938:	10c02383 	ldbu	r3,142(r2)
  80593c:	e0bfff17 	ldw	r2,-4(fp)
  805940:	10c053c5 	stb	r3,335(r2)
  d->_pg39 = d->_g39;
  805944:	e0bfff17 	ldw	r2,-4(fp)
  805948:	10c02683 	ldbu	r3,154(r2)
  80594c:	e0bfff17 	ldw	r2,-4(fp)
  805950:	10c05405 	stb	r3,336(r2)
  d->_pg54_e1 = d->_g54_e1;
  805954:	e0bfff17 	ldw	r2,-4(fp)
  805958:	10c04dc3 	ldbu	r3,311(r2)
  80595c:	e0bfff17 	ldw	r2,-4(fp)
  805960:	10c05445 	stb	r3,337(r2)
  d->_pg53 = d->_g53;
  805964:	e0bfff17 	ldw	r2,-4(fp)
  805968:	10c02903 	ldbu	r3,164(r2)
  80596c:	e0bfff17 	ldw	r2,-4(fp)
  805970:	10c05485 	stb	r3,338(r2)
  d->_pg147 = d->_g147;
  805974:	e0bfff17 	ldw	r2,-4(fp)
  805978:	10c03a83 	ldbu	r3,234(r2)
  80597c:	e0bfff17 	ldw	r2,-4(fp)
  805980:	10c054c5 	stb	r3,339(r2)
  d->_pg55 = d->_g55;
  805984:	e0bfff17 	ldw	r2,-4(fp)
  805988:	10c02983 	ldbu	r3,166(r2)
  80598c:	e0bfff17 	ldw	r2,-4(fp)
  805990:	10c05505 	stb	r3,340(r2)
  d->_pg58 = d->_g58;
  805994:	e0bfff17 	ldw	r2,-4(fp)
  805998:	10c02a43 	ldbu	r3,169(r2)
  80599c:	e0bfff17 	ldw	r2,-4(fp)
  8059a0:	10c05545 	stb	r3,341(r2)
  d->_pg94 = d->_g94;
  8059a4:	e0bfff17 	ldw	r2,-4(fp)
  8059a8:	10c030c3 	ldbu	r3,195(r2)
  8059ac:	e0bfff17 	ldw	r2,-4(fp)
  8059b0:	10c05585 	stb	r3,342(r2)
  d->_pg98 = d->_g98;
  8059b4:	e0bfff17 	ldw	r2,-4(fp)
  8059b8:	10c031c3 	ldbu	r3,199(r2)
  8059bc:	e0bfff17 	ldw	r2,-4(fp)
  8059c0:	10c055c5 	stb	r3,343(r2)
  d->_pg95 = d->_g95;
  8059c4:	e0bfff17 	ldw	r2,-4(fp)
  8059c8:	10c03103 	ldbu	r3,196(r2)
  8059cc:	e0bfff17 	ldw	r2,-4(fp)
  8059d0:	10c05605 	stb	r3,344(r2)
  d->_pg149 = d->_g149;
  8059d4:	e0bfff17 	ldw	r2,-4(fp)
  8059d8:	10c03b03 	ldbu	r3,236(r2)
  8059dc:	e0bfff17 	ldw	r2,-4(fp)
  8059e0:	10c05645 	stb	r3,345(r2)
  d->_pg124 = d->_g124;
  8059e4:	e0bfff17 	ldw	r2,-4(fp)
  8059e8:	10c03643 	ldbu	r3,217(r2)
  8059ec:	e0bfff17 	ldw	r2,-4(fp)
  8059f0:	10c05685 	stb	r3,346(r2)
  d->_pg125 = d->_g125;
  8059f4:	e0bfff17 	ldw	r2,-4(fp)
  8059f8:	10c03683 	ldbu	r3,218(r2)
  8059fc:	e0bfff17 	ldw	r2,-4(fp)
  805a00:	10c056c5 	stb	r3,347(r2)
  d->_pg103 = d->_g103;
  805a04:	e0bfff17 	ldw	r2,-4(fp)
  805a08:	10c03243 	ldbu	r3,201(r2)
  805a0c:	e0bfff17 	ldw	r2,-4(fp)
  805a10:	10c05705 	stb	r3,348(r2)
  d->_pg129 = d->_g129;
  805a14:	e0bfff17 	ldw	r2,-4(fp)
  805a18:	10c036c3 	ldbu	r3,219(r2)
  805a1c:	e0bfff17 	ldw	r2,-4(fp)
  805a20:	10c05745 	stb	r3,349(r2)
  d->_pg137 = d->_g137;
  805a24:	e0bfff17 	ldw	r2,-4(fp)
  805a28:	10c03883 	ldbu	r3,226(r2)
  805a2c:	e0bfff17 	ldw	r2,-4(fp)
  805a30:	10c05785 	stb	r3,350(r2)
  d->_pg148 = d->_g148;
  805a34:	e0bfff17 	ldw	r2,-4(fp)
  805a38:	10c03ac3 	ldbu	r3,235(r2)
  805a3c:	e0bfff17 	ldw	r2,-4(fp)
  805a40:	10c057c5 	stb	r3,351(r2)
  d->_pg144 = d->_g144;
  805a44:	e0bfff17 	ldw	r2,-4(fp)
  805a48:	10c039c3 	ldbu	r3,231(r2)
  805a4c:	e0bfff17 	ldw	r2,-4(fp)
  805a50:	10c05805 	stb	r3,352(r2)
  d->_pg135 = d->_g135;
  805a54:	e0bfff17 	ldw	r2,-4(fp)
  805a58:	10c03803 	ldbu	r3,224(r2)
  805a5c:	e0bfff17 	ldw	r2,-4(fp)
  805a60:	10c05845 	stb	r3,353(r2)
  d->_pg138 = d->_g138;
  805a64:	e0bfff17 	ldw	r2,-4(fp)
  805a68:	10c038c3 	ldbu	r3,227(r2)
  805a6c:	e0bfff17 	ldw	r2,-4(fp)
  805a70:	10c05885 	stb	r3,354(r2)
  d->_GO = 0;
  805a74:	e0bfff17 	ldw	r2,-4(fp)
  805a78:	10003ec5 	stb	zero,251(r2)
}
  805a7c:	0001883a 	nop
  805a80:	e037883a 	mov	sp,fp
  805a84:	dfc00117 	ldw	ra,4(sp)
  805a88:	df000017 	ldw	fp,0(sp)
  805a8c:	dec00204 	addi	sp,sp,8
  805a90:	f800283a 	ret

00805a94 <__floatundidf>:
  805a94:	defffc04 	addi	sp,sp,-16
  805a98:	dc800215 	stw	r18,8(sp)
  805a9c:	2025883a 	mov	r18,r4
  805aa0:	2809883a 	mov	r4,r5
  805aa4:	dfc00315 	stw	ra,12(sp)
  805aa8:	dc400115 	stw	r17,4(sp)
  805aac:	dc000015 	stw	r16,0(sp)
  805ab0:	08076700 	call	807670 <__floatunsidf>
  805ab4:	000d883a 	mov	r6,zero
  805ab8:	01d07c34 	movhi	r7,16880
  805abc:	180b883a 	mov	r5,r3
  805ac0:	1009883a 	mov	r4,r2
  805ac4:	08065800 	call	806580 <__muldf3>
  805ac8:	9009883a 	mov	r4,r18
  805acc:	1023883a 	mov	r17,r2
  805ad0:	1821883a 	mov	r16,r3
  805ad4:	08076700 	call	807670 <__floatunsidf>
  805ad8:	880d883a 	mov	r6,r17
  805adc:	800f883a 	mov	r7,r16
  805ae0:	1009883a 	mov	r4,r2
  805ae4:	180b883a 	mov	r5,r3
  805ae8:	0805b040 	call	805b04 <__adddf3>
  805aec:	dfc00317 	ldw	ra,12(sp)
  805af0:	dc800217 	ldw	r18,8(sp)
  805af4:	dc400117 	ldw	r17,4(sp)
  805af8:	dc000017 	ldw	r16,0(sp)
  805afc:	dec00404 	addi	sp,sp,16
  805b00:	f800283a 	ret

00805b04 <__adddf3>:
  805b04:	02c00434 	movhi	r11,16
  805b08:	5affffc4 	addi	r11,r11,-1
  805b0c:	2806d7fa 	srli	r3,r5,31
  805b10:	2ad4703a 	and	r10,r5,r11
  805b14:	3ad2703a 	and	r9,r7,r11
  805b18:	3804d53a 	srli	r2,r7,20
  805b1c:	3018d77a 	srli	r12,r6,29
  805b20:	280ad53a 	srli	r5,r5,20
  805b24:	501490fa 	slli	r10,r10,3
  805b28:	2010d77a 	srli	r8,r4,29
  805b2c:	481290fa 	slli	r9,r9,3
  805b30:	380ed7fa 	srli	r7,r7,31
  805b34:	defffb04 	addi	sp,sp,-20
  805b38:	dc800215 	stw	r18,8(sp)
  805b3c:	dc400115 	stw	r17,4(sp)
  805b40:	dc000015 	stw	r16,0(sp)
  805b44:	dfc00415 	stw	ra,16(sp)
  805b48:	dcc00315 	stw	r19,12(sp)
  805b4c:	1c803fcc 	andi	r18,r3,255
  805b50:	2c01ffcc 	andi	r16,r5,2047
  805b54:	5210b03a 	or	r8,r10,r8
  805b58:	202290fa 	slli	r17,r4,3
  805b5c:	1081ffcc 	andi	r2,r2,2047
  805b60:	4b12b03a 	or	r9,r9,r12
  805b64:	300c90fa 	slli	r6,r6,3
  805b68:	91c07526 	beq	r18,r7,805d40 <__adddf3+0x23c>
  805b6c:	8087c83a 	sub	r3,r16,r2
  805b70:	00c0ab0e 	bge	zero,r3,805e20 <__adddf3+0x31c>
  805b74:	10002a1e 	bne	r2,zero,805c20 <__adddf3+0x11c>
  805b78:	4984b03a 	or	r2,r9,r6
  805b7c:	1000961e 	bne	r2,zero,805dd8 <__adddf3+0x2d4>
  805b80:	888001cc 	andi	r2,r17,7
  805b84:	10000726 	beq	r2,zero,805ba4 <__adddf3+0xa0>
  805b88:	888003cc 	andi	r2,r17,15
  805b8c:	00c00104 	movi	r3,4
  805b90:	10c00426 	beq	r2,r3,805ba4 <__adddf3+0xa0>
  805b94:	88c7883a 	add	r3,r17,r3
  805b98:	1c63803a 	cmpltu	r17,r3,r17
  805b9c:	4451883a 	add	r8,r8,r17
  805ba0:	1823883a 	mov	r17,r3
  805ba4:	4080202c 	andhi	r2,r8,128
  805ba8:	10005926 	beq	r2,zero,805d10 <__adddf3+0x20c>
  805bac:	84000044 	addi	r16,r16,1
  805bb0:	0081ffc4 	movi	r2,2047
  805bb4:	8080ba26 	beq	r16,r2,805ea0 <__adddf3+0x39c>
  805bb8:	00bfe034 	movhi	r2,65408
  805bbc:	10bfffc4 	addi	r2,r2,-1
  805bc0:	4090703a 	and	r8,r8,r2
  805bc4:	4004977a 	slli	r2,r8,29
  805bc8:	4010927a 	slli	r8,r8,9
  805bcc:	8822d0fa 	srli	r17,r17,3
  805bd0:	8401ffcc 	andi	r16,r16,2047
  805bd4:	4010d33a 	srli	r8,r8,12
  805bd8:	9007883a 	mov	r3,r18
  805bdc:	1444b03a 	or	r2,r2,r17
  805be0:	8401ffcc 	andi	r16,r16,2047
  805be4:	8020953a 	slli	r16,r16,20
  805be8:	18c03fcc 	andi	r3,r3,255
  805bec:	01000434 	movhi	r4,16
  805bf0:	213fffc4 	addi	r4,r4,-1
  805bf4:	180697fa 	slli	r3,r3,31
  805bf8:	4110703a 	and	r8,r8,r4
  805bfc:	4410b03a 	or	r8,r8,r16
  805c00:	40c6b03a 	or	r3,r8,r3
  805c04:	dfc00417 	ldw	ra,16(sp)
  805c08:	dcc00317 	ldw	r19,12(sp)
  805c0c:	dc800217 	ldw	r18,8(sp)
  805c10:	dc400117 	ldw	r17,4(sp)
  805c14:	dc000017 	ldw	r16,0(sp)
  805c18:	dec00504 	addi	sp,sp,20
  805c1c:	f800283a 	ret
  805c20:	0081ffc4 	movi	r2,2047
  805c24:	80bfd626 	beq	r16,r2,805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  805c28:	4a402034 	orhi	r9,r9,128
  805c2c:	00800e04 	movi	r2,56
  805c30:	10c09f16 	blt	r2,r3,805eb0 <__adddf3+0x3ac>
  805c34:	008007c4 	movi	r2,31
  805c38:	10c0c216 	blt	r2,r3,805f44 <__adddf3+0x440>
  805c3c:	00800804 	movi	r2,32
  805c40:	10c5c83a 	sub	r2,r2,r3
  805c44:	488a983a 	sll	r5,r9,r2
  805c48:	30c8d83a 	srl	r4,r6,r3
  805c4c:	3084983a 	sll	r2,r6,r2
  805c50:	48c6d83a 	srl	r3,r9,r3
  805c54:	290cb03a 	or	r6,r5,r4
  805c58:	1004c03a 	cmpne	r2,r2,zero
  805c5c:	308cb03a 	or	r6,r6,r2
  805c60:	898dc83a 	sub	r6,r17,r6
  805c64:	89a3803a 	cmpltu	r17,r17,r6
  805c68:	40d1c83a 	sub	r8,r8,r3
  805c6c:	4451c83a 	sub	r8,r8,r17
  805c70:	3023883a 	mov	r17,r6
  805c74:	4080202c 	andhi	r2,r8,128
  805c78:	10002326 	beq	r2,zero,805d08 <__adddf3+0x204>
  805c7c:	04c02034 	movhi	r19,128
  805c80:	9cffffc4 	addi	r19,r19,-1
  805c84:	44e6703a 	and	r19,r8,r19
  805c88:	98007626 	beq	r19,zero,805e64 <__adddf3+0x360>
  805c8c:	9809883a 	mov	r4,r19
  805c90:	08077180 	call	807718 <__clzsi2>
  805c94:	10fffe04 	addi	r3,r2,-8
  805c98:	010007c4 	movi	r4,31
  805c9c:	20c07716 	blt	r4,r3,805e7c <__adddf3+0x378>
  805ca0:	00800804 	movi	r2,32
  805ca4:	10c5c83a 	sub	r2,r2,r3
  805ca8:	8884d83a 	srl	r2,r17,r2
  805cac:	98d0983a 	sll	r8,r19,r3
  805cb0:	88e2983a 	sll	r17,r17,r3
  805cb4:	1204b03a 	or	r2,r2,r8
  805cb8:	1c007416 	blt	r3,r16,805e8c <__adddf3+0x388>
  805cbc:	1c21c83a 	sub	r16,r3,r16
  805cc0:	82000044 	addi	r8,r16,1
  805cc4:	00c007c4 	movi	r3,31
  805cc8:	1a009116 	blt	r3,r8,805f10 <__adddf3+0x40c>
  805ccc:	00c00804 	movi	r3,32
  805cd0:	1a07c83a 	sub	r3,r3,r8
  805cd4:	8a08d83a 	srl	r4,r17,r8
  805cd8:	88e2983a 	sll	r17,r17,r3
  805cdc:	10c6983a 	sll	r3,r2,r3
  805ce0:	1210d83a 	srl	r8,r2,r8
  805ce4:	8804c03a 	cmpne	r2,r17,zero
  805ce8:	1906b03a 	or	r3,r3,r4
  805cec:	18a2b03a 	or	r17,r3,r2
  805cf0:	0021883a 	mov	r16,zero
  805cf4:	003fa206 	br	805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  805cf8:	1890b03a 	or	r8,r3,r2
  805cfc:	40017d26 	beq	r8,zero,8062f4 <__adddf3+0x7f0>
  805d00:	1011883a 	mov	r8,r2
  805d04:	1823883a 	mov	r17,r3
  805d08:	888001cc 	andi	r2,r17,7
  805d0c:	103f9e1e 	bne	r2,zero,805b88 <__alt_mem_onchip_mem+0xff7fdb88>
  805d10:	4004977a 	slli	r2,r8,29
  805d14:	8822d0fa 	srli	r17,r17,3
  805d18:	4010d0fa 	srli	r8,r8,3
  805d1c:	9007883a 	mov	r3,r18
  805d20:	1444b03a 	or	r2,r2,r17
  805d24:	0101ffc4 	movi	r4,2047
  805d28:	81002426 	beq	r16,r4,805dbc <__adddf3+0x2b8>
  805d2c:	8120703a 	and	r16,r16,r4
  805d30:	01000434 	movhi	r4,16
  805d34:	213fffc4 	addi	r4,r4,-1
  805d38:	4110703a 	and	r8,r8,r4
  805d3c:	003fa806 	br	805be0 <__alt_mem_onchip_mem+0xff7fdbe0>
  805d40:	8089c83a 	sub	r4,r16,r2
  805d44:	01005e0e 	bge	zero,r4,805ec0 <__adddf3+0x3bc>
  805d48:	10002b26 	beq	r2,zero,805df8 <__adddf3+0x2f4>
  805d4c:	0081ffc4 	movi	r2,2047
  805d50:	80bf8b26 	beq	r16,r2,805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  805d54:	4a402034 	orhi	r9,r9,128
  805d58:	00800e04 	movi	r2,56
  805d5c:	1100a40e 	bge	r2,r4,805ff0 <__adddf3+0x4ec>
  805d60:	498cb03a 	or	r6,r9,r6
  805d64:	300ac03a 	cmpne	r5,r6,zero
  805d68:	0013883a 	mov	r9,zero
  805d6c:	2c4b883a 	add	r5,r5,r17
  805d70:	2c63803a 	cmpltu	r17,r5,r17
  805d74:	4a11883a 	add	r8,r9,r8
  805d78:	8a11883a 	add	r8,r17,r8
  805d7c:	2823883a 	mov	r17,r5
  805d80:	4080202c 	andhi	r2,r8,128
  805d84:	103fe026 	beq	r2,zero,805d08 <__alt_mem_onchip_mem+0xff7fdd08>
  805d88:	84000044 	addi	r16,r16,1
  805d8c:	0081ffc4 	movi	r2,2047
  805d90:	8080d226 	beq	r16,r2,8060dc <__adddf3+0x5d8>
  805d94:	00bfe034 	movhi	r2,65408
  805d98:	10bfffc4 	addi	r2,r2,-1
  805d9c:	4090703a 	and	r8,r8,r2
  805da0:	880ad07a 	srli	r5,r17,1
  805da4:	400897fa 	slli	r4,r8,31
  805da8:	88c0004c 	andi	r3,r17,1
  805dac:	28e2b03a 	or	r17,r5,r3
  805db0:	4010d07a 	srli	r8,r8,1
  805db4:	2462b03a 	or	r17,r4,r17
  805db8:	003f7106 	br	805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  805dbc:	4088b03a 	or	r4,r8,r2
  805dc0:	20014526 	beq	r4,zero,8062d8 <__adddf3+0x7d4>
  805dc4:	01000434 	movhi	r4,16
  805dc8:	42000234 	orhi	r8,r8,8
  805dcc:	213fffc4 	addi	r4,r4,-1
  805dd0:	4110703a 	and	r8,r8,r4
  805dd4:	003f8206 	br	805be0 <__alt_mem_onchip_mem+0xff7fdbe0>
  805dd8:	18ffffc4 	addi	r3,r3,-1
  805ddc:	1800491e 	bne	r3,zero,805f04 <__adddf3+0x400>
  805de0:	898bc83a 	sub	r5,r17,r6
  805de4:	8963803a 	cmpltu	r17,r17,r5
  805de8:	4251c83a 	sub	r8,r8,r9
  805dec:	4451c83a 	sub	r8,r8,r17
  805df0:	2823883a 	mov	r17,r5
  805df4:	003f9f06 	br	805c74 <__alt_mem_onchip_mem+0xff7fdc74>
  805df8:	4984b03a 	or	r2,r9,r6
  805dfc:	103f6026 	beq	r2,zero,805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  805e00:	213fffc4 	addi	r4,r4,-1
  805e04:	2000931e 	bne	r4,zero,806054 <__adddf3+0x550>
  805e08:	898d883a 	add	r6,r17,r6
  805e0c:	3463803a 	cmpltu	r17,r6,r17
  805e10:	4251883a 	add	r8,r8,r9
  805e14:	8a11883a 	add	r8,r17,r8
  805e18:	3023883a 	mov	r17,r6
  805e1c:	003fd806 	br	805d80 <__alt_mem_onchip_mem+0xff7fdd80>
  805e20:	1800541e 	bne	r3,zero,805f74 <__adddf3+0x470>
  805e24:	80800044 	addi	r2,r16,1
  805e28:	1081ffcc 	andi	r2,r2,2047
  805e2c:	00c00044 	movi	r3,1
  805e30:	1880a00e 	bge	r3,r2,8060b4 <__adddf3+0x5b0>
  805e34:	8989c83a 	sub	r4,r17,r6
  805e38:	8905803a 	cmpltu	r2,r17,r4
  805e3c:	4267c83a 	sub	r19,r8,r9
  805e40:	98a7c83a 	sub	r19,r19,r2
  805e44:	9880202c 	andhi	r2,r19,128
  805e48:	10006326 	beq	r2,zero,805fd8 <__adddf3+0x4d4>
  805e4c:	3463c83a 	sub	r17,r6,r17
  805e50:	4a07c83a 	sub	r3,r9,r8
  805e54:	344d803a 	cmpltu	r6,r6,r17
  805e58:	19a7c83a 	sub	r19,r3,r6
  805e5c:	3825883a 	mov	r18,r7
  805e60:	983f8a1e 	bne	r19,zero,805c8c <__alt_mem_onchip_mem+0xff7fdc8c>
  805e64:	8809883a 	mov	r4,r17
  805e68:	08077180 	call	807718 <__clzsi2>
  805e6c:	10800804 	addi	r2,r2,32
  805e70:	10fffe04 	addi	r3,r2,-8
  805e74:	010007c4 	movi	r4,31
  805e78:	20ff890e 	bge	r4,r3,805ca0 <__alt_mem_onchip_mem+0xff7fdca0>
  805e7c:	10bff604 	addi	r2,r2,-40
  805e80:	8884983a 	sll	r2,r17,r2
  805e84:	0023883a 	mov	r17,zero
  805e88:	1c3f8c0e 	bge	r3,r16,805cbc <__alt_mem_onchip_mem+0xff7fdcbc>
  805e8c:	023fe034 	movhi	r8,65408
  805e90:	423fffc4 	addi	r8,r8,-1
  805e94:	80e1c83a 	sub	r16,r16,r3
  805e98:	1210703a 	and	r8,r2,r8
  805e9c:	003f3806 	br	805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  805ea0:	9007883a 	mov	r3,r18
  805ea4:	0011883a 	mov	r8,zero
  805ea8:	0005883a 	mov	r2,zero
  805eac:	003f4c06 	br	805be0 <__alt_mem_onchip_mem+0xff7fdbe0>
  805eb0:	498cb03a 	or	r6,r9,r6
  805eb4:	300cc03a 	cmpne	r6,r6,zero
  805eb8:	0007883a 	mov	r3,zero
  805ebc:	003f6806 	br	805c60 <__alt_mem_onchip_mem+0xff7fdc60>
  805ec0:	20009c1e 	bne	r4,zero,806134 <__adddf3+0x630>
  805ec4:	80800044 	addi	r2,r16,1
  805ec8:	1141ffcc 	andi	r5,r2,2047
  805ecc:	01000044 	movi	r4,1
  805ed0:	2140670e 	bge	r4,r5,806070 <__adddf3+0x56c>
  805ed4:	0101ffc4 	movi	r4,2047
  805ed8:	11007f26 	beq	r2,r4,8060d8 <__adddf3+0x5d4>
  805edc:	898d883a 	add	r6,r17,r6
  805ee0:	4247883a 	add	r3,r8,r9
  805ee4:	3451803a 	cmpltu	r8,r6,r17
  805ee8:	40d1883a 	add	r8,r8,r3
  805eec:	402297fa 	slli	r17,r8,31
  805ef0:	300cd07a 	srli	r6,r6,1
  805ef4:	4010d07a 	srli	r8,r8,1
  805ef8:	1021883a 	mov	r16,r2
  805efc:	89a2b03a 	or	r17,r17,r6
  805f00:	003f1f06 	br	805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  805f04:	0081ffc4 	movi	r2,2047
  805f08:	80bf481e 	bne	r16,r2,805c2c <__alt_mem_onchip_mem+0xff7fdc2c>
  805f0c:	003f1c06 	br	805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  805f10:	843ff844 	addi	r16,r16,-31
  805f14:	01000804 	movi	r4,32
  805f18:	1406d83a 	srl	r3,r2,r16
  805f1c:	41005026 	beq	r8,r4,806060 <__adddf3+0x55c>
  805f20:	01001004 	movi	r4,64
  805f24:	2211c83a 	sub	r8,r4,r8
  805f28:	1204983a 	sll	r2,r2,r8
  805f2c:	88a2b03a 	or	r17,r17,r2
  805f30:	8822c03a 	cmpne	r17,r17,zero
  805f34:	1c62b03a 	or	r17,r3,r17
  805f38:	0011883a 	mov	r8,zero
  805f3c:	0021883a 	mov	r16,zero
  805f40:	003f7106 	br	805d08 <__alt_mem_onchip_mem+0xff7fdd08>
  805f44:	193ff804 	addi	r4,r3,-32
  805f48:	00800804 	movi	r2,32
  805f4c:	4908d83a 	srl	r4,r9,r4
  805f50:	18804526 	beq	r3,r2,806068 <__adddf3+0x564>
  805f54:	00801004 	movi	r2,64
  805f58:	10c5c83a 	sub	r2,r2,r3
  805f5c:	4886983a 	sll	r3,r9,r2
  805f60:	198cb03a 	or	r6,r3,r6
  805f64:	300cc03a 	cmpne	r6,r6,zero
  805f68:	218cb03a 	or	r6,r4,r6
  805f6c:	0007883a 	mov	r3,zero
  805f70:	003f3b06 	br	805c60 <__alt_mem_onchip_mem+0xff7fdc60>
  805f74:	80002a26 	beq	r16,zero,806020 <__adddf3+0x51c>
  805f78:	0101ffc4 	movi	r4,2047
  805f7c:	11006826 	beq	r2,r4,806120 <__adddf3+0x61c>
  805f80:	00c7c83a 	sub	r3,zero,r3
  805f84:	42002034 	orhi	r8,r8,128
  805f88:	01000e04 	movi	r4,56
  805f8c:	20c07c16 	blt	r4,r3,806180 <__adddf3+0x67c>
  805f90:	010007c4 	movi	r4,31
  805f94:	20c0da16 	blt	r4,r3,806300 <__adddf3+0x7fc>
  805f98:	01000804 	movi	r4,32
  805f9c:	20c9c83a 	sub	r4,r4,r3
  805fa0:	4114983a 	sll	r10,r8,r4
  805fa4:	88cad83a 	srl	r5,r17,r3
  805fa8:	8908983a 	sll	r4,r17,r4
  805fac:	40c6d83a 	srl	r3,r8,r3
  805fb0:	5162b03a 	or	r17,r10,r5
  805fb4:	2008c03a 	cmpne	r4,r4,zero
  805fb8:	8922b03a 	or	r17,r17,r4
  805fbc:	3463c83a 	sub	r17,r6,r17
  805fc0:	48c7c83a 	sub	r3,r9,r3
  805fc4:	344d803a 	cmpltu	r6,r6,r17
  805fc8:	1991c83a 	sub	r8,r3,r6
  805fcc:	1021883a 	mov	r16,r2
  805fd0:	3825883a 	mov	r18,r7
  805fd4:	003f2706 	br	805c74 <__alt_mem_onchip_mem+0xff7fdc74>
  805fd8:	24d0b03a 	or	r8,r4,r19
  805fdc:	40001b1e 	bne	r8,zero,80604c <__adddf3+0x548>
  805fe0:	0005883a 	mov	r2,zero
  805fe4:	0007883a 	mov	r3,zero
  805fe8:	0021883a 	mov	r16,zero
  805fec:	003f4d06 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  805ff0:	008007c4 	movi	r2,31
  805ff4:	11003c16 	blt	r2,r4,8060e8 <__adddf3+0x5e4>
  805ff8:	00800804 	movi	r2,32
  805ffc:	1105c83a 	sub	r2,r2,r4
  806000:	488e983a 	sll	r7,r9,r2
  806004:	310ad83a 	srl	r5,r6,r4
  806008:	3084983a 	sll	r2,r6,r2
  80600c:	4912d83a 	srl	r9,r9,r4
  806010:	394ab03a 	or	r5,r7,r5
  806014:	1004c03a 	cmpne	r2,r2,zero
  806018:	288ab03a 	or	r5,r5,r2
  80601c:	003f5306 	br	805d6c <__alt_mem_onchip_mem+0xff7fdd6c>
  806020:	4448b03a 	or	r4,r8,r17
  806024:	20003e26 	beq	r4,zero,806120 <__adddf3+0x61c>
  806028:	00c6303a 	nor	r3,zero,r3
  80602c:	18003a1e 	bne	r3,zero,806118 <__adddf3+0x614>
  806030:	3463c83a 	sub	r17,r6,r17
  806034:	4a07c83a 	sub	r3,r9,r8
  806038:	344d803a 	cmpltu	r6,r6,r17
  80603c:	1991c83a 	sub	r8,r3,r6
  806040:	1021883a 	mov	r16,r2
  806044:	3825883a 	mov	r18,r7
  806048:	003f0a06 	br	805c74 <__alt_mem_onchip_mem+0xff7fdc74>
  80604c:	2023883a 	mov	r17,r4
  806050:	003f0d06 	br	805c88 <__alt_mem_onchip_mem+0xff7fdc88>
  806054:	0081ffc4 	movi	r2,2047
  806058:	80bf3f1e 	bne	r16,r2,805d58 <__alt_mem_onchip_mem+0xff7fdd58>
  80605c:	003ec806 	br	805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  806060:	0005883a 	mov	r2,zero
  806064:	003fb106 	br	805f2c <__alt_mem_onchip_mem+0xff7fdf2c>
  806068:	0007883a 	mov	r3,zero
  80606c:	003fbc06 	br	805f60 <__alt_mem_onchip_mem+0xff7fdf60>
  806070:	4444b03a 	or	r2,r8,r17
  806074:	8000871e 	bne	r16,zero,806294 <__adddf3+0x790>
  806078:	1000ba26 	beq	r2,zero,806364 <__adddf3+0x860>
  80607c:	4984b03a 	or	r2,r9,r6
  806080:	103ebf26 	beq	r2,zero,805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  806084:	8985883a 	add	r2,r17,r6
  806088:	4247883a 	add	r3,r8,r9
  80608c:	1451803a 	cmpltu	r8,r2,r17
  806090:	40d1883a 	add	r8,r8,r3
  806094:	40c0202c 	andhi	r3,r8,128
  806098:	1023883a 	mov	r17,r2
  80609c:	183f1a26 	beq	r3,zero,805d08 <__alt_mem_onchip_mem+0xff7fdd08>
  8060a0:	00bfe034 	movhi	r2,65408
  8060a4:	10bfffc4 	addi	r2,r2,-1
  8060a8:	2021883a 	mov	r16,r4
  8060ac:	4090703a 	and	r8,r8,r2
  8060b0:	003eb306 	br	805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  8060b4:	4444b03a 	or	r2,r8,r17
  8060b8:	8000291e 	bne	r16,zero,806160 <__adddf3+0x65c>
  8060bc:	10004b1e 	bne	r2,zero,8061ec <__adddf3+0x6e8>
  8060c0:	4990b03a 	or	r8,r9,r6
  8060c4:	40008b26 	beq	r8,zero,8062f4 <__adddf3+0x7f0>
  8060c8:	4811883a 	mov	r8,r9
  8060cc:	3023883a 	mov	r17,r6
  8060d0:	3825883a 	mov	r18,r7
  8060d4:	003eaa06 	br	805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  8060d8:	1021883a 	mov	r16,r2
  8060dc:	0011883a 	mov	r8,zero
  8060e0:	0005883a 	mov	r2,zero
  8060e4:	003f0f06 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  8060e8:	217ff804 	addi	r5,r4,-32
  8060ec:	00800804 	movi	r2,32
  8060f0:	494ad83a 	srl	r5,r9,r5
  8060f4:	20807d26 	beq	r4,r2,8062ec <__adddf3+0x7e8>
  8060f8:	00801004 	movi	r2,64
  8060fc:	1109c83a 	sub	r4,r2,r4
  806100:	4912983a 	sll	r9,r9,r4
  806104:	498cb03a 	or	r6,r9,r6
  806108:	300cc03a 	cmpne	r6,r6,zero
  80610c:	298ab03a 	or	r5,r5,r6
  806110:	0013883a 	mov	r9,zero
  806114:	003f1506 	br	805d6c <__alt_mem_onchip_mem+0xff7fdd6c>
  806118:	0101ffc4 	movi	r4,2047
  80611c:	113f9a1e 	bne	r2,r4,805f88 <__alt_mem_onchip_mem+0xff7fdf88>
  806120:	4811883a 	mov	r8,r9
  806124:	3023883a 	mov	r17,r6
  806128:	1021883a 	mov	r16,r2
  80612c:	3825883a 	mov	r18,r7
  806130:	003e9306 	br	805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  806134:	8000161e 	bne	r16,zero,806190 <__adddf3+0x68c>
  806138:	444ab03a 	or	r5,r8,r17
  80613c:	28005126 	beq	r5,zero,806284 <__adddf3+0x780>
  806140:	0108303a 	nor	r4,zero,r4
  806144:	20004d1e 	bne	r4,zero,80627c <__adddf3+0x778>
  806148:	89a3883a 	add	r17,r17,r6
  80614c:	4253883a 	add	r9,r8,r9
  806150:	898d803a 	cmpltu	r6,r17,r6
  806154:	3251883a 	add	r8,r6,r9
  806158:	1021883a 	mov	r16,r2
  80615c:	003f0806 	br	805d80 <__alt_mem_onchip_mem+0xff7fdd80>
  806160:	1000301e 	bne	r2,zero,806224 <__adddf3+0x720>
  806164:	4984b03a 	or	r2,r9,r6
  806168:	10007126 	beq	r2,zero,806330 <__adddf3+0x82c>
  80616c:	4811883a 	mov	r8,r9
  806170:	3023883a 	mov	r17,r6
  806174:	3825883a 	mov	r18,r7
  806178:	0401ffc4 	movi	r16,2047
  80617c:	003e8006 	br	805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  806180:	4462b03a 	or	r17,r8,r17
  806184:	8822c03a 	cmpne	r17,r17,zero
  806188:	0007883a 	mov	r3,zero
  80618c:	003f8b06 	br	805fbc <__alt_mem_onchip_mem+0xff7fdfbc>
  806190:	0141ffc4 	movi	r5,2047
  806194:	11403b26 	beq	r2,r5,806284 <__adddf3+0x780>
  806198:	0109c83a 	sub	r4,zero,r4
  80619c:	42002034 	orhi	r8,r8,128
  8061a0:	01400e04 	movi	r5,56
  8061a4:	29006716 	blt	r5,r4,806344 <__adddf3+0x840>
  8061a8:	014007c4 	movi	r5,31
  8061ac:	29007016 	blt	r5,r4,806370 <__adddf3+0x86c>
  8061b0:	01400804 	movi	r5,32
  8061b4:	290bc83a 	sub	r5,r5,r4
  8061b8:	4154983a 	sll	r10,r8,r5
  8061bc:	890ed83a 	srl	r7,r17,r4
  8061c0:	894a983a 	sll	r5,r17,r5
  8061c4:	4108d83a 	srl	r4,r8,r4
  8061c8:	51e2b03a 	or	r17,r10,r7
  8061cc:	280ac03a 	cmpne	r5,r5,zero
  8061d0:	8962b03a 	or	r17,r17,r5
  8061d4:	89a3883a 	add	r17,r17,r6
  8061d8:	2253883a 	add	r9,r4,r9
  8061dc:	898d803a 	cmpltu	r6,r17,r6
  8061e0:	3251883a 	add	r8,r6,r9
  8061e4:	1021883a 	mov	r16,r2
  8061e8:	003ee506 	br	805d80 <__alt_mem_onchip_mem+0xff7fdd80>
  8061ec:	4984b03a 	or	r2,r9,r6
  8061f0:	103e6326 	beq	r2,zero,805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  8061f4:	8987c83a 	sub	r3,r17,r6
  8061f8:	88c9803a 	cmpltu	r4,r17,r3
  8061fc:	4245c83a 	sub	r2,r8,r9
  806200:	1105c83a 	sub	r2,r2,r4
  806204:	1100202c 	andhi	r4,r2,128
  806208:	203ebb26 	beq	r4,zero,805cf8 <__alt_mem_onchip_mem+0xff7fdcf8>
  80620c:	3463c83a 	sub	r17,r6,r17
  806210:	4a07c83a 	sub	r3,r9,r8
  806214:	344d803a 	cmpltu	r6,r6,r17
  806218:	1991c83a 	sub	r8,r3,r6
  80621c:	3825883a 	mov	r18,r7
  806220:	003e5706 	br	805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  806224:	4984b03a 	or	r2,r9,r6
  806228:	10002e26 	beq	r2,zero,8062e4 <__adddf3+0x7e0>
  80622c:	4004d0fa 	srli	r2,r8,3
  806230:	8822d0fa 	srli	r17,r17,3
  806234:	4010977a 	slli	r8,r8,29
  806238:	10c0022c 	andhi	r3,r2,8
  80623c:	4462b03a 	or	r17,r8,r17
  806240:	18000826 	beq	r3,zero,806264 <__adddf3+0x760>
  806244:	4808d0fa 	srli	r4,r9,3
  806248:	20c0022c 	andhi	r3,r4,8
  80624c:	1800051e 	bne	r3,zero,806264 <__adddf3+0x760>
  806250:	300cd0fa 	srli	r6,r6,3
  806254:	4806977a 	slli	r3,r9,29
  806258:	2005883a 	mov	r2,r4
  80625c:	3825883a 	mov	r18,r7
  806260:	19a2b03a 	or	r17,r3,r6
  806264:	8810d77a 	srli	r8,r17,29
  806268:	100490fa 	slli	r2,r2,3
  80626c:	882290fa 	slli	r17,r17,3
  806270:	0401ffc4 	movi	r16,2047
  806274:	4090b03a 	or	r8,r8,r2
  806278:	003e4106 	br	805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  80627c:	0141ffc4 	movi	r5,2047
  806280:	117fc71e 	bne	r2,r5,8061a0 <__alt_mem_onchip_mem+0xff7fe1a0>
  806284:	4811883a 	mov	r8,r9
  806288:	3023883a 	mov	r17,r6
  80628c:	1021883a 	mov	r16,r2
  806290:	003e3b06 	br	805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  806294:	10002f26 	beq	r2,zero,806354 <__adddf3+0x850>
  806298:	4984b03a 	or	r2,r9,r6
  80629c:	10001126 	beq	r2,zero,8062e4 <__adddf3+0x7e0>
  8062a0:	4004d0fa 	srli	r2,r8,3
  8062a4:	8822d0fa 	srli	r17,r17,3
  8062a8:	4010977a 	slli	r8,r8,29
  8062ac:	10c0022c 	andhi	r3,r2,8
  8062b0:	4462b03a 	or	r17,r8,r17
  8062b4:	183feb26 	beq	r3,zero,806264 <__alt_mem_onchip_mem+0xff7fe264>
  8062b8:	4808d0fa 	srli	r4,r9,3
  8062bc:	20c0022c 	andhi	r3,r4,8
  8062c0:	183fe81e 	bne	r3,zero,806264 <__alt_mem_onchip_mem+0xff7fe264>
  8062c4:	300cd0fa 	srli	r6,r6,3
  8062c8:	4806977a 	slli	r3,r9,29
  8062cc:	2005883a 	mov	r2,r4
  8062d0:	19a2b03a 	or	r17,r3,r6
  8062d4:	003fe306 	br	806264 <__alt_mem_onchip_mem+0xff7fe264>
  8062d8:	0011883a 	mov	r8,zero
  8062dc:	0005883a 	mov	r2,zero
  8062e0:	003e3f06 	br	805be0 <__alt_mem_onchip_mem+0xff7fdbe0>
  8062e4:	0401ffc4 	movi	r16,2047
  8062e8:	003e2506 	br	805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  8062ec:	0013883a 	mov	r9,zero
  8062f0:	003f8406 	br	806104 <__alt_mem_onchip_mem+0xff7fe104>
  8062f4:	0005883a 	mov	r2,zero
  8062f8:	0007883a 	mov	r3,zero
  8062fc:	003e8906 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  806300:	197ff804 	addi	r5,r3,-32
  806304:	01000804 	movi	r4,32
  806308:	414ad83a 	srl	r5,r8,r5
  80630c:	19002426 	beq	r3,r4,8063a0 <__adddf3+0x89c>
  806310:	01001004 	movi	r4,64
  806314:	20c7c83a 	sub	r3,r4,r3
  806318:	40c6983a 	sll	r3,r8,r3
  80631c:	1c46b03a 	or	r3,r3,r17
  806320:	1806c03a 	cmpne	r3,r3,zero
  806324:	28e2b03a 	or	r17,r5,r3
  806328:	0007883a 	mov	r3,zero
  80632c:	003f2306 	br	805fbc <__alt_mem_onchip_mem+0xff7fdfbc>
  806330:	0007883a 	mov	r3,zero
  806334:	5811883a 	mov	r8,r11
  806338:	00bfffc4 	movi	r2,-1
  80633c:	0401ffc4 	movi	r16,2047
  806340:	003e7806 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  806344:	4462b03a 	or	r17,r8,r17
  806348:	8822c03a 	cmpne	r17,r17,zero
  80634c:	0009883a 	mov	r4,zero
  806350:	003fa006 	br	8061d4 <__alt_mem_onchip_mem+0xff7fe1d4>
  806354:	4811883a 	mov	r8,r9
  806358:	3023883a 	mov	r17,r6
  80635c:	0401ffc4 	movi	r16,2047
  806360:	003e0706 	br	805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  806364:	4811883a 	mov	r8,r9
  806368:	3023883a 	mov	r17,r6
  80636c:	003e0406 	br	805b80 <__alt_mem_onchip_mem+0xff7fdb80>
  806370:	21fff804 	addi	r7,r4,-32
  806374:	01400804 	movi	r5,32
  806378:	41ced83a 	srl	r7,r8,r7
  80637c:	21400a26 	beq	r4,r5,8063a8 <__adddf3+0x8a4>
  806380:	01401004 	movi	r5,64
  806384:	2909c83a 	sub	r4,r5,r4
  806388:	4108983a 	sll	r4,r8,r4
  80638c:	2448b03a 	or	r4,r4,r17
  806390:	2008c03a 	cmpne	r4,r4,zero
  806394:	3922b03a 	or	r17,r7,r4
  806398:	0009883a 	mov	r4,zero
  80639c:	003f8d06 	br	8061d4 <__alt_mem_onchip_mem+0xff7fe1d4>
  8063a0:	0007883a 	mov	r3,zero
  8063a4:	003fdd06 	br	80631c <__alt_mem_onchip_mem+0xff7fe31c>
  8063a8:	0009883a 	mov	r4,zero
  8063ac:	003ff706 	br	80638c <__alt_mem_onchip_mem+0xff7fe38c>

008063b0 <__gedf2>:
  8063b0:	2804d53a 	srli	r2,r5,20
  8063b4:	3806d53a 	srli	r3,r7,20
  8063b8:	02000434 	movhi	r8,16
  8063bc:	423fffc4 	addi	r8,r8,-1
  8063c0:	1081ffcc 	andi	r2,r2,2047
  8063c4:	0241ffc4 	movi	r9,2047
  8063c8:	2a14703a 	and	r10,r5,r8
  8063cc:	18c1ffcc 	andi	r3,r3,2047
  8063d0:	3a10703a 	and	r8,r7,r8
  8063d4:	280ad7fa 	srli	r5,r5,31
  8063d8:	380ed7fa 	srli	r7,r7,31
  8063dc:	12401d26 	beq	r2,r9,806454 <__gedf2+0xa4>
  8063e0:	0241ffc4 	movi	r9,2047
  8063e4:	1a401226 	beq	r3,r9,806430 <__gedf2+0x80>
  8063e8:	1000081e 	bne	r2,zero,80640c <__gedf2+0x5c>
  8063ec:	2296b03a 	or	r11,r4,r10
  8063f0:	5813003a 	cmpeq	r9,r11,zero
  8063f4:	1800091e 	bne	r3,zero,80641c <__gedf2+0x6c>
  8063f8:	3218b03a 	or	r12,r6,r8
  8063fc:	6000071e 	bne	r12,zero,80641c <__gedf2+0x6c>
  806400:	0005883a 	mov	r2,zero
  806404:	5800101e 	bne	r11,zero,806448 <__gedf2+0x98>
  806408:	f800283a 	ret
  80640c:	18000c1e 	bne	r3,zero,806440 <__gedf2+0x90>
  806410:	3212b03a 	or	r9,r6,r8
  806414:	48000c26 	beq	r9,zero,806448 <__gedf2+0x98>
  806418:	0013883a 	mov	r9,zero
  80641c:	39c03fcc 	andi	r7,r7,255
  806420:	48000826 	beq	r9,zero,806444 <__gedf2+0x94>
  806424:	38000926 	beq	r7,zero,80644c <__gedf2+0x9c>
  806428:	00800044 	movi	r2,1
  80642c:	f800283a 	ret
  806430:	3212b03a 	or	r9,r6,r8
  806434:	483fec26 	beq	r9,zero,8063e8 <__alt_mem_onchip_mem+0xff7fe3e8>
  806438:	00bfff84 	movi	r2,-2
  80643c:	f800283a 	ret
  806440:	39c03fcc 	andi	r7,r7,255
  806444:	29c00626 	beq	r5,r7,806460 <__gedf2+0xb0>
  806448:	283ff726 	beq	r5,zero,806428 <__alt_mem_onchip_mem+0xff7fe428>
  80644c:	00bfffc4 	movi	r2,-1
  806450:	f800283a 	ret
  806454:	2292b03a 	or	r9,r4,r10
  806458:	483fe126 	beq	r9,zero,8063e0 <__alt_mem_onchip_mem+0xff7fe3e0>
  80645c:	003ff606 	br	806438 <__alt_mem_onchip_mem+0xff7fe438>
  806460:	18bff916 	blt	r3,r2,806448 <__alt_mem_onchip_mem+0xff7fe448>
  806464:	10c00316 	blt	r2,r3,806474 <__gedf2+0xc4>
  806468:	42bff736 	bltu	r8,r10,806448 <__alt_mem_onchip_mem+0xff7fe448>
  80646c:	52000326 	beq	r10,r8,80647c <__gedf2+0xcc>
  806470:	5200042e 	bgeu	r10,r8,806484 <__gedf2+0xd4>
  806474:	283fec1e 	bne	r5,zero,806428 <__alt_mem_onchip_mem+0xff7fe428>
  806478:	003ff406 	br	80644c <__alt_mem_onchip_mem+0xff7fe44c>
  80647c:	313ff236 	bltu	r6,r4,806448 <__alt_mem_onchip_mem+0xff7fe448>
  806480:	21bffc36 	bltu	r4,r6,806474 <__alt_mem_onchip_mem+0xff7fe474>
  806484:	0005883a 	mov	r2,zero
  806488:	f800283a 	ret

0080648c <__ledf2>:
  80648c:	2804d53a 	srli	r2,r5,20
  806490:	3810d53a 	srli	r8,r7,20
  806494:	00c00434 	movhi	r3,16
  806498:	18ffffc4 	addi	r3,r3,-1
  80649c:	1081ffcc 	andi	r2,r2,2047
  8064a0:	0241ffc4 	movi	r9,2047
  8064a4:	28d4703a 	and	r10,r5,r3
  8064a8:	4201ffcc 	andi	r8,r8,2047
  8064ac:	38c6703a 	and	r3,r7,r3
  8064b0:	280ad7fa 	srli	r5,r5,31
  8064b4:	380ed7fa 	srli	r7,r7,31
  8064b8:	12401f26 	beq	r2,r9,806538 <__ledf2+0xac>
  8064bc:	0241ffc4 	movi	r9,2047
  8064c0:	42401426 	beq	r8,r9,806514 <__ledf2+0x88>
  8064c4:	1000091e 	bne	r2,zero,8064ec <__ledf2+0x60>
  8064c8:	2296b03a 	or	r11,r4,r10
  8064cc:	5813003a 	cmpeq	r9,r11,zero
  8064d0:	29403fcc 	andi	r5,r5,255
  8064d4:	40000a1e 	bne	r8,zero,806500 <__ledf2+0x74>
  8064d8:	30d8b03a 	or	r12,r6,r3
  8064dc:	6000081e 	bne	r12,zero,806500 <__ledf2+0x74>
  8064e0:	0005883a 	mov	r2,zero
  8064e4:	5800111e 	bne	r11,zero,80652c <__ledf2+0xa0>
  8064e8:	f800283a 	ret
  8064ec:	29403fcc 	andi	r5,r5,255
  8064f0:	40000c1e 	bne	r8,zero,806524 <__ledf2+0x98>
  8064f4:	30d2b03a 	or	r9,r6,r3
  8064f8:	48000c26 	beq	r9,zero,80652c <__ledf2+0xa0>
  8064fc:	0013883a 	mov	r9,zero
  806500:	39c03fcc 	andi	r7,r7,255
  806504:	48000826 	beq	r9,zero,806528 <__ledf2+0x9c>
  806508:	38001126 	beq	r7,zero,806550 <__ledf2+0xc4>
  80650c:	00800044 	movi	r2,1
  806510:	f800283a 	ret
  806514:	30d2b03a 	or	r9,r6,r3
  806518:	483fea26 	beq	r9,zero,8064c4 <__alt_mem_onchip_mem+0xff7fe4c4>
  80651c:	00800084 	movi	r2,2
  806520:	f800283a 	ret
  806524:	39c03fcc 	andi	r7,r7,255
  806528:	39400726 	beq	r7,r5,806548 <__ledf2+0xbc>
  80652c:	2800081e 	bne	r5,zero,806550 <__ledf2+0xc4>
  806530:	00800044 	movi	r2,1
  806534:	f800283a 	ret
  806538:	2292b03a 	or	r9,r4,r10
  80653c:	483fdf26 	beq	r9,zero,8064bc <__alt_mem_onchip_mem+0xff7fe4bc>
  806540:	00800084 	movi	r2,2
  806544:	f800283a 	ret
  806548:	4080030e 	bge	r8,r2,806558 <__ledf2+0xcc>
  80654c:	383fef26 	beq	r7,zero,80650c <__alt_mem_onchip_mem+0xff7fe50c>
  806550:	00bfffc4 	movi	r2,-1
  806554:	f800283a 	ret
  806558:	123feb16 	blt	r2,r8,806508 <__alt_mem_onchip_mem+0xff7fe508>
  80655c:	1abff336 	bltu	r3,r10,80652c <__alt_mem_onchip_mem+0xff7fe52c>
  806560:	50c00326 	beq	r10,r3,806570 <__ledf2+0xe4>
  806564:	50c0042e 	bgeu	r10,r3,806578 <__ledf2+0xec>
  806568:	283fe81e 	bne	r5,zero,80650c <__alt_mem_onchip_mem+0xff7fe50c>
  80656c:	003ff806 	br	806550 <__alt_mem_onchip_mem+0xff7fe550>
  806570:	313fee36 	bltu	r6,r4,80652c <__alt_mem_onchip_mem+0xff7fe52c>
  806574:	21bffc36 	bltu	r4,r6,806568 <__alt_mem_onchip_mem+0xff7fe568>
  806578:	0005883a 	mov	r2,zero
  80657c:	f800283a 	ret

00806580 <__muldf3>:
  806580:	defff304 	addi	sp,sp,-52
  806584:	2804d53a 	srli	r2,r5,20
  806588:	dd800915 	stw	r22,36(sp)
  80658c:	282cd7fa 	srli	r22,r5,31
  806590:	dc000315 	stw	r16,12(sp)
  806594:	04000434 	movhi	r16,16
  806598:	dd400815 	stw	r21,32(sp)
  80659c:	dc800515 	stw	r18,20(sp)
  8065a0:	843fffc4 	addi	r16,r16,-1
  8065a4:	dfc00c15 	stw	ra,48(sp)
  8065a8:	df000b15 	stw	fp,44(sp)
  8065ac:	ddc00a15 	stw	r23,40(sp)
  8065b0:	dd000715 	stw	r20,28(sp)
  8065b4:	dcc00615 	stw	r19,24(sp)
  8065b8:	dc400415 	stw	r17,16(sp)
  8065bc:	1481ffcc 	andi	r18,r2,2047
  8065c0:	2c20703a 	and	r16,r5,r16
  8065c4:	b02b883a 	mov	r21,r22
  8065c8:	b2403fcc 	andi	r9,r22,255
  8065cc:	90006026 	beq	r18,zero,806750 <__muldf3+0x1d0>
  8065d0:	0081ffc4 	movi	r2,2047
  8065d4:	2029883a 	mov	r20,r4
  8065d8:	90803626 	beq	r18,r2,8066b4 <__muldf3+0x134>
  8065dc:	80800434 	orhi	r2,r16,16
  8065e0:	100490fa 	slli	r2,r2,3
  8065e4:	2020d77a 	srli	r16,r4,29
  8065e8:	202890fa 	slli	r20,r4,3
  8065ec:	94bf0044 	addi	r18,r18,-1023
  8065f0:	80a0b03a 	or	r16,r16,r2
  8065f4:	0027883a 	mov	r19,zero
  8065f8:	0039883a 	mov	fp,zero
  8065fc:	3804d53a 	srli	r2,r7,20
  806600:	382ed7fa 	srli	r23,r7,31
  806604:	04400434 	movhi	r17,16
  806608:	8c7fffc4 	addi	r17,r17,-1
  80660c:	1081ffcc 	andi	r2,r2,2047
  806610:	3011883a 	mov	r8,r6
  806614:	3c62703a 	and	r17,r7,r17
  806618:	ba803fcc 	andi	r10,r23,255
  80661c:	10006d26 	beq	r2,zero,8067d4 <__muldf3+0x254>
  806620:	00c1ffc4 	movi	r3,2047
  806624:	10c06526 	beq	r2,r3,8067bc <__muldf3+0x23c>
  806628:	88c00434 	orhi	r3,r17,16
  80662c:	180690fa 	slli	r3,r3,3
  806630:	3022d77a 	srli	r17,r6,29
  806634:	301090fa 	slli	r8,r6,3
  806638:	10bf0044 	addi	r2,r2,-1023
  80663c:	88e2b03a 	or	r17,r17,r3
  806640:	000b883a 	mov	r5,zero
  806644:	9085883a 	add	r2,r18,r2
  806648:	2cc8b03a 	or	r4,r5,r19
  80664c:	00c003c4 	movi	r3,15
  806650:	bdacf03a 	xor	r22,r23,r22
  806654:	12c00044 	addi	r11,r2,1
  806658:	19009936 	bltu	r3,r4,8068c0 <__muldf3+0x340>
  80665c:	200890ba 	slli	r4,r4,2
  806660:	00c02034 	movhi	r3,128
  806664:	18d99d04 	addi	r3,r3,26228
  806668:	20c9883a 	add	r4,r4,r3
  80666c:	20c00017 	ldw	r3,0(r4)
  806670:	1800683a 	jmp	r3
  806674:	008068c0 	call	8068c <__alt_mem_sdram-0x77f974>
  806678:	008066d4 	movui	r2,411
  80667c:	008066d4 	movui	r2,411
  806680:	008066d0 	cmplti	r2,zero,411
  806684:	0080689c 	xori	r2,zero,418
  806688:	0080689c 	xori	r2,zero,418
  80668c:	00806884 	movi	r2,418
  806690:	008066d0 	cmplti	r2,zero,411
  806694:	0080689c 	xori	r2,zero,418
  806698:	00806884 	movi	r2,418
  80669c:	0080689c 	xori	r2,zero,418
  8066a0:	008066d0 	cmplti	r2,zero,411
  8066a4:	008068ac 	andhi	r2,zero,418
  8066a8:	008068ac 	andhi	r2,zero,418
  8066ac:	008068ac 	andhi	r2,zero,418
  8066b0:	00806ac8 	cmpgei	r2,zero,427
  8066b4:	2404b03a 	or	r2,r4,r16
  8066b8:	10006f1e 	bne	r2,zero,806878 <__muldf3+0x2f8>
  8066bc:	04c00204 	movi	r19,8
  8066c0:	0021883a 	mov	r16,zero
  8066c4:	0029883a 	mov	r20,zero
  8066c8:	07000084 	movi	fp,2
  8066cc:	003fcb06 	br	8065fc <__alt_mem_onchip_mem+0xff7fe5fc>
  8066d0:	502d883a 	mov	r22,r10
  8066d4:	00800084 	movi	r2,2
  8066d8:	28805726 	beq	r5,r2,806838 <__muldf3+0x2b8>
  8066dc:	008000c4 	movi	r2,3
  8066e0:	28816626 	beq	r5,r2,806c7c <__muldf3+0x6fc>
  8066e4:	00800044 	movi	r2,1
  8066e8:	2881411e 	bne	r5,r2,806bf0 <__muldf3+0x670>
  8066ec:	b02b883a 	mov	r21,r22
  8066f0:	0005883a 	mov	r2,zero
  8066f4:	000b883a 	mov	r5,zero
  8066f8:	0029883a 	mov	r20,zero
  8066fc:	1004953a 	slli	r2,r2,20
  806700:	a8c03fcc 	andi	r3,r21,255
  806704:	04400434 	movhi	r17,16
  806708:	8c7fffc4 	addi	r17,r17,-1
  80670c:	180697fa 	slli	r3,r3,31
  806710:	2c4a703a 	and	r5,r5,r17
  806714:	288ab03a 	or	r5,r5,r2
  806718:	28c6b03a 	or	r3,r5,r3
  80671c:	a005883a 	mov	r2,r20
  806720:	dfc00c17 	ldw	ra,48(sp)
  806724:	df000b17 	ldw	fp,44(sp)
  806728:	ddc00a17 	ldw	r23,40(sp)
  80672c:	dd800917 	ldw	r22,36(sp)
  806730:	dd400817 	ldw	r21,32(sp)
  806734:	dd000717 	ldw	r20,28(sp)
  806738:	dcc00617 	ldw	r19,24(sp)
  80673c:	dc800517 	ldw	r18,20(sp)
  806740:	dc400417 	ldw	r17,16(sp)
  806744:	dc000317 	ldw	r16,12(sp)
  806748:	dec00d04 	addi	sp,sp,52
  80674c:	f800283a 	ret
  806750:	2404b03a 	or	r2,r4,r16
  806754:	2027883a 	mov	r19,r4
  806758:	10004226 	beq	r2,zero,806864 <__muldf3+0x2e4>
  80675c:	8000fc26 	beq	r16,zero,806b50 <__muldf3+0x5d0>
  806760:	8009883a 	mov	r4,r16
  806764:	d9800215 	stw	r6,8(sp)
  806768:	d9c00015 	stw	r7,0(sp)
  80676c:	da400115 	stw	r9,4(sp)
  806770:	08077180 	call	807718 <__clzsi2>
  806774:	d9800217 	ldw	r6,8(sp)
  806778:	d9c00017 	ldw	r7,0(sp)
  80677c:	da400117 	ldw	r9,4(sp)
  806780:	113ffd44 	addi	r4,r2,-11
  806784:	00c00704 	movi	r3,28
  806788:	1900ed16 	blt	r3,r4,806b40 <__muldf3+0x5c0>
  80678c:	00c00744 	movi	r3,29
  806790:	147ffe04 	addi	r17,r2,-8
  806794:	1907c83a 	sub	r3,r3,r4
  806798:	8460983a 	sll	r16,r16,r17
  80679c:	98c6d83a 	srl	r3,r19,r3
  8067a0:	9c68983a 	sll	r20,r19,r17
  8067a4:	1c20b03a 	or	r16,r3,r16
  8067a8:	1080fcc4 	addi	r2,r2,1011
  8067ac:	00a5c83a 	sub	r18,zero,r2
  8067b0:	0027883a 	mov	r19,zero
  8067b4:	0039883a 	mov	fp,zero
  8067b8:	003f9006 	br	8065fc <__alt_mem_onchip_mem+0xff7fe5fc>
  8067bc:	3446b03a 	or	r3,r6,r17
  8067c0:	1800261e 	bne	r3,zero,80685c <__muldf3+0x2dc>
  8067c4:	0023883a 	mov	r17,zero
  8067c8:	0011883a 	mov	r8,zero
  8067cc:	01400084 	movi	r5,2
  8067d0:	003f9c06 	br	806644 <__alt_mem_onchip_mem+0xff7fe644>
  8067d4:	3446b03a 	or	r3,r6,r17
  8067d8:	18001c26 	beq	r3,zero,80684c <__muldf3+0x2cc>
  8067dc:	8800ce26 	beq	r17,zero,806b18 <__muldf3+0x598>
  8067e0:	8809883a 	mov	r4,r17
  8067e4:	d9800215 	stw	r6,8(sp)
  8067e8:	da400115 	stw	r9,4(sp)
  8067ec:	da800015 	stw	r10,0(sp)
  8067f0:	08077180 	call	807718 <__clzsi2>
  8067f4:	d9800217 	ldw	r6,8(sp)
  8067f8:	da400117 	ldw	r9,4(sp)
  8067fc:	da800017 	ldw	r10,0(sp)
  806800:	113ffd44 	addi	r4,r2,-11
  806804:	00c00704 	movi	r3,28
  806808:	1900bf16 	blt	r3,r4,806b08 <__muldf3+0x588>
  80680c:	00c00744 	movi	r3,29
  806810:	123ffe04 	addi	r8,r2,-8
  806814:	1907c83a 	sub	r3,r3,r4
  806818:	8a22983a 	sll	r17,r17,r8
  80681c:	30c6d83a 	srl	r3,r6,r3
  806820:	3210983a 	sll	r8,r6,r8
  806824:	1c62b03a 	or	r17,r3,r17
  806828:	1080fcc4 	addi	r2,r2,1011
  80682c:	0085c83a 	sub	r2,zero,r2
  806830:	000b883a 	mov	r5,zero
  806834:	003f8306 	br	806644 <__alt_mem_onchip_mem+0xff7fe644>
  806838:	b02b883a 	mov	r21,r22
  80683c:	0081ffc4 	movi	r2,2047
  806840:	000b883a 	mov	r5,zero
  806844:	0029883a 	mov	r20,zero
  806848:	003fac06 	br	8066fc <__alt_mem_onchip_mem+0xff7fe6fc>
  80684c:	0023883a 	mov	r17,zero
  806850:	0011883a 	mov	r8,zero
  806854:	01400044 	movi	r5,1
  806858:	003f7a06 	br	806644 <__alt_mem_onchip_mem+0xff7fe644>
  80685c:	014000c4 	movi	r5,3
  806860:	003f7806 	br	806644 <__alt_mem_onchip_mem+0xff7fe644>
  806864:	04c00104 	movi	r19,4
  806868:	0021883a 	mov	r16,zero
  80686c:	0029883a 	mov	r20,zero
  806870:	07000044 	movi	fp,1
  806874:	003f6106 	br	8065fc <__alt_mem_onchip_mem+0xff7fe5fc>
  806878:	04c00304 	movi	r19,12
  80687c:	070000c4 	movi	fp,3
  806880:	003f5e06 	br	8065fc <__alt_mem_onchip_mem+0xff7fe5fc>
  806884:	01400434 	movhi	r5,16
  806888:	002b883a 	mov	r21,zero
  80688c:	297fffc4 	addi	r5,r5,-1
  806890:	053fffc4 	movi	r20,-1
  806894:	0081ffc4 	movi	r2,2047
  806898:	003f9806 	br	8066fc <__alt_mem_onchip_mem+0xff7fe6fc>
  80689c:	8023883a 	mov	r17,r16
  8068a0:	a011883a 	mov	r8,r20
  8068a4:	e00b883a 	mov	r5,fp
  8068a8:	003f8a06 	br	8066d4 <__alt_mem_onchip_mem+0xff7fe6d4>
  8068ac:	8023883a 	mov	r17,r16
  8068b0:	a011883a 	mov	r8,r20
  8068b4:	482d883a 	mov	r22,r9
  8068b8:	e00b883a 	mov	r5,fp
  8068bc:	003f8506 	br	8066d4 <__alt_mem_onchip_mem+0xff7fe6d4>
  8068c0:	a00ad43a 	srli	r5,r20,16
  8068c4:	401ad43a 	srli	r13,r8,16
  8068c8:	a53fffcc 	andi	r20,r20,65535
  8068cc:	423fffcc 	andi	r8,r8,65535
  8068d0:	4519383a 	mul	r12,r8,r20
  8068d4:	4147383a 	mul	r3,r8,r5
  8068d8:	6d09383a 	mul	r4,r13,r20
  8068dc:	600cd43a 	srli	r6,r12,16
  8068e0:	2b5d383a 	mul	r14,r5,r13
  8068e4:	20c9883a 	add	r4,r4,r3
  8068e8:	310d883a 	add	r6,r6,r4
  8068ec:	30c0022e 	bgeu	r6,r3,8068f8 <__muldf3+0x378>
  8068f0:	00c00074 	movhi	r3,1
  8068f4:	70dd883a 	add	r14,r14,r3
  8068f8:	8826d43a 	srli	r19,r17,16
  8068fc:	8bffffcc 	andi	r15,r17,65535
  806900:	7d23383a 	mul	r17,r15,r20
  806904:	7949383a 	mul	r4,r15,r5
  806908:	9d29383a 	mul	r20,r19,r20
  80690c:	8814d43a 	srli	r10,r17,16
  806910:	3012943a 	slli	r9,r6,16
  806914:	a129883a 	add	r20,r20,r4
  806918:	633fffcc 	andi	r12,r12,65535
  80691c:	5515883a 	add	r10,r10,r20
  806920:	3006d43a 	srli	r3,r6,16
  806924:	4b13883a 	add	r9,r9,r12
  806928:	2ccb383a 	mul	r5,r5,r19
  80692c:	5100022e 	bgeu	r10,r4,806938 <__muldf3+0x3b8>
  806930:	01000074 	movhi	r4,1
  806934:	290b883a 	add	r5,r5,r4
  806938:	802ad43a 	srli	r21,r16,16
  80693c:	843fffcc 	andi	r16,r16,65535
  806940:	440d383a 	mul	r6,r8,r16
  806944:	4565383a 	mul	r18,r8,r21
  806948:	8349383a 	mul	r4,r16,r13
  80694c:	500e943a 	slli	r7,r10,16
  806950:	3010d43a 	srli	r8,r6,16
  806954:	5028d43a 	srli	r20,r10,16
  806958:	2489883a 	add	r4,r4,r18
  80695c:	8abfffcc 	andi	r10,r17,65535
  806960:	3a95883a 	add	r10,r7,r10
  806964:	4119883a 	add	r12,r8,r4
  806968:	a169883a 	add	r20,r20,r5
  80696c:	1a87883a 	add	r3,r3,r10
  806970:	6d5b383a 	mul	r13,r13,r21
  806974:	6480022e 	bgeu	r12,r18,806980 <__muldf3+0x400>
  806978:	01000074 	movhi	r4,1
  80697c:	691b883a 	add	r13,r13,r4
  806980:	7c25383a 	mul	r18,r15,r16
  806984:	7d4b383a 	mul	r5,r15,r21
  806988:	84cf383a 	mul	r7,r16,r19
  80698c:	901ed43a 	srli	r15,r18,16
  806990:	6008d43a 	srli	r4,r12,16
  806994:	6010943a 	slli	r8,r12,16
  806998:	394f883a 	add	r7,r7,r5
  80699c:	333fffcc 	andi	r12,r6,65535
  8069a0:	79df883a 	add	r15,r15,r7
  8069a4:	235b883a 	add	r13,r4,r13
  8069a8:	9d63383a 	mul	r17,r19,r21
  8069ac:	4309883a 	add	r4,r8,r12
  8069b0:	7940022e 	bgeu	r15,r5,8069bc <__muldf3+0x43c>
  8069b4:	01400074 	movhi	r5,1
  8069b8:	8963883a 	add	r17,r17,r5
  8069bc:	780a943a 	slli	r5,r15,16
  8069c0:	91bfffcc 	andi	r6,r18,65535
  8069c4:	70c7883a 	add	r3,r14,r3
  8069c8:	298d883a 	add	r6,r5,r6
  8069cc:	1a8f803a 	cmpltu	r7,r3,r10
  8069d0:	350b883a 	add	r5,r6,r20
  8069d4:	20c7883a 	add	r3,r4,r3
  8069d8:	3955883a 	add	r10,r7,r5
  8069dc:	1909803a 	cmpltu	r4,r3,r4
  8069e0:	6a91883a 	add	r8,r13,r10
  8069e4:	780cd43a 	srli	r6,r15,16
  8069e8:	2219883a 	add	r12,r4,r8
  8069ec:	2d0b803a 	cmpltu	r5,r5,r20
  8069f0:	51cf803a 	cmpltu	r7,r10,r7
  8069f4:	29ceb03a 	or	r7,r5,r7
  8069f8:	4351803a 	cmpltu	r8,r8,r13
  8069fc:	610b803a 	cmpltu	r5,r12,r4
  806a00:	4148b03a 	or	r4,r8,r5
  806a04:	398f883a 	add	r7,r7,r6
  806a08:	3909883a 	add	r4,r7,r4
  806a0c:	1810927a 	slli	r8,r3,9
  806a10:	2449883a 	add	r4,r4,r17
  806a14:	2008927a 	slli	r4,r4,9
  806a18:	6022d5fa 	srli	r17,r12,23
  806a1c:	1806d5fa 	srli	r3,r3,23
  806a20:	4252b03a 	or	r9,r8,r9
  806a24:	600a927a 	slli	r5,r12,9
  806a28:	4810c03a 	cmpne	r8,r9,zero
  806a2c:	2462b03a 	or	r17,r4,r17
  806a30:	40c6b03a 	or	r3,r8,r3
  806a34:	8900402c 	andhi	r4,r17,256
  806a38:	1950b03a 	or	r8,r3,r5
  806a3c:	20000726 	beq	r4,zero,806a5c <__muldf3+0x4dc>
  806a40:	4006d07a 	srli	r3,r8,1
  806a44:	880497fa 	slli	r2,r17,31
  806a48:	4200004c 	andi	r8,r8,1
  806a4c:	8822d07a 	srli	r17,r17,1
  806a50:	1a10b03a 	or	r8,r3,r8
  806a54:	1210b03a 	or	r8,r2,r8
  806a58:	5805883a 	mov	r2,r11
  806a5c:	1140ffc4 	addi	r5,r2,1023
  806a60:	0140440e 	bge	zero,r5,806b74 <__muldf3+0x5f4>
  806a64:	40c001cc 	andi	r3,r8,7
  806a68:	18000726 	beq	r3,zero,806a88 <__muldf3+0x508>
  806a6c:	40c003cc 	andi	r3,r8,15
  806a70:	01000104 	movi	r4,4
  806a74:	19000426 	beq	r3,r4,806a88 <__muldf3+0x508>
  806a78:	4107883a 	add	r3,r8,r4
  806a7c:	1a11803a 	cmpltu	r8,r3,r8
  806a80:	8a23883a 	add	r17,r17,r8
  806a84:	1811883a 	mov	r8,r3
  806a88:	88c0402c 	andhi	r3,r17,256
  806a8c:	18000426 	beq	r3,zero,806aa0 <__muldf3+0x520>
  806a90:	11410004 	addi	r5,r2,1024
  806a94:	00bfc034 	movhi	r2,65280
  806a98:	10bfffc4 	addi	r2,r2,-1
  806a9c:	88a2703a 	and	r17,r17,r2
  806aa0:	0081ff84 	movi	r2,2046
  806aa4:	117f6416 	blt	r2,r5,806838 <__alt_mem_onchip_mem+0xff7fe838>
  806aa8:	8828977a 	slli	r20,r17,29
  806aac:	4010d0fa 	srli	r8,r8,3
  806ab0:	8822927a 	slli	r17,r17,9
  806ab4:	2881ffcc 	andi	r2,r5,2047
  806ab8:	a228b03a 	or	r20,r20,r8
  806abc:	880ad33a 	srli	r5,r17,12
  806ac0:	b02b883a 	mov	r21,r22
  806ac4:	003f0d06 	br	8066fc <__alt_mem_onchip_mem+0xff7fe6fc>
  806ac8:	8080022c 	andhi	r2,r16,8
  806acc:	10000926 	beq	r2,zero,806af4 <__muldf3+0x574>
  806ad0:	8880022c 	andhi	r2,r17,8
  806ad4:	1000071e 	bne	r2,zero,806af4 <__muldf3+0x574>
  806ad8:	00800434 	movhi	r2,16
  806adc:	89400234 	orhi	r5,r17,8
  806ae0:	10bfffc4 	addi	r2,r2,-1
  806ae4:	b82b883a 	mov	r21,r23
  806ae8:	288a703a 	and	r5,r5,r2
  806aec:	4029883a 	mov	r20,r8
  806af0:	003f6806 	br	806894 <__alt_mem_onchip_mem+0xff7fe894>
  806af4:	00800434 	movhi	r2,16
  806af8:	81400234 	orhi	r5,r16,8
  806afc:	10bfffc4 	addi	r2,r2,-1
  806b00:	288a703a 	and	r5,r5,r2
  806b04:	003f6306 	br	806894 <__alt_mem_onchip_mem+0xff7fe894>
  806b08:	147ff604 	addi	r17,r2,-40
  806b0c:	3462983a 	sll	r17,r6,r17
  806b10:	0011883a 	mov	r8,zero
  806b14:	003f4406 	br	806828 <__alt_mem_onchip_mem+0xff7fe828>
  806b18:	3009883a 	mov	r4,r6
  806b1c:	d9800215 	stw	r6,8(sp)
  806b20:	da400115 	stw	r9,4(sp)
  806b24:	da800015 	stw	r10,0(sp)
  806b28:	08077180 	call	807718 <__clzsi2>
  806b2c:	10800804 	addi	r2,r2,32
  806b30:	da800017 	ldw	r10,0(sp)
  806b34:	da400117 	ldw	r9,4(sp)
  806b38:	d9800217 	ldw	r6,8(sp)
  806b3c:	003f3006 	br	806800 <__alt_mem_onchip_mem+0xff7fe800>
  806b40:	143ff604 	addi	r16,r2,-40
  806b44:	9c20983a 	sll	r16,r19,r16
  806b48:	0029883a 	mov	r20,zero
  806b4c:	003f1606 	br	8067a8 <__alt_mem_onchip_mem+0xff7fe7a8>
  806b50:	d9800215 	stw	r6,8(sp)
  806b54:	d9c00015 	stw	r7,0(sp)
  806b58:	da400115 	stw	r9,4(sp)
  806b5c:	08077180 	call	807718 <__clzsi2>
  806b60:	10800804 	addi	r2,r2,32
  806b64:	da400117 	ldw	r9,4(sp)
  806b68:	d9c00017 	ldw	r7,0(sp)
  806b6c:	d9800217 	ldw	r6,8(sp)
  806b70:	003f0306 	br	806780 <__alt_mem_onchip_mem+0xff7fe780>
  806b74:	00c00044 	movi	r3,1
  806b78:	1947c83a 	sub	r3,r3,r5
  806b7c:	00800e04 	movi	r2,56
  806b80:	10feda16 	blt	r2,r3,8066ec <__alt_mem_onchip_mem+0xff7fe6ec>
  806b84:	008007c4 	movi	r2,31
  806b88:	10c01b16 	blt	r2,r3,806bf8 <__muldf3+0x678>
  806b8c:	00800804 	movi	r2,32
  806b90:	10c5c83a 	sub	r2,r2,r3
  806b94:	888a983a 	sll	r5,r17,r2
  806b98:	40c8d83a 	srl	r4,r8,r3
  806b9c:	4084983a 	sll	r2,r8,r2
  806ba0:	88e2d83a 	srl	r17,r17,r3
  806ba4:	2906b03a 	or	r3,r5,r4
  806ba8:	1004c03a 	cmpne	r2,r2,zero
  806bac:	1886b03a 	or	r3,r3,r2
  806bb0:	188001cc 	andi	r2,r3,7
  806bb4:	10000726 	beq	r2,zero,806bd4 <__muldf3+0x654>
  806bb8:	188003cc 	andi	r2,r3,15
  806bbc:	01000104 	movi	r4,4
  806bc0:	11000426 	beq	r2,r4,806bd4 <__muldf3+0x654>
  806bc4:	1805883a 	mov	r2,r3
  806bc8:	10c00104 	addi	r3,r2,4
  806bcc:	1885803a 	cmpltu	r2,r3,r2
  806bd0:	88a3883a 	add	r17,r17,r2
  806bd4:	8880202c 	andhi	r2,r17,128
  806bd8:	10001c26 	beq	r2,zero,806c4c <__muldf3+0x6cc>
  806bdc:	b02b883a 	mov	r21,r22
  806be0:	00800044 	movi	r2,1
  806be4:	000b883a 	mov	r5,zero
  806be8:	0029883a 	mov	r20,zero
  806bec:	003ec306 	br	8066fc <__alt_mem_onchip_mem+0xff7fe6fc>
  806bf0:	5805883a 	mov	r2,r11
  806bf4:	003f9906 	br	806a5c <__alt_mem_onchip_mem+0xff7fea5c>
  806bf8:	00bff844 	movi	r2,-31
  806bfc:	1145c83a 	sub	r2,r2,r5
  806c00:	8888d83a 	srl	r4,r17,r2
  806c04:	00800804 	movi	r2,32
  806c08:	18801a26 	beq	r3,r2,806c74 <__muldf3+0x6f4>
  806c0c:	00801004 	movi	r2,64
  806c10:	10c5c83a 	sub	r2,r2,r3
  806c14:	8884983a 	sll	r2,r17,r2
  806c18:	1204b03a 	or	r2,r2,r8
  806c1c:	1004c03a 	cmpne	r2,r2,zero
  806c20:	2084b03a 	or	r2,r4,r2
  806c24:	144001cc 	andi	r17,r2,7
  806c28:	88000d1e 	bne	r17,zero,806c60 <__muldf3+0x6e0>
  806c2c:	000b883a 	mov	r5,zero
  806c30:	1028d0fa 	srli	r20,r2,3
  806c34:	b02b883a 	mov	r21,r22
  806c38:	0005883a 	mov	r2,zero
  806c3c:	a468b03a 	or	r20,r20,r17
  806c40:	003eae06 	br	8066fc <__alt_mem_onchip_mem+0xff7fe6fc>
  806c44:	1007883a 	mov	r3,r2
  806c48:	0023883a 	mov	r17,zero
  806c4c:	880a927a 	slli	r5,r17,9
  806c50:	1805883a 	mov	r2,r3
  806c54:	8822977a 	slli	r17,r17,29
  806c58:	280ad33a 	srli	r5,r5,12
  806c5c:	003ff406 	br	806c30 <__alt_mem_onchip_mem+0xff7fec30>
  806c60:	10c003cc 	andi	r3,r2,15
  806c64:	01000104 	movi	r4,4
  806c68:	193ff626 	beq	r3,r4,806c44 <__alt_mem_onchip_mem+0xff7fec44>
  806c6c:	0023883a 	mov	r17,zero
  806c70:	003fd506 	br	806bc8 <__alt_mem_onchip_mem+0xff7febc8>
  806c74:	0005883a 	mov	r2,zero
  806c78:	003fe706 	br	806c18 <__alt_mem_onchip_mem+0xff7fec18>
  806c7c:	00800434 	movhi	r2,16
  806c80:	89400234 	orhi	r5,r17,8
  806c84:	10bfffc4 	addi	r2,r2,-1
  806c88:	b02b883a 	mov	r21,r22
  806c8c:	288a703a 	and	r5,r5,r2
  806c90:	4029883a 	mov	r20,r8
  806c94:	003eff06 	br	806894 <__alt_mem_onchip_mem+0xff7fe894>

00806c98 <__subdf3>:
  806c98:	02000434 	movhi	r8,16
  806c9c:	423fffc4 	addi	r8,r8,-1
  806ca0:	defffb04 	addi	sp,sp,-20
  806ca4:	2a14703a 	and	r10,r5,r8
  806ca8:	3812d53a 	srli	r9,r7,20
  806cac:	3a10703a 	and	r8,r7,r8
  806cb0:	2006d77a 	srli	r3,r4,29
  806cb4:	3004d77a 	srli	r2,r6,29
  806cb8:	dc000015 	stw	r16,0(sp)
  806cbc:	501490fa 	slli	r10,r10,3
  806cc0:	2820d53a 	srli	r16,r5,20
  806cc4:	401090fa 	slli	r8,r8,3
  806cc8:	dc800215 	stw	r18,8(sp)
  806ccc:	dc400115 	stw	r17,4(sp)
  806cd0:	dfc00415 	stw	ra,16(sp)
  806cd4:	202290fa 	slli	r17,r4,3
  806cd8:	dcc00315 	stw	r19,12(sp)
  806cdc:	4a41ffcc 	andi	r9,r9,2047
  806ce0:	0101ffc4 	movi	r4,2047
  806ce4:	2824d7fa 	srli	r18,r5,31
  806ce8:	8401ffcc 	andi	r16,r16,2047
  806cec:	50c6b03a 	or	r3,r10,r3
  806cf0:	380ed7fa 	srli	r7,r7,31
  806cf4:	408ab03a 	or	r5,r8,r2
  806cf8:	300c90fa 	slli	r6,r6,3
  806cfc:	49009626 	beq	r9,r4,806f58 <__subdf3+0x2c0>
  806d00:	39c0005c 	xori	r7,r7,1
  806d04:	8245c83a 	sub	r2,r16,r9
  806d08:	3c807426 	beq	r7,r18,806edc <__subdf3+0x244>
  806d0c:	0080af0e 	bge	zero,r2,806fcc <__subdf3+0x334>
  806d10:	48002a1e 	bne	r9,zero,806dbc <__subdf3+0x124>
  806d14:	2988b03a 	or	r4,r5,r6
  806d18:	20009a1e 	bne	r4,zero,806f84 <__subdf3+0x2ec>
  806d1c:	888001cc 	andi	r2,r17,7
  806d20:	10000726 	beq	r2,zero,806d40 <__subdf3+0xa8>
  806d24:	888003cc 	andi	r2,r17,15
  806d28:	01000104 	movi	r4,4
  806d2c:	11000426 	beq	r2,r4,806d40 <__subdf3+0xa8>
  806d30:	890b883a 	add	r5,r17,r4
  806d34:	2c63803a 	cmpltu	r17,r5,r17
  806d38:	1c47883a 	add	r3,r3,r17
  806d3c:	2823883a 	mov	r17,r5
  806d40:	1880202c 	andhi	r2,r3,128
  806d44:	10005926 	beq	r2,zero,806eac <__subdf3+0x214>
  806d48:	84000044 	addi	r16,r16,1
  806d4c:	0081ffc4 	movi	r2,2047
  806d50:	8080be26 	beq	r16,r2,80704c <__subdf3+0x3b4>
  806d54:	017fe034 	movhi	r5,65408
  806d58:	297fffc4 	addi	r5,r5,-1
  806d5c:	1946703a 	and	r3,r3,r5
  806d60:	1804977a 	slli	r2,r3,29
  806d64:	1806927a 	slli	r3,r3,9
  806d68:	8822d0fa 	srli	r17,r17,3
  806d6c:	8401ffcc 	andi	r16,r16,2047
  806d70:	180ad33a 	srli	r5,r3,12
  806d74:	9100004c 	andi	r4,r18,1
  806d78:	1444b03a 	or	r2,r2,r17
  806d7c:	80c1ffcc 	andi	r3,r16,2047
  806d80:	1820953a 	slli	r16,r3,20
  806d84:	20c03fcc 	andi	r3,r4,255
  806d88:	180897fa 	slli	r4,r3,31
  806d8c:	00c00434 	movhi	r3,16
  806d90:	18ffffc4 	addi	r3,r3,-1
  806d94:	28c6703a 	and	r3,r5,r3
  806d98:	1c06b03a 	or	r3,r3,r16
  806d9c:	1906b03a 	or	r3,r3,r4
  806da0:	dfc00417 	ldw	ra,16(sp)
  806da4:	dcc00317 	ldw	r19,12(sp)
  806da8:	dc800217 	ldw	r18,8(sp)
  806dac:	dc400117 	ldw	r17,4(sp)
  806db0:	dc000017 	ldw	r16,0(sp)
  806db4:	dec00504 	addi	sp,sp,20
  806db8:	f800283a 	ret
  806dbc:	0101ffc4 	movi	r4,2047
  806dc0:	813fd626 	beq	r16,r4,806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  806dc4:	29402034 	orhi	r5,r5,128
  806dc8:	01000e04 	movi	r4,56
  806dcc:	2080a316 	blt	r4,r2,80705c <__subdf3+0x3c4>
  806dd0:	010007c4 	movi	r4,31
  806dd4:	2080c616 	blt	r4,r2,8070f0 <__subdf3+0x458>
  806dd8:	01000804 	movi	r4,32
  806ddc:	2089c83a 	sub	r4,r4,r2
  806de0:	2910983a 	sll	r8,r5,r4
  806de4:	308ed83a 	srl	r7,r6,r2
  806de8:	3108983a 	sll	r4,r6,r4
  806dec:	2884d83a 	srl	r2,r5,r2
  806df0:	41ccb03a 	or	r6,r8,r7
  806df4:	2008c03a 	cmpne	r4,r4,zero
  806df8:	310cb03a 	or	r6,r6,r4
  806dfc:	898dc83a 	sub	r6,r17,r6
  806e00:	89a3803a 	cmpltu	r17,r17,r6
  806e04:	1887c83a 	sub	r3,r3,r2
  806e08:	1c47c83a 	sub	r3,r3,r17
  806e0c:	3023883a 	mov	r17,r6
  806e10:	1880202c 	andhi	r2,r3,128
  806e14:	10002326 	beq	r2,zero,806ea4 <__subdf3+0x20c>
  806e18:	04c02034 	movhi	r19,128
  806e1c:	9cffffc4 	addi	r19,r19,-1
  806e20:	1ce6703a 	and	r19,r3,r19
  806e24:	98007a26 	beq	r19,zero,807010 <__subdf3+0x378>
  806e28:	9809883a 	mov	r4,r19
  806e2c:	08077180 	call	807718 <__clzsi2>
  806e30:	113ffe04 	addi	r4,r2,-8
  806e34:	00c007c4 	movi	r3,31
  806e38:	19007b16 	blt	r3,r4,807028 <__subdf3+0x390>
  806e3c:	00800804 	movi	r2,32
  806e40:	1105c83a 	sub	r2,r2,r4
  806e44:	8884d83a 	srl	r2,r17,r2
  806e48:	9906983a 	sll	r3,r19,r4
  806e4c:	8922983a 	sll	r17,r17,r4
  806e50:	10c4b03a 	or	r2,r2,r3
  806e54:	24007816 	blt	r4,r16,807038 <__subdf3+0x3a0>
  806e58:	2421c83a 	sub	r16,r4,r16
  806e5c:	80c00044 	addi	r3,r16,1
  806e60:	010007c4 	movi	r4,31
  806e64:	20c09516 	blt	r4,r3,8070bc <__subdf3+0x424>
  806e68:	01400804 	movi	r5,32
  806e6c:	28cbc83a 	sub	r5,r5,r3
  806e70:	88c8d83a 	srl	r4,r17,r3
  806e74:	8962983a 	sll	r17,r17,r5
  806e78:	114a983a 	sll	r5,r2,r5
  806e7c:	10c6d83a 	srl	r3,r2,r3
  806e80:	8804c03a 	cmpne	r2,r17,zero
  806e84:	290ab03a 	or	r5,r5,r4
  806e88:	28a2b03a 	or	r17,r5,r2
  806e8c:	0021883a 	mov	r16,zero
  806e90:	003fa206 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  806e94:	2090b03a 	or	r8,r4,r2
  806e98:	40018e26 	beq	r8,zero,8074d4 <__subdf3+0x83c>
  806e9c:	1007883a 	mov	r3,r2
  806ea0:	2023883a 	mov	r17,r4
  806ea4:	888001cc 	andi	r2,r17,7
  806ea8:	103f9e1e 	bne	r2,zero,806d24 <__alt_mem_onchip_mem+0xff7fed24>
  806eac:	1804977a 	slli	r2,r3,29
  806eb0:	8822d0fa 	srli	r17,r17,3
  806eb4:	1810d0fa 	srli	r8,r3,3
  806eb8:	9100004c 	andi	r4,r18,1
  806ebc:	1444b03a 	or	r2,r2,r17
  806ec0:	00c1ffc4 	movi	r3,2047
  806ec4:	80c02826 	beq	r16,r3,806f68 <__subdf3+0x2d0>
  806ec8:	01400434 	movhi	r5,16
  806ecc:	297fffc4 	addi	r5,r5,-1
  806ed0:	80e0703a 	and	r16,r16,r3
  806ed4:	414a703a 	and	r5,r8,r5
  806ed8:	003fa806 	br	806d7c <__alt_mem_onchip_mem+0xff7fed7c>
  806edc:	0080630e 	bge	zero,r2,80706c <__subdf3+0x3d4>
  806ee0:	48003026 	beq	r9,zero,806fa4 <__subdf3+0x30c>
  806ee4:	0101ffc4 	movi	r4,2047
  806ee8:	813f8c26 	beq	r16,r4,806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  806eec:	29402034 	orhi	r5,r5,128
  806ef0:	01000e04 	movi	r4,56
  806ef4:	2080a90e 	bge	r4,r2,80719c <__subdf3+0x504>
  806ef8:	298cb03a 	or	r6,r5,r6
  806efc:	3012c03a 	cmpne	r9,r6,zero
  806f00:	0005883a 	mov	r2,zero
  806f04:	4c53883a 	add	r9,r9,r17
  806f08:	4c63803a 	cmpltu	r17,r9,r17
  806f0c:	10c7883a 	add	r3,r2,r3
  806f10:	88c7883a 	add	r3,r17,r3
  806f14:	4823883a 	mov	r17,r9
  806f18:	1880202c 	andhi	r2,r3,128
  806f1c:	1000d026 	beq	r2,zero,807260 <__subdf3+0x5c8>
  806f20:	84000044 	addi	r16,r16,1
  806f24:	0081ffc4 	movi	r2,2047
  806f28:	8080fe26 	beq	r16,r2,807324 <__subdf3+0x68c>
  806f2c:	00bfe034 	movhi	r2,65408
  806f30:	10bfffc4 	addi	r2,r2,-1
  806f34:	1886703a 	and	r3,r3,r2
  806f38:	880ad07a 	srli	r5,r17,1
  806f3c:	180497fa 	slli	r2,r3,31
  806f40:	8900004c 	andi	r4,r17,1
  806f44:	2922b03a 	or	r17,r5,r4
  806f48:	1806d07a 	srli	r3,r3,1
  806f4c:	1462b03a 	or	r17,r2,r17
  806f50:	3825883a 	mov	r18,r7
  806f54:	003f7106 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  806f58:	2984b03a 	or	r2,r5,r6
  806f5c:	103f6826 	beq	r2,zero,806d00 <__alt_mem_onchip_mem+0xff7fed00>
  806f60:	39c03fcc 	andi	r7,r7,255
  806f64:	003f6706 	br	806d04 <__alt_mem_onchip_mem+0xff7fed04>
  806f68:	4086b03a 	or	r3,r8,r2
  806f6c:	18015226 	beq	r3,zero,8074b8 <__subdf3+0x820>
  806f70:	00c00434 	movhi	r3,16
  806f74:	41400234 	orhi	r5,r8,8
  806f78:	18ffffc4 	addi	r3,r3,-1
  806f7c:	28ca703a 	and	r5,r5,r3
  806f80:	003f7e06 	br	806d7c <__alt_mem_onchip_mem+0xff7fed7c>
  806f84:	10bfffc4 	addi	r2,r2,-1
  806f88:	1000491e 	bne	r2,zero,8070b0 <__subdf3+0x418>
  806f8c:	898fc83a 	sub	r7,r17,r6
  806f90:	89e3803a 	cmpltu	r17,r17,r7
  806f94:	1947c83a 	sub	r3,r3,r5
  806f98:	1c47c83a 	sub	r3,r3,r17
  806f9c:	3823883a 	mov	r17,r7
  806fa0:	003f9b06 	br	806e10 <__alt_mem_onchip_mem+0xff7fee10>
  806fa4:	2988b03a 	or	r4,r5,r6
  806fa8:	203f5c26 	beq	r4,zero,806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  806fac:	10bfffc4 	addi	r2,r2,-1
  806fb0:	1000931e 	bne	r2,zero,807200 <__subdf3+0x568>
  806fb4:	898d883a 	add	r6,r17,r6
  806fb8:	3463803a 	cmpltu	r17,r6,r17
  806fbc:	1947883a 	add	r3,r3,r5
  806fc0:	88c7883a 	add	r3,r17,r3
  806fc4:	3023883a 	mov	r17,r6
  806fc8:	003fd306 	br	806f18 <__alt_mem_onchip_mem+0xff7fef18>
  806fcc:	1000541e 	bne	r2,zero,807120 <__subdf3+0x488>
  806fd0:	80800044 	addi	r2,r16,1
  806fd4:	1081ffcc 	andi	r2,r2,2047
  806fd8:	01000044 	movi	r4,1
  806fdc:	2080a20e 	bge	r4,r2,807268 <__subdf3+0x5d0>
  806fe0:	8989c83a 	sub	r4,r17,r6
  806fe4:	8905803a 	cmpltu	r2,r17,r4
  806fe8:	1967c83a 	sub	r19,r3,r5
  806fec:	98a7c83a 	sub	r19,r19,r2
  806ff0:	9880202c 	andhi	r2,r19,128
  806ff4:	10006326 	beq	r2,zero,807184 <__subdf3+0x4ec>
  806ff8:	3463c83a 	sub	r17,r6,r17
  806ffc:	28c7c83a 	sub	r3,r5,r3
  807000:	344d803a 	cmpltu	r6,r6,r17
  807004:	19a7c83a 	sub	r19,r3,r6
  807008:	3825883a 	mov	r18,r7
  80700c:	983f861e 	bne	r19,zero,806e28 <__alt_mem_onchip_mem+0xff7fee28>
  807010:	8809883a 	mov	r4,r17
  807014:	08077180 	call	807718 <__clzsi2>
  807018:	10800804 	addi	r2,r2,32
  80701c:	113ffe04 	addi	r4,r2,-8
  807020:	00c007c4 	movi	r3,31
  807024:	193f850e 	bge	r3,r4,806e3c <__alt_mem_onchip_mem+0xff7fee3c>
  807028:	10bff604 	addi	r2,r2,-40
  80702c:	8884983a 	sll	r2,r17,r2
  807030:	0023883a 	mov	r17,zero
  807034:	243f880e 	bge	r4,r16,806e58 <__alt_mem_onchip_mem+0xff7fee58>
  807038:	00ffe034 	movhi	r3,65408
  80703c:	18ffffc4 	addi	r3,r3,-1
  807040:	8121c83a 	sub	r16,r16,r4
  807044:	10c6703a 	and	r3,r2,r3
  807048:	003f3406 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  80704c:	9100004c 	andi	r4,r18,1
  807050:	000b883a 	mov	r5,zero
  807054:	0005883a 	mov	r2,zero
  807058:	003f4806 	br	806d7c <__alt_mem_onchip_mem+0xff7fed7c>
  80705c:	298cb03a 	or	r6,r5,r6
  807060:	300cc03a 	cmpne	r6,r6,zero
  807064:	0005883a 	mov	r2,zero
  807068:	003f6406 	br	806dfc <__alt_mem_onchip_mem+0xff7fedfc>
  80706c:	10009a1e 	bne	r2,zero,8072d8 <__subdf3+0x640>
  807070:	82400044 	addi	r9,r16,1
  807074:	4881ffcc 	andi	r2,r9,2047
  807078:	02800044 	movi	r10,1
  80707c:	5080670e 	bge	r10,r2,80721c <__subdf3+0x584>
  807080:	0081ffc4 	movi	r2,2047
  807084:	4880af26 	beq	r9,r2,807344 <__subdf3+0x6ac>
  807088:	898d883a 	add	r6,r17,r6
  80708c:	1945883a 	add	r2,r3,r5
  807090:	3447803a 	cmpltu	r3,r6,r17
  807094:	1887883a 	add	r3,r3,r2
  807098:	182297fa 	slli	r17,r3,31
  80709c:	300cd07a 	srli	r6,r6,1
  8070a0:	1806d07a 	srli	r3,r3,1
  8070a4:	4821883a 	mov	r16,r9
  8070a8:	89a2b03a 	or	r17,r17,r6
  8070ac:	003f1b06 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  8070b0:	0101ffc4 	movi	r4,2047
  8070b4:	813f441e 	bne	r16,r4,806dc8 <__alt_mem_onchip_mem+0xff7fedc8>
  8070b8:	003f1806 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  8070bc:	843ff844 	addi	r16,r16,-31
  8070c0:	01400804 	movi	r5,32
  8070c4:	1408d83a 	srl	r4,r2,r16
  8070c8:	19405026 	beq	r3,r5,80720c <__subdf3+0x574>
  8070cc:	01401004 	movi	r5,64
  8070d0:	28c7c83a 	sub	r3,r5,r3
  8070d4:	10c4983a 	sll	r2,r2,r3
  8070d8:	88a2b03a 	or	r17,r17,r2
  8070dc:	8822c03a 	cmpne	r17,r17,zero
  8070e0:	2462b03a 	or	r17,r4,r17
  8070e4:	0007883a 	mov	r3,zero
  8070e8:	0021883a 	mov	r16,zero
  8070ec:	003f6d06 	br	806ea4 <__alt_mem_onchip_mem+0xff7feea4>
  8070f0:	11fff804 	addi	r7,r2,-32
  8070f4:	01000804 	movi	r4,32
  8070f8:	29ced83a 	srl	r7,r5,r7
  8070fc:	11004526 	beq	r2,r4,807214 <__subdf3+0x57c>
  807100:	01001004 	movi	r4,64
  807104:	2089c83a 	sub	r4,r4,r2
  807108:	2904983a 	sll	r2,r5,r4
  80710c:	118cb03a 	or	r6,r2,r6
  807110:	300cc03a 	cmpne	r6,r6,zero
  807114:	398cb03a 	or	r6,r7,r6
  807118:	0005883a 	mov	r2,zero
  80711c:	003f3706 	br	806dfc <__alt_mem_onchip_mem+0xff7fedfc>
  807120:	80002a26 	beq	r16,zero,8071cc <__subdf3+0x534>
  807124:	0101ffc4 	movi	r4,2047
  807128:	49006626 	beq	r9,r4,8072c4 <__subdf3+0x62c>
  80712c:	0085c83a 	sub	r2,zero,r2
  807130:	18c02034 	orhi	r3,r3,128
  807134:	01000e04 	movi	r4,56
  807138:	20807e16 	blt	r4,r2,807334 <__subdf3+0x69c>
  80713c:	010007c4 	movi	r4,31
  807140:	2080e716 	blt	r4,r2,8074e0 <__subdf3+0x848>
  807144:	01000804 	movi	r4,32
  807148:	2089c83a 	sub	r4,r4,r2
  80714c:	1914983a 	sll	r10,r3,r4
  807150:	8890d83a 	srl	r8,r17,r2
  807154:	8908983a 	sll	r4,r17,r4
  807158:	1884d83a 	srl	r2,r3,r2
  80715c:	5222b03a 	or	r17,r10,r8
  807160:	2006c03a 	cmpne	r3,r4,zero
  807164:	88e2b03a 	or	r17,r17,r3
  807168:	3463c83a 	sub	r17,r6,r17
  80716c:	2885c83a 	sub	r2,r5,r2
  807170:	344d803a 	cmpltu	r6,r6,r17
  807174:	1187c83a 	sub	r3,r2,r6
  807178:	4821883a 	mov	r16,r9
  80717c:	3825883a 	mov	r18,r7
  807180:	003f2306 	br	806e10 <__alt_mem_onchip_mem+0xff7fee10>
  807184:	24d0b03a 	or	r8,r4,r19
  807188:	40001b1e 	bne	r8,zero,8071f8 <__subdf3+0x560>
  80718c:	0005883a 	mov	r2,zero
  807190:	0009883a 	mov	r4,zero
  807194:	0021883a 	mov	r16,zero
  807198:	003f4906 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  80719c:	010007c4 	movi	r4,31
  8071a0:	20803a16 	blt	r4,r2,80728c <__subdf3+0x5f4>
  8071a4:	01000804 	movi	r4,32
  8071a8:	2089c83a 	sub	r4,r4,r2
  8071ac:	2912983a 	sll	r9,r5,r4
  8071b0:	3090d83a 	srl	r8,r6,r2
  8071b4:	3108983a 	sll	r4,r6,r4
  8071b8:	2884d83a 	srl	r2,r5,r2
  8071bc:	4a12b03a 	or	r9,r9,r8
  8071c0:	2008c03a 	cmpne	r4,r4,zero
  8071c4:	4912b03a 	or	r9,r9,r4
  8071c8:	003f4e06 	br	806f04 <__alt_mem_onchip_mem+0xff7fef04>
  8071cc:	1c48b03a 	or	r4,r3,r17
  8071d0:	20003c26 	beq	r4,zero,8072c4 <__subdf3+0x62c>
  8071d4:	0084303a 	nor	r2,zero,r2
  8071d8:	1000381e 	bne	r2,zero,8072bc <__subdf3+0x624>
  8071dc:	3463c83a 	sub	r17,r6,r17
  8071e0:	28c5c83a 	sub	r2,r5,r3
  8071e4:	344d803a 	cmpltu	r6,r6,r17
  8071e8:	1187c83a 	sub	r3,r2,r6
  8071ec:	4821883a 	mov	r16,r9
  8071f0:	3825883a 	mov	r18,r7
  8071f4:	003f0606 	br	806e10 <__alt_mem_onchip_mem+0xff7fee10>
  8071f8:	2023883a 	mov	r17,r4
  8071fc:	003f0906 	br	806e24 <__alt_mem_onchip_mem+0xff7fee24>
  807200:	0101ffc4 	movi	r4,2047
  807204:	813f3a1e 	bne	r16,r4,806ef0 <__alt_mem_onchip_mem+0xff7feef0>
  807208:	003ec406 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  80720c:	0005883a 	mov	r2,zero
  807210:	003fb106 	br	8070d8 <__alt_mem_onchip_mem+0xff7ff0d8>
  807214:	0005883a 	mov	r2,zero
  807218:	003fbc06 	br	80710c <__alt_mem_onchip_mem+0xff7ff10c>
  80721c:	1c44b03a 	or	r2,r3,r17
  807220:	80008e1e 	bne	r16,zero,80745c <__subdf3+0x7c4>
  807224:	1000c826 	beq	r2,zero,807548 <__subdf3+0x8b0>
  807228:	2984b03a 	or	r2,r5,r6
  80722c:	103ebb26 	beq	r2,zero,806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  807230:	8989883a 	add	r4,r17,r6
  807234:	1945883a 	add	r2,r3,r5
  807238:	2447803a 	cmpltu	r3,r4,r17
  80723c:	1887883a 	add	r3,r3,r2
  807240:	1880202c 	andhi	r2,r3,128
  807244:	2023883a 	mov	r17,r4
  807248:	103f1626 	beq	r2,zero,806ea4 <__alt_mem_onchip_mem+0xff7feea4>
  80724c:	00bfe034 	movhi	r2,65408
  807250:	10bfffc4 	addi	r2,r2,-1
  807254:	5021883a 	mov	r16,r10
  807258:	1886703a 	and	r3,r3,r2
  80725c:	003eaf06 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  807260:	3825883a 	mov	r18,r7
  807264:	003f0f06 	br	806ea4 <__alt_mem_onchip_mem+0xff7feea4>
  807268:	1c44b03a 	or	r2,r3,r17
  80726c:	8000251e 	bne	r16,zero,807304 <__subdf3+0x66c>
  807270:	1000661e 	bne	r2,zero,80740c <__subdf3+0x774>
  807274:	2990b03a 	or	r8,r5,r6
  807278:	40009626 	beq	r8,zero,8074d4 <__subdf3+0x83c>
  80727c:	2807883a 	mov	r3,r5
  807280:	3023883a 	mov	r17,r6
  807284:	3825883a 	mov	r18,r7
  807288:	003ea406 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  80728c:	127ff804 	addi	r9,r2,-32
  807290:	01000804 	movi	r4,32
  807294:	2a52d83a 	srl	r9,r5,r9
  807298:	11008c26 	beq	r2,r4,8074cc <__subdf3+0x834>
  80729c:	01001004 	movi	r4,64
  8072a0:	2085c83a 	sub	r2,r4,r2
  8072a4:	2884983a 	sll	r2,r5,r2
  8072a8:	118cb03a 	or	r6,r2,r6
  8072ac:	300cc03a 	cmpne	r6,r6,zero
  8072b0:	4992b03a 	or	r9,r9,r6
  8072b4:	0005883a 	mov	r2,zero
  8072b8:	003f1206 	br	806f04 <__alt_mem_onchip_mem+0xff7fef04>
  8072bc:	0101ffc4 	movi	r4,2047
  8072c0:	493f9c1e 	bne	r9,r4,807134 <__alt_mem_onchip_mem+0xff7ff134>
  8072c4:	2807883a 	mov	r3,r5
  8072c8:	3023883a 	mov	r17,r6
  8072cc:	4821883a 	mov	r16,r9
  8072d0:	3825883a 	mov	r18,r7
  8072d4:	003e9106 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  8072d8:	80001f1e 	bne	r16,zero,807358 <__subdf3+0x6c0>
  8072dc:	1c48b03a 	or	r4,r3,r17
  8072e0:	20005a26 	beq	r4,zero,80744c <__subdf3+0x7b4>
  8072e4:	0084303a 	nor	r2,zero,r2
  8072e8:	1000561e 	bne	r2,zero,807444 <__subdf3+0x7ac>
  8072ec:	89a3883a 	add	r17,r17,r6
  8072f0:	1945883a 	add	r2,r3,r5
  8072f4:	898d803a 	cmpltu	r6,r17,r6
  8072f8:	3087883a 	add	r3,r6,r2
  8072fc:	4821883a 	mov	r16,r9
  807300:	003f0506 	br	806f18 <__alt_mem_onchip_mem+0xff7fef18>
  807304:	10002b1e 	bne	r2,zero,8073b4 <__subdf3+0x71c>
  807308:	2984b03a 	or	r2,r5,r6
  80730c:	10008026 	beq	r2,zero,807510 <__subdf3+0x878>
  807310:	2807883a 	mov	r3,r5
  807314:	3023883a 	mov	r17,r6
  807318:	3825883a 	mov	r18,r7
  80731c:	0401ffc4 	movi	r16,2047
  807320:	003e7e06 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  807324:	3809883a 	mov	r4,r7
  807328:	0011883a 	mov	r8,zero
  80732c:	0005883a 	mov	r2,zero
  807330:	003ee306 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  807334:	1c62b03a 	or	r17,r3,r17
  807338:	8822c03a 	cmpne	r17,r17,zero
  80733c:	0005883a 	mov	r2,zero
  807340:	003f8906 	br	807168 <__alt_mem_onchip_mem+0xff7ff168>
  807344:	3809883a 	mov	r4,r7
  807348:	4821883a 	mov	r16,r9
  80734c:	0011883a 	mov	r8,zero
  807350:	0005883a 	mov	r2,zero
  807354:	003eda06 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  807358:	0101ffc4 	movi	r4,2047
  80735c:	49003b26 	beq	r9,r4,80744c <__subdf3+0x7b4>
  807360:	0085c83a 	sub	r2,zero,r2
  807364:	18c02034 	orhi	r3,r3,128
  807368:	01000e04 	movi	r4,56
  80736c:	20806e16 	blt	r4,r2,807528 <__subdf3+0x890>
  807370:	010007c4 	movi	r4,31
  807374:	20807716 	blt	r4,r2,807554 <__subdf3+0x8bc>
  807378:	01000804 	movi	r4,32
  80737c:	2089c83a 	sub	r4,r4,r2
  807380:	1914983a 	sll	r10,r3,r4
  807384:	8890d83a 	srl	r8,r17,r2
  807388:	8908983a 	sll	r4,r17,r4
  80738c:	1884d83a 	srl	r2,r3,r2
  807390:	5222b03a 	or	r17,r10,r8
  807394:	2006c03a 	cmpne	r3,r4,zero
  807398:	88e2b03a 	or	r17,r17,r3
  80739c:	89a3883a 	add	r17,r17,r6
  8073a0:	1145883a 	add	r2,r2,r5
  8073a4:	898d803a 	cmpltu	r6,r17,r6
  8073a8:	3087883a 	add	r3,r6,r2
  8073ac:	4821883a 	mov	r16,r9
  8073b0:	003ed906 	br	806f18 <__alt_mem_onchip_mem+0xff7fef18>
  8073b4:	2984b03a 	or	r2,r5,r6
  8073b8:	10004226 	beq	r2,zero,8074c4 <__subdf3+0x82c>
  8073bc:	1808d0fa 	srli	r4,r3,3
  8073c0:	8822d0fa 	srli	r17,r17,3
  8073c4:	1806977a 	slli	r3,r3,29
  8073c8:	2080022c 	andhi	r2,r4,8
  8073cc:	1c62b03a 	or	r17,r3,r17
  8073d0:	10000826 	beq	r2,zero,8073f4 <__subdf3+0x75c>
  8073d4:	2812d0fa 	srli	r9,r5,3
  8073d8:	4880022c 	andhi	r2,r9,8
  8073dc:	1000051e 	bne	r2,zero,8073f4 <__subdf3+0x75c>
  8073e0:	300cd0fa 	srli	r6,r6,3
  8073e4:	2804977a 	slli	r2,r5,29
  8073e8:	4809883a 	mov	r4,r9
  8073ec:	3825883a 	mov	r18,r7
  8073f0:	11a2b03a 	or	r17,r2,r6
  8073f4:	8806d77a 	srli	r3,r17,29
  8073f8:	200890fa 	slli	r4,r4,3
  8073fc:	882290fa 	slli	r17,r17,3
  807400:	0401ffc4 	movi	r16,2047
  807404:	1906b03a 	or	r3,r3,r4
  807408:	003e4406 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  80740c:	2984b03a 	or	r2,r5,r6
  807410:	103e4226 	beq	r2,zero,806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  807414:	8989c83a 	sub	r4,r17,r6
  807418:	8911803a 	cmpltu	r8,r17,r4
  80741c:	1945c83a 	sub	r2,r3,r5
  807420:	1205c83a 	sub	r2,r2,r8
  807424:	1200202c 	andhi	r8,r2,128
  807428:	403e9a26 	beq	r8,zero,806e94 <__alt_mem_onchip_mem+0xff7fee94>
  80742c:	3463c83a 	sub	r17,r6,r17
  807430:	28c5c83a 	sub	r2,r5,r3
  807434:	344d803a 	cmpltu	r6,r6,r17
  807438:	1187c83a 	sub	r3,r2,r6
  80743c:	3825883a 	mov	r18,r7
  807440:	003e3606 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  807444:	0101ffc4 	movi	r4,2047
  807448:	493fc71e 	bne	r9,r4,807368 <__alt_mem_onchip_mem+0xff7ff368>
  80744c:	2807883a 	mov	r3,r5
  807450:	3023883a 	mov	r17,r6
  807454:	4821883a 	mov	r16,r9
  807458:	003e3006 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  80745c:	10003626 	beq	r2,zero,807538 <__subdf3+0x8a0>
  807460:	2984b03a 	or	r2,r5,r6
  807464:	10001726 	beq	r2,zero,8074c4 <__subdf3+0x82c>
  807468:	1808d0fa 	srli	r4,r3,3
  80746c:	8822d0fa 	srli	r17,r17,3
  807470:	1806977a 	slli	r3,r3,29
  807474:	2080022c 	andhi	r2,r4,8
  807478:	1c62b03a 	or	r17,r3,r17
  80747c:	10000726 	beq	r2,zero,80749c <__subdf3+0x804>
  807480:	2812d0fa 	srli	r9,r5,3
  807484:	4880022c 	andhi	r2,r9,8
  807488:	1000041e 	bne	r2,zero,80749c <__subdf3+0x804>
  80748c:	300cd0fa 	srli	r6,r6,3
  807490:	2804977a 	slli	r2,r5,29
  807494:	4809883a 	mov	r4,r9
  807498:	11a2b03a 	or	r17,r2,r6
  80749c:	8806d77a 	srli	r3,r17,29
  8074a0:	200890fa 	slli	r4,r4,3
  8074a4:	882290fa 	slli	r17,r17,3
  8074a8:	3825883a 	mov	r18,r7
  8074ac:	1906b03a 	or	r3,r3,r4
  8074b0:	0401ffc4 	movi	r16,2047
  8074b4:	003e1906 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  8074b8:	000b883a 	mov	r5,zero
  8074bc:	0005883a 	mov	r2,zero
  8074c0:	003e2e06 	br	806d7c <__alt_mem_onchip_mem+0xff7fed7c>
  8074c4:	0401ffc4 	movi	r16,2047
  8074c8:	003e1406 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  8074cc:	0005883a 	mov	r2,zero
  8074d0:	003f7506 	br	8072a8 <__alt_mem_onchip_mem+0xff7ff2a8>
  8074d4:	0005883a 	mov	r2,zero
  8074d8:	0009883a 	mov	r4,zero
  8074dc:	003e7806 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  8074e0:	123ff804 	addi	r8,r2,-32
  8074e4:	01000804 	movi	r4,32
  8074e8:	1a10d83a 	srl	r8,r3,r8
  8074ec:	11002526 	beq	r2,r4,807584 <__subdf3+0x8ec>
  8074f0:	01001004 	movi	r4,64
  8074f4:	2085c83a 	sub	r2,r4,r2
  8074f8:	1884983a 	sll	r2,r3,r2
  8074fc:	1444b03a 	or	r2,r2,r17
  807500:	1004c03a 	cmpne	r2,r2,zero
  807504:	40a2b03a 	or	r17,r8,r2
  807508:	0005883a 	mov	r2,zero
  80750c:	003f1606 	br	807168 <__alt_mem_onchip_mem+0xff7ff168>
  807510:	02000434 	movhi	r8,16
  807514:	0009883a 	mov	r4,zero
  807518:	423fffc4 	addi	r8,r8,-1
  80751c:	00bfffc4 	movi	r2,-1
  807520:	0401ffc4 	movi	r16,2047
  807524:	003e6606 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  807528:	1c62b03a 	or	r17,r3,r17
  80752c:	8822c03a 	cmpne	r17,r17,zero
  807530:	0005883a 	mov	r2,zero
  807534:	003f9906 	br	80739c <__alt_mem_onchip_mem+0xff7ff39c>
  807538:	2807883a 	mov	r3,r5
  80753c:	3023883a 	mov	r17,r6
  807540:	0401ffc4 	movi	r16,2047
  807544:	003df506 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  807548:	2807883a 	mov	r3,r5
  80754c:	3023883a 	mov	r17,r6
  807550:	003df206 	br	806d1c <__alt_mem_onchip_mem+0xff7fed1c>
  807554:	123ff804 	addi	r8,r2,-32
  807558:	01000804 	movi	r4,32
  80755c:	1a10d83a 	srl	r8,r3,r8
  807560:	11000a26 	beq	r2,r4,80758c <__subdf3+0x8f4>
  807564:	01001004 	movi	r4,64
  807568:	2085c83a 	sub	r2,r4,r2
  80756c:	1884983a 	sll	r2,r3,r2
  807570:	1444b03a 	or	r2,r2,r17
  807574:	1004c03a 	cmpne	r2,r2,zero
  807578:	40a2b03a 	or	r17,r8,r2
  80757c:	0005883a 	mov	r2,zero
  807580:	003f8606 	br	80739c <__alt_mem_onchip_mem+0xff7ff39c>
  807584:	0005883a 	mov	r2,zero
  807588:	003fdc06 	br	8074fc <__alt_mem_onchip_mem+0xff7ff4fc>
  80758c:	0005883a 	mov	r2,zero
  807590:	003ff706 	br	807570 <__alt_mem_onchip_mem+0xff7ff570>

00807594 <__floatsidf>:
  807594:	defffd04 	addi	sp,sp,-12
  807598:	dfc00215 	stw	ra,8(sp)
  80759c:	dc400115 	stw	r17,4(sp)
  8075a0:	dc000015 	stw	r16,0(sp)
  8075a4:	20002b26 	beq	r4,zero,807654 <__floatsidf+0xc0>
  8075a8:	2023883a 	mov	r17,r4
  8075ac:	2020d7fa 	srli	r16,r4,31
  8075b0:	20002d16 	blt	r4,zero,807668 <__floatsidf+0xd4>
  8075b4:	8809883a 	mov	r4,r17
  8075b8:	08077180 	call	807718 <__clzsi2>
  8075bc:	01410784 	movi	r5,1054
  8075c0:	288bc83a 	sub	r5,r5,r2
  8075c4:	01010cc4 	movi	r4,1075
  8075c8:	2149c83a 	sub	r4,r4,r5
  8075cc:	00c007c4 	movi	r3,31
  8075d0:	1900160e 	bge	r3,r4,80762c <__floatsidf+0x98>
  8075d4:	00c104c4 	movi	r3,1043
  8075d8:	1947c83a 	sub	r3,r3,r5
  8075dc:	88c6983a 	sll	r3,r17,r3
  8075e0:	00800434 	movhi	r2,16
  8075e4:	10bfffc4 	addi	r2,r2,-1
  8075e8:	1886703a 	and	r3,r3,r2
  8075ec:	2941ffcc 	andi	r5,r5,2047
  8075f0:	800d883a 	mov	r6,r16
  8075f4:	0005883a 	mov	r2,zero
  8075f8:	280a953a 	slli	r5,r5,20
  8075fc:	31803fcc 	andi	r6,r6,255
  807600:	01000434 	movhi	r4,16
  807604:	300c97fa 	slli	r6,r6,31
  807608:	213fffc4 	addi	r4,r4,-1
  80760c:	1906703a 	and	r3,r3,r4
  807610:	1946b03a 	or	r3,r3,r5
  807614:	1986b03a 	or	r3,r3,r6
  807618:	dfc00217 	ldw	ra,8(sp)
  80761c:	dc400117 	ldw	r17,4(sp)
  807620:	dc000017 	ldw	r16,0(sp)
  807624:	dec00304 	addi	sp,sp,12
  807628:	f800283a 	ret
  80762c:	00c002c4 	movi	r3,11
  807630:	1887c83a 	sub	r3,r3,r2
  807634:	88c6d83a 	srl	r3,r17,r3
  807638:	8904983a 	sll	r2,r17,r4
  80763c:	01000434 	movhi	r4,16
  807640:	213fffc4 	addi	r4,r4,-1
  807644:	2941ffcc 	andi	r5,r5,2047
  807648:	1906703a 	and	r3,r3,r4
  80764c:	800d883a 	mov	r6,r16
  807650:	003fe906 	br	8075f8 <__alt_mem_onchip_mem+0xff7ff5f8>
  807654:	000d883a 	mov	r6,zero
  807658:	000b883a 	mov	r5,zero
  80765c:	0007883a 	mov	r3,zero
  807660:	0005883a 	mov	r2,zero
  807664:	003fe406 	br	8075f8 <__alt_mem_onchip_mem+0xff7ff5f8>
  807668:	0123c83a 	sub	r17,zero,r4
  80766c:	003fd106 	br	8075b4 <__alt_mem_onchip_mem+0xff7ff5b4>

00807670 <__floatunsidf>:
  807670:	defffe04 	addi	sp,sp,-8
  807674:	dc000015 	stw	r16,0(sp)
  807678:	dfc00115 	stw	ra,4(sp)
  80767c:	2021883a 	mov	r16,r4
  807680:	20002226 	beq	r4,zero,80770c <__floatunsidf+0x9c>
  807684:	08077180 	call	807718 <__clzsi2>
  807688:	01010784 	movi	r4,1054
  80768c:	2089c83a 	sub	r4,r4,r2
  807690:	01810cc4 	movi	r6,1075
  807694:	310dc83a 	sub	r6,r6,r4
  807698:	00c007c4 	movi	r3,31
  80769c:	1980120e 	bge	r3,r6,8076e8 <__floatunsidf+0x78>
  8076a0:	00c104c4 	movi	r3,1043
  8076a4:	1907c83a 	sub	r3,r3,r4
  8076a8:	80ca983a 	sll	r5,r16,r3
  8076ac:	00800434 	movhi	r2,16
  8076b0:	10bfffc4 	addi	r2,r2,-1
  8076b4:	2101ffcc 	andi	r4,r4,2047
  8076b8:	0021883a 	mov	r16,zero
  8076bc:	288a703a 	and	r5,r5,r2
  8076c0:	2008953a 	slli	r4,r4,20
  8076c4:	00c00434 	movhi	r3,16
  8076c8:	18ffffc4 	addi	r3,r3,-1
  8076cc:	28c6703a 	and	r3,r5,r3
  8076d0:	8005883a 	mov	r2,r16
  8076d4:	1906b03a 	or	r3,r3,r4
  8076d8:	dfc00117 	ldw	ra,4(sp)
  8076dc:	dc000017 	ldw	r16,0(sp)
  8076e0:	dec00204 	addi	sp,sp,8
  8076e4:	f800283a 	ret
  8076e8:	00c002c4 	movi	r3,11
  8076ec:	188bc83a 	sub	r5,r3,r2
  8076f0:	814ad83a 	srl	r5,r16,r5
  8076f4:	00c00434 	movhi	r3,16
  8076f8:	18ffffc4 	addi	r3,r3,-1
  8076fc:	81a0983a 	sll	r16,r16,r6
  807700:	2101ffcc 	andi	r4,r4,2047
  807704:	28ca703a 	and	r5,r5,r3
  807708:	003fed06 	br	8076c0 <__alt_mem_onchip_mem+0xff7ff6c0>
  80770c:	0009883a 	mov	r4,zero
  807710:	000b883a 	mov	r5,zero
  807714:	003fea06 	br	8076c0 <__alt_mem_onchip_mem+0xff7ff6c0>

00807718 <__clzsi2>:
  807718:	00bfffd4 	movui	r2,65535
  80771c:	11000536 	bltu	r2,r4,807734 <__clzsi2+0x1c>
  807720:	00803fc4 	movi	r2,255
  807724:	11000f36 	bltu	r2,r4,807764 <__clzsi2+0x4c>
  807728:	00800804 	movi	r2,32
  80772c:	0007883a 	mov	r3,zero
  807730:	00000506 	br	807748 <__clzsi2+0x30>
  807734:	00804034 	movhi	r2,256
  807738:	10bfffc4 	addi	r2,r2,-1
  80773c:	11000c2e 	bgeu	r2,r4,807770 <__clzsi2+0x58>
  807740:	00800204 	movi	r2,8
  807744:	00c00604 	movi	r3,24
  807748:	20c8d83a 	srl	r4,r4,r3
  80774c:	00c02074 	movhi	r3,129
  807750:	18fc2fc4 	addi	r3,r3,-3905
  807754:	1909883a 	add	r4,r3,r4
  807758:	20c00003 	ldbu	r3,0(r4)
  80775c:	10c5c83a 	sub	r2,r2,r3
  807760:	f800283a 	ret
  807764:	00800604 	movi	r2,24
  807768:	00c00204 	movi	r3,8
  80776c:	003ff606 	br	807748 <__alt_mem_onchip_mem+0xff7ff748>
  807770:	00800404 	movi	r2,16
  807774:	1007883a 	mov	r3,r2
  807778:	003ff306 	br	807748 <__alt_mem_onchip_mem+0xff7ff748>

0080777c <_fopen_r>:
  80777c:	defffa04 	addi	sp,sp,-24
  807780:	3005883a 	mov	r2,r6
  807784:	dcc00415 	stw	r19,16(sp)
  807788:	d80d883a 	mov	r6,sp
  80778c:	2827883a 	mov	r19,r5
  807790:	100b883a 	mov	r5,r2
  807794:	dc800315 	stw	r18,12(sp)
  807798:	dfc00515 	stw	ra,20(sp)
  80779c:	dc400215 	stw	r17,8(sp)
  8077a0:	dc000115 	stw	r16,4(sp)
  8077a4:	2025883a 	mov	r18,r4
  8077a8:	080949c0 	call	80949c <__sflags>
  8077ac:	10002726 	beq	r2,zero,80784c <_fopen_r+0xd0>
  8077b0:	9009883a 	mov	r4,r18
  8077b4:	1023883a 	mov	r17,r2
  8077b8:	080931c0 	call	80931c <__sfp>
  8077bc:	1021883a 	mov	r16,r2
  8077c0:	10002226 	beq	r2,zero,80784c <_fopen_r+0xd0>
  8077c4:	d9800017 	ldw	r6,0(sp)
  8077c8:	01c06d84 	movi	r7,438
  8077cc:	980b883a 	mov	r5,r19
  8077d0:	9009883a 	mov	r4,r18
  8077d4:	08088540 	call	808854 <_open_r>
  8077d8:	10001916 	blt	r2,zero,807840 <_fopen_r+0xc4>
  8077dc:	8080038d 	sth	r2,14(r16)
  8077e0:	00802074 	movhi	r2,129
  8077e4:	10a2f304 	addi	r2,r2,-29748
  8077e8:	80800815 	stw	r2,32(r16)
  8077ec:	00802074 	movhi	r2,129
  8077f0:	10a30a04 	addi	r2,r2,-29656
  8077f4:	80800915 	stw	r2,36(r16)
  8077f8:	00802074 	movhi	r2,129
  8077fc:	10a32904 	addi	r2,r2,-29532
  807800:	80800a15 	stw	r2,40(r16)
  807804:	00802074 	movhi	r2,129
  807808:	10a34004 	addi	r2,r2,-29440
  80780c:	8440030d 	sth	r17,12(r16)
  807810:	84000715 	stw	r16,28(r16)
  807814:	80800b15 	stw	r2,44(r16)
  807818:	8c40400c 	andi	r17,r17,256
  80781c:	88000d1e 	bne	r17,zero,807854 <_fopen_r+0xd8>
  807820:	8005883a 	mov	r2,r16
  807824:	dfc00517 	ldw	ra,20(sp)
  807828:	dcc00417 	ldw	r19,16(sp)
  80782c:	dc800317 	ldw	r18,12(sp)
  807830:	dc400217 	ldw	r17,8(sp)
  807834:	dc000117 	ldw	r16,4(sp)
  807838:	dec00604 	addi	sp,sp,24
  80783c:	f800283a 	ret
  807840:	080945c0 	call	80945c <__sfp_lock_acquire>
  807844:	8000030d 	sth	zero,12(r16)
  807848:	08094600 	call	809460 <__sfp_lock_release>
  80784c:	0005883a 	mov	r2,zero
  807850:	003ff406 	br	807824 <__alt_mem_onchip_mem+0xff7ff824>
  807854:	01c00084 	movi	r7,2
  807858:	000d883a 	mov	r6,zero
  80785c:	800b883a 	mov	r5,r16
  807860:	9009883a 	mov	r4,r18
  807864:	08078880 	call	807888 <_fseek_r>
  807868:	8005883a 	mov	r2,r16
  80786c:	003fed06 	br	807824 <__alt_mem_onchip_mem+0xff7ff824>

00807870 <fopen>:
  807870:	00802074 	movhi	r2,129
  807874:	10842a04 	addi	r2,r2,4264
  807878:	280d883a 	mov	r6,r5
  80787c:	200b883a 	mov	r5,r4
  807880:	11000017 	ldw	r4,0(r2)
  807884:	080777c1 	jmpi	80777c <_fopen_r>

00807888 <_fseek_r>:
  807888:	08078a81 	jmpi	8078a8 <_fseeko_r>

0080788c <fseek>:
  80788c:	00802074 	movhi	r2,129
  807890:	10842a04 	addi	r2,r2,4264
  807894:	300f883a 	mov	r7,r6
  807898:	280d883a 	mov	r6,r5
  80789c:	200b883a 	mov	r5,r4
  8078a0:	11000017 	ldw	r4,0(r2)
  8078a4:	08078a81 	jmpi	8078a8 <_fseeko_r>

008078a8 <_fseeko_r>:
  8078a8:	deffe804 	addi	sp,sp,-96
  8078ac:	dd401415 	stw	r21,80(sp)
  8078b0:	dc801115 	stw	r18,68(sp)
  8078b4:	dc401015 	stw	r17,64(sp)
  8078b8:	dc000f15 	stw	r16,60(sp)
  8078bc:	dfc01715 	stw	ra,92(sp)
  8078c0:	ddc01615 	stw	r23,88(sp)
  8078c4:	dd801515 	stw	r22,84(sp)
  8078c8:	dd001315 	stw	r20,76(sp)
  8078cc:	dcc01215 	stw	r19,72(sp)
  8078d0:	2023883a 	mov	r17,r4
  8078d4:	2821883a 	mov	r16,r5
  8078d8:	302b883a 	mov	r21,r6
  8078dc:	3825883a 	mov	r18,r7
  8078e0:	20000226 	beq	r4,zero,8078ec <_fseeko_r+0x44>
  8078e4:	20800e17 	ldw	r2,56(r4)
  8078e8:	10005a26 	beq	r2,zero,807a54 <_fseeko_r+0x1ac>
  8078ec:	8080030b 	ldhu	r2,12(r16)
  8078f0:	00c04204 	movi	r3,264
  8078f4:	1080420c 	andi	r2,r2,264
  8078f8:	10c05b26 	beq	r2,r3,807a68 <_fseeko_r+0x1c0>
  8078fc:	85000a17 	ldw	r20,40(r16)
  807900:	a000f626 	beq	r20,zero,807cdc <_fseeko_r+0x434>
  807904:	00800044 	movi	r2,1
  807908:	90803e26 	beq	r18,r2,807a04 <_fseeko_r+0x15c>
  80790c:	00800084 	movi	r2,2
  807910:	90801026 	beq	r18,r2,807954 <_fseeko_r+0xac>
  807914:	90000f26 	beq	r18,zero,807954 <_fseeko_r+0xac>
  807918:	00800584 	movi	r2,22
  80791c:	88800015 	stw	r2,0(r17)
  807920:	04ffffc4 	movi	r19,-1
  807924:	9805883a 	mov	r2,r19
  807928:	dfc01717 	ldw	ra,92(sp)
  80792c:	ddc01617 	ldw	r23,88(sp)
  807930:	dd801517 	ldw	r22,84(sp)
  807934:	dd401417 	ldw	r21,80(sp)
  807938:	dd001317 	ldw	r20,76(sp)
  80793c:	dcc01217 	ldw	r19,72(sp)
  807940:	dc801117 	ldw	r18,68(sp)
  807944:	dc401017 	ldw	r17,64(sp)
  807948:	dc000f17 	ldw	r16,60(sp)
  80794c:	dec01804 	addi	sp,sp,96
  807950:	f800283a 	ret
  807954:	80800417 	ldw	r2,16(r16)
  807958:	002f883a 	mov	r23,zero
  80795c:	0027883a 	mov	r19,zero
  807960:	1000cb26 	beq	r2,zero,807c90 <_fseeko_r+0x3e8>
  807964:	8080030b 	ldhu	r2,12(r16)
  807968:	10c2068c 	andi	r3,r2,2074
  80796c:	1800071e 	bne	r3,zero,80798c <_fseeko_r+0xe4>
  807970:	10c1000c 	andi	r3,r2,1024
  807974:	1800451e 	bne	r3,zero,807a8c <_fseeko_r+0x1e4>
  807978:	00c02074 	movhi	r3,129
  80797c:	18e32904 	addi	r3,r3,-29532
  807980:	a0c0b726 	beq	r20,r3,807c60 <_fseeko_r+0x3b8>
  807984:	10820014 	ori	r2,r2,2048
  807988:	8080030d 	sth	r2,12(r16)
  80798c:	800b883a 	mov	r5,r16
  807990:	8809883a 	mov	r4,r17
  807994:	08090700 	call	809070 <_fflush_r>
  807998:	1027883a 	mov	r19,r2
  80799c:	103fe01e 	bne	r2,zero,807920 <__alt_mem_onchip_mem+0xff7ff920>
  8079a0:	81400717 	ldw	r5,28(r16)
  8079a4:	900f883a 	mov	r7,r18
  8079a8:	a80d883a 	mov	r6,r21
  8079ac:	8809883a 	mov	r4,r17
  8079b0:	a03ee83a 	callr	r20
  8079b4:	00ffffc4 	movi	r3,-1
  8079b8:	10ffd926 	beq	r2,r3,807920 <__alt_mem_onchip_mem+0xff7ff920>
  8079bc:	81400c17 	ldw	r5,48(r16)
  8079c0:	28000526 	beq	r5,zero,8079d8 <_fseeko_r+0x130>
  8079c4:	80801004 	addi	r2,r16,64
  8079c8:	28800226 	beq	r5,r2,8079d4 <_fseeko_r+0x12c>
  8079cc:	8809883a 	mov	r4,r17
  8079d0:	080966c0 	call	80966c <_free_r>
  8079d4:	80000c15 	stw	zero,48(r16)
  8079d8:	8080030b 	ldhu	r2,12(r16)
  8079dc:	80c00417 	ldw	r3,16(r16)
  8079e0:	80000115 	stw	zero,4(r16)
  8079e4:	10bdf7cc 	andi	r2,r2,63455
  8079e8:	80c00015 	stw	r3,0(r16)
  8079ec:	8080030d 	sth	r2,12(r16)
  8079f0:	01800204 	movi	r6,8
  8079f4:	000b883a 	mov	r5,zero
  8079f8:	81001704 	addi	r4,r16,92
  8079fc:	080872c0 	call	80872c <memset>
  807a00:	003fc806 	br	807924 <__alt_mem_onchip_mem+0xff7ff924>
  807a04:	800b883a 	mov	r5,r16
  807a08:	8809883a 	mov	r4,r17
  807a0c:	08090700 	call	809070 <_fflush_r>
  807a10:	8080030b 	ldhu	r2,12(r16)
  807a14:	10c4000c 	andi	r3,r2,4096
  807a18:	18008726 	beq	r3,zero,807c38 <_fseeko_r+0x390>
  807a1c:	84c01417 	ldw	r19,80(r16)
  807a20:	10c0010c 	andi	r3,r2,4
  807a24:	1800431e 	bne	r3,zero,807b34 <_fseeko_r+0x28c>
  807a28:	1080020c 	andi	r2,r2,8
  807a2c:	10008026 	beq	r2,zero,807c30 <_fseeko_r+0x388>
  807a30:	80c00017 	ldw	r3,0(r16)
  807a34:	80800417 	ldw	r2,16(r16)
  807a38:	18000226 	beq	r3,zero,807a44 <_fseeko_r+0x19c>
  807a3c:	1887c83a 	sub	r3,r3,r2
  807a40:	98e7883a 	add	r19,r19,r3
  807a44:	aceb883a 	add	r21,r21,r19
  807a48:	05c00044 	movi	r23,1
  807a4c:	0025883a 	mov	r18,zero
  807a50:	003fc306 	br	807960 <__alt_mem_onchip_mem+0xff7ff960>
  807a54:	080944c0 	call	80944c <__sinit>
  807a58:	8080030b 	ldhu	r2,12(r16)
  807a5c:	00c04204 	movi	r3,264
  807a60:	1080420c 	andi	r2,r2,264
  807a64:	10ffa51e 	bne	r2,r3,8078fc <__alt_mem_onchip_mem+0xff7ff8fc>
  807a68:	800b883a 	mov	r5,r16
  807a6c:	8809883a 	mov	r4,r17
  807a70:	08090700 	call	809070 <_fflush_r>
  807a74:	003fa106 	br	8078fc <__alt_mem_onchip_mem+0xff7ff8fc>
  807a78:	8080030b 	ldhu	r2,12(r16)
  807a7c:	00c10004 	movi	r3,1024
  807a80:	80c01315 	stw	r3,76(r16)
  807a84:	10c4b03a 	or	r2,r2,r3
  807a88:	8080030d 	sth	r2,12(r16)
  807a8c:	9000311e 	bne	r18,zero,807b54 <_fseeko_r+0x2ac>
  807a90:	a82d883a 	mov	r22,r21
  807a94:	b800371e 	bne	r23,zero,807b74 <_fseeko_r+0x2cc>
  807a98:	8080030b 	ldhu	r2,12(r16)
  807a9c:	1084000c 	andi	r2,r2,4096
  807aa0:	10007f26 	beq	r2,zero,807ca0 <_fseeko_r+0x3f8>
  807aa4:	80801417 	ldw	r2,80(r16)
  807aa8:	81800117 	ldw	r6,4(r16)
  807aac:	81400c17 	ldw	r5,48(r16)
  807ab0:	11a7c83a 	sub	r19,r2,r6
  807ab4:	28008226 	beq	r5,zero,807cc0 <_fseeko_r+0x418>
  807ab8:	81c00f17 	ldw	r7,60(r16)
  807abc:	99e7c83a 	sub	r19,r19,r7
  807ac0:	81000e17 	ldw	r4,56(r16)
  807ac4:	80800417 	ldw	r2,16(r16)
  807ac8:	99a7883a 	add	r19,r19,r6
  807acc:	2087c83a 	sub	r3,r4,r2
  807ad0:	98e7c83a 	sub	r19,r19,r3
  807ad4:	38c7883a 	add	r3,r7,r3
  807ad8:	b4c02b16 	blt	r22,r19,807b88 <_fseeko_r+0x2e0>
  807adc:	98c9883a 	add	r4,r19,r3
  807ae0:	b100292e 	bgeu	r22,r4,807b88 <_fseeko_r+0x2e0>
  807ae4:	b4e7c83a 	sub	r19,r22,r19
  807ae8:	14c5883a 	add	r2,r2,r19
  807aec:	1ce7c83a 	sub	r19,r3,r19
  807af0:	80800015 	stw	r2,0(r16)
  807af4:	84c00115 	stw	r19,4(r16)
  807af8:	28000526 	beq	r5,zero,807b10 <_fseeko_r+0x268>
  807afc:	80801004 	addi	r2,r16,64
  807b00:	28800226 	beq	r5,r2,807b0c <_fseeko_r+0x264>
  807b04:	8809883a 	mov	r4,r17
  807b08:	080966c0 	call	80966c <_free_r>
  807b0c:	80000c15 	stw	zero,48(r16)
  807b10:	8080030b 	ldhu	r2,12(r16)
  807b14:	01800204 	movi	r6,8
  807b18:	000b883a 	mov	r5,zero
  807b1c:	10bff7cc 	andi	r2,r2,65503
  807b20:	8080030d 	sth	r2,12(r16)
  807b24:	81001704 	addi	r4,r16,92
  807b28:	080872c0 	call	80872c <memset>
  807b2c:	0027883a 	mov	r19,zero
  807b30:	003f7c06 	br	807924 <__alt_mem_onchip_mem+0xff7ff924>
  807b34:	80c00117 	ldw	r3,4(r16)
  807b38:	80800c17 	ldw	r2,48(r16)
  807b3c:	98e7c83a 	sub	r19,r19,r3
  807b40:	10003b26 	beq	r2,zero,807c30 <_fseeko_r+0x388>
  807b44:	80c00f17 	ldw	r3,60(r16)
  807b48:	80800417 	ldw	r2,16(r16)
  807b4c:	98e7c83a 	sub	r19,r19,r3
  807b50:	003fbc06 	br	807a44 <__alt_mem_onchip_mem+0xff7ffa44>
  807b54:	8140038f 	ldh	r5,14(r16)
  807b58:	d80d883a 	mov	r6,sp
  807b5c:	8809883a 	mov	r4,r17
  807b60:	0807d080 	call	807d08 <_fstat_r>
  807b64:	103f891e 	bne	r2,zero,80798c <__alt_mem_onchip_mem+0xff7ff98c>
  807b68:	dd800417 	ldw	r22,16(sp)
  807b6c:	adad883a 	add	r22,r21,r22
  807b70:	b83fc926 	beq	r23,zero,807a98 <__alt_mem_onchip_mem+0xff7ffa98>
  807b74:	81400c17 	ldw	r5,48(r16)
  807b78:	81800117 	ldw	r6,4(r16)
  807b7c:	28005026 	beq	r5,zero,807cc0 <_fseeko_r+0x418>
  807b80:	81c00f17 	ldw	r7,60(r16)
  807b84:	003fce06 	br	807ac0 <__alt_mem_onchip_mem+0xff7ffac0>
  807b88:	84c01317 	ldw	r19,76(r16)
  807b8c:	81400717 	ldw	r5,28(r16)
  807b90:	000f883a 	mov	r7,zero
  807b94:	04e7c83a 	sub	r19,zero,r19
  807b98:	9da6703a 	and	r19,r19,r22
  807b9c:	980d883a 	mov	r6,r19
  807ba0:	8809883a 	mov	r4,r17
  807ba4:	a03ee83a 	callr	r20
  807ba8:	00ffffc4 	movi	r3,-1
  807bac:	10ff7726 	beq	r2,r3,80798c <__alt_mem_onchip_mem+0xff7ff98c>
  807bb0:	80800417 	ldw	r2,16(r16)
  807bb4:	81400c17 	ldw	r5,48(r16)
  807bb8:	80000115 	stw	zero,4(r16)
  807bbc:	80800015 	stw	r2,0(r16)
  807bc0:	28000526 	beq	r5,zero,807bd8 <_fseeko_r+0x330>
  807bc4:	80801004 	addi	r2,r16,64
  807bc8:	28800226 	beq	r5,r2,807bd4 <_fseeko_r+0x32c>
  807bcc:	8809883a 	mov	r4,r17
  807bd0:	080966c0 	call	80966c <_free_r>
  807bd4:	80000c15 	stw	zero,48(r16)
  807bd8:	8080030b 	ldhu	r2,12(r16)
  807bdc:	b4e7c83a 	sub	r19,r22,r19
  807be0:	10bff7cc 	andi	r2,r2,65503
  807be4:	8080030d 	sth	r2,12(r16)
  807be8:	98000b26 	beq	r19,zero,807c18 <_fseeko_r+0x370>
  807bec:	800b883a 	mov	r5,r16
  807bf0:	8809883a 	mov	r4,r17
  807bf4:	08089a40 	call	8089a4 <__srefill_r>
  807bf8:	103f641e 	bne	r2,zero,80798c <__alt_mem_onchip_mem+0xff7ff98c>
  807bfc:	80800117 	ldw	r2,4(r16)
  807c00:	14ff6236 	bltu	r2,r19,80798c <__alt_mem_onchip_mem+0xff7ff98c>
  807c04:	80c00017 	ldw	r3,0(r16)
  807c08:	14c5c83a 	sub	r2,r2,r19
  807c0c:	80800115 	stw	r2,4(r16)
  807c10:	1ce7883a 	add	r19,r3,r19
  807c14:	84c00015 	stw	r19,0(r16)
  807c18:	01800204 	movi	r6,8
  807c1c:	000b883a 	mov	r5,zero
  807c20:	81001704 	addi	r4,r16,92
  807c24:	080872c0 	call	80872c <memset>
  807c28:	0027883a 	mov	r19,zero
  807c2c:	003f3d06 	br	807924 <__alt_mem_onchip_mem+0xff7ff924>
  807c30:	80800417 	ldw	r2,16(r16)
  807c34:	003f8306 	br	807a44 <__alt_mem_onchip_mem+0xff7ffa44>
  807c38:	81400717 	ldw	r5,28(r16)
  807c3c:	900f883a 	mov	r7,r18
  807c40:	000d883a 	mov	r6,zero
  807c44:	8809883a 	mov	r4,r17
  807c48:	a03ee83a 	callr	r20
  807c4c:	1027883a 	mov	r19,r2
  807c50:	00bfffc4 	movi	r2,-1
  807c54:	98bf3226 	beq	r19,r2,807920 <__alt_mem_onchip_mem+0xff7ff920>
  807c58:	8080030b 	ldhu	r2,12(r16)
  807c5c:	003f7006 	br	807a20 <__alt_mem_onchip_mem+0xff7ffa20>
  807c60:	8140038f 	ldh	r5,14(r16)
  807c64:	283f4716 	blt	r5,zero,807984 <__alt_mem_onchip_mem+0xff7ff984>
  807c68:	d80d883a 	mov	r6,sp
  807c6c:	8809883a 	mov	r4,r17
  807c70:	0807d080 	call	807d08 <_fstat_r>
  807c74:	1000041e 	bne	r2,zero,807c88 <_fseeko_r+0x3e0>
  807c78:	d8800117 	ldw	r2,4(sp)
  807c7c:	00e00014 	movui	r3,32768
  807c80:	10bc000c 	andi	r2,r2,61440
  807c84:	10ff7c26 	beq	r2,r3,807a78 <__alt_mem_onchip_mem+0xff7ffa78>
  807c88:	8080030b 	ldhu	r2,12(r16)
  807c8c:	003f3d06 	br	807984 <__alt_mem_onchip_mem+0xff7ff984>
  807c90:	800b883a 	mov	r5,r16
  807c94:	8809883a 	mov	r4,r17
  807c98:	0807d640 	call	807d64 <__smakebuf_r>
  807c9c:	003f3106 	br	807964 <__alt_mem_onchip_mem+0xff7ff964>
  807ca0:	81400717 	ldw	r5,28(r16)
  807ca4:	01c00044 	movi	r7,1
  807ca8:	000d883a 	mov	r6,zero
  807cac:	8809883a 	mov	r4,r17
  807cb0:	a03ee83a 	callr	r20
  807cb4:	00ffffc4 	movi	r3,-1
  807cb8:	10ff7b1e 	bne	r2,r3,807aa8 <__alt_mem_onchip_mem+0xff7ffaa8>
  807cbc:	003f3306 	br	80798c <__alt_mem_onchip_mem+0xff7ff98c>
  807cc0:	80c00017 	ldw	r3,0(r16)
  807cc4:	80800417 	ldw	r2,16(r16)
  807cc8:	000b883a 	mov	r5,zero
  807ccc:	1887c83a 	sub	r3,r3,r2
  807cd0:	98e7c83a 	sub	r19,r19,r3
  807cd4:	30c7883a 	add	r3,r6,r3
  807cd8:	003f7f06 	br	807ad8 <__alt_mem_onchip_mem+0xff7ffad8>
  807cdc:	00800744 	movi	r2,29
  807ce0:	88800015 	stw	r2,0(r17)
  807ce4:	04ffffc4 	movi	r19,-1
  807ce8:	003f0e06 	br	807924 <__alt_mem_onchip_mem+0xff7ff924>

00807cec <fseeko>:
  807cec:	00802074 	movhi	r2,129
  807cf0:	10842a04 	addi	r2,r2,4264
  807cf4:	300f883a 	mov	r7,r6
  807cf8:	280d883a 	mov	r6,r5
  807cfc:	200b883a 	mov	r5,r4
  807d00:	11000017 	ldw	r4,0(r2)
  807d04:	08078a81 	jmpi	8078a8 <_fseeko_r>

00807d08 <_fstat_r>:
  807d08:	defffd04 	addi	sp,sp,-12
  807d0c:	2805883a 	mov	r2,r5
  807d10:	dc000015 	stw	r16,0(sp)
  807d14:	04002074 	movhi	r16,129
  807d18:	dc400115 	stw	r17,4(sp)
  807d1c:	840b5204 	addi	r16,r16,11592
  807d20:	2023883a 	mov	r17,r4
  807d24:	300b883a 	mov	r5,r6
  807d28:	1009883a 	mov	r4,r2
  807d2c:	dfc00215 	stw	ra,8(sp)
  807d30:	80000015 	stw	zero,0(r16)
  807d34:	080b06c0 	call	80b06c <fstat>
  807d38:	00ffffc4 	movi	r3,-1
  807d3c:	10c00526 	beq	r2,r3,807d54 <_fstat_r+0x4c>
  807d40:	dfc00217 	ldw	ra,8(sp)
  807d44:	dc400117 	ldw	r17,4(sp)
  807d48:	dc000017 	ldw	r16,0(sp)
  807d4c:	dec00304 	addi	sp,sp,12
  807d50:	f800283a 	ret
  807d54:	80c00017 	ldw	r3,0(r16)
  807d58:	183ff926 	beq	r3,zero,807d40 <__alt_mem_onchip_mem+0xff7ffd40>
  807d5c:	88c00015 	stw	r3,0(r17)
  807d60:	003ff706 	br	807d40 <__alt_mem_onchip_mem+0xff7ffd40>

00807d64 <__smakebuf_r>:
  807d64:	2880030b 	ldhu	r2,12(r5)
  807d68:	10c0008c 	andi	r3,r2,2
  807d6c:	1800411e 	bne	r3,zero,807e74 <__smakebuf_r+0x110>
  807d70:	deffec04 	addi	sp,sp,-80
  807d74:	dc000f15 	stw	r16,60(sp)
  807d78:	2821883a 	mov	r16,r5
  807d7c:	2940038f 	ldh	r5,14(r5)
  807d80:	dc401015 	stw	r17,64(sp)
  807d84:	dfc01315 	stw	ra,76(sp)
  807d88:	dcc01215 	stw	r19,72(sp)
  807d8c:	dc801115 	stw	r18,68(sp)
  807d90:	2023883a 	mov	r17,r4
  807d94:	28001c16 	blt	r5,zero,807e08 <__smakebuf_r+0xa4>
  807d98:	d80d883a 	mov	r6,sp
  807d9c:	0807d080 	call	807d08 <_fstat_r>
  807da0:	10001816 	blt	r2,zero,807e04 <__smakebuf_r+0xa0>
  807da4:	d8800117 	ldw	r2,4(sp)
  807da8:	00e00014 	movui	r3,32768
  807dac:	10bc000c 	andi	r2,r2,61440
  807db0:	14c80020 	cmpeqi	r19,r2,8192
  807db4:	10c03726 	beq	r2,r3,807e94 <__smakebuf_r+0x130>
  807db8:	80c0030b 	ldhu	r3,12(r16)
  807dbc:	18c20014 	ori	r3,r3,2048
  807dc0:	80c0030d 	sth	r3,12(r16)
  807dc4:	00c80004 	movi	r3,8192
  807dc8:	10c0521e 	bne	r2,r3,807f14 <__smakebuf_r+0x1b0>
  807dcc:	8140038f 	ldh	r5,14(r16)
  807dd0:	8809883a 	mov	r4,r17
  807dd4:	0809fc00 	call	809fc0 <_isatty_r>
  807dd8:	10004c26 	beq	r2,zero,807f0c <__smakebuf_r+0x1a8>
  807ddc:	8080030b 	ldhu	r2,12(r16)
  807de0:	80c010c4 	addi	r3,r16,67
  807de4:	80c00015 	stw	r3,0(r16)
  807de8:	10800054 	ori	r2,r2,1
  807dec:	8080030d 	sth	r2,12(r16)
  807df0:	00800044 	movi	r2,1
  807df4:	80c00415 	stw	r3,16(r16)
  807df8:	80800515 	stw	r2,20(r16)
  807dfc:	04810004 	movi	r18,1024
  807e00:	00000706 	br	807e20 <__smakebuf_r+0xbc>
  807e04:	8080030b 	ldhu	r2,12(r16)
  807e08:	10c0200c 	andi	r3,r2,128
  807e0c:	18001f1e 	bne	r3,zero,807e8c <__smakebuf_r+0x128>
  807e10:	04810004 	movi	r18,1024
  807e14:	10820014 	ori	r2,r2,2048
  807e18:	8080030d 	sth	r2,12(r16)
  807e1c:	0027883a 	mov	r19,zero
  807e20:	900b883a 	mov	r5,r18
  807e24:	8809883a 	mov	r4,r17
  807e28:	0807f200 	call	807f20 <_malloc_r>
  807e2c:	10002c26 	beq	r2,zero,807ee0 <__smakebuf_r+0x17c>
  807e30:	80c0030b 	ldhu	r3,12(r16)
  807e34:	01002074 	movhi	r4,129
  807e38:	21244104 	addi	r4,r4,-28412
  807e3c:	89000f15 	stw	r4,60(r17)
  807e40:	18c02014 	ori	r3,r3,128
  807e44:	80c0030d 	sth	r3,12(r16)
  807e48:	80800015 	stw	r2,0(r16)
  807e4c:	80800415 	stw	r2,16(r16)
  807e50:	84800515 	stw	r18,20(r16)
  807e54:	98001a1e 	bne	r19,zero,807ec0 <__smakebuf_r+0x15c>
  807e58:	dfc01317 	ldw	ra,76(sp)
  807e5c:	dcc01217 	ldw	r19,72(sp)
  807e60:	dc801117 	ldw	r18,68(sp)
  807e64:	dc401017 	ldw	r17,64(sp)
  807e68:	dc000f17 	ldw	r16,60(sp)
  807e6c:	dec01404 	addi	sp,sp,80
  807e70:	f800283a 	ret
  807e74:	288010c4 	addi	r2,r5,67
  807e78:	28800015 	stw	r2,0(r5)
  807e7c:	28800415 	stw	r2,16(r5)
  807e80:	00800044 	movi	r2,1
  807e84:	28800515 	stw	r2,20(r5)
  807e88:	f800283a 	ret
  807e8c:	04801004 	movi	r18,64
  807e90:	003fe006 	br	807e14 <__alt_mem_onchip_mem+0xff7ffe14>
  807e94:	81000a17 	ldw	r4,40(r16)
  807e98:	00c02074 	movhi	r3,129
  807e9c:	18e32904 	addi	r3,r3,-29532
  807ea0:	20ffc51e 	bne	r4,r3,807db8 <__alt_mem_onchip_mem+0xff7ffdb8>
  807ea4:	8080030b 	ldhu	r2,12(r16)
  807ea8:	04810004 	movi	r18,1024
  807eac:	84801315 	stw	r18,76(r16)
  807eb0:	1484b03a 	or	r2,r2,r18
  807eb4:	8080030d 	sth	r2,12(r16)
  807eb8:	0027883a 	mov	r19,zero
  807ebc:	003fd806 	br	807e20 <__alt_mem_onchip_mem+0xff7ffe20>
  807ec0:	8140038f 	ldh	r5,14(r16)
  807ec4:	8809883a 	mov	r4,r17
  807ec8:	0809fc00 	call	809fc0 <_isatty_r>
  807ecc:	103fe226 	beq	r2,zero,807e58 <__alt_mem_onchip_mem+0xff7ffe58>
  807ed0:	8080030b 	ldhu	r2,12(r16)
  807ed4:	10800054 	ori	r2,r2,1
  807ed8:	8080030d 	sth	r2,12(r16)
  807edc:	003fde06 	br	807e58 <__alt_mem_onchip_mem+0xff7ffe58>
  807ee0:	8080030b 	ldhu	r2,12(r16)
  807ee4:	10c0800c 	andi	r3,r2,512
  807ee8:	183fdb1e 	bne	r3,zero,807e58 <__alt_mem_onchip_mem+0xff7ffe58>
  807eec:	10800094 	ori	r2,r2,2
  807ef0:	80c010c4 	addi	r3,r16,67
  807ef4:	8080030d 	sth	r2,12(r16)
  807ef8:	00800044 	movi	r2,1
  807efc:	80c00015 	stw	r3,0(r16)
  807f00:	80c00415 	stw	r3,16(r16)
  807f04:	80800515 	stw	r2,20(r16)
  807f08:	003fd306 	br	807e58 <__alt_mem_onchip_mem+0xff7ffe58>
  807f0c:	04810004 	movi	r18,1024
  807f10:	003fc306 	br	807e20 <__alt_mem_onchip_mem+0xff7ffe20>
  807f14:	0027883a 	mov	r19,zero
  807f18:	04810004 	movi	r18,1024
  807f1c:	003fc006 	br	807e20 <__alt_mem_onchip_mem+0xff7ffe20>

00807f20 <_malloc_r>:
  807f20:	defff504 	addi	sp,sp,-44
  807f24:	dc800315 	stw	r18,12(sp)
  807f28:	dfc00a15 	stw	ra,40(sp)
  807f2c:	df000915 	stw	fp,36(sp)
  807f30:	ddc00815 	stw	r23,32(sp)
  807f34:	dd800715 	stw	r22,28(sp)
  807f38:	dd400615 	stw	r21,24(sp)
  807f3c:	dd000515 	stw	r20,20(sp)
  807f40:	dcc00415 	stw	r19,16(sp)
  807f44:	dc400215 	stw	r17,8(sp)
  807f48:	dc000115 	stw	r16,4(sp)
  807f4c:	288002c4 	addi	r2,r5,11
  807f50:	00c00584 	movi	r3,22
  807f54:	2025883a 	mov	r18,r4
  807f58:	18807f2e 	bgeu	r3,r2,808158 <_malloc_r+0x238>
  807f5c:	047ffe04 	movi	r17,-8
  807f60:	1462703a 	and	r17,r2,r17
  807f64:	8800a316 	blt	r17,zero,8081f4 <_malloc_r+0x2d4>
  807f68:	8940a236 	bltu	r17,r5,8081f4 <_malloc_r+0x2d4>
  807f6c:	080b5f40 	call	80b5f4 <__malloc_lock>
  807f70:	00807dc4 	movi	r2,503
  807f74:	1441e92e 	bgeu	r2,r17,80871c <_malloc_r+0x7fc>
  807f78:	8804d27a 	srli	r2,r17,9
  807f7c:	1000a126 	beq	r2,zero,808204 <_malloc_r+0x2e4>
  807f80:	00c00104 	movi	r3,4
  807f84:	18811e36 	bltu	r3,r2,808400 <_malloc_r+0x4e0>
  807f88:	8804d1ba 	srli	r2,r17,6
  807f8c:	12000e44 	addi	r8,r2,57
  807f90:	11c00e04 	addi	r7,r2,56
  807f94:	4209883a 	add	r4,r8,r8
  807f98:	04c02074 	movhi	r19,129
  807f9c:	2109883a 	add	r4,r4,r4
  807fa0:	9cfe2c04 	addi	r19,r19,-1872
  807fa4:	2109883a 	add	r4,r4,r4
  807fa8:	9909883a 	add	r4,r19,r4
  807fac:	24000117 	ldw	r16,4(r4)
  807fb0:	213ffe04 	addi	r4,r4,-8
  807fb4:	24009726 	beq	r4,r16,808214 <_malloc_r+0x2f4>
  807fb8:	80800117 	ldw	r2,4(r16)
  807fbc:	01bfff04 	movi	r6,-4
  807fc0:	014003c4 	movi	r5,15
  807fc4:	1184703a 	and	r2,r2,r6
  807fc8:	1447c83a 	sub	r3,r2,r17
  807fcc:	28c00716 	blt	r5,r3,807fec <_malloc_r+0xcc>
  807fd0:	1800920e 	bge	r3,zero,80821c <_malloc_r+0x2fc>
  807fd4:	84000317 	ldw	r16,12(r16)
  807fd8:	24008e26 	beq	r4,r16,808214 <_malloc_r+0x2f4>
  807fdc:	80800117 	ldw	r2,4(r16)
  807fe0:	1184703a 	and	r2,r2,r6
  807fe4:	1447c83a 	sub	r3,r2,r17
  807fe8:	28fff90e 	bge	r5,r3,807fd0 <__alt_mem_onchip_mem+0xff7fffd0>
  807fec:	3809883a 	mov	r4,r7
  807ff0:	01802074 	movhi	r6,129
  807ff4:	9c000417 	ldw	r16,16(r19)
  807ff8:	31be2c04 	addi	r6,r6,-1872
  807ffc:	32000204 	addi	r8,r6,8
  808000:	82013426 	beq	r16,r8,8084d4 <_malloc_r+0x5b4>
  808004:	80c00117 	ldw	r3,4(r16)
  808008:	00bfff04 	movi	r2,-4
  80800c:	188e703a 	and	r7,r3,r2
  808010:	3c45c83a 	sub	r2,r7,r17
  808014:	00c003c4 	movi	r3,15
  808018:	18811f16 	blt	r3,r2,808498 <_malloc_r+0x578>
  80801c:	32000515 	stw	r8,20(r6)
  808020:	32000415 	stw	r8,16(r6)
  808024:	10007f0e 	bge	r2,zero,808224 <_malloc_r+0x304>
  808028:	00807fc4 	movi	r2,511
  80802c:	11c0fd36 	bltu	r2,r7,808424 <_malloc_r+0x504>
  808030:	3806d0fa 	srli	r3,r7,3
  808034:	01c00044 	movi	r7,1
  808038:	30800117 	ldw	r2,4(r6)
  80803c:	19400044 	addi	r5,r3,1
  808040:	294b883a 	add	r5,r5,r5
  808044:	1807d0ba 	srai	r3,r3,2
  808048:	294b883a 	add	r5,r5,r5
  80804c:	294b883a 	add	r5,r5,r5
  808050:	298b883a 	add	r5,r5,r6
  808054:	38c6983a 	sll	r3,r7,r3
  808058:	29c00017 	ldw	r7,0(r5)
  80805c:	2a7ffe04 	addi	r9,r5,-8
  808060:	1886b03a 	or	r3,r3,r2
  808064:	82400315 	stw	r9,12(r16)
  808068:	81c00215 	stw	r7,8(r16)
  80806c:	30c00115 	stw	r3,4(r6)
  808070:	2c000015 	stw	r16,0(r5)
  808074:	3c000315 	stw	r16,12(r7)
  808078:	2005d0ba 	srai	r2,r4,2
  80807c:	01400044 	movi	r5,1
  808080:	288a983a 	sll	r5,r5,r2
  808084:	19406f36 	bltu	r3,r5,808244 <_malloc_r+0x324>
  808088:	28c4703a 	and	r2,r5,r3
  80808c:	10000a1e 	bne	r2,zero,8080b8 <_malloc_r+0x198>
  808090:	00bfff04 	movi	r2,-4
  808094:	294b883a 	add	r5,r5,r5
  808098:	2088703a 	and	r4,r4,r2
  80809c:	28c4703a 	and	r2,r5,r3
  8080a0:	21000104 	addi	r4,r4,4
  8080a4:	1000041e 	bne	r2,zero,8080b8 <_malloc_r+0x198>
  8080a8:	294b883a 	add	r5,r5,r5
  8080ac:	28c4703a 	and	r2,r5,r3
  8080b0:	21000104 	addi	r4,r4,4
  8080b4:	103ffc26 	beq	r2,zero,8080a8 <__alt_mem_onchip_mem+0xff8000a8>
  8080b8:	02bfff04 	movi	r10,-4
  8080bc:	024003c4 	movi	r9,15
  8080c0:	21800044 	addi	r6,r4,1
  8080c4:	318d883a 	add	r6,r6,r6
  8080c8:	318d883a 	add	r6,r6,r6
  8080cc:	318d883a 	add	r6,r6,r6
  8080d0:	998d883a 	add	r6,r19,r6
  8080d4:	333ffe04 	addi	r12,r6,-8
  8080d8:	2017883a 	mov	r11,r4
  8080dc:	31800104 	addi	r6,r6,4
  8080e0:	34000017 	ldw	r16,0(r6)
  8080e4:	31fffd04 	addi	r7,r6,-12
  8080e8:	81c0041e 	bne	r16,r7,8080fc <_malloc_r+0x1dc>
  8080ec:	0000fb06 	br	8084dc <_malloc_r+0x5bc>
  8080f0:	1801030e 	bge	r3,zero,808500 <_malloc_r+0x5e0>
  8080f4:	84000317 	ldw	r16,12(r16)
  8080f8:	81c0f826 	beq	r16,r7,8084dc <_malloc_r+0x5bc>
  8080fc:	80800117 	ldw	r2,4(r16)
  808100:	1284703a 	and	r2,r2,r10
  808104:	1447c83a 	sub	r3,r2,r17
  808108:	48fff90e 	bge	r9,r3,8080f0 <__alt_mem_onchip_mem+0xff8000f0>
  80810c:	80800317 	ldw	r2,12(r16)
  808110:	81000217 	ldw	r4,8(r16)
  808114:	89400054 	ori	r5,r17,1
  808118:	81400115 	stw	r5,4(r16)
  80811c:	20800315 	stw	r2,12(r4)
  808120:	11000215 	stw	r4,8(r2)
  808124:	8463883a 	add	r17,r16,r17
  808128:	9c400515 	stw	r17,20(r19)
  80812c:	9c400415 	stw	r17,16(r19)
  808130:	18800054 	ori	r2,r3,1
  808134:	88800115 	stw	r2,4(r17)
  808138:	8a000315 	stw	r8,12(r17)
  80813c:	8a000215 	stw	r8,8(r17)
  808140:	88e3883a 	add	r17,r17,r3
  808144:	88c00015 	stw	r3,0(r17)
  808148:	9009883a 	mov	r4,r18
  80814c:	080b6180 	call	80b618 <__malloc_unlock>
  808150:	80800204 	addi	r2,r16,8
  808154:	00001b06 	br	8081c4 <_malloc_r+0x2a4>
  808158:	04400404 	movi	r17,16
  80815c:	89402536 	bltu	r17,r5,8081f4 <_malloc_r+0x2d4>
  808160:	080b5f40 	call	80b5f4 <__malloc_lock>
  808164:	00800184 	movi	r2,6
  808168:	01000084 	movi	r4,2
  80816c:	04c02074 	movhi	r19,129
  808170:	1085883a 	add	r2,r2,r2
  808174:	9cfe2c04 	addi	r19,r19,-1872
  808178:	1085883a 	add	r2,r2,r2
  80817c:	9885883a 	add	r2,r19,r2
  808180:	14000117 	ldw	r16,4(r2)
  808184:	10fffe04 	addi	r3,r2,-8
  808188:	80c0d926 	beq	r16,r3,8084f0 <_malloc_r+0x5d0>
  80818c:	80c00117 	ldw	r3,4(r16)
  808190:	81000317 	ldw	r4,12(r16)
  808194:	00bfff04 	movi	r2,-4
  808198:	1884703a 	and	r2,r3,r2
  80819c:	81400217 	ldw	r5,8(r16)
  8081a0:	8085883a 	add	r2,r16,r2
  8081a4:	10c00117 	ldw	r3,4(r2)
  8081a8:	29000315 	stw	r4,12(r5)
  8081ac:	21400215 	stw	r5,8(r4)
  8081b0:	18c00054 	ori	r3,r3,1
  8081b4:	10c00115 	stw	r3,4(r2)
  8081b8:	9009883a 	mov	r4,r18
  8081bc:	080b6180 	call	80b618 <__malloc_unlock>
  8081c0:	80800204 	addi	r2,r16,8
  8081c4:	dfc00a17 	ldw	ra,40(sp)
  8081c8:	df000917 	ldw	fp,36(sp)
  8081cc:	ddc00817 	ldw	r23,32(sp)
  8081d0:	dd800717 	ldw	r22,28(sp)
  8081d4:	dd400617 	ldw	r21,24(sp)
  8081d8:	dd000517 	ldw	r20,20(sp)
  8081dc:	dcc00417 	ldw	r19,16(sp)
  8081e0:	dc800317 	ldw	r18,12(sp)
  8081e4:	dc400217 	ldw	r17,8(sp)
  8081e8:	dc000117 	ldw	r16,4(sp)
  8081ec:	dec00b04 	addi	sp,sp,44
  8081f0:	f800283a 	ret
  8081f4:	00800304 	movi	r2,12
  8081f8:	90800015 	stw	r2,0(r18)
  8081fc:	0005883a 	mov	r2,zero
  808200:	003ff006 	br	8081c4 <__alt_mem_onchip_mem+0xff8001c4>
  808204:	01002004 	movi	r4,128
  808208:	02001004 	movi	r8,64
  80820c:	01c00fc4 	movi	r7,63
  808210:	003f6106 	br	807f98 <__alt_mem_onchip_mem+0xff7fff98>
  808214:	4009883a 	mov	r4,r8
  808218:	003f7506 	br	807ff0 <__alt_mem_onchip_mem+0xff7ffff0>
  80821c:	81000317 	ldw	r4,12(r16)
  808220:	003fde06 	br	80819c <__alt_mem_onchip_mem+0xff80019c>
  808224:	81c5883a 	add	r2,r16,r7
  808228:	11400117 	ldw	r5,4(r2)
  80822c:	9009883a 	mov	r4,r18
  808230:	29400054 	ori	r5,r5,1
  808234:	11400115 	stw	r5,4(r2)
  808238:	080b6180 	call	80b618 <__malloc_unlock>
  80823c:	80800204 	addi	r2,r16,8
  808240:	003fe006 	br	8081c4 <__alt_mem_onchip_mem+0xff8001c4>
  808244:	9c000217 	ldw	r16,8(r19)
  808248:	00bfff04 	movi	r2,-4
  80824c:	85800117 	ldw	r22,4(r16)
  808250:	b0ac703a 	and	r22,r22,r2
  808254:	b4400336 	bltu	r22,r17,808264 <_malloc_r+0x344>
  808258:	b445c83a 	sub	r2,r22,r17
  80825c:	00c003c4 	movi	r3,15
  808260:	18805d16 	blt	r3,r2,8083d8 <_malloc_r+0x4b8>
  808264:	05c02074 	movhi	r23,129
  808268:	00802074 	movhi	r2,129
  80826c:	108b5504 	addi	r2,r2,11604
  808270:	bdc42b04 	addi	r23,r23,4268
  808274:	15400017 	ldw	r21,0(r2)
  808278:	b8c00017 	ldw	r3,0(r23)
  80827c:	00bfffc4 	movi	r2,-1
  808280:	858d883a 	add	r6,r16,r22
  808284:	8d6b883a 	add	r21,r17,r21
  808288:	1880ea26 	beq	r3,r2,808634 <_malloc_r+0x714>
  80828c:	ad4403c4 	addi	r21,r21,4111
  808290:	00bc0004 	movi	r2,-4096
  808294:	a8aa703a 	and	r21,r21,r2
  808298:	a80b883a 	mov	r5,r21
  80829c:	9009883a 	mov	r4,r18
  8082a0:	d9800015 	stw	r6,0(sp)
  8082a4:	0808b780 	call	808b78 <_sbrk_r>
  8082a8:	1029883a 	mov	r20,r2
  8082ac:	00bfffc4 	movi	r2,-1
  8082b0:	d9800017 	ldw	r6,0(sp)
  8082b4:	a080e826 	beq	r20,r2,808658 <_malloc_r+0x738>
  8082b8:	a180a636 	bltu	r20,r6,808554 <_malloc_r+0x634>
  8082bc:	07002074 	movhi	fp,129
  8082c0:	e70b5d04 	addi	fp,fp,11636
  8082c4:	e0800017 	ldw	r2,0(fp)
  8082c8:	a887883a 	add	r3,r21,r2
  8082cc:	e0c00015 	stw	r3,0(fp)
  8082d0:	3500e626 	beq	r6,r20,80866c <_malloc_r+0x74c>
  8082d4:	b9000017 	ldw	r4,0(r23)
  8082d8:	00bfffc4 	movi	r2,-1
  8082dc:	2080ee26 	beq	r4,r2,808698 <_malloc_r+0x778>
  8082e0:	a185c83a 	sub	r2,r20,r6
  8082e4:	10c5883a 	add	r2,r2,r3
  8082e8:	e0800015 	stw	r2,0(fp)
  8082ec:	a0c001cc 	andi	r3,r20,7
  8082f0:	1800bc26 	beq	r3,zero,8085e4 <_malloc_r+0x6c4>
  8082f4:	a0e9c83a 	sub	r20,r20,r3
  8082f8:	00840204 	movi	r2,4104
  8082fc:	a5000204 	addi	r20,r20,8
  808300:	10c7c83a 	sub	r3,r2,r3
  808304:	a545883a 	add	r2,r20,r21
  808308:	1083ffcc 	andi	r2,r2,4095
  80830c:	18abc83a 	sub	r21,r3,r2
  808310:	a80b883a 	mov	r5,r21
  808314:	9009883a 	mov	r4,r18
  808318:	0808b780 	call	808b78 <_sbrk_r>
  80831c:	00ffffc4 	movi	r3,-1
  808320:	10c0e126 	beq	r2,r3,8086a8 <_malloc_r+0x788>
  808324:	1505c83a 	sub	r2,r2,r20
  808328:	1545883a 	add	r2,r2,r21
  80832c:	10800054 	ori	r2,r2,1
  808330:	e0c00017 	ldw	r3,0(fp)
  808334:	9d000215 	stw	r20,8(r19)
  808338:	a0800115 	stw	r2,4(r20)
  80833c:	a8c7883a 	add	r3,r21,r3
  808340:	e0c00015 	stw	r3,0(fp)
  808344:	84c00e26 	beq	r16,r19,808380 <_malloc_r+0x460>
  808348:	018003c4 	movi	r6,15
  80834c:	3580a72e 	bgeu	r6,r22,8085ec <_malloc_r+0x6cc>
  808350:	81400117 	ldw	r5,4(r16)
  808354:	013ffe04 	movi	r4,-8
  808358:	b0bffd04 	addi	r2,r22,-12
  80835c:	1104703a 	and	r2,r2,r4
  808360:	2900004c 	andi	r4,r5,1
  808364:	2088b03a 	or	r4,r4,r2
  808368:	81000115 	stw	r4,4(r16)
  80836c:	01400144 	movi	r5,5
  808370:	8089883a 	add	r4,r16,r2
  808374:	21400115 	stw	r5,4(r4)
  808378:	21400215 	stw	r5,8(r4)
  80837c:	3080cd36 	bltu	r6,r2,8086b4 <_malloc_r+0x794>
  808380:	00802074 	movhi	r2,129
  808384:	108b5404 	addi	r2,r2,11600
  808388:	11000017 	ldw	r4,0(r2)
  80838c:	20c0012e 	bgeu	r4,r3,808394 <_malloc_r+0x474>
  808390:	10c00015 	stw	r3,0(r2)
  808394:	00802074 	movhi	r2,129
  808398:	108b5304 	addi	r2,r2,11596
  80839c:	11000017 	ldw	r4,0(r2)
  8083a0:	9c000217 	ldw	r16,8(r19)
  8083a4:	20c0012e 	bgeu	r4,r3,8083ac <_malloc_r+0x48c>
  8083a8:	10c00015 	stw	r3,0(r2)
  8083ac:	80c00117 	ldw	r3,4(r16)
  8083b0:	00bfff04 	movi	r2,-4
  8083b4:	1886703a 	and	r3,r3,r2
  8083b8:	1c45c83a 	sub	r2,r3,r17
  8083bc:	1c400236 	bltu	r3,r17,8083c8 <_malloc_r+0x4a8>
  8083c0:	00c003c4 	movi	r3,15
  8083c4:	18800416 	blt	r3,r2,8083d8 <_malloc_r+0x4b8>
  8083c8:	9009883a 	mov	r4,r18
  8083cc:	080b6180 	call	80b618 <__malloc_unlock>
  8083d0:	0005883a 	mov	r2,zero
  8083d4:	003f7b06 	br	8081c4 <__alt_mem_onchip_mem+0xff8001c4>
  8083d8:	88c00054 	ori	r3,r17,1
  8083dc:	80c00115 	stw	r3,4(r16)
  8083e0:	8463883a 	add	r17,r16,r17
  8083e4:	10800054 	ori	r2,r2,1
  8083e8:	9c400215 	stw	r17,8(r19)
  8083ec:	88800115 	stw	r2,4(r17)
  8083f0:	9009883a 	mov	r4,r18
  8083f4:	080b6180 	call	80b618 <__malloc_unlock>
  8083f8:	80800204 	addi	r2,r16,8
  8083fc:	003f7106 	br	8081c4 <__alt_mem_onchip_mem+0xff8001c4>
  808400:	00c00504 	movi	r3,20
  808404:	18804a2e 	bgeu	r3,r2,808530 <_malloc_r+0x610>
  808408:	00c01504 	movi	r3,84
  80840c:	18806e36 	bltu	r3,r2,8085c8 <_malloc_r+0x6a8>
  808410:	8804d33a 	srli	r2,r17,12
  808414:	12001bc4 	addi	r8,r2,111
  808418:	11c01b84 	addi	r7,r2,110
  80841c:	4209883a 	add	r4,r8,r8
  808420:	003edd06 	br	807f98 <__alt_mem_onchip_mem+0xff7fff98>
  808424:	3804d27a 	srli	r2,r7,9
  808428:	00c00104 	movi	r3,4
  80842c:	1880442e 	bgeu	r3,r2,808540 <_malloc_r+0x620>
  808430:	00c00504 	movi	r3,20
  808434:	18808136 	bltu	r3,r2,80863c <_malloc_r+0x71c>
  808438:	11401704 	addi	r5,r2,92
  80843c:	10c016c4 	addi	r3,r2,91
  808440:	294b883a 	add	r5,r5,r5
  808444:	294b883a 	add	r5,r5,r5
  808448:	294b883a 	add	r5,r5,r5
  80844c:	994b883a 	add	r5,r19,r5
  808450:	28800017 	ldw	r2,0(r5)
  808454:	01802074 	movhi	r6,129
  808458:	297ffe04 	addi	r5,r5,-8
  80845c:	31be2c04 	addi	r6,r6,-1872
  808460:	28806526 	beq	r5,r2,8085f8 <_malloc_r+0x6d8>
  808464:	01bfff04 	movi	r6,-4
  808468:	10c00117 	ldw	r3,4(r2)
  80846c:	1986703a 	and	r3,r3,r6
  808470:	38c0022e 	bgeu	r7,r3,80847c <_malloc_r+0x55c>
  808474:	10800217 	ldw	r2,8(r2)
  808478:	28bffb1e 	bne	r5,r2,808468 <__alt_mem_onchip_mem+0xff800468>
  80847c:	11400317 	ldw	r5,12(r2)
  808480:	98c00117 	ldw	r3,4(r19)
  808484:	81400315 	stw	r5,12(r16)
  808488:	80800215 	stw	r2,8(r16)
  80848c:	2c000215 	stw	r16,8(r5)
  808490:	14000315 	stw	r16,12(r2)
  808494:	003ef806 	br	808078 <__alt_mem_onchip_mem+0xff800078>
  808498:	88c00054 	ori	r3,r17,1
  80849c:	80c00115 	stw	r3,4(r16)
  8084a0:	8463883a 	add	r17,r16,r17
  8084a4:	34400515 	stw	r17,20(r6)
  8084a8:	34400415 	stw	r17,16(r6)
  8084ac:	10c00054 	ori	r3,r2,1
  8084b0:	8a000315 	stw	r8,12(r17)
  8084b4:	8a000215 	stw	r8,8(r17)
  8084b8:	88c00115 	stw	r3,4(r17)
  8084bc:	88a3883a 	add	r17,r17,r2
  8084c0:	88800015 	stw	r2,0(r17)
  8084c4:	9009883a 	mov	r4,r18
  8084c8:	080b6180 	call	80b618 <__malloc_unlock>
  8084cc:	80800204 	addi	r2,r16,8
  8084d0:	003f3c06 	br	8081c4 <__alt_mem_onchip_mem+0xff8001c4>
  8084d4:	30c00117 	ldw	r3,4(r6)
  8084d8:	003ee706 	br	808078 <__alt_mem_onchip_mem+0xff800078>
  8084dc:	5ac00044 	addi	r11,r11,1
  8084e0:	588000cc 	andi	r2,r11,3
  8084e4:	31800204 	addi	r6,r6,8
  8084e8:	103efd1e 	bne	r2,zero,8080e0 <__alt_mem_onchip_mem+0xff8000e0>
  8084ec:	00002406 	br	808580 <_malloc_r+0x660>
  8084f0:	14000317 	ldw	r16,12(r2)
  8084f4:	143f251e 	bne	r2,r16,80818c <__alt_mem_onchip_mem+0xff80018c>
  8084f8:	21000084 	addi	r4,r4,2
  8084fc:	003ebc06 	br	807ff0 <__alt_mem_onchip_mem+0xff7ffff0>
  808500:	8085883a 	add	r2,r16,r2
  808504:	10c00117 	ldw	r3,4(r2)
  808508:	81000317 	ldw	r4,12(r16)
  80850c:	81400217 	ldw	r5,8(r16)
  808510:	18c00054 	ori	r3,r3,1
  808514:	10c00115 	stw	r3,4(r2)
  808518:	29000315 	stw	r4,12(r5)
  80851c:	21400215 	stw	r5,8(r4)
  808520:	9009883a 	mov	r4,r18
  808524:	080b6180 	call	80b618 <__malloc_unlock>
  808528:	80800204 	addi	r2,r16,8
  80852c:	003f2506 	br	8081c4 <__alt_mem_onchip_mem+0xff8001c4>
  808530:	12001704 	addi	r8,r2,92
  808534:	11c016c4 	addi	r7,r2,91
  808538:	4209883a 	add	r4,r8,r8
  80853c:	003e9606 	br	807f98 <__alt_mem_onchip_mem+0xff7fff98>
  808540:	3804d1ba 	srli	r2,r7,6
  808544:	11400e44 	addi	r5,r2,57
  808548:	10c00e04 	addi	r3,r2,56
  80854c:	294b883a 	add	r5,r5,r5
  808550:	003fbc06 	br	808444 <__alt_mem_onchip_mem+0xff800444>
  808554:	84ff5926 	beq	r16,r19,8082bc <__alt_mem_onchip_mem+0xff8002bc>
  808558:	00802074 	movhi	r2,129
  80855c:	10be2c04 	addi	r2,r2,-1872
  808560:	14000217 	ldw	r16,8(r2)
  808564:	00bfff04 	movi	r2,-4
  808568:	80c00117 	ldw	r3,4(r16)
  80856c:	1886703a 	and	r3,r3,r2
  808570:	003f9106 	br	8083b8 <__alt_mem_onchip_mem+0xff8003b8>
  808574:	60800217 	ldw	r2,8(r12)
  808578:	213fffc4 	addi	r4,r4,-1
  80857c:	1300651e 	bne	r2,r12,808714 <_malloc_r+0x7f4>
  808580:	208000cc 	andi	r2,r4,3
  808584:	633ffe04 	addi	r12,r12,-8
  808588:	103ffa1e 	bne	r2,zero,808574 <__alt_mem_onchip_mem+0xff800574>
  80858c:	98800117 	ldw	r2,4(r19)
  808590:	0146303a 	nor	r3,zero,r5
  808594:	1884703a 	and	r2,r3,r2
  808598:	98800115 	stw	r2,4(r19)
  80859c:	294b883a 	add	r5,r5,r5
  8085a0:	117f2836 	bltu	r2,r5,808244 <__alt_mem_onchip_mem+0xff800244>
  8085a4:	283f2726 	beq	r5,zero,808244 <__alt_mem_onchip_mem+0xff800244>
  8085a8:	2886703a 	and	r3,r5,r2
  8085ac:	5809883a 	mov	r4,r11
  8085b0:	183ec31e 	bne	r3,zero,8080c0 <__alt_mem_onchip_mem+0xff8000c0>
  8085b4:	294b883a 	add	r5,r5,r5
  8085b8:	2886703a 	and	r3,r5,r2
  8085bc:	21000104 	addi	r4,r4,4
  8085c0:	183ffc26 	beq	r3,zero,8085b4 <__alt_mem_onchip_mem+0xff8005b4>
  8085c4:	003ebe06 	br	8080c0 <__alt_mem_onchip_mem+0xff8000c0>
  8085c8:	00c05504 	movi	r3,340
  8085cc:	18801236 	bltu	r3,r2,808618 <_malloc_r+0x6f8>
  8085d0:	8804d3fa 	srli	r2,r17,15
  8085d4:	12001e04 	addi	r8,r2,120
  8085d8:	11c01dc4 	addi	r7,r2,119
  8085dc:	4209883a 	add	r4,r8,r8
  8085e0:	003e6d06 	br	807f98 <__alt_mem_onchip_mem+0xff7fff98>
  8085e4:	00c40004 	movi	r3,4096
  8085e8:	003f4606 	br	808304 <__alt_mem_onchip_mem+0xff800304>
  8085ec:	00800044 	movi	r2,1
  8085f0:	a0800115 	stw	r2,4(r20)
  8085f4:	003f7406 	br	8083c8 <__alt_mem_onchip_mem+0xff8003c8>
  8085f8:	1805d0ba 	srai	r2,r3,2
  8085fc:	01c00044 	movi	r7,1
  808600:	30c00117 	ldw	r3,4(r6)
  808604:	388e983a 	sll	r7,r7,r2
  808608:	2805883a 	mov	r2,r5
  80860c:	38c6b03a 	or	r3,r7,r3
  808610:	30c00115 	stw	r3,4(r6)
  808614:	003f9b06 	br	808484 <__alt_mem_onchip_mem+0xff800484>
  808618:	00c15504 	movi	r3,1364
  80861c:	18801a36 	bltu	r3,r2,808688 <_malloc_r+0x768>
  808620:	8804d4ba 	srli	r2,r17,18
  808624:	12001f44 	addi	r8,r2,125
  808628:	11c01f04 	addi	r7,r2,124
  80862c:	4209883a 	add	r4,r8,r8
  808630:	003e5906 	br	807f98 <__alt_mem_onchip_mem+0xff7fff98>
  808634:	ad400404 	addi	r21,r21,16
  808638:	003f1706 	br	808298 <__alt_mem_onchip_mem+0xff800298>
  80863c:	00c01504 	movi	r3,84
  808640:	18802336 	bltu	r3,r2,8086d0 <_malloc_r+0x7b0>
  808644:	3804d33a 	srli	r2,r7,12
  808648:	11401bc4 	addi	r5,r2,111
  80864c:	10c01b84 	addi	r3,r2,110
  808650:	294b883a 	add	r5,r5,r5
  808654:	003f7b06 	br	808444 <__alt_mem_onchip_mem+0xff800444>
  808658:	9c000217 	ldw	r16,8(r19)
  80865c:	00bfff04 	movi	r2,-4
  808660:	80c00117 	ldw	r3,4(r16)
  808664:	1886703a 	and	r3,r3,r2
  808668:	003f5306 	br	8083b8 <__alt_mem_onchip_mem+0xff8003b8>
  80866c:	3083ffcc 	andi	r2,r6,4095
  808670:	103f181e 	bne	r2,zero,8082d4 <__alt_mem_onchip_mem+0xff8002d4>
  808674:	99000217 	ldw	r4,8(r19)
  808678:	b545883a 	add	r2,r22,r21
  80867c:	10800054 	ori	r2,r2,1
  808680:	20800115 	stw	r2,4(r4)
  808684:	003f3e06 	br	808380 <__alt_mem_onchip_mem+0xff800380>
  808688:	01003f84 	movi	r4,254
  80868c:	02001fc4 	movi	r8,127
  808690:	01c01f84 	movi	r7,126
  808694:	003e4006 	br	807f98 <__alt_mem_onchip_mem+0xff7fff98>
  808698:	00802074 	movhi	r2,129
  80869c:	10842b04 	addi	r2,r2,4268
  8086a0:	15000015 	stw	r20,0(r2)
  8086a4:	003f1106 	br	8082ec <__alt_mem_onchip_mem+0xff8002ec>
  8086a8:	00800044 	movi	r2,1
  8086ac:	002b883a 	mov	r21,zero
  8086b0:	003f1f06 	br	808330 <__alt_mem_onchip_mem+0xff800330>
  8086b4:	81400204 	addi	r5,r16,8
  8086b8:	9009883a 	mov	r4,r18
  8086bc:	080966c0 	call	80966c <_free_r>
  8086c0:	00802074 	movhi	r2,129
  8086c4:	108b5d04 	addi	r2,r2,11636
  8086c8:	10c00017 	ldw	r3,0(r2)
  8086cc:	003f2c06 	br	808380 <__alt_mem_onchip_mem+0xff800380>
  8086d0:	00c05504 	movi	r3,340
  8086d4:	18800536 	bltu	r3,r2,8086ec <_malloc_r+0x7cc>
  8086d8:	3804d3fa 	srli	r2,r7,15
  8086dc:	11401e04 	addi	r5,r2,120
  8086e0:	10c01dc4 	addi	r3,r2,119
  8086e4:	294b883a 	add	r5,r5,r5
  8086e8:	003f5606 	br	808444 <__alt_mem_onchip_mem+0xff800444>
  8086ec:	00c15504 	movi	r3,1364
  8086f0:	18800536 	bltu	r3,r2,808708 <_malloc_r+0x7e8>
  8086f4:	3804d4ba 	srli	r2,r7,18
  8086f8:	11401f44 	addi	r5,r2,125
  8086fc:	10c01f04 	addi	r3,r2,124
  808700:	294b883a 	add	r5,r5,r5
  808704:	003f4f06 	br	808444 <__alt_mem_onchip_mem+0xff800444>
  808708:	01403f84 	movi	r5,254
  80870c:	00c01f84 	movi	r3,126
  808710:	003f4c06 	br	808444 <__alt_mem_onchip_mem+0xff800444>
  808714:	98800117 	ldw	r2,4(r19)
  808718:	003fa006 	br	80859c <__alt_mem_onchip_mem+0xff80059c>
  80871c:	8808d0fa 	srli	r4,r17,3
  808720:	20800044 	addi	r2,r4,1
  808724:	1085883a 	add	r2,r2,r2
  808728:	003e9006 	br	80816c <__alt_mem_onchip_mem+0xff80016c>

0080872c <memset>:
  80872c:	20c000cc 	andi	r3,r4,3
  808730:	2005883a 	mov	r2,r4
  808734:	18004426 	beq	r3,zero,808848 <memset+0x11c>
  808738:	31ffffc4 	addi	r7,r6,-1
  80873c:	30004026 	beq	r6,zero,808840 <memset+0x114>
  808740:	2813883a 	mov	r9,r5
  808744:	200d883a 	mov	r6,r4
  808748:	2007883a 	mov	r3,r4
  80874c:	00000406 	br	808760 <memset+0x34>
  808750:	3a3fffc4 	addi	r8,r7,-1
  808754:	31800044 	addi	r6,r6,1
  808758:	38003926 	beq	r7,zero,808840 <memset+0x114>
  80875c:	400f883a 	mov	r7,r8
  808760:	18c00044 	addi	r3,r3,1
  808764:	32400005 	stb	r9,0(r6)
  808768:	1a0000cc 	andi	r8,r3,3
  80876c:	403ff81e 	bne	r8,zero,808750 <__alt_mem_onchip_mem+0xff800750>
  808770:	010000c4 	movi	r4,3
  808774:	21c02d2e 	bgeu	r4,r7,80882c <memset+0x100>
  808778:	29003fcc 	andi	r4,r5,255
  80877c:	200c923a 	slli	r6,r4,8
  808780:	3108b03a 	or	r4,r6,r4
  808784:	200c943a 	slli	r6,r4,16
  808788:	218cb03a 	or	r6,r4,r6
  80878c:	010003c4 	movi	r4,15
  808790:	21c0182e 	bgeu	r4,r7,8087f4 <memset+0xc8>
  808794:	3b3ffc04 	addi	r12,r7,-16
  808798:	6018d13a 	srli	r12,r12,4
  80879c:	1a000104 	addi	r8,r3,4
  8087a0:	1ac00204 	addi	r11,r3,8
  8087a4:	6008913a 	slli	r4,r12,4
  8087a8:	1a800304 	addi	r10,r3,12
  8087ac:	1813883a 	mov	r9,r3
  8087b0:	21000504 	addi	r4,r4,20
  8087b4:	1909883a 	add	r4,r3,r4
  8087b8:	49800015 	stw	r6,0(r9)
  8087bc:	41800015 	stw	r6,0(r8)
  8087c0:	59800015 	stw	r6,0(r11)
  8087c4:	51800015 	stw	r6,0(r10)
  8087c8:	42000404 	addi	r8,r8,16
  8087cc:	4a400404 	addi	r9,r9,16
  8087d0:	5ac00404 	addi	r11,r11,16
  8087d4:	52800404 	addi	r10,r10,16
  8087d8:	413ff71e 	bne	r8,r4,8087b8 <__alt_mem_onchip_mem+0xff8007b8>
  8087dc:	63000044 	addi	r12,r12,1
  8087e0:	6018913a 	slli	r12,r12,4
  8087e4:	39c003cc 	andi	r7,r7,15
  8087e8:	010000c4 	movi	r4,3
  8087ec:	1b07883a 	add	r3,r3,r12
  8087f0:	21c00e2e 	bgeu	r4,r7,80882c <memset+0x100>
  8087f4:	1813883a 	mov	r9,r3
  8087f8:	3811883a 	mov	r8,r7
  8087fc:	010000c4 	movi	r4,3
  808800:	49800015 	stw	r6,0(r9)
  808804:	423fff04 	addi	r8,r8,-4
  808808:	4a400104 	addi	r9,r9,4
  80880c:	223ffc36 	bltu	r4,r8,808800 <__alt_mem_onchip_mem+0xff800800>
  808810:	393fff04 	addi	r4,r7,-4
  808814:	2008d0ba 	srli	r4,r4,2
  808818:	39c000cc 	andi	r7,r7,3
  80881c:	21000044 	addi	r4,r4,1
  808820:	2109883a 	add	r4,r4,r4
  808824:	2109883a 	add	r4,r4,r4
  808828:	1907883a 	add	r3,r3,r4
  80882c:	38000526 	beq	r7,zero,808844 <memset+0x118>
  808830:	19cf883a 	add	r7,r3,r7
  808834:	19400005 	stb	r5,0(r3)
  808838:	18c00044 	addi	r3,r3,1
  80883c:	38fffd1e 	bne	r7,r3,808834 <__alt_mem_onchip_mem+0xff800834>
  808840:	f800283a 	ret
  808844:	f800283a 	ret
  808848:	2007883a 	mov	r3,r4
  80884c:	300f883a 	mov	r7,r6
  808850:	003fc706 	br	808770 <__alt_mem_onchip_mem+0xff800770>

00808854 <_open_r>:
  808854:	defffd04 	addi	sp,sp,-12
  808858:	2805883a 	mov	r2,r5
  80885c:	dc000015 	stw	r16,0(sp)
  808860:	04002074 	movhi	r16,129
  808864:	dc400115 	stw	r17,4(sp)
  808868:	300b883a 	mov	r5,r6
  80886c:	840b5204 	addi	r16,r16,11592
  808870:	2023883a 	mov	r17,r4
  808874:	380d883a 	mov	r6,r7
  808878:	1009883a 	mov	r4,r2
  80887c:	dfc00215 	stw	ra,8(sp)
  808880:	80000015 	stw	zero,0(r16)
  808884:	080b73c0 	call	80b73c <open>
  808888:	00ffffc4 	movi	r3,-1
  80888c:	10c00526 	beq	r2,r3,8088a4 <_open_r+0x50>
  808890:	dfc00217 	ldw	ra,8(sp)
  808894:	dc400117 	ldw	r17,4(sp)
  808898:	dc000017 	ldw	r16,0(sp)
  80889c:	dec00304 	addi	sp,sp,12
  8088a0:	f800283a 	ret
  8088a4:	80c00017 	ldw	r3,0(r16)
  8088a8:	183ff926 	beq	r3,zero,808890 <__alt_mem_onchip_mem+0xff800890>
  8088ac:	88c00015 	stw	r3,0(r17)
  8088b0:	003ff706 	br	808890 <__alt_mem_onchip_mem+0xff800890>

008088b4 <_puts_r>:
  8088b4:	defff604 	addi	sp,sp,-40
  8088b8:	dc000715 	stw	r16,28(sp)
  8088bc:	2021883a 	mov	r16,r4
  8088c0:	2809883a 	mov	r4,r5
  8088c4:	dc400815 	stw	r17,32(sp)
  8088c8:	dfc00915 	stw	ra,36(sp)
  8088cc:	2823883a 	mov	r17,r5
  8088d0:	0808d080 	call	808d08 <strlen>
  8088d4:	10c00044 	addi	r3,r2,1
  8088d8:	d8800115 	stw	r2,4(sp)
  8088dc:	00802074 	movhi	r2,129
  8088e0:	10bc7104 	addi	r2,r2,-3644
  8088e4:	d8800215 	stw	r2,8(sp)
  8088e8:	00800044 	movi	r2,1
  8088ec:	d8800315 	stw	r2,12(sp)
  8088f0:	00800084 	movi	r2,2
  8088f4:	dc400015 	stw	r17,0(sp)
  8088f8:	d8c00615 	stw	r3,24(sp)
  8088fc:	dec00415 	stw	sp,16(sp)
  808900:	d8800515 	stw	r2,20(sp)
  808904:	80000226 	beq	r16,zero,808910 <_puts_r+0x5c>
  808908:	80800e17 	ldw	r2,56(r16)
  80890c:	10001426 	beq	r2,zero,808960 <_puts_r+0xac>
  808910:	81400217 	ldw	r5,8(r16)
  808914:	2880030b 	ldhu	r2,12(r5)
  808918:	10c8000c 	andi	r3,r2,8192
  80891c:	1800061e 	bne	r3,zero,808938 <_puts_r+0x84>
  808920:	29001917 	ldw	r4,100(r5)
  808924:	00f7ffc4 	movi	r3,-8193
  808928:	10880014 	ori	r2,r2,8192
  80892c:	20c6703a 	and	r3,r4,r3
  808930:	2880030d 	sth	r2,12(r5)
  808934:	28c01915 	stw	r3,100(r5)
  808938:	d9800404 	addi	r6,sp,16
  80893c:	8009883a 	mov	r4,r16
  808940:	080997c0 	call	80997c <__sfvwrite_r>
  808944:	1000091e 	bne	r2,zero,80896c <_puts_r+0xb8>
  808948:	00800284 	movi	r2,10
  80894c:	dfc00917 	ldw	ra,36(sp)
  808950:	dc400817 	ldw	r17,32(sp)
  808954:	dc000717 	ldw	r16,28(sp)
  808958:	dec00a04 	addi	sp,sp,40
  80895c:	f800283a 	ret
  808960:	8009883a 	mov	r4,r16
  808964:	080944c0 	call	80944c <__sinit>
  808968:	003fe906 	br	808910 <__alt_mem_onchip_mem+0xff800910>
  80896c:	00bfffc4 	movi	r2,-1
  808970:	003ff606 	br	80894c <__alt_mem_onchip_mem+0xff80094c>

00808974 <puts>:
  808974:	00802074 	movhi	r2,129
  808978:	10842a04 	addi	r2,r2,4264
  80897c:	200b883a 	mov	r5,r4
  808980:	11000017 	ldw	r4,0(r2)
  808984:	08088b41 	jmpi	8088b4 <_puts_r>

00808988 <lflush>:
  808988:	2080030b 	ldhu	r2,12(r4)
  80898c:	00c00244 	movi	r3,9
  808990:	1080024c 	andi	r2,r2,9
  808994:	10c00226 	beq	r2,r3,8089a0 <lflush+0x18>
  808998:	0005883a 	mov	r2,zero
  80899c:	f800283a 	ret
  8089a0:	08090cc1 	jmpi	8090cc <fflush>

008089a4 <__srefill_r>:
  8089a4:	defffc04 	addi	sp,sp,-16
  8089a8:	dc400115 	stw	r17,4(sp)
  8089ac:	dc000015 	stw	r16,0(sp)
  8089b0:	dfc00315 	stw	ra,12(sp)
  8089b4:	dc800215 	stw	r18,8(sp)
  8089b8:	2023883a 	mov	r17,r4
  8089bc:	2821883a 	mov	r16,r5
  8089c0:	20000226 	beq	r4,zero,8089cc <__srefill_r+0x28>
  8089c4:	20800e17 	ldw	r2,56(r4)
  8089c8:	10003c26 	beq	r2,zero,808abc <__srefill_r+0x118>
  8089cc:	80c0030b 	ldhu	r3,12(r16)
  8089d0:	1908000c 	andi	r4,r3,8192
  8089d4:	1805883a 	mov	r2,r3
  8089d8:	2000071e 	bne	r4,zero,8089f8 <__srefill_r+0x54>
  8089dc:	81001917 	ldw	r4,100(r16)
  8089e0:	18880014 	ori	r2,r3,8192
  8089e4:	00f7ffc4 	movi	r3,-8193
  8089e8:	20c8703a 	and	r4,r4,r3
  8089ec:	8080030d 	sth	r2,12(r16)
  8089f0:	1007883a 	mov	r3,r2
  8089f4:	81001915 	stw	r4,100(r16)
  8089f8:	80000115 	stw	zero,4(r16)
  8089fc:	1100080c 	andi	r4,r2,32
  808a00:	2000571e 	bne	r4,zero,808b60 <__srefill_r+0x1bc>
  808a04:	1100010c 	andi	r4,r2,4
  808a08:	20001f26 	beq	r4,zero,808a88 <__srefill_r+0xe4>
  808a0c:	81400c17 	ldw	r5,48(r16)
  808a10:	28000826 	beq	r5,zero,808a34 <__srefill_r+0x90>
  808a14:	80801004 	addi	r2,r16,64
  808a18:	28800226 	beq	r5,r2,808a24 <__srefill_r+0x80>
  808a1c:	8809883a 	mov	r4,r17
  808a20:	080966c0 	call	80966c <_free_r>
  808a24:	80800f17 	ldw	r2,60(r16)
  808a28:	80000c15 	stw	zero,48(r16)
  808a2c:	80800115 	stw	r2,4(r16)
  808a30:	1000391e 	bne	r2,zero,808b18 <__srefill_r+0x174>
  808a34:	80800417 	ldw	r2,16(r16)
  808a38:	10004b26 	beq	r2,zero,808b68 <__srefill_r+0x1c4>
  808a3c:	8480030b 	ldhu	r18,12(r16)
  808a40:	908000cc 	andi	r2,r18,3
  808a44:	10001f1e 	bne	r2,zero,808ac4 <__srefill_r+0x120>
  808a48:	81800417 	ldw	r6,16(r16)
  808a4c:	80800817 	ldw	r2,32(r16)
  808a50:	81c00517 	ldw	r7,20(r16)
  808a54:	81400717 	ldw	r5,28(r16)
  808a58:	81800015 	stw	r6,0(r16)
  808a5c:	8809883a 	mov	r4,r17
  808a60:	103ee83a 	callr	r2
  808a64:	80800115 	stw	r2,4(r16)
  808a68:	00800e0e 	bge	zero,r2,808aa4 <__srefill_r+0x100>
  808a6c:	0005883a 	mov	r2,zero
  808a70:	dfc00317 	ldw	ra,12(sp)
  808a74:	dc800217 	ldw	r18,8(sp)
  808a78:	dc400117 	ldw	r17,4(sp)
  808a7c:	dc000017 	ldw	r16,0(sp)
  808a80:	dec00404 	addi	sp,sp,16
  808a84:	f800283a 	ret
  808a88:	1100040c 	andi	r4,r2,16
  808a8c:	20003026 	beq	r4,zero,808b50 <__srefill_r+0x1ac>
  808a90:	1080020c 	andi	r2,r2,8
  808a94:	1000241e 	bne	r2,zero,808b28 <__srefill_r+0x184>
  808a98:	18c00114 	ori	r3,r3,4
  808a9c:	80c0030d 	sth	r3,12(r16)
  808aa0:	003fe406 	br	808a34 <__alt_mem_onchip_mem+0xff800a34>
  808aa4:	80c0030b 	ldhu	r3,12(r16)
  808aa8:	1000161e 	bne	r2,zero,808b04 <__srefill_r+0x160>
  808aac:	18c00814 	ori	r3,r3,32
  808ab0:	00bfffc4 	movi	r2,-1
  808ab4:	80c0030d 	sth	r3,12(r16)
  808ab8:	003fed06 	br	808a70 <__alt_mem_onchip_mem+0xff800a70>
  808abc:	080944c0 	call	80944c <__sinit>
  808ac0:	003fc206 	br	8089cc <__alt_mem_onchip_mem+0xff8009cc>
  808ac4:	00802074 	movhi	r2,129
  808ac8:	10842904 	addi	r2,r2,4260
  808acc:	11000017 	ldw	r4,0(r2)
  808ad0:	01402074 	movhi	r5,129
  808ad4:	00800044 	movi	r2,1
  808ad8:	29626204 	addi	r5,r5,-30328
  808adc:	8080030d 	sth	r2,12(r16)
  808ae0:	0809e380 	call	809e38 <_fwalk>
  808ae4:	00800244 	movi	r2,9
  808ae8:	8480030d 	sth	r18,12(r16)
  808aec:	9480024c 	andi	r18,r18,9
  808af0:	90bfd51e 	bne	r18,r2,808a48 <__alt_mem_onchip_mem+0xff800a48>
  808af4:	800b883a 	mov	r5,r16
  808af8:	8809883a 	mov	r4,r17
  808afc:	0808e540 	call	808e54 <__sflush_r>
  808b00:	003fd106 	br	808a48 <__alt_mem_onchip_mem+0xff800a48>
  808b04:	18c01014 	ori	r3,r3,64
  808b08:	80000115 	stw	zero,4(r16)
  808b0c:	00bfffc4 	movi	r2,-1
  808b10:	80c0030d 	sth	r3,12(r16)
  808b14:	003fd606 	br	808a70 <__alt_mem_onchip_mem+0xff800a70>
  808b18:	80c00e17 	ldw	r3,56(r16)
  808b1c:	0005883a 	mov	r2,zero
  808b20:	80c00015 	stw	r3,0(r16)
  808b24:	003fd206 	br	808a70 <__alt_mem_onchip_mem+0xff800a70>
  808b28:	800b883a 	mov	r5,r16
  808b2c:	8809883a 	mov	r4,r17
  808b30:	08090700 	call	809070 <_fflush_r>
  808b34:	10000a1e 	bne	r2,zero,808b60 <__srefill_r+0x1bc>
  808b38:	8080030b 	ldhu	r2,12(r16)
  808b3c:	00fffdc4 	movi	r3,-9
  808b40:	80000215 	stw	zero,8(r16)
  808b44:	1886703a 	and	r3,r3,r2
  808b48:	80000615 	stw	zero,24(r16)
  808b4c:	003fd206 	br	808a98 <__alt_mem_onchip_mem+0xff800a98>
  808b50:	00800244 	movi	r2,9
  808b54:	88800015 	stw	r2,0(r17)
  808b58:	18c01014 	ori	r3,r3,64
  808b5c:	80c0030d 	sth	r3,12(r16)
  808b60:	00bfffc4 	movi	r2,-1
  808b64:	003fc206 	br	808a70 <__alt_mem_onchip_mem+0xff800a70>
  808b68:	800b883a 	mov	r5,r16
  808b6c:	8809883a 	mov	r4,r17
  808b70:	0807d640 	call	807d64 <__smakebuf_r>
  808b74:	003fb106 	br	808a3c <__alt_mem_onchip_mem+0xff800a3c>

00808b78 <_sbrk_r>:
  808b78:	defffd04 	addi	sp,sp,-12
  808b7c:	dc000015 	stw	r16,0(sp)
  808b80:	04002074 	movhi	r16,129
  808b84:	dc400115 	stw	r17,4(sp)
  808b88:	840b5204 	addi	r16,r16,11592
  808b8c:	2023883a 	mov	r17,r4
  808b90:	2809883a 	mov	r4,r5
  808b94:	dfc00215 	stw	ra,8(sp)
  808b98:	80000015 	stw	zero,0(r16)
  808b9c:	080ba2c0 	call	80ba2c <sbrk>
  808ba0:	00ffffc4 	movi	r3,-1
  808ba4:	10c00526 	beq	r2,r3,808bbc <_sbrk_r+0x44>
  808ba8:	dfc00217 	ldw	ra,8(sp)
  808bac:	dc400117 	ldw	r17,4(sp)
  808bb0:	dc000017 	ldw	r16,0(sp)
  808bb4:	dec00304 	addi	sp,sp,12
  808bb8:	f800283a 	ret
  808bbc:	80c00017 	ldw	r3,0(r16)
  808bc0:	183ff926 	beq	r3,zero,808ba8 <__alt_mem_onchip_mem+0xff800ba8>
  808bc4:	88c00015 	stw	r3,0(r17)
  808bc8:	003ff706 	br	808ba8 <__alt_mem_onchip_mem+0xff800ba8>

00808bcc <__sread>:
  808bcc:	defffe04 	addi	sp,sp,-8
  808bd0:	dc000015 	stw	r16,0(sp)
  808bd4:	2821883a 	mov	r16,r5
  808bd8:	2940038f 	ldh	r5,14(r5)
  808bdc:	dfc00115 	stw	ra,4(sp)
  808be0:	080a3fc0 	call	80a3fc <_read_r>
  808be4:	10000716 	blt	r2,zero,808c04 <__sread+0x38>
  808be8:	80c01417 	ldw	r3,80(r16)
  808bec:	1887883a 	add	r3,r3,r2
  808bf0:	80c01415 	stw	r3,80(r16)
  808bf4:	dfc00117 	ldw	ra,4(sp)
  808bf8:	dc000017 	ldw	r16,0(sp)
  808bfc:	dec00204 	addi	sp,sp,8
  808c00:	f800283a 	ret
  808c04:	80c0030b 	ldhu	r3,12(r16)
  808c08:	18fbffcc 	andi	r3,r3,61439
  808c0c:	80c0030d 	sth	r3,12(r16)
  808c10:	dfc00117 	ldw	ra,4(sp)
  808c14:	dc000017 	ldw	r16,0(sp)
  808c18:	dec00204 	addi	sp,sp,8
  808c1c:	f800283a 	ret

00808c20 <__seofread>:
  808c20:	0005883a 	mov	r2,zero
  808c24:	f800283a 	ret

00808c28 <__swrite>:
  808c28:	2880030b 	ldhu	r2,12(r5)
  808c2c:	defffb04 	addi	sp,sp,-20
  808c30:	dcc00315 	stw	r19,12(sp)
  808c34:	dc800215 	stw	r18,8(sp)
  808c38:	dc400115 	stw	r17,4(sp)
  808c3c:	dc000015 	stw	r16,0(sp)
  808c40:	dfc00415 	stw	ra,16(sp)
  808c44:	10c0400c 	andi	r3,r2,256
  808c48:	2821883a 	mov	r16,r5
  808c4c:	2023883a 	mov	r17,r4
  808c50:	3025883a 	mov	r18,r6
  808c54:	3827883a 	mov	r19,r7
  808c58:	18000526 	beq	r3,zero,808c70 <__swrite+0x48>
  808c5c:	2940038f 	ldh	r5,14(r5)
  808c60:	01c00084 	movi	r7,2
  808c64:	000d883a 	mov	r6,zero
  808c68:	080a0140 	call	80a014 <_lseek_r>
  808c6c:	8080030b 	ldhu	r2,12(r16)
  808c70:	8140038f 	ldh	r5,14(r16)
  808c74:	10bbffcc 	andi	r2,r2,61439
  808c78:	980f883a 	mov	r7,r19
  808c7c:	900d883a 	mov	r6,r18
  808c80:	8809883a 	mov	r4,r17
  808c84:	8080030d 	sth	r2,12(r16)
  808c88:	dfc00417 	ldw	ra,16(sp)
  808c8c:	dcc00317 	ldw	r19,12(sp)
  808c90:	dc800217 	ldw	r18,8(sp)
  808c94:	dc400117 	ldw	r17,4(sp)
  808c98:	dc000017 	ldw	r16,0(sp)
  808c9c:	dec00504 	addi	sp,sp,20
  808ca0:	0808da01 	jmpi	808da0 <_write_r>

00808ca4 <__sseek>:
  808ca4:	defffe04 	addi	sp,sp,-8
  808ca8:	dc000015 	stw	r16,0(sp)
  808cac:	2821883a 	mov	r16,r5
  808cb0:	2940038f 	ldh	r5,14(r5)
  808cb4:	dfc00115 	stw	ra,4(sp)
  808cb8:	080a0140 	call	80a014 <_lseek_r>
  808cbc:	00ffffc4 	movi	r3,-1
  808cc0:	10c00826 	beq	r2,r3,808ce4 <__sseek+0x40>
  808cc4:	80c0030b 	ldhu	r3,12(r16)
  808cc8:	80801415 	stw	r2,80(r16)
  808ccc:	18c40014 	ori	r3,r3,4096
  808cd0:	80c0030d 	sth	r3,12(r16)
  808cd4:	dfc00117 	ldw	ra,4(sp)
  808cd8:	dc000017 	ldw	r16,0(sp)
  808cdc:	dec00204 	addi	sp,sp,8
  808ce0:	f800283a 	ret
  808ce4:	80c0030b 	ldhu	r3,12(r16)
  808ce8:	18fbffcc 	andi	r3,r3,61439
  808cec:	80c0030d 	sth	r3,12(r16)
  808cf0:	dfc00117 	ldw	ra,4(sp)
  808cf4:	dc000017 	ldw	r16,0(sp)
  808cf8:	dec00204 	addi	sp,sp,8
  808cfc:	f800283a 	ret

00808d00 <__sclose>:
  808d00:	2940038f 	ldh	r5,14(r5)
  808d04:	0808e001 	jmpi	808e00 <_close_r>

00808d08 <strlen>:
  808d08:	208000cc 	andi	r2,r4,3
  808d0c:	10002026 	beq	r2,zero,808d90 <strlen+0x88>
  808d10:	20800007 	ldb	r2,0(r4)
  808d14:	10002026 	beq	r2,zero,808d98 <strlen+0x90>
  808d18:	2005883a 	mov	r2,r4
  808d1c:	00000206 	br	808d28 <strlen+0x20>
  808d20:	10c00007 	ldb	r3,0(r2)
  808d24:	18001826 	beq	r3,zero,808d88 <strlen+0x80>
  808d28:	10800044 	addi	r2,r2,1
  808d2c:	10c000cc 	andi	r3,r2,3
  808d30:	183ffb1e 	bne	r3,zero,808d20 <__alt_mem_onchip_mem+0xff800d20>
  808d34:	10c00017 	ldw	r3,0(r2)
  808d38:	01ffbff4 	movhi	r7,65279
  808d3c:	39ffbfc4 	addi	r7,r7,-257
  808d40:	00ca303a 	nor	r5,zero,r3
  808d44:	01a02074 	movhi	r6,32897
  808d48:	19c7883a 	add	r3,r3,r7
  808d4c:	31a02004 	addi	r6,r6,-32640
  808d50:	1946703a 	and	r3,r3,r5
  808d54:	1986703a 	and	r3,r3,r6
  808d58:	1800091e 	bne	r3,zero,808d80 <strlen+0x78>
  808d5c:	10800104 	addi	r2,r2,4
  808d60:	10c00017 	ldw	r3,0(r2)
  808d64:	19cb883a 	add	r5,r3,r7
  808d68:	00c6303a 	nor	r3,zero,r3
  808d6c:	28c6703a 	and	r3,r5,r3
  808d70:	1986703a 	and	r3,r3,r6
  808d74:	183ff926 	beq	r3,zero,808d5c <__alt_mem_onchip_mem+0xff800d5c>
  808d78:	00000106 	br	808d80 <strlen+0x78>
  808d7c:	10800044 	addi	r2,r2,1
  808d80:	10c00007 	ldb	r3,0(r2)
  808d84:	183ffd1e 	bne	r3,zero,808d7c <__alt_mem_onchip_mem+0xff800d7c>
  808d88:	1105c83a 	sub	r2,r2,r4
  808d8c:	f800283a 	ret
  808d90:	2005883a 	mov	r2,r4
  808d94:	003fe706 	br	808d34 <__alt_mem_onchip_mem+0xff800d34>
  808d98:	0005883a 	mov	r2,zero
  808d9c:	f800283a 	ret

00808da0 <_write_r>:
  808da0:	defffd04 	addi	sp,sp,-12
  808da4:	2805883a 	mov	r2,r5
  808da8:	dc000015 	stw	r16,0(sp)
  808dac:	04002074 	movhi	r16,129
  808db0:	dc400115 	stw	r17,4(sp)
  808db4:	300b883a 	mov	r5,r6
  808db8:	840b5204 	addi	r16,r16,11592
  808dbc:	2023883a 	mov	r17,r4
  808dc0:	380d883a 	mov	r6,r7
  808dc4:	1009883a 	mov	r4,r2
  808dc8:	dfc00215 	stw	ra,8(sp)
  808dcc:	80000015 	stw	zero,0(r16)
  808dd0:	080bcbc0 	call	80bcbc <write>
  808dd4:	00ffffc4 	movi	r3,-1
  808dd8:	10c00526 	beq	r2,r3,808df0 <_write_r+0x50>
  808ddc:	dfc00217 	ldw	ra,8(sp)
  808de0:	dc400117 	ldw	r17,4(sp)
  808de4:	dc000017 	ldw	r16,0(sp)
  808de8:	dec00304 	addi	sp,sp,12
  808dec:	f800283a 	ret
  808df0:	80c00017 	ldw	r3,0(r16)
  808df4:	183ff926 	beq	r3,zero,808ddc <__alt_mem_onchip_mem+0xff800ddc>
  808df8:	88c00015 	stw	r3,0(r17)
  808dfc:	003ff706 	br	808ddc <__alt_mem_onchip_mem+0xff800ddc>

00808e00 <_close_r>:
  808e00:	defffd04 	addi	sp,sp,-12
  808e04:	dc000015 	stw	r16,0(sp)
  808e08:	04002074 	movhi	r16,129
  808e0c:	dc400115 	stw	r17,4(sp)
  808e10:	840b5204 	addi	r16,r16,11592
  808e14:	2023883a 	mov	r17,r4
  808e18:	2809883a 	mov	r4,r5
  808e1c:	dfc00215 	stw	ra,8(sp)
  808e20:	80000015 	stw	zero,0(r16)
  808e24:	080af340 	call	80af34 <close>
  808e28:	00ffffc4 	movi	r3,-1
  808e2c:	10c00526 	beq	r2,r3,808e44 <_close_r+0x44>
  808e30:	dfc00217 	ldw	ra,8(sp)
  808e34:	dc400117 	ldw	r17,4(sp)
  808e38:	dc000017 	ldw	r16,0(sp)
  808e3c:	dec00304 	addi	sp,sp,12
  808e40:	f800283a 	ret
  808e44:	80c00017 	ldw	r3,0(r16)
  808e48:	183ff926 	beq	r3,zero,808e30 <__alt_mem_onchip_mem+0xff800e30>
  808e4c:	88c00015 	stw	r3,0(r17)
  808e50:	003ff706 	br	808e30 <__alt_mem_onchip_mem+0xff800e30>

00808e54 <__sflush_r>:
  808e54:	2880030b 	ldhu	r2,12(r5)
  808e58:	defffb04 	addi	sp,sp,-20
  808e5c:	dcc00315 	stw	r19,12(sp)
  808e60:	dc400115 	stw	r17,4(sp)
  808e64:	dfc00415 	stw	ra,16(sp)
  808e68:	dc800215 	stw	r18,8(sp)
  808e6c:	dc000015 	stw	r16,0(sp)
  808e70:	10c0020c 	andi	r3,r2,8
  808e74:	2823883a 	mov	r17,r5
  808e78:	2027883a 	mov	r19,r4
  808e7c:	1800311e 	bne	r3,zero,808f44 <__sflush_r+0xf0>
  808e80:	28c00117 	ldw	r3,4(r5)
  808e84:	10820014 	ori	r2,r2,2048
  808e88:	2880030d 	sth	r2,12(r5)
  808e8c:	00c04b0e 	bge	zero,r3,808fbc <__sflush_r+0x168>
  808e90:	8a000a17 	ldw	r8,40(r17)
  808e94:	40002326 	beq	r8,zero,808f24 <__sflush_r+0xd0>
  808e98:	9c000017 	ldw	r16,0(r19)
  808e9c:	10c4000c 	andi	r3,r2,4096
  808ea0:	98000015 	stw	zero,0(r19)
  808ea4:	18004826 	beq	r3,zero,808fc8 <__sflush_r+0x174>
  808ea8:	89801417 	ldw	r6,80(r17)
  808eac:	10c0010c 	andi	r3,r2,4
  808eb0:	18000626 	beq	r3,zero,808ecc <__sflush_r+0x78>
  808eb4:	88c00117 	ldw	r3,4(r17)
  808eb8:	88800c17 	ldw	r2,48(r17)
  808ebc:	30cdc83a 	sub	r6,r6,r3
  808ec0:	10000226 	beq	r2,zero,808ecc <__sflush_r+0x78>
  808ec4:	88800f17 	ldw	r2,60(r17)
  808ec8:	308dc83a 	sub	r6,r6,r2
  808ecc:	89400717 	ldw	r5,28(r17)
  808ed0:	000f883a 	mov	r7,zero
  808ed4:	9809883a 	mov	r4,r19
  808ed8:	403ee83a 	callr	r8
  808edc:	00ffffc4 	movi	r3,-1
  808ee0:	10c04426 	beq	r2,r3,808ff4 <__sflush_r+0x1a0>
  808ee4:	88c0030b 	ldhu	r3,12(r17)
  808ee8:	89000417 	ldw	r4,16(r17)
  808eec:	88000115 	stw	zero,4(r17)
  808ef0:	197dffcc 	andi	r5,r3,63487
  808ef4:	8940030d 	sth	r5,12(r17)
  808ef8:	89000015 	stw	r4,0(r17)
  808efc:	18c4000c 	andi	r3,r3,4096
  808f00:	18002c1e 	bne	r3,zero,808fb4 <__sflush_r+0x160>
  808f04:	89400c17 	ldw	r5,48(r17)
  808f08:	9c000015 	stw	r16,0(r19)
  808f0c:	28000526 	beq	r5,zero,808f24 <__sflush_r+0xd0>
  808f10:	88801004 	addi	r2,r17,64
  808f14:	28800226 	beq	r5,r2,808f20 <__sflush_r+0xcc>
  808f18:	9809883a 	mov	r4,r19
  808f1c:	080966c0 	call	80966c <_free_r>
  808f20:	88000c15 	stw	zero,48(r17)
  808f24:	0005883a 	mov	r2,zero
  808f28:	dfc00417 	ldw	ra,16(sp)
  808f2c:	dcc00317 	ldw	r19,12(sp)
  808f30:	dc800217 	ldw	r18,8(sp)
  808f34:	dc400117 	ldw	r17,4(sp)
  808f38:	dc000017 	ldw	r16,0(sp)
  808f3c:	dec00504 	addi	sp,sp,20
  808f40:	f800283a 	ret
  808f44:	2c800417 	ldw	r18,16(r5)
  808f48:	903ff626 	beq	r18,zero,808f24 <__alt_mem_onchip_mem+0xff800f24>
  808f4c:	2c000017 	ldw	r16,0(r5)
  808f50:	108000cc 	andi	r2,r2,3
  808f54:	2c800015 	stw	r18,0(r5)
  808f58:	84a1c83a 	sub	r16,r16,r18
  808f5c:	1000131e 	bne	r2,zero,808fac <__sflush_r+0x158>
  808f60:	28800517 	ldw	r2,20(r5)
  808f64:	88800215 	stw	r2,8(r17)
  808f68:	04000316 	blt	zero,r16,808f78 <__sflush_r+0x124>
  808f6c:	003fed06 	br	808f24 <__alt_mem_onchip_mem+0xff800f24>
  808f70:	90a5883a 	add	r18,r18,r2
  808f74:	043feb0e 	bge	zero,r16,808f24 <__alt_mem_onchip_mem+0xff800f24>
  808f78:	88800917 	ldw	r2,36(r17)
  808f7c:	89400717 	ldw	r5,28(r17)
  808f80:	800f883a 	mov	r7,r16
  808f84:	900d883a 	mov	r6,r18
  808f88:	9809883a 	mov	r4,r19
  808f8c:	103ee83a 	callr	r2
  808f90:	80a1c83a 	sub	r16,r16,r2
  808f94:	00bff616 	blt	zero,r2,808f70 <__alt_mem_onchip_mem+0xff800f70>
  808f98:	88c0030b 	ldhu	r3,12(r17)
  808f9c:	00bfffc4 	movi	r2,-1
  808fa0:	18c01014 	ori	r3,r3,64
  808fa4:	88c0030d 	sth	r3,12(r17)
  808fa8:	003fdf06 	br	808f28 <__alt_mem_onchip_mem+0xff800f28>
  808fac:	0005883a 	mov	r2,zero
  808fb0:	003fec06 	br	808f64 <__alt_mem_onchip_mem+0xff800f64>
  808fb4:	88801415 	stw	r2,80(r17)
  808fb8:	003fd206 	br	808f04 <__alt_mem_onchip_mem+0xff800f04>
  808fbc:	28c00f17 	ldw	r3,60(r5)
  808fc0:	00ffb316 	blt	zero,r3,808e90 <__alt_mem_onchip_mem+0xff800e90>
  808fc4:	003fd706 	br	808f24 <__alt_mem_onchip_mem+0xff800f24>
  808fc8:	89400717 	ldw	r5,28(r17)
  808fcc:	000d883a 	mov	r6,zero
  808fd0:	01c00044 	movi	r7,1
  808fd4:	9809883a 	mov	r4,r19
  808fd8:	403ee83a 	callr	r8
  808fdc:	100d883a 	mov	r6,r2
  808fe0:	00bfffc4 	movi	r2,-1
  808fe4:	30801426 	beq	r6,r2,809038 <__sflush_r+0x1e4>
  808fe8:	8880030b 	ldhu	r2,12(r17)
  808fec:	8a000a17 	ldw	r8,40(r17)
  808ff0:	003fae06 	br	808eac <__alt_mem_onchip_mem+0xff800eac>
  808ff4:	98c00017 	ldw	r3,0(r19)
  808ff8:	183fba26 	beq	r3,zero,808ee4 <__alt_mem_onchip_mem+0xff800ee4>
  808ffc:	01000744 	movi	r4,29
  809000:	19000626 	beq	r3,r4,80901c <__sflush_r+0x1c8>
  809004:	01000584 	movi	r4,22
  809008:	19000426 	beq	r3,r4,80901c <__sflush_r+0x1c8>
  80900c:	88c0030b 	ldhu	r3,12(r17)
  809010:	18c01014 	ori	r3,r3,64
  809014:	88c0030d 	sth	r3,12(r17)
  809018:	003fc306 	br	808f28 <__alt_mem_onchip_mem+0xff800f28>
  80901c:	8880030b 	ldhu	r2,12(r17)
  809020:	88c00417 	ldw	r3,16(r17)
  809024:	88000115 	stw	zero,4(r17)
  809028:	10bdffcc 	andi	r2,r2,63487
  80902c:	8880030d 	sth	r2,12(r17)
  809030:	88c00015 	stw	r3,0(r17)
  809034:	003fb306 	br	808f04 <__alt_mem_onchip_mem+0xff800f04>
  809038:	98800017 	ldw	r2,0(r19)
  80903c:	103fea26 	beq	r2,zero,808fe8 <__alt_mem_onchip_mem+0xff800fe8>
  809040:	00c00744 	movi	r3,29
  809044:	10c00226 	beq	r2,r3,809050 <__sflush_r+0x1fc>
  809048:	00c00584 	movi	r3,22
  80904c:	10c0031e 	bne	r2,r3,80905c <__sflush_r+0x208>
  809050:	9c000015 	stw	r16,0(r19)
  809054:	0005883a 	mov	r2,zero
  809058:	003fb306 	br	808f28 <__alt_mem_onchip_mem+0xff800f28>
  80905c:	88c0030b 	ldhu	r3,12(r17)
  809060:	3005883a 	mov	r2,r6
  809064:	18c01014 	ori	r3,r3,64
  809068:	88c0030d 	sth	r3,12(r17)
  80906c:	003fae06 	br	808f28 <__alt_mem_onchip_mem+0xff800f28>

00809070 <_fflush_r>:
  809070:	defffd04 	addi	sp,sp,-12
  809074:	dc000115 	stw	r16,4(sp)
  809078:	dfc00215 	stw	ra,8(sp)
  80907c:	2021883a 	mov	r16,r4
  809080:	20000226 	beq	r4,zero,80908c <_fflush_r+0x1c>
  809084:	20800e17 	ldw	r2,56(r4)
  809088:	10000c26 	beq	r2,zero,8090bc <_fflush_r+0x4c>
  80908c:	2880030f 	ldh	r2,12(r5)
  809090:	1000051e 	bne	r2,zero,8090a8 <_fflush_r+0x38>
  809094:	0005883a 	mov	r2,zero
  809098:	dfc00217 	ldw	ra,8(sp)
  80909c:	dc000117 	ldw	r16,4(sp)
  8090a0:	dec00304 	addi	sp,sp,12
  8090a4:	f800283a 	ret
  8090a8:	8009883a 	mov	r4,r16
  8090ac:	dfc00217 	ldw	ra,8(sp)
  8090b0:	dc000117 	ldw	r16,4(sp)
  8090b4:	dec00304 	addi	sp,sp,12
  8090b8:	0808e541 	jmpi	808e54 <__sflush_r>
  8090bc:	d9400015 	stw	r5,0(sp)
  8090c0:	080944c0 	call	80944c <__sinit>
  8090c4:	d9400017 	ldw	r5,0(sp)
  8090c8:	003ff006 	br	80908c <__alt_mem_onchip_mem+0xff80108c>

008090cc <fflush>:
  8090cc:	20000526 	beq	r4,zero,8090e4 <fflush+0x18>
  8090d0:	00802074 	movhi	r2,129
  8090d4:	10842a04 	addi	r2,r2,4264
  8090d8:	200b883a 	mov	r5,r4
  8090dc:	11000017 	ldw	r4,0(r2)
  8090e0:	08090701 	jmpi	809070 <_fflush_r>
  8090e4:	00802074 	movhi	r2,129
  8090e8:	10842904 	addi	r2,r2,4260
  8090ec:	11000017 	ldw	r4,0(r2)
  8090f0:	01402074 	movhi	r5,129
  8090f4:	29641c04 	addi	r5,r5,-28560
  8090f8:	0809efc1 	jmpi	809efc <_fwalk_reent>

008090fc <__fp_unlock>:
  8090fc:	0005883a 	mov	r2,zero
  809100:	f800283a 	ret

00809104 <_cleanup_r>:
  809104:	01402074 	movhi	r5,129
  809108:	296ac504 	addi	r5,r5,-21740
  80910c:	0809efc1 	jmpi	809efc <_fwalk_reent>

00809110 <__sinit.part.1>:
  809110:	defff704 	addi	sp,sp,-36
  809114:	00c02074 	movhi	r3,129
  809118:	dfc00815 	stw	ra,32(sp)
  80911c:	ddc00715 	stw	r23,28(sp)
  809120:	dd800615 	stw	r22,24(sp)
  809124:	dd400515 	stw	r21,20(sp)
  809128:	dd000415 	stw	r20,16(sp)
  80912c:	dcc00315 	stw	r19,12(sp)
  809130:	dc800215 	stw	r18,8(sp)
  809134:	dc400115 	stw	r17,4(sp)
  809138:	dc000015 	stw	r16,0(sp)
  80913c:	18e44104 	addi	r3,r3,-28412
  809140:	24000117 	ldw	r16,4(r4)
  809144:	20c00f15 	stw	r3,60(r4)
  809148:	2080bb04 	addi	r2,r4,748
  80914c:	00c000c4 	movi	r3,3
  809150:	20c0b915 	stw	r3,740(r4)
  809154:	2080ba15 	stw	r2,744(r4)
  809158:	2000b815 	stw	zero,736(r4)
  80915c:	05c00204 	movi	r23,8
  809160:	00800104 	movi	r2,4
  809164:	2025883a 	mov	r18,r4
  809168:	b80d883a 	mov	r6,r23
  80916c:	81001704 	addi	r4,r16,92
  809170:	000b883a 	mov	r5,zero
  809174:	80000015 	stw	zero,0(r16)
  809178:	80000115 	stw	zero,4(r16)
  80917c:	80000215 	stw	zero,8(r16)
  809180:	8080030d 	sth	r2,12(r16)
  809184:	80001915 	stw	zero,100(r16)
  809188:	8000038d 	sth	zero,14(r16)
  80918c:	80000415 	stw	zero,16(r16)
  809190:	80000515 	stw	zero,20(r16)
  809194:	80000615 	stw	zero,24(r16)
  809198:	080872c0 	call	80872c <memset>
  80919c:	05802074 	movhi	r22,129
  8091a0:	94400217 	ldw	r17,8(r18)
  8091a4:	05402074 	movhi	r21,129
  8091a8:	05002074 	movhi	r20,129
  8091ac:	04c02074 	movhi	r19,129
  8091b0:	b5a2f304 	addi	r22,r22,-29748
  8091b4:	ad630a04 	addi	r21,r21,-29656
  8091b8:	a5232904 	addi	r20,r20,-29532
  8091bc:	9ce34004 	addi	r19,r19,-29440
  8091c0:	85800815 	stw	r22,32(r16)
  8091c4:	85400915 	stw	r21,36(r16)
  8091c8:	85000a15 	stw	r20,40(r16)
  8091cc:	84c00b15 	stw	r19,44(r16)
  8091d0:	84000715 	stw	r16,28(r16)
  8091d4:	00800284 	movi	r2,10
  8091d8:	8880030d 	sth	r2,12(r17)
  8091dc:	00800044 	movi	r2,1
  8091e0:	b80d883a 	mov	r6,r23
  8091e4:	89001704 	addi	r4,r17,92
  8091e8:	000b883a 	mov	r5,zero
  8091ec:	88000015 	stw	zero,0(r17)
  8091f0:	88000115 	stw	zero,4(r17)
  8091f4:	88000215 	stw	zero,8(r17)
  8091f8:	88001915 	stw	zero,100(r17)
  8091fc:	8880038d 	sth	r2,14(r17)
  809200:	88000415 	stw	zero,16(r17)
  809204:	88000515 	stw	zero,20(r17)
  809208:	88000615 	stw	zero,24(r17)
  80920c:	080872c0 	call	80872c <memset>
  809210:	94000317 	ldw	r16,12(r18)
  809214:	00800484 	movi	r2,18
  809218:	8c400715 	stw	r17,28(r17)
  80921c:	8d800815 	stw	r22,32(r17)
  809220:	8d400915 	stw	r21,36(r17)
  809224:	8d000a15 	stw	r20,40(r17)
  809228:	8cc00b15 	stw	r19,44(r17)
  80922c:	8080030d 	sth	r2,12(r16)
  809230:	00800084 	movi	r2,2
  809234:	80000015 	stw	zero,0(r16)
  809238:	80000115 	stw	zero,4(r16)
  80923c:	80000215 	stw	zero,8(r16)
  809240:	80001915 	stw	zero,100(r16)
  809244:	8080038d 	sth	r2,14(r16)
  809248:	80000415 	stw	zero,16(r16)
  80924c:	80000515 	stw	zero,20(r16)
  809250:	80000615 	stw	zero,24(r16)
  809254:	b80d883a 	mov	r6,r23
  809258:	000b883a 	mov	r5,zero
  80925c:	81001704 	addi	r4,r16,92
  809260:	080872c0 	call	80872c <memset>
  809264:	00800044 	movi	r2,1
  809268:	84000715 	stw	r16,28(r16)
  80926c:	85800815 	stw	r22,32(r16)
  809270:	85400915 	stw	r21,36(r16)
  809274:	85000a15 	stw	r20,40(r16)
  809278:	84c00b15 	stw	r19,44(r16)
  80927c:	90800e15 	stw	r2,56(r18)
  809280:	dfc00817 	ldw	ra,32(sp)
  809284:	ddc00717 	ldw	r23,28(sp)
  809288:	dd800617 	ldw	r22,24(sp)
  80928c:	dd400517 	ldw	r21,20(sp)
  809290:	dd000417 	ldw	r20,16(sp)
  809294:	dcc00317 	ldw	r19,12(sp)
  809298:	dc800217 	ldw	r18,8(sp)
  80929c:	dc400117 	ldw	r17,4(sp)
  8092a0:	dc000017 	ldw	r16,0(sp)
  8092a4:	dec00904 	addi	sp,sp,36
  8092a8:	f800283a 	ret

008092ac <__fp_lock>:
  8092ac:	0005883a 	mov	r2,zero
  8092b0:	f800283a 	ret

008092b4 <__sfmoreglue>:
  8092b4:	defffc04 	addi	sp,sp,-16
  8092b8:	dc400115 	stw	r17,4(sp)
  8092bc:	2c7fffc4 	addi	r17,r5,-1
  8092c0:	8c401a24 	muli	r17,r17,104
  8092c4:	dc800215 	stw	r18,8(sp)
  8092c8:	2825883a 	mov	r18,r5
  8092cc:	89401d04 	addi	r5,r17,116
  8092d0:	dc000015 	stw	r16,0(sp)
  8092d4:	dfc00315 	stw	ra,12(sp)
  8092d8:	0807f200 	call	807f20 <_malloc_r>
  8092dc:	1021883a 	mov	r16,r2
  8092e0:	10000726 	beq	r2,zero,809300 <__sfmoreglue+0x4c>
  8092e4:	11000304 	addi	r4,r2,12
  8092e8:	10000015 	stw	zero,0(r2)
  8092ec:	14800115 	stw	r18,4(r2)
  8092f0:	11000215 	stw	r4,8(r2)
  8092f4:	89801a04 	addi	r6,r17,104
  8092f8:	000b883a 	mov	r5,zero
  8092fc:	080872c0 	call	80872c <memset>
  809300:	8005883a 	mov	r2,r16
  809304:	dfc00317 	ldw	ra,12(sp)
  809308:	dc800217 	ldw	r18,8(sp)
  80930c:	dc400117 	ldw	r17,4(sp)
  809310:	dc000017 	ldw	r16,0(sp)
  809314:	dec00404 	addi	sp,sp,16
  809318:	f800283a 	ret

0080931c <__sfp>:
  80931c:	defffb04 	addi	sp,sp,-20
  809320:	dc000015 	stw	r16,0(sp)
  809324:	04002074 	movhi	r16,129
  809328:	84042904 	addi	r16,r16,4260
  80932c:	dcc00315 	stw	r19,12(sp)
  809330:	2027883a 	mov	r19,r4
  809334:	81000017 	ldw	r4,0(r16)
  809338:	dfc00415 	stw	ra,16(sp)
  80933c:	dc800215 	stw	r18,8(sp)
  809340:	20800e17 	ldw	r2,56(r4)
  809344:	dc400115 	stw	r17,4(sp)
  809348:	1000021e 	bne	r2,zero,809354 <__sfp+0x38>
  80934c:	08091100 	call	809110 <__sinit.part.1>
  809350:	81000017 	ldw	r4,0(r16)
  809354:	2480b804 	addi	r18,r4,736
  809358:	047fffc4 	movi	r17,-1
  80935c:	91000117 	ldw	r4,4(r18)
  809360:	94000217 	ldw	r16,8(r18)
  809364:	213fffc4 	addi	r4,r4,-1
  809368:	20000a16 	blt	r4,zero,809394 <__sfp+0x78>
  80936c:	8080030f 	ldh	r2,12(r16)
  809370:	10000c26 	beq	r2,zero,8093a4 <__sfp+0x88>
  809374:	80c01d04 	addi	r3,r16,116
  809378:	00000206 	br	809384 <__sfp+0x68>
  80937c:	18bfe60f 	ldh	r2,-104(r3)
  809380:	10000826 	beq	r2,zero,8093a4 <__sfp+0x88>
  809384:	213fffc4 	addi	r4,r4,-1
  809388:	1c3ffd04 	addi	r16,r3,-12
  80938c:	18c01a04 	addi	r3,r3,104
  809390:	247ffa1e 	bne	r4,r17,80937c <__alt_mem_onchip_mem+0xff80137c>
  809394:	90800017 	ldw	r2,0(r18)
  809398:	10001d26 	beq	r2,zero,809410 <__sfp+0xf4>
  80939c:	1025883a 	mov	r18,r2
  8093a0:	003fee06 	br	80935c <__alt_mem_onchip_mem+0xff80135c>
  8093a4:	00bfffc4 	movi	r2,-1
  8093a8:	8080038d 	sth	r2,14(r16)
  8093ac:	00800044 	movi	r2,1
  8093b0:	8080030d 	sth	r2,12(r16)
  8093b4:	80001915 	stw	zero,100(r16)
  8093b8:	80000015 	stw	zero,0(r16)
  8093bc:	80000215 	stw	zero,8(r16)
  8093c0:	80000115 	stw	zero,4(r16)
  8093c4:	80000415 	stw	zero,16(r16)
  8093c8:	80000515 	stw	zero,20(r16)
  8093cc:	80000615 	stw	zero,24(r16)
  8093d0:	01800204 	movi	r6,8
  8093d4:	000b883a 	mov	r5,zero
  8093d8:	81001704 	addi	r4,r16,92
  8093dc:	080872c0 	call	80872c <memset>
  8093e0:	8005883a 	mov	r2,r16
  8093e4:	80000c15 	stw	zero,48(r16)
  8093e8:	80000d15 	stw	zero,52(r16)
  8093ec:	80001115 	stw	zero,68(r16)
  8093f0:	80001215 	stw	zero,72(r16)
  8093f4:	dfc00417 	ldw	ra,16(sp)
  8093f8:	dcc00317 	ldw	r19,12(sp)
  8093fc:	dc800217 	ldw	r18,8(sp)
  809400:	dc400117 	ldw	r17,4(sp)
  809404:	dc000017 	ldw	r16,0(sp)
  809408:	dec00504 	addi	sp,sp,20
  80940c:	f800283a 	ret
  809410:	01400104 	movi	r5,4
  809414:	9809883a 	mov	r4,r19
  809418:	08092b40 	call	8092b4 <__sfmoreglue>
  80941c:	90800015 	stw	r2,0(r18)
  809420:	103fde1e 	bne	r2,zero,80939c <__alt_mem_onchip_mem+0xff80139c>
  809424:	00800304 	movi	r2,12
  809428:	98800015 	stw	r2,0(r19)
  80942c:	0005883a 	mov	r2,zero
  809430:	003ff006 	br	8093f4 <__alt_mem_onchip_mem+0xff8013f4>

00809434 <_cleanup>:
  809434:	00802074 	movhi	r2,129
  809438:	10842904 	addi	r2,r2,4260
  80943c:	11000017 	ldw	r4,0(r2)
  809440:	01402074 	movhi	r5,129
  809444:	296ac504 	addi	r5,r5,-21740
  809448:	0809efc1 	jmpi	809efc <_fwalk_reent>

0080944c <__sinit>:
  80944c:	20800e17 	ldw	r2,56(r4)
  809450:	10000126 	beq	r2,zero,809458 <__sinit+0xc>
  809454:	f800283a 	ret
  809458:	08091101 	jmpi	809110 <__sinit.part.1>

0080945c <__sfp_lock_acquire>:
  80945c:	f800283a 	ret

00809460 <__sfp_lock_release>:
  809460:	f800283a 	ret

00809464 <__sinit_lock_acquire>:
  809464:	f800283a 	ret

00809468 <__sinit_lock_release>:
  809468:	f800283a 	ret

0080946c <__fp_lock_all>:
  80946c:	00802074 	movhi	r2,129
  809470:	10842a04 	addi	r2,r2,4264
  809474:	11000017 	ldw	r4,0(r2)
  809478:	01402074 	movhi	r5,129
  80947c:	2964ab04 	addi	r5,r5,-27988
  809480:	0809e381 	jmpi	809e38 <_fwalk>

00809484 <__fp_unlock_all>:
  809484:	00802074 	movhi	r2,129
  809488:	10842a04 	addi	r2,r2,4264
  80948c:	11000017 	ldw	r4,0(r2)
  809490:	01402074 	movhi	r5,129
  809494:	29643f04 	addi	r5,r5,-28420
  809498:	0809e381 	jmpi	809e38 <_fwalk>

0080949c <__sflags>:
  80949c:	28800007 	ldb	r2,0(r5)
  8094a0:	00c01c84 	movi	r3,114
  8094a4:	10c02426 	beq	r2,r3,809538 <__sflags+0x9c>
  8094a8:	00c01dc4 	movi	r3,119
  8094ac:	10c01e26 	beq	r2,r3,809528 <__sflags+0x8c>
  8094b0:	00c01844 	movi	r3,97
  8094b4:	10c00426 	beq	r2,r3,8094c8 <__sflags+0x2c>
  8094b8:	00800584 	movi	r2,22
  8094bc:	20800015 	stw	r2,0(r4)
  8094c0:	0005883a 	mov	r2,zero
  8094c4:	f800283a 	ret
  8094c8:	02c08204 	movi	r11,520
  8094cc:	01000044 	movi	r4,1
  8094d0:	00804204 	movi	r2,264
  8094d4:	01c00ac4 	movi	r7,43
  8094d8:	02bff8c4 	movi	r10,-29
  8094dc:	027fff04 	movi	r9,-4
  8094e0:	02001e04 	movi	r8,120
  8094e4:	29400044 	addi	r5,r5,1
  8094e8:	28c00007 	ldb	r3,0(r5)
  8094ec:	18000626 	beq	r3,zero,809508 <__sflags+0x6c>
  8094f0:	19c00826 	beq	r3,r7,809514 <__sflags+0x78>
  8094f4:	1a3ffb1e 	bne	r3,r8,8094e4 <__alt_mem_onchip_mem+0xff8014e4>
  8094f8:	29400044 	addi	r5,r5,1
  8094fc:	28c00007 	ldb	r3,0(r5)
  809500:	21020014 	ori	r4,r4,2048
  809504:	183ffa1e 	bne	r3,zero,8094f0 <__alt_mem_onchip_mem+0xff8014f0>
  809508:	22c8b03a 	or	r4,r4,r11
  80950c:	31000015 	stw	r4,0(r6)
  809510:	f800283a 	ret
  809514:	1284703a 	and	r2,r2,r10
  809518:	2248703a 	and	r4,r4,r9
  80951c:	10800414 	ori	r2,r2,16
  809520:	21000094 	ori	r4,r4,2
  809524:	003fef06 	br	8094e4 <__alt_mem_onchip_mem+0xff8014e4>
  809528:	02c18004 	movi	r11,1536
  80952c:	01000044 	movi	r4,1
  809530:	00800204 	movi	r2,8
  809534:	003fe706 	br	8094d4 <__alt_mem_onchip_mem+0xff8014d4>
  809538:	0017883a 	mov	r11,zero
  80953c:	0009883a 	mov	r4,zero
  809540:	00800104 	movi	r2,4
  809544:	003fe306 	br	8094d4 <__alt_mem_onchip_mem+0xff8014d4>

00809548 <_malloc_trim_r>:
  809548:	defffb04 	addi	sp,sp,-20
  80954c:	dcc00315 	stw	r19,12(sp)
  809550:	04c02074 	movhi	r19,129
  809554:	dc800215 	stw	r18,8(sp)
  809558:	dc400115 	stw	r17,4(sp)
  80955c:	dc000015 	stw	r16,0(sp)
  809560:	dfc00415 	stw	ra,16(sp)
  809564:	2821883a 	mov	r16,r5
  809568:	9cfe2c04 	addi	r19,r19,-1872
  80956c:	2025883a 	mov	r18,r4
  809570:	080b5f40 	call	80b5f4 <__malloc_lock>
  809574:	98800217 	ldw	r2,8(r19)
  809578:	14400117 	ldw	r17,4(r2)
  80957c:	00bfff04 	movi	r2,-4
  809580:	88a2703a 	and	r17,r17,r2
  809584:	8c21c83a 	sub	r16,r17,r16
  809588:	8403fbc4 	addi	r16,r16,4079
  80958c:	8020d33a 	srli	r16,r16,12
  809590:	0083ffc4 	movi	r2,4095
  809594:	843fffc4 	addi	r16,r16,-1
  809598:	8020933a 	slli	r16,r16,12
  80959c:	1400060e 	bge	r2,r16,8095b8 <_malloc_trim_r+0x70>
  8095a0:	000b883a 	mov	r5,zero
  8095a4:	9009883a 	mov	r4,r18
  8095a8:	0808b780 	call	808b78 <_sbrk_r>
  8095ac:	98c00217 	ldw	r3,8(r19)
  8095b0:	1c47883a 	add	r3,r3,r17
  8095b4:	10c00a26 	beq	r2,r3,8095e0 <_malloc_trim_r+0x98>
  8095b8:	9009883a 	mov	r4,r18
  8095bc:	080b6180 	call	80b618 <__malloc_unlock>
  8095c0:	0005883a 	mov	r2,zero
  8095c4:	dfc00417 	ldw	ra,16(sp)
  8095c8:	dcc00317 	ldw	r19,12(sp)
  8095cc:	dc800217 	ldw	r18,8(sp)
  8095d0:	dc400117 	ldw	r17,4(sp)
  8095d4:	dc000017 	ldw	r16,0(sp)
  8095d8:	dec00504 	addi	sp,sp,20
  8095dc:	f800283a 	ret
  8095e0:	040bc83a 	sub	r5,zero,r16
  8095e4:	9009883a 	mov	r4,r18
  8095e8:	0808b780 	call	808b78 <_sbrk_r>
  8095ec:	00ffffc4 	movi	r3,-1
  8095f0:	10c00d26 	beq	r2,r3,809628 <_malloc_trim_r+0xe0>
  8095f4:	00c02074 	movhi	r3,129
  8095f8:	18cb5d04 	addi	r3,r3,11636
  8095fc:	18800017 	ldw	r2,0(r3)
  809600:	99000217 	ldw	r4,8(r19)
  809604:	8c23c83a 	sub	r17,r17,r16
  809608:	8c400054 	ori	r17,r17,1
  80960c:	1421c83a 	sub	r16,r2,r16
  809610:	24400115 	stw	r17,4(r4)
  809614:	9009883a 	mov	r4,r18
  809618:	1c000015 	stw	r16,0(r3)
  80961c:	080b6180 	call	80b618 <__malloc_unlock>
  809620:	00800044 	movi	r2,1
  809624:	003fe706 	br	8095c4 <__alt_mem_onchip_mem+0xff8015c4>
  809628:	000b883a 	mov	r5,zero
  80962c:	9009883a 	mov	r4,r18
  809630:	0808b780 	call	808b78 <_sbrk_r>
  809634:	99000217 	ldw	r4,8(r19)
  809638:	014003c4 	movi	r5,15
  80963c:	1107c83a 	sub	r3,r2,r4
  809640:	28ffdd0e 	bge	r5,r3,8095b8 <__alt_mem_onchip_mem+0xff8015b8>
  809644:	01402074 	movhi	r5,129
  809648:	29442b04 	addi	r5,r5,4268
  80964c:	29400017 	ldw	r5,0(r5)
  809650:	18c00054 	ori	r3,r3,1
  809654:	20c00115 	stw	r3,4(r4)
  809658:	00c02074 	movhi	r3,129
  80965c:	1145c83a 	sub	r2,r2,r5
  809660:	18cb5d04 	addi	r3,r3,11636
  809664:	18800015 	stw	r2,0(r3)
  809668:	003fd306 	br	8095b8 <__alt_mem_onchip_mem+0xff8015b8>

0080966c <_free_r>:
  80966c:	28004126 	beq	r5,zero,809774 <_free_r+0x108>
  809670:	defffd04 	addi	sp,sp,-12
  809674:	dc400115 	stw	r17,4(sp)
  809678:	dc000015 	stw	r16,0(sp)
  80967c:	2023883a 	mov	r17,r4
  809680:	2821883a 	mov	r16,r5
  809684:	dfc00215 	stw	ra,8(sp)
  809688:	080b5f40 	call	80b5f4 <__malloc_lock>
  80968c:	81ffff17 	ldw	r7,-4(r16)
  809690:	00bfff84 	movi	r2,-2
  809694:	01002074 	movhi	r4,129
  809698:	81bffe04 	addi	r6,r16,-8
  80969c:	3884703a 	and	r2,r7,r2
  8096a0:	213e2c04 	addi	r4,r4,-1872
  8096a4:	308b883a 	add	r5,r6,r2
  8096a8:	2a400117 	ldw	r9,4(r5)
  8096ac:	22000217 	ldw	r8,8(r4)
  8096b0:	00ffff04 	movi	r3,-4
  8096b4:	48c6703a 	and	r3,r9,r3
  8096b8:	2a005726 	beq	r5,r8,809818 <_free_r+0x1ac>
  8096bc:	28c00115 	stw	r3,4(r5)
  8096c0:	39c0004c 	andi	r7,r7,1
  8096c4:	3800091e 	bne	r7,zero,8096ec <_free_r+0x80>
  8096c8:	823ffe17 	ldw	r8,-8(r16)
  8096cc:	22400204 	addi	r9,r4,8
  8096d0:	320dc83a 	sub	r6,r6,r8
  8096d4:	31c00217 	ldw	r7,8(r6)
  8096d8:	1205883a 	add	r2,r2,r8
  8096dc:	3a406526 	beq	r7,r9,809874 <_free_r+0x208>
  8096e0:	32000317 	ldw	r8,12(r6)
  8096e4:	3a000315 	stw	r8,12(r7)
  8096e8:	41c00215 	stw	r7,8(r8)
  8096ec:	28cf883a 	add	r7,r5,r3
  8096f0:	39c00117 	ldw	r7,4(r7)
  8096f4:	39c0004c 	andi	r7,r7,1
  8096f8:	38003a26 	beq	r7,zero,8097e4 <_free_r+0x178>
  8096fc:	10c00054 	ori	r3,r2,1
  809700:	30c00115 	stw	r3,4(r6)
  809704:	3087883a 	add	r3,r6,r2
  809708:	18800015 	stw	r2,0(r3)
  80970c:	00c07fc4 	movi	r3,511
  809710:	18801936 	bltu	r3,r2,809778 <_free_r+0x10c>
  809714:	1004d0fa 	srli	r2,r2,3
  809718:	01c00044 	movi	r7,1
  80971c:	21400117 	ldw	r5,4(r4)
  809720:	10c00044 	addi	r3,r2,1
  809724:	18c7883a 	add	r3,r3,r3
  809728:	1005d0ba 	srai	r2,r2,2
  80972c:	18c7883a 	add	r3,r3,r3
  809730:	18c7883a 	add	r3,r3,r3
  809734:	1907883a 	add	r3,r3,r4
  809738:	3884983a 	sll	r2,r7,r2
  80973c:	19c00017 	ldw	r7,0(r3)
  809740:	1a3ffe04 	addi	r8,r3,-8
  809744:	1144b03a 	or	r2,r2,r5
  809748:	32000315 	stw	r8,12(r6)
  80974c:	31c00215 	stw	r7,8(r6)
  809750:	20800115 	stw	r2,4(r4)
  809754:	19800015 	stw	r6,0(r3)
  809758:	39800315 	stw	r6,12(r7)
  80975c:	8809883a 	mov	r4,r17
  809760:	dfc00217 	ldw	ra,8(sp)
  809764:	dc400117 	ldw	r17,4(sp)
  809768:	dc000017 	ldw	r16,0(sp)
  80976c:	dec00304 	addi	sp,sp,12
  809770:	080b6181 	jmpi	80b618 <__malloc_unlock>
  809774:	f800283a 	ret
  809778:	100ad27a 	srli	r5,r2,9
  80977c:	00c00104 	movi	r3,4
  809780:	19404a36 	bltu	r3,r5,8098ac <_free_r+0x240>
  809784:	100ad1ba 	srli	r5,r2,6
  809788:	28c00e44 	addi	r3,r5,57
  80978c:	18c7883a 	add	r3,r3,r3
  809790:	29400e04 	addi	r5,r5,56
  809794:	18c7883a 	add	r3,r3,r3
  809798:	18c7883a 	add	r3,r3,r3
  80979c:	1909883a 	add	r4,r3,r4
  8097a0:	20c00017 	ldw	r3,0(r4)
  8097a4:	01c02074 	movhi	r7,129
  8097a8:	213ffe04 	addi	r4,r4,-8
  8097ac:	39fe2c04 	addi	r7,r7,-1872
  8097b0:	20c04426 	beq	r4,r3,8098c4 <_free_r+0x258>
  8097b4:	01ffff04 	movi	r7,-4
  8097b8:	19400117 	ldw	r5,4(r3)
  8097bc:	29ca703a 	and	r5,r5,r7
  8097c0:	1140022e 	bgeu	r2,r5,8097cc <_free_r+0x160>
  8097c4:	18c00217 	ldw	r3,8(r3)
  8097c8:	20fffb1e 	bne	r4,r3,8097b8 <__alt_mem_onchip_mem+0xff8017b8>
  8097cc:	19000317 	ldw	r4,12(r3)
  8097d0:	31000315 	stw	r4,12(r6)
  8097d4:	30c00215 	stw	r3,8(r6)
  8097d8:	21800215 	stw	r6,8(r4)
  8097dc:	19800315 	stw	r6,12(r3)
  8097e0:	003fde06 	br	80975c <__alt_mem_onchip_mem+0xff80175c>
  8097e4:	29c00217 	ldw	r7,8(r5)
  8097e8:	10c5883a 	add	r2,r2,r3
  8097ec:	00c02074 	movhi	r3,129
  8097f0:	18fe2e04 	addi	r3,r3,-1864
  8097f4:	38c03b26 	beq	r7,r3,8098e4 <_free_r+0x278>
  8097f8:	2a000317 	ldw	r8,12(r5)
  8097fc:	11400054 	ori	r5,r2,1
  809800:	3087883a 	add	r3,r6,r2
  809804:	3a000315 	stw	r8,12(r7)
  809808:	41c00215 	stw	r7,8(r8)
  80980c:	31400115 	stw	r5,4(r6)
  809810:	18800015 	stw	r2,0(r3)
  809814:	003fbd06 	br	80970c <__alt_mem_onchip_mem+0xff80170c>
  809818:	39c0004c 	andi	r7,r7,1
  80981c:	10c5883a 	add	r2,r2,r3
  809820:	3800071e 	bne	r7,zero,809840 <_free_r+0x1d4>
  809824:	81fffe17 	ldw	r7,-8(r16)
  809828:	31cdc83a 	sub	r6,r6,r7
  80982c:	30c00317 	ldw	r3,12(r6)
  809830:	31400217 	ldw	r5,8(r6)
  809834:	11c5883a 	add	r2,r2,r7
  809838:	28c00315 	stw	r3,12(r5)
  80983c:	19400215 	stw	r5,8(r3)
  809840:	10c00054 	ori	r3,r2,1
  809844:	30c00115 	stw	r3,4(r6)
  809848:	00c02074 	movhi	r3,129
  80984c:	18c42c04 	addi	r3,r3,4272
  809850:	18c00017 	ldw	r3,0(r3)
  809854:	21800215 	stw	r6,8(r4)
  809858:	10ffc036 	bltu	r2,r3,80975c <__alt_mem_onchip_mem+0xff80175c>
  80985c:	00802074 	movhi	r2,129
  809860:	108b5504 	addi	r2,r2,11604
  809864:	11400017 	ldw	r5,0(r2)
  809868:	8809883a 	mov	r4,r17
  80986c:	08095480 	call	809548 <_malloc_trim_r>
  809870:	003fba06 	br	80975c <__alt_mem_onchip_mem+0xff80175c>
  809874:	28c9883a 	add	r4,r5,r3
  809878:	21000117 	ldw	r4,4(r4)
  80987c:	2100004c 	andi	r4,r4,1
  809880:	2000391e 	bne	r4,zero,809968 <_free_r+0x2fc>
  809884:	29c00217 	ldw	r7,8(r5)
  809888:	29000317 	ldw	r4,12(r5)
  80988c:	1885883a 	add	r2,r3,r2
  809890:	10c00054 	ori	r3,r2,1
  809894:	39000315 	stw	r4,12(r7)
  809898:	21c00215 	stw	r7,8(r4)
  80989c:	30c00115 	stw	r3,4(r6)
  8098a0:	308d883a 	add	r6,r6,r2
  8098a4:	30800015 	stw	r2,0(r6)
  8098a8:	003fac06 	br	80975c <__alt_mem_onchip_mem+0xff80175c>
  8098ac:	00c00504 	movi	r3,20
  8098b0:	19401536 	bltu	r3,r5,809908 <_free_r+0x29c>
  8098b4:	28c01704 	addi	r3,r5,92
  8098b8:	18c7883a 	add	r3,r3,r3
  8098bc:	294016c4 	addi	r5,r5,91
  8098c0:	003fb406 	br	809794 <__alt_mem_onchip_mem+0xff801794>
  8098c4:	280bd0ba 	srai	r5,r5,2
  8098c8:	00c00044 	movi	r3,1
  8098cc:	38800117 	ldw	r2,4(r7)
  8098d0:	194a983a 	sll	r5,r3,r5
  8098d4:	2007883a 	mov	r3,r4
  8098d8:	2884b03a 	or	r2,r5,r2
  8098dc:	38800115 	stw	r2,4(r7)
  8098e0:	003fbb06 	br	8097d0 <__alt_mem_onchip_mem+0xff8017d0>
  8098e4:	21800515 	stw	r6,20(r4)
  8098e8:	21800415 	stw	r6,16(r4)
  8098ec:	10c00054 	ori	r3,r2,1
  8098f0:	31c00315 	stw	r7,12(r6)
  8098f4:	31c00215 	stw	r7,8(r6)
  8098f8:	30c00115 	stw	r3,4(r6)
  8098fc:	308d883a 	add	r6,r6,r2
  809900:	30800015 	stw	r2,0(r6)
  809904:	003f9506 	br	80975c <__alt_mem_onchip_mem+0xff80175c>
  809908:	00c01504 	movi	r3,84
  80990c:	19400536 	bltu	r3,r5,809924 <_free_r+0x2b8>
  809910:	100ad33a 	srli	r5,r2,12
  809914:	28c01bc4 	addi	r3,r5,111
  809918:	18c7883a 	add	r3,r3,r3
  80991c:	29401b84 	addi	r5,r5,110
  809920:	003f9c06 	br	809794 <__alt_mem_onchip_mem+0xff801794>
  809924:	00c05504 	movi	r3,340
  809928:	19400536 	bltu	r3,r5,809940 <_free_r+0x2d4>
  80992c:	100ad3fa 	srli	r5,r2,15
  809930:	28c01e04 	addi	r3,r5,120
  809934:	18c7883a 	add	r3,r3,r3
  809938:	29401dc4 	addi	r5,r5,119
  80993c:	003f9506 	br	809794 <__alt_mem_onchip_mem+0xff801794>
  809940:	00c15504 	movi	r3,1364
  809944:	19400536 	bltu	r3,r5,80995c <_free_r+0x2f0>
  809948:	100ad4ba 	srli	r5,r2,18
  80994c:	28c01f44 	addi	r3,r5,125
  809950:	18c7883a 	add	r3,r3,r3
  809954:	29401f04 	addi	r5,r5,124
  809958:	003f8e06 	br	809794 <__alt_mem_onchip_mem+0xff801794>
  80995c:	00c03f84 	movi	r3,254
  809960:	01401f84 	movi	r5,126
  809964:	003f8b06 	br	809794 <__alt_mem_onchip_mem+0xff801794>
  809968:	10c00054 	ori	r3,r2,1
  80996c:	30c00115 	stw	r3,4(r6)
  809970:	308d883a 	add	r6,r6,r2
  809974:	30800015 	stw	r2,0(r6)
  809978:	003f7806 	br	80975c <__alt_mem_onchip_mem+0xff80175c>

0080997c <__sfvwrite_r>:
  80997c:	30800217 	ldw	r2,8(r6)
  809980:	10006726 	beq	r2,zero,809b20 <__sfvwrite_r+0x1a4>
  809984:	28c0030b 	ldhu	r3,12(r5)
  809988:	defff404 	addi	sp,sp,-48
  80998c:	dd400715 	stw	r21,28(sp)
  809990:	dd000615 	stw	r20,24(sp)
  809994:	dc000215 	stw	r16,8(sp)
  809998:	dfc00b15 	stw	ra,44(sp)
  80999c:	df000a15 	stw	fp,40(sp)
  8099a0:	ddc00915 	stw	r23,36(sp)
  8099a4:	dd800815 	stw	r22,32(sp)
  8099a8:	dcc00515 	stw	r19,20(sp)
  8099ac:	dc800415 	stw	r18,16(sp)
  8099b0:	dc400315 	stw	r17,12(sp)
  8099b4:	1880020c 	andi	r2,r3,8
  8099b8:	2821883a 	mov	r16,r5
  8099bc:	202b883a 	mov	r21,r4
  8099c0:	3029883a 	mov	r20,r6
  8099c4:	10002726 	beq	r2,zero,809a64 <__sfvwrite_r+0xe8>
  8099c8:	28800417 	ldw	r2,16(r5)
  8099cc:	10002526 	beq	r2,zero,809a64 <__sfvwrite_r+0xe8>
  8099d0:	1880008c 	andi	r2,r3,2
  8099d4:	a4400017 	ldw	r17,0(r20)
  8099d8:	10002a26 	beq	r2,zero,809a84 <__sfvwrite_r+0x108>
  8099dc:	05a00034 	movhi	r22,32768
  8099e0:	0027883a 	mov	r19,zero
  8099e4:	0025883a 	mov	r18,zero
  8099e8:	b5bf0004 	addi	r22,r22,-1024
  8099ec:	980d883a 	mov	r6,r19
  8099f0:	a809883a 	mov	r4,r21
  8099f4:	90004626 	beq	r18,zero,809b10 <__sfvwrite_r+0x194>
  8099f8:	900f883a 	mov	r7,r18
  8099fc:	b480022e 	bgeu	r22,r18,809a08 <__sfvwrite_r+0x8c>
  809a00:	01e00034 	movhi	r7,32768
  809a04:	39ff0004 	addi	r7,r7,-1024
  809a08:	80800917 	ldw	r2,36(r16)
  809a0c:	81400717 	ldw	r5,28(r16)
  809a10:	103ee83a 	callr	r2
  809a14:	0080570e 	bge	zero,r2,809b74 <__sfvwrite_r+0x1f8>
  809a18:	a0c00217 	ldw	r3,8(r20)
  809a1c:	98a7883a 	add	r19,r19,r2
  809a20:	90a5c83a 	sub	r18,r18,r2
  809a24:	1885c83a 	sub	r2,r3,r2
  809a28:	a0800215 	stw	r2,8(r20)
  809a2c:	103fef1e 	bne	r2,zero,8099ec <__alt_mem_onchip_mem+0xff8019ec>
  809a30:	0005883a 	mov	r2,zero
  809a34:	dfc00b17 	ldw	ra,44(sp)
  809a38:	df000a17 	ldw	fp,40(sp)
  809a3c:	ddc00917 	ldw	r23,36(sp)
  809a40:	dd800817 	ldw	r22,32(sp)
  809a44:	dd400717 	ldw	r21,28(sp)
  809a48:	dd000617 	ldw	r20,24(sp)
  809a4c:	dcc00517 	ldw	r19,20(sp)
  809a50:	dc800417 	ldw	r18,16(sp)
  809a54:	dc400317 	ldw	r17,12(sp)
  809a58:	dc000217 	ldw	r16,8(sp)
  809a5c:	dec00c04 	addi	sp,sp,48
  809a60:	f800283a 	ret
  809a64:	800b883a 	mov	r5,r16
  809a68:	a809883a 	mov	r4,r21
  809a6c:	080a9c00 	call	80a9c0 <__swsetup_r>
  809a70:	1000eb1e 	bne	r2,zero,809e20 <__sfvwrite_r+0x4a4>
  809a74:	80c0030b 	ldhu	r3,12(r16)
  809a78:	a4400017 	ldw	r17,0(r20)
  809a7c:	1880008c 	andi	r2,r3,2
  809a80:	103fd61e 	bne	r2,zero,8099dc <__alt_mem_onchip_mem+0xff8019dc>
  809a84:	1880004c 	andi	r2,r3,1
  809a88:	10003f1e 	bne	r2,zero,809b88 <__sfvwrite_r+0x20c>
  809a8c:	0039883a 	mov	fp,zero
  809a90:	0025883a 	mov	r18,zero
  809a94:	90001a26 	beq	r18,zero,809b00 <__sfvwrite_r+0x184>
  809a98:	1880800c 	andi	r2,r3,512
  809a9c:	84c00217 	ldw	r19,8(r16)
  809aa0:	10002126 	beq	r2,zero,809b28 <__sfvwrite_r+0x1ac>
  809aa4:	982f883a 	mov	r23,r19
  809aa8:	94c09336 	bltu	r18,r19,809cf8 <__sfvwrite_r+0x37c>
  809aac:	1881200c 	andi	r2,r3,1152
  809ab0:	10009e1e 	bne	r2,zero,809d2c <__sfvwrite_r+0x3b0>
  809ab4:	81000017 	ldw	r4,0(r16)
  809ab8:	b80d883a 	mov	r6,r23
  809abc:	e00b883a 	mov	r5,fp
  809ac0:	080a2a00 	call	80a2a0 <memmove>
  809ac4:	80c00217 	ldw	r3,8(r16)
  809ac8:	81000017 	ldw	r4,0(r16)
  809acc:	9005883a 	mov	r2,r18
  809ad0:	1ce7c83a 	sub	r19,r3,r19
  809ad4:	25cf883a 	add	r7,r4,r23
  809ad8:	84c00215 	stw	r19,8(r16)
  809adc:	81c00015 	stw	r7,0(r16)
  809ae0:	a0c00217 	ldw	r3,8(r20)
  809ae4:	e0b9883a 	add	fp,fp,r2
  809ae8:	90a5c83a 	sub	r18,r18,r2
  809aec:	18a7c83a 	sub	r19,r3,r2
  809af0:	a4c00215 	stw	r19,8(r20)
  809af4:	983fce26 	beq	r19,zero,809a30 <__alt_mem_onchip_mem+0xff801a30>
  809af8:	80c0030b 	ldhu	r3,12(r16)
  809afc:	903fe61e 	bne	r18,zero,809a98 <__alt_mem_onchip_mem+0xff801a98>
  809b00:	8f000017 	ldw	fp,0(r17)
  809b04:	8c800117 	ldw	r18,4(r17)
  809b08:	8c400204 	addi	r17,r17,8
  809b0c:	003fe106 	br	809a94 <__alt_mem_onchip_mem+0xff801a94>
  809b10:	8cc00017 	ldw	r19,0(r17)
  809b14:	8c800117 	ldw	r18,4(r17)
  809b18:	8c400204 	addi	r17,r17,8
  809b1c:	003fb306 	br	8099ec <__alt_mem_onchip_mem+0xff8019ec>
  809b20:	0005883a 	mov	r2,zero
  809b24:	f800283a 	ret
  809b28:	81000017 	ldw	r4,0(r16)
  809b2c:	80800417 	ldw	r2,16(r16)
  809b30:	11005736 	bltu	r2,r4,809c90 <__sfvwrite_r+0x314>
  809b34:	85c00517 	ldw	r23,20(r16)
  809b38:	95c05536 	bltu	r18,r23,809c90 <__sfvwrite_r+0x314>
  809b3c:	00a00034 	movhi	r2,32768
  809b40:	10bfffc4 	addi	r2,r2,-1
  809b44:	9009883a 	mov	r4,r18
  809b48:	1480012e 	bgeu	r2,r18,809b50 <__sfvwrite_r+0x1d4>
  809b4c:	1009883a 	mov	r4,r2
  809b50:	b80b883a 	mov	r5,r23
  809b54:	080ac180 	call	80ac18 <__divsi3>
  809b58:	15cf383a 	mul	r7,r2,r23
  809b5c:	81400717 	ldw	r5,28(r16)
  809b60:	80800917 	ldw	r2,36(r16)
  809b64:	e00d883a 	mov	r6,fp
  809b68:	a809883a 	mov	r4,r21
  809b6c:	103ee83a 	callr	r2
  809b70:	00bfdb16 	blt	zero,r2,809ae0 <__alt_mem_onchip_mem+0xff801ae0>
  809b74:	8080030b 	ldhu	r2,12(r16)
  809b78:	10801014 	ori	r2,r2,64
  809b7c:	8080030d 	sth	r2,12(r16)
  809b80:	00bfffc4 	movi	r2,-1
  809b84:	003fab06 	br	809a34 <__alt_mem_onchip_mem+0xff801a34>
  809b88:	0027883a 	mov	r19,zero
  809b8c:	0011883a 	mov	r8,zero
  809b90:	0039883a 	mov	fp,zero
  809b94:	0025883a 	mov	r18,zero
  809b98:	90001f26 	beq	r18,zero,809c18 <__sfvwrite_r+0x29c>
  809b9c:	40005a26 	beq	r8,zero,809d08 <__sfvwrite_r+0x38c>
  809ba0:	982d883a 	mov	r22,r19
  809ba4:	94c0012e 	bgeu	r18,r19,809bac <__sfvwrite_r+0x230>
  809ba8:	902d883a 	mov	r22,r18
  809bac:	81000017 	ldw	r4,0(r16)
  809bb0:	80800417 	ldw	r2,16(r16)
  809bb4:	b02f883a 	mov	r23,r22
  809bb8:	81c00517 	ldw	r7,20(r16)
  809bbc:	1100032e 	bgeu	r2,r4,809bcc <__sfvwrite_r+0x250>
  809bc0:	80c00217 	ldw	r3,8(r16)
  809bc4:	38c7883a 	add	r3,r7,r3
  809bc8:	1d801816 	blt	r3,r22,809c2c <__sfvwrite_r+0x2b0>
  809bcc:	b1c03e16 	blt	r22,r7,809cc8 <__sfvwrite_r+0x34c>
  809bd0:	80800917 	ldw	r2,36(r16)
  809bd4:	81400717 	ldw	r5,28(r16)
  809bd8:	e00d883a 	mov	r6,fp
  809bdc:	da000115 	stw	r8,4(sp)
  809be0:	a809883a 	mov	r4,r21
  809be4:	103ee83a 	callr	r2
  809be8:	102f883a 	mov	r23,r2
  809bec:	da000117 	ldw	r8,4(sp)
  809bf0:	00bfe00e 	bge	zero,r2,809b74 <__alt_mem_onchip_mem+0xff801b74>
  809bf4:	9de7c83a 	sub	r19,r19,r23
  809bf8:	98001f26 	beq	r19,zero,809c78 <__sfvwrite_r+0x2fc>
  809bfc:	a0800217 	ldw	r2,8(r20)
  809c00:	e5f9883a 	add	fp,fp,r23
  809c04:	95e5c83a 	sub	r18,r18,r23
  809c08:	15efc83a 	sub	r23,r2,r23
  809c0c:	a5c00215 	stw	r23,8(r20)
  809c10:	b83f8726 	beq	r23,zero,809a30 <__alt_mem_onchip_mem+0xff801a30>
  809c14:	903fe11e 	bne	r18,zero,809b9c <__alt_mem_onchip_mem+0xff801b9c>
  809c18:	8f000017 	ldw	fp,0(r17)
  809c1c:	8c800117 	ldw	r18,4(r17)
  809c20:	0011883a 	mov	r8,zero
  809c24:	8c400204 	addi	r17,r17,8
  809c28:	003fdb06 	br	809b98 <__alt_mem_onchip_mem+0xff801b98>
  809c2c:	180d883a 	mov	r6,r3
  809c30:	e00b883a 	mov	r5,fp
  809c34:	da000115 	stw	r8,4(sp)
  809c38:	d8c00015 	stw	r3,0(sp)
  809c3c:	080a2a00 	call	80a2a0 <memmove>
  809c40:	d8c00017 	ldw	r3,0(sp)
  809c44:	80800017 	ldw	r2,0(r16)
  809c48:	800b883a 	mov	r5,r16
  809c4c:	a809883a 	mov	r4,r21
  809c50:	10c5883a 	add	r2,r2,r3
  809c54:	80800015 	stw	r2,0(r16)
  809c58:	d8c00015 	stw	r3,0(sp)
  809c5c:	08090700 	call	809070 <_fflush_r>
  809c60:	d8c00017 	ldw	r3,0(sp)
  809c64:	da000117 	ldw	r8,4(sp)
  809c68:	103fc21e 	bne	r2,zero,809b74 <__alt_mem_onchip_mem+0xff801b74>
  809c6c:	182f883a 	mov	r23,r3
  809c70:	9de7c83a 	sub	r19,r19,r23
  809c74:	983fe11e 	bne	r19,zero,809bfc <__alt_mem_onchip_mem+0xff801bfc>
  809c78:	800b883a 	mov	r5,r16
  809c7c:	a809883a 	mov	r4,r21
  809c80:	08090700 	call	809070 <_fflush_r>
  809c84:	103fbb1e 	bne	r2,zero,809b74 <__alt_mem_onchip_mem+0xff801b74>
  809c88:	0011883a 	mov	r8,zero
  809c8c:	003fdb06 	br	809bfc <__alt_mem_onchip_mem+0xff801bfc>
  809c90:	94c0012e 	bgeu	r18,r19,809c98 <__sfvwrite_r+0x31c>
  809c94:	9027883a 	mov	r19,r18
  809c98:	980d883a 	mov	r6,r19
  809c9c:	e00b883a 	mov	r5,fp
  809ca0:	080a2a00 	call	80a2a0 <memmove>
  809ca4:	80800217 	ldw	r2,8(r16)
  809ca8:	80c00017 	ldw	r3,0(r16)
  809cac:	14c5c83a 	sub	r2,r2,r19
  809cb0:	1cc7883a 	add	r3,r3,r19
  809cb4:	80800215 	stw	r2,8(r16)
  809cb8:	80c00015 	stw	r3,0(r16)
  809cbc:	10004326 	beq	r2,zero,809dcc <__sfvwrite_r+0x450>
  809cc0:	9805883a 	mov	r2,r19
  809cc4:	003f8606 	br	809ae0 <__alt_mem_onchip_mem+0xff801ae0>
  809cc8:	b00d883a 	mov	r6,r22
  809ccc:	e00b883a 	mov	r5,fp
  809cd0:	da000115 	stw	r8,4(sp)
  809cd4:	080a2a00 	call	80a2a0 <memmove>
  809cd8:	80800217 	ldw	r2,8(r16)
  809cdc:	80c00017 	ldw	r3,0(r16)
  809ce0:	da000117 	ldw	r8,4(sp)
  809ce4:	1585c83a 	sub	r2,r2,r22
  809ce8:	1dad883a 	add	r22,r3,r22
  809cec:	80800215 	stw	r2,8(r16)
  809cf0:	85800015 	stw	r22,0(r16)
  809cf4:	003fbf06 	br	809bf4 <__alt_mem_onchip_mem+0xff801bf4>
  809cf8:	81000017 	ldw	r4,0(r16)
  809cfc:	9027883a 	mov	r19,r18
  809d00:	902f883a 	mov	r23,r18
  809d04:	003f6c06 	br	809ab8 <__alt_mem_onchip_mem+0xff801ab8>
  809d08:	900d883a 	mov	r6,r18
  809d0c:	01400284 	movi	r5,10
  809d10:	e009883a 	mov	r4,fp
  809d14:	080a0740 	call	80a074 <memchr>
  809d18:	10003e26 	beq	r2,zero,809e14 <__sfvwrite_r+0x498>
  809d1c:	10800044 	addi	r2,r2,1
  809d20:	1727c83a 	sub	r19,r2,fp
  809d24:	02000044 	movi	r8,1
  809d28:	003f9d06 	br	809ba0 <__alt_mem_onchip_mem+0xff801ba0>
  809d2c:	80800517 	ldw	r2,20(r16)
  809d30:	81400417 	ldw	r5,16(r16)
  809d34:	81c00017 	ldw	r7,0(r16)
  809d38:	10a7883a 	add	r19,r2,r2
  809d3c:	9885883a 	add	r2,r19,r2
  809d40:	1026d7fa 	srli	r19,r2,31
  809d44:	396dc83a 	sub	r22,r7,r5
  809d48:	b1000044 	addi	r4,r22,1
  809d4c:	9885883a 	add	r2,r19,r2
  809d50:	1027d07a 	srai	r19,r2,1
  809d54:	2485883a 	add	r2,r4,r18
  809d58:	980d883a 	mov	r6,r19
  809d5c:	9880022e 	bgeu	r19,r2,809d68 <__sfvwrite_r+0x3ec>
  809d60:	1027883a 	mov	r19,r2
  809d64:	100d883a 	mov	r6,r2
  809d68:	18c1000c 	andi	r3,r3,1024
  809d6c:	18001c26 	beq	r3,zero,809de0 <__sfvwrite_r+0x464>
  809d70:	300b883a 	mov	r5,r6
  809d74:	a809883a 	mov	r4,r21
  809d78:	0807f200 	call	807f20 <_malloc_r>
  809d7c:	102f883a 	mov	r23,r2
  809d80:	10002926 	beq	r2,zero,809e28 <__sfvwrite_r+0x4ac>
  809d84:	81400417 	ldw	r5,16(r16)
  809d88:	b00d883a 	mov	r6,r22
  809d8c:	1009883a 	mov	r4,r2
  809d90:	080a1580 	call	80a158 <memcpy>
  809d94:	8080030b 	ldhu	r2,12(r16)
  809d98:	00fedfc4 	movi	r3,-1153
  809d9c:	10c4703a 	and	r2,r2,r3
  809da0:	10802014 	ori	r2,r2,128
  809da4:	8080030d 	sth	r2,12(r16)
  809da8:	bd89883a 	add	r4,r23,r22
  809dac:	9d8fc83a 	sub	r7,r19,r22
  809db0:	85c00415 	stw	r23,16(r16)
  809db4:	84c00515 	stw	r19,20(r16)
  809db8:	81000015 	stw	r4,0(r16)
  809dbc:	9027883a 	mov	r19,r18
  809dc0:	81c00215 	stw	r7,8(r16)
  809dc4:	902f883a 	mov	r23,r18
  809dc8:	003f3b06 	br	809ab8 <__alt_mem_onchip_mem+0xff801ab8>
  809dcc:	800b883a 	mov	r5,r16
  809dd0:	a809883a 	mov	r4,r21
  809dd4:	08090700 	call	809070 <_fflush_r>
  809dd8:	103fb926 	beq	r2,zero,809cc0 <__alt_mem_onchip_mem+0xff801cc0>
  809ddc:	003f6506 	br	809b74 <__alt_mem_onchip_mem+0xff801b74>
  809de0:	a809883a 	mov	r4,r21
  809de4:	080a45c0 	call	80a45c <_realloc_r>
  809de8:	102f883a 	mov	r23,r2
  809dec:	103fee1e 	bne	r2,zero,809da8 <__alt_mem_onchip_mem+0xff801da8>
  809df0:	81400417 	ldw	r5,16(r16)
  809df4:	a809883a 	mov	r4,r21
  809df8:	080966c0 	call	80966c <_free_r>
  809dfc:	8080030b 	ldhu	r2,12(r16)
  809e00:	00ffdfc4 	movi	r3,-129
  809e04:	1884703a 	and	r2,r3,r2
  809e08:	00c00304 	movi	r3,12
  809e0c:	a8c00015 	stw	r3,0(r21)
  809e10:	003f5906 	br	809b78 <__alt_mem_onchip_mem+0xff801b78>
  809e14:	94c00044 	addi	r19,r18,1
  809e18:	02000044 	movi	r8,1
  809e1c:	003f6006 	br	809ba0 <__alt_mem_onchip_mem+0xff801ba0>
  809e20:	00bfffc4 	movi	r2,-1
  809e24:	003f0306 	br	809a34 <__alt_mem_onchip_mem+0xff801a34>
  809e28:	00800304 	movi	r2,12
  809e2c:	a8800015 	stw	r2,0(r21)
  809e30:	8080030b 	ldhu	r2,12(r16)
  809e34:	003f5006 	br	809b78 <__alt_mem_onchip_mem+0xff801b78>

00809e38 <_fwalk>:
  809e38:	defff704 	addi	sp,sp,-36
  809e3c:	dd000415 	stw	r20,16(sp)
  809e40:	dfc00815 	stw	ra,32(sp)
  809e44:	ddc00715 	stw	r23,28(sp)
  809e48:	dd800615 	stw	r22,24(sp)
  809e4c:	dd400515 	stw	r21,20(sp)
  809e50:	dcc00315 	stw	r19,12(sp)
  809e54:	dc800215 	stw	r18,8(sp)
  809e58:	dc400115 	stw	r17,4(sp)
  809e5c:	dc000015 	stw	r16,0(sp)
  809e60:	2500b804 	addi	r20,r4,736
  809e64:	a0002326 	beq	r20,zero,809ef4 <_fwalk+0xbc>
  809e68:	282b883a 	mov	r21,r5
  809e6c:	002f883a 	mov	r23,zero
  809e70:	05800044 	movi	r22,1
  809e74:	04ffffc4 	movi	r19,-1
  809e78:	a4400117 	ldw	r17,4(r20)
  809e7c:	a4800217 	ldw	r18,8(r20)
  809e80:	8c7fffc4 	addi	r17,r17,-1
  809e84:	88000d16 	blt	r17,zero,809ebc <_fwalk+0x84>
  809e88:	94000304 	addi	r16,r18,12
  809e8c:	94800384 	addi	r18,r18,14
  809e90:	8080000b 	ldhu	r2,0(r16)
  809e94:	8c7fffc4 	addi	r17,r17,-1
  809e98:	813ffd04 	addi	r4,r16,-12
  809e9c:	b080042e 	bgeu	r22,r2,809eb0 <_fwalk+0x78>
  809ea0:	9080000f 	ldh	r2,0(r18)
  809ea4:	14c00226 	beq	r2,r19,809eb0 <_fwalk+0x78>
  809ea8:	a83ee83a 	callr	r21
  809eac:	b8aeb03a 	or	r23,r23,r2
  809eb0:	84001a04 	addi	r16,r16,104
  809eb4:	94801a04 	addi	r18,r18,104
  809eb8:	8cfff51e 	bne	r17,r19,809e90 <__alt_mem_onchip_mem+0xff801e90>
  809ebc:	a5000017 	ldw	r20,0(r20)
  809ec0:	a03fed1e 	bne	r20,zero,809e78 <__alt_mem_onchip_mem+0xff801e78>
  809ec4:	b805883a 	mov	r2,r23
  809ec8:	dfc00817 	ldw	ra,32(sp)
  809ecc:	ddc00717 	ldw	r23,28(sp)
  809ed0:	dd800617 	ldw	r22,24(sp)
  809ed4:	dd400517 	ldw	r21,20(sp)
  809ed8:	dd000417 	ldw	r20,16(sp)
  809edc:	dcc00317 	ldw	r19,12(sp)
  809ee0:	dc800217 	ldw	r18,8(sp)
  809ee4:	dc400117 	ldw	r17,4(sp)
  809ee8:	dc000017 	ldw	r16,0(sp)
  809eec:	dec00904 	addi	sp,sp,36
  809ef0:	f800283a 	ret
  809ef4:	002f883a 	mov	r23,zero
  809ef8:	003ff206 	br	809ec4 <__alt_mem_onchip_mem+0xff801ec4>

00809efc <_fwalk_reent>:
  809efc:	defff704 	addi	sp,sp,-36
  809f00:	dd000415 	stw	r20,16(sp)
  809f04:	dfc00815 	stw	ra,32(sp)
  809f08:	ddc00715 	stw	r23,28(sp)
  809f0c:	dd800615 	stw	r22,24(sp)
  809f10:	dd400515 	stw	r21,20(sp)
  809f14:	dcc00315 	stw	r19,12(sp)
  809f18:	dc800215 	stw	r18,8(sp)
  809f1c:	dc400115 	stw	r17,4(sp)
  809f20:	dc000015 	stw	r16,0(sp)
  809f24:	2500b804 	addi	r20,r4,736
  809f28:	a0002326 	beq	r20,zero,809fb8 <_fwalk_reent+0xbc>
  809f2c:	282b883a 	mov	r21,r5
  809f30:	2027883a 	mov	r19,r4
  809f34:	002f883a 	mov	r23,zero
  809f38:	05800044 	movi	r22,1
  809f3c:	04bfffc4 	movi	r18,-1
  809f40:	a4400117 	ldw	r17,4(r20)
  809f44:	a4000217 	ldw	r16,8(r20)
  809f48:	8c7fffc4 	addi	r17,r17,-1
  809f4c:	88000c16 	blt	r17,zero,809f80 <_fwalk_reent+0x84>
  809f50:	84000304 	addi	r16,r16,12
  809f54:	8080000b 	ldhu	r2,0(r16)
  809f58:	8c7fffc4 	addi	r17,r17,-1
  809f5c:	817ffd04 	addi	r5,r16,-12
  809f60:	b080052e 	bgeu	r22,r2,809f78 <_fwalk_reent+0x7c>
  809f64:	8080008f 	ldh	r2,2(r16)
  809f68:	9809883a 	mov	r4,r19
  809f6c:	14800226 	beq	r2,r18,809f78 <_fwalk_reent+0x7c>
  809f70:	a83ee83a 	callr	r21
  809f74:	b8aeb03a 	or	r23,r23,r2
  809f78:	84001a04 	addi	r16,r16,104
  809f7c:	8cbff51e 	bne	r17,r18,809f54 <__alt_mem_onchip_mem+0xff801f54>
  809f80:	a5000017 	ldw	r20,0(r20)
  809f84:	a03fee1e 	bne	r20,zero,809f40 <__alt_mem_onchip_mem+0xff801f40>
  809f88:	b805883a 	mov	r2,r23
  809f8c:	dfc00817 	ldw	ra,32(sp)
  809f90:	ddc00717 	ldw	r23,28(sp)
  809f94:	dd800617 	ldw	r22,24(sp)
  809f98:	dd400517 	ldw	r21,20(sp)
  809f9c:	dd000417 	ldw	r20,16(sp)
  809fa0:	dcc00317 	ldw	r19,12(sp)
  809fa4:	dc800217 	ldw	r18,8(sp)
  809fa8:	dc400117 	ldw	r17,4(sp)
  809fac:	dc000017 	ldw	r16,0(sp)
  809fb0:	dec00904 	addi	sp,sp,36
  809fb4:	f800283a 	ret
  809fb8:	002f883a 	mov	r23,zero
  809fbc:	003ff206 	br	809f88 <__alt_mem_onchip_mem+0xff801f88>

00809fc0 <_isatty_r>:
  809fc0:	defffd04 	addi	sp,sp,-12
  809fc4:	dc000015 	stw	r16,0(sp)
  809fc8:	04002074 	movhi	r16,129
  809fcc:	dc400115 	stw	r17,4(sp)
  809fd0:	840b5204 	addi	r16,r16,11592
  809fd4:	2023883a 	mov	r17,r4
  809fd8:	2809883a 	mov	r4,r5
  809fdc:	dfc00215 	stw	ra,8(sp)
  809fe0:	80000015 	stw	zero,0(r16)
  809fe4:	080b2d80 	call	80b2d8 <isatty>
  809fe8:	00ffffc4 	movi	r3,-1
  809fec:	10c00526 	beq	r2,r3,80a004 <_isatty_r+0x44>
  809ff0:	dfc00217 	ldw	ra,8(sp)
  809ff4:	dc400117 	ldw	r17,4(sp)
  809ff8:	dc000017 	ldw	r16,0(sp)
  809ffc:	dec00304 	addi	sp,sp,12
  80a000:	f800283a 	ret
  80a004:	80c00017 	ldw	r3,0(r16)
  80a008:	183ff926 	beq	r3,zero,809ff0 <__alt_mem_onchip_mem+0xff801ff0>
  80a00c:	88c00015 	stw	r3,0(r17)
  80a010:	003ff706 	br	809ff0 <__alt_mem_onchip_mem+0xff801ff0>

0080a014 <_lseek_r>:
  80a014:	defffd04 	addi	sp,sp,-12
  80a018:	2805883a 	mov	r2,r5
  80a01c:	dc000015 	stw	r16,0(sp)
  80a020:	04002074 	movhi	r16,129
  80a024:	dc400115 	stw	r17,4(sp)
  80a028:	300b883a 	mov	r5,r6
  80a02c:	840b5204 	addi	r16,r16,11592
  80a030:	2023883a 	mov	r17,r4
  80a034:	380d883a 	mov	r6,r7
  80a038:	1009883a 	mov	r4,r2
  80a03c:	dfc00215 	stw	ra,8(sp)
  80a040:	80000015 	stw	zero,0(r16)
  80a044:	080b4a40 	call	80b4a4 <lseek>
  80a048:	00ffffc4 	movi	r3,-1
  80a04c:	10c00526 	beq	r2,r3,80a064 <_lseek_r+0x50>
  80a050:	dfc00217 	ldw	ra,8(sp)
  80a054:	dc400117 	ldw	r17,4(sp)
  80a058:	dc000017 	ldw	r16,0(sp)
  80a05c:	dec00304 	addi	sp,sp,12
  80a060:	f800283a 	ret
  80a064:	80c00017 	ldw	r3,0(r16)
  80a068:	183ff926 	beq	r3,zero,80a050 <__alt_mem_onchip_mem+0xff802050>
  80a06c:	88c00015 	stw	r3,0(r17)
  80a070:	003ff706 	br	80a050 <__alt_mem_onchip_mem+0xff802050>

0080a074 <memchr>:
  80a074:	208000cc 	andi	r2,r4,3
  80a078:	280f883a 	mov	r7,r5
  80a07c:	10003426 	beq	r2,zero,80a150 <memchr+0xdc>
  80a080:	30bfffc4 	addi	r2,r6,-1
  80a084:	30001a26 	beq	r6,zero,80a0f0 <memchr+0x7c>
  80a088:	20c00003 	ldbu	r3,0(r4)
  80a08c:	29803fcc 	andi	r6,r5,255
  80a090:	30c0051e 	bne	r6,r3,80a0a8 <memchr+0x34>
  80a094:	00001806 	br	80a0f8 <memchr+0x84>
  80a098:	10001526 	beq	r2,zero,80a0f0 <memchr+0x7c>
  80a09c:	20c00003 	ldbu	r3,0(r4)
  80a0a0:	10bfffc4 	addi	r2,r2,-1
  80a0a4:	30c01426 	beq	r6,r3,80a0f8 <memchr+0x84>
  80a0a8:	21000044 	addi	r4,r4,1
  80a0ac:	20c000cc 	andi	r3,r4,3
  80a0b0:	183ff91e 	bne	r3,zero,80a098 <__alt_mem_onchip_mem+0xff802098>
  80a0b4:	020000c4 	movi	r8,3
  80a0b8:	40801136 	bltu	r8,r2,80a100 <memchr+0x8c>
  80a0bc:	10000c26 	beq	r2,zero,80a0f0 <memchr+0x7c>
  80a0c0:	20c00003 	ldbu	r3,0(r4)
  80a0c4:	29403fcc 	andi	r5,r5,255
  80a0c8:	28c00b26 	beq	r5,r3,80a0f8 <memchr+0x84>
  80a0cc:	20c00044 	addi	r3,r4,1
  80a0d0:	39803fcc 	andi	r6,r7,255
  80a0d4:	2089883a 	add	r4,r4,r2
  80a0d8:	00000306 	br	80a0e8 <memchr+0x74>
  80a0dc:	18c00044 	addi	r3,r3,1
  80a0e0:	197fffc3 	ldbu	r5,-1(r3)
  80a0e4:	31400526 	beq	r6,r5,80a0fc <memchr+0x88>
  80a0e8:	1805883a 	mov	r2,r3
  80a0ec:	20fffb1e 	bne	r4,r3,80a0dc <__alt_mem_onchip_mem+0xff8020dc>
  80a0f0:	0005883a 	mov	r2,zero
  80a0f4:	f800283a 	ret
  80a0f8:	2005883a 	mov	r2,r4
  80a0fc:	f800283a 	ret
  80a100:	28c03fcc 	andi	r3,r5,255
  80a104:	1812923a 	slli	r9,r3,8
  80a108:	02ffbff4 	movhi	r11,65279
  80a10c:	02a02074 	movhi	r10,32897
  80a110:	48d2b03a 	or	r9,r9,r3
  80a114:	4806943a 	slli	r3,r9,16
  80a118:	5affbfc4 	addi	r11,r11,-257
  80a11c:	52a02004 	addi	r10,r10,-32640
  80a120:	48d2b03a 	or	r9,r9,r3
  80a124:	20c00017 	ldw	r3,0(r4)
  80a128:	48c6f03a 	xor	r3,r9,r3
  80a12c:	1acd883a 	add	r6,r3,r11
  80a130:	00c6303a 	nor	r3,zero,r3
  80a134:	30c6703a 	and	r3,r6,r3
  80a138:	1a86703a 	and	r3,r3,r10
  80a13c:	183fe01e 	bne	r3,zero,80a0c0 <__alt_mem_onchip_mem+0xff8020c0>
  80a140:	10bfff04 	addi	r2,r2,-4
  80a144:	21000104 	addi	r4,r4,4
  80a148:	40bff636 	bltu	r8,r2,80a124 <__alt_mem_onchip_mem+0xff802124>
  80a14c:	003fdb06 	br	80a0bc <__alt_mem_onchip_mem+0xff8020bc>
  80a150:	3005883a 	mov	r2,r6
  80a154:	003fd706 	br	80a0b4 <__alt_mem_onchip_mem+0xff8020b4>

0080a158 <memcpy>:
  80a158:	defffd04 	addi	sp,sp,-12
  80a15c:	dfc00215 	stw	ra,8(sp)
  80a160:	dc400115 	stw	r17,4(sp)
  80a164:	dc000015 	stw	r16,0(sp)
  80a168:	00c003c4 	movi	r3,15
  80a16c:	2005883a 	mov	r2,r4
  80a170:	1980452e 	bgeu	r3,r6,80a288 <memcpy+0x130>
  80a174:	2906b03a 	or	r3,r5,r4
  80a178:	18c000cc 	andi	r3,r3,3
  80a17c:	1800441e 	bne	r3,zero,80a290 <memcpy+0x138>
  80a180:	347ffc04 	addi	r17,r6,-16
  80a184:	8822d13a 	srli	r17,r17,4
  80a188:	28c00104 	addi	r3,r5,4
  80a18c:	23400104 	addi	r13,r4,4
  80a190:	8820913a 	slli	r16,r17,4
  80a194:	2b000204 	addi	r12,r5,8
  80a198:	22c00204 	addi	r11,r4,8
  80a19c:	84000504 	addi	r16,r16,20
  80a1a0:	2a800304 	addi	r10,r5,12
  80a1a4:	22400304 	addi	r9,r4,12
  80a1a8:	2c21883a 	add	r16,r5,r16
  80a1ac:	2811883a 	mov	r8,r5
  80a1b0:	200f883a 	mov	r7,r4
  80a1b4:	41000017 	ldw	r4,0(r8)
  80a1b8:	1fc00017 	ldw	ra,0(r3)
  80a1bc:	63c00017 	ldw	r15,0(r12)
  80a1c0:	39000015 	stw	r4,0(r7)
  80a1c4:	53800017 	ldw	r14,0(r10)
  80a1c8:	6fc00015 	stw	ra,0(r13)
  80a1cc:	5bc00015 	stw	r15,0(r11)
  80a1d0:	4b800015 	stw	r14,0(r9)
  80a1d4:	18c00404 	addi	r3,r3,16
  80a1d8:	39c00404 	addi	r7,r7,16
  80a1dc:	42000404 	addi	r8,r8,16
  80a1e0:	6b400404 	addi	r13,r13,16
  80a1e4:	63000404 	addi	r12,r12,16
  80a1e8:	5ac00404 	addi	r11,r11,16
  80a1ec:	52800404 	addi	r10,r10,16
  80a1f0:	4a400404 	addi	r9,r9,16
  80a1f4:	1c3fef1e 	bne	r3,r16,80a1b4 <__alt_mem_onchip_mem+0xff8021b4>
  80a1f8:	89c00044 	addi	r7,r17,1
  80a1fc:	380e913a 	slli	r7,r7,4
  80a200:	310003cc 	andi	r4,r6,15
  80a204:	02c000c4 	movi	r11,3
  80a208:	11c7883a 	add	r3,r2,r7
  80a20c:	29cb883a 	add	r5,r5,r7
  80a210:	5900212e 	bgeu	r11,r4,80a298 <memcpy+0x140>
  80a214:	1813883a 	mov	r9,r3
  80a218:	2811883a 	mov	r8,r5
  80a21c:	200f883a 	mov	r7,r4
  80a220:	42800017 	ldw	r10,0(r8)
  80a224:	4a400104 	addi	r9,r9,4
  80a228:	39ffff04 	addi	r7,r7,-4
  80a22c:	4abfff15 	stw	r10,-4(r9)
  80a230:	42000104 	addi	r8,r8,4
  80a234:	59fffa36 	bltu	r11,r7,80a220 <__alt_mem_onchip_mem+0xff802220>
  80a238:	213fff04 	addi	r4,r4,-4
  80a23c:	2008d0ba 	srli	r4,r4,2
  80a240:	318000cc 	andi	r6,r6,3
  80a244:	21000044 	addi	r4,r4,1
  80a248:	2109883a 	add	r4,r4,r4
  80a24c:	2109883a 	add	r4,r4,r4
  80a250:	1907883a 	add	r3,r3,r4
  80a254:	290b883a 	add	r5,r5,r4
  80a258:	30000626 	beq	r6,zero,80a274 <memcpy+0x11c>
  80a25c:	198d883a 	add	r6,r3,r6
  80a260:	29c00003 	ldbu	r7,0(r5)
  80a264:	18c00044 	addi	r3,r3,1
  80a268:	29400044 	addi	r5,r5,1
  80a26c:	19ffffc5 	stb	r7,-1(r3)
  80a270:	19bffb1e 	bne	r3,r6,80a260 <__alt_mem_onchip_mem+0xff802260>
  80a274:	dfc00217 	ldw	ra,8(sp)
  80a278:	dc400117 	ldw	r17,4(sp)
  80a27c:	dc000017 	ldw	r16,0(sp)
  80a280:	dec00304 	addi	sp,sp,12
  80a284:	f800283a 	ret
  80a288:	2007883a 	mov	r3,r4
  80a28c:	003ff206 	br	80a258 <__alt_mem_onchip_mem+0xff802258>
  80a290:	2007883a 	mov	r3,r4
  80a294:	003ff106 	br	80a25c <__alt_mem_onchip_mem+0xff80225c>
  80a298:	200d883a 	mov	r6,r4
  80a29c:	003fee06 	br	80a258 <__alt_mem_onchip_mem+0xff802258>

0080a2a0 <memmove>:
  80a2a0:	2005883a 	mov	r2,r4
  80a2a4:	29000b2e 	bgeu	r5,r4,80a2d4 <memmove+0x34>
  80a2a8:	298f883a 	add	r7,r5,r6
  80a2ac:	21c0092e 	bgeu	r4,r7,80a2d4 <memmove+0x34>
  80a2b0:	2187883a 	add	r3,r4,r6
  80a2b4:	198bc83a 	sub	r5,r3,r6
  80a2b8:	30004826 	beq	r6,zero,80a3dc <memmove+0x13c>
  80a2bc:	39ffffc4 	addi	r7,r7,-1
  80a2c0:	39000003 	ldbu	r4,0(r7)
  80a2c4:	18ffffc4 	addi	r3,r3,-1
  80a2c8:	19000005 	stb	r4,0(r3)
  80a2cc:	28fffb1e 	bne	r5,r3,80a2bc <__alt_mem_onchip_mem+0xff8022bc>
  80a2d0:	f800283a 	ret
  80a2d4:	00c003c4 	movi	r3,15
  80a2d8:	1980412e 	bgeu	r3,r6,80a3e0 <memmove+0x140>
  80a2dc:	2886b03a 	or	r3,r5,r2
  80a2e0:	18c000cc 	andi	r3,r3,3
  80a2e4:	1800401e 	bne	r3,zero,80a3e8 <memmove+0x148>
  80a2e8:	33fffc04 	addi	r15,r6,-16
  80a2ec:	781ed13a 	srli	r15,r15,4
  80a2f0:	28c00104 	addi	r3,r5,4
  80a2f4:	13400104 	addi	r13,r2,4
  80a2f8:	781c913a 	slli	r14,r15,4
  80a2fc:	2b000204 	addi	r12,r5,8
  80a300:	12c00204 	addi	r11,r2,8
  80a304:	73800504 	addi	r14,r14,20
  80a308:	2a800304 	addi	r10,r5,12
  80a30c:	12400304 	addi	r9,r2,12
  80a310:	2b9d883a 	add	r14,r5,r14
  80a314:	2811883a 	mov	r8,r5
  80a318:	100f883a 	mov	r7,r2
  80a31c:	41000017 	ldw	r4,0(r8)
  80a320:	39c00404 	addi	r7,r7,16
  80a324:	18c00404 	addi	r3,r3,16
  80a328:	393ffc15 	stw	r4,-16(r7)
  80a32c:	193ffc17 	ldw	r4,-16(r3)
  80a330:	6b400404 	addi	r13,r13,16
  80a334:	5ac00404 	addi	r11,r11,16
  80a338:	693ffc15 	stw	r4,-16(r13)
  80a33c:	61000017 	ldw	r4,0(r12)
  80a340:	4a400404 	addi	r9,r9,16
  80a344:	42000404 	addi	r8,r8,16
  80a348:	593ffc15 	stw	r4,-16(r11)
  80a34c:	51000017 	ldw	r4,0(r10)
  80a350:	63000404 	addi	r12,r12,16
  80a354:	52800404 	addi	r10,r10,16
  80a358:	493ffc15 	stw	r4,-16(r9)
  80a35c:	1bbfef1e 	bne	r3,r14,80a31c <__alt_mem_onchip_mem+0xff80231c>
  80a360:	79000044 	addi	r4,r15,1
  80a364:	2008913a 	slli	r4,r4,4
  80a368:	328003cc 	andi	r10,r6,15
  80a36c:	02c000c4 	movi	r11,3
  80a370:	1107883a 	add	r3,r2,r4
  80a374:	290b883a 	add	r5,r5,r4
  80a378:	5a801e2e 	bgeu	r11,r10,80a3f4 <memmove+0x154>
  80a37c:	1813883a 	mov	r9,r3
  80a380:	2811883a 	mov	r8,r5
  80a384:	500f883a 	mov	r7,r10
  80a388:	41000017 	ldw	r4,0(r8)
  80a38c:	4a400104 	addi	r9,r9,4
  80a390:	39ffff04 	addi	r7,r7,-4
  80a394:	493fff15 	stw	r4,-4(r9)
  80a398:	42000104 	addi	r8,r8,4
  80a39c:	59fffa36 	bltu	r11,r7,80a388 <__alt_mem_onchip_mem+0xff802388>
  80a3a0:	513fff04 	addi	r4,r10,-4
  80a3a4:	2008d0ba 	srli	r4,r4,2
  80a3a8:	318000cc 	andi	r6,r6,3
  80a3ac:	21000044 	addi	r4,r4,1
  80a3b0:	2109883a 	add	r4,r4,r4
  80a3b4:	2109883a 	add	r4,r4,r4
  80a3b8:	1907883a 	add	r3,r3,r4
  80a3bc:	290b883a 	add	r5,r5,r4
  80a3c0:	30000b26 	beq	r6,zero,80a3f0 <memmove+0x150>
  80a3c4:	198d883a 	add	r6,r3,r6
  80a3c8:	29c00003 	ldbu	r7,0(r5)
  80a3cc:	18c00044 	addi	r3,r3,1
  80a3d0:	29400044 	addi	r5,r5,1
  80a3d4:	19ffffc5 	stb	r7,-1(r3)
  80a3d8:	19bffb1e 	bne	r3,r6,80a3c8 <__alt_mem_onchip_mem+0xff8023c8>
  80a3dc:	f800283a 	ret
  80a3e0:	1007883a 	mov	r3,r2
  80a3e4:	003ff606 	br	80a3c0 <__alt_mem_onchip_mem+0xff8023c0>
  80a3e8:	1007883a 	mov	r3,r2
  80a3ec:	003ff506 	br	80a3c4 <__alt_mem_onchip_mem+0xff8023c4>
  80a3f0:	f800283a 	ret
  80a3f4:	500d883a 	mov	r6,r10
  80a3f8:	003ff106 	br	80a3c0 <__alt_mem_onchip_mem+0xff8023c0>

0080a3fc <_read_r>:
  80a3fc:	defffd04 	addi	sp,sp,-12
  80a400:	2805883a 	mov	r2,r5
  80a404:	dc000015 	stw	r16,0(sp)
  80a408:	04002074 	movhi	r16,129
  80a40c:	dc400115 	stw	r17,4(sp)
  80a410:	300b883a 	mov	r5,r6
  80a414:	840b5204 	addi	r16,r16,11592
  80a418:	2023883a 	mov	r17,r4
  80a41c:	380d883a 	mov	r6,r7
  80a420:	1009883a 	mov	r4,r2
  80a424:	dfc00215 	stw	ra,8(sp)
  80a428:	80000015 	stw	zero,0(r16)
  80a42c:	080b8cc0 	call	80b8cc <read>
  80a430:	00ffffc4 	movi	r3,-1
  80a434:	10c00526 	beq	r2,r3,80a44c <_read_r+0x50>
  80a438:	dfc00217 	ldw	ra,8(sp)
  80a43c:	dc400117 	ldw	r17,4(sp)
  80a440:	dc000017 	ldw	r16,0(sp)
  80a444:	dec00304 	addi	sp,sp,12
  80a448:	f800283a 	ret
  80a44c:	80c00017 	ldw	r3,0(r16)
  80a450:	183ff926 	beq	r3,zero,80a438 <__alt_mem_onchip_mem+0xff802438>
  80a454:	88c00015 	stw	r3,0(r17)
  80a458:	003ff706 	br	80a438 <__alt_mem_onchip_mem+0xff802438>

0080a45c <_realloc_r>:
  80a45c:	defff604 	addi	sp,sp,-40
  80a460:	dc800215 	stw	r18,8(sp)
  80a464:	dfc00915 	stw	ra,36(sp)
  80a468:	df000815 	stw	fp,32(sp)
  80a46c:	ddc00715 	stw	r23,28(sp)
  80a470:	dd800615 	stw	r22,24(sp)
  80a474:	dd400515 	stw	r21,20(sp)
  80a478:	dd000415 	stw	r20,16(sp)
  80a47c:	dcc00315 	stw	r19,12(sp)
  80a480:	dc400115 	stw	r17,4(sp)
  80a484:	dc000015 	stw	r16,0(sp)
  80a488:	3025883a 	mov	r18,r6
  80a48c:	2800b726 	beq	r5,zero,80a76c <_realloc_r+0x310>
  80a490:	282b883a 	mov	r21,r5
  80a494:	2029883a 	mov	r20,r4
  80a498:	080b5f40 	call	80b5f4 <__malloc_lock>
  80a49c:	a8bfff17 	ldw	r2,-4(r21)
  80a4a0:	043fff04 	movi	r16,-4
  80a4a4:	90c002c4 	addi	r3,r18,11
  80a4a8:	01000584 	movi	r4,22
  80a4ac:	acfffe04 	addi	r19,r21,-8
  80a4b0:	1420703a 	and	r16,r2,r16
  80a4b4:	20c0332e 	bgeu	r4,r3,80a584 <_realloc_r+0x128>
  80a4b8:	047ffe04 	movi	r17,-8
  80a4bc:	1c62703a 	and	r17,r3,r17
  80a4c0:	8807883a 	mov	r3,r17
  80a4c4:	88005816 	blt	r17,zero,80a628 <_realloc_r+0x1cc>
  80a4c8:	8c805736 	bltu	r17,r18,80a628 <_realloc_r+0x1cc>
  80a4cc:	80c0300e 	bge	r16,r3,80a590 <_realloc_r+0x134>
  80a4d0:	07002074 	movhi	fp,129
  80a4d4:	e73e2c04 	addi	fp,fp,-1872
  80a4d8:	e1c00217 	ldw	r7,8(fp)
  80a4dc:	9c09883a 	add	r4,r19,r16
  80a4e0:	22000117 	ldw	r8,4(r4)
  80a4e4:	21c06326 	beq	r4,r7,80a674 <_realloc_r+0x218>
  80a4e8:	017fff84 	movi	r5,-2
  80a4ec:	414a703a 	and	r5,r8,r5
  80a4f0:	214b883a 	add	r5,r4,r5
  80a4f4:	29800117 	ldw	r6,4(r5)
  80a4f8:	3180004c 	andi	r6,r6,1
  80a4fc:	30003f26 	beq	r6,zero,80a5fc <_realloc_r+0x1a0>
  80a500:	1080004c 	andi	r2,r2,1
  80a504:	10008326 	beq	r2,zero,80a714 <_realloc_r+0x2b8>
  80a508:	900b883a 	mov	r5,r18
  80a50c:	a009883a 	mov	r4,r20
  80a510:	0807f200 	call	807f20 <_malloc_r>
  80a514:	1025883a 	mov	r18,r2
  80a518:	10011e26 	beq	r2,zero,80a994 <_realloc_r+0x538>
  80a51c:	a93fff17 	ldw	r4,-4(r21)
  80a520:	10fffe04 	addi	r3,r2,-8
  80a524:	00bfff84 	movi	r2,-2
  80a528:	2084703a 	and	r2,r4,r2
  80a52c:	9885883a 	add	r2,r19,r2
  80a530:	1880ee26 	beq	r3,r2,80a8ec <_realloc_r+0x490>
  80a534:	81bfff04 	addi	r6,r16,-4
  80a538:	00800904 	movi	r2,36
  80a53c:	1180b836 	bltu	r2,r6,80a820 <_realloc_r+0x3c4>
  80a540:	00c004c4 	movi	r3,19
  80a544:	19809636 	bltu	r3,r6,80a7a0 <_realloc_r+0x344>
  80a548:	9005883a 	mov	r2,r18
  80a54c:	a807883a 	mov	r3,r21
  80a550:	19000017 	ldw	r4,0(r3)
  80a554:	11000015 	stw	r4,0(r2)
  80a558:	19000117 	ldw	r4,4(r3)
  80a55c:	11000115 	stw	r4,4(r2)
  80a560:	18c00217 	ldw	r3,8(r3)
  80a564:	10c00215 	stw	r3,8(r2)
  80a568:	a80b883a 	mov	r5,r21
  80a56c:	a009883a 	mov	r4,r20
  80a570:	080966c0 	call	80966c <_free_r>
  80a574:	a009883a 	mov	r4,r20
  80a578:	080b6180 	call	80b618 <__malloc_unlock>
  80a57c:	9005883a 	mov	r2,r18
  80a580:	00001206 	br	80a5cc <_realloc_r+0x170>
  80a584:	00c00404 	movi	r3,16
  80a588:	1823883a 	mov	r17,r3
  80a58c:	003fce06 	br	80a4c8 <__alt_mem_onchip_mem+0xff8024c8>
  80a590:	a825883a 	mov	r18,r21
  80a594:	8445c83a 	sub	r2,r16,r17
  80a598:	00c003c4 	movi	r3,15
  80a59c:	18802636 	bltu	r3,r2,80a638 <_realloc_r+0x1dc>
  80a5a0:	99800117 	ldw	r6,4(r19)
  80a5a4:	9c07883a 	add	r3,r19,r16
  80a5a8:	3180004c 	andi	r6,r6,1
  80a5ac:	3420b03a 	or	r16,r6,r16
  80a5b0:	9c000115 	stw	r16,4(r19)
  80a5b4:	18800117 	ldw	r2,4(r3)
  80a5b8:	10800054 	ori	r2,r2,1
  80a5bc:	18800115 	stw	r2,4(r3)
  80a5c0:	a009883a 	mov	r4,r20
  80a5c4:	080b6180 	call	80b618 <__malloc_unlock>
  80a5c8:	9005883a 	mov	r2,r18
  80a5cc:	dfc00917 	ldw	ra,36(sp)
  80a5d0:	df000817 	ldw	fp,32(sp)
  80a5d4:	ddc00717 	ldw	r23,28(sp)
  80a5d8:	dd800617 	ldw	r22,24(sp)
  80a5dc:	dd400517 	ldw	r21,20(sp)
  80a5e0:	dd000417 	ldw	r20,16(sp)
  80a5e4:	dcc00317 	ldw	r19,12(sp)
  80a5e8:	dc800217 	ldw	r18,8(sp)
  80a5ec:	dc400117 	ldw	r17,4(sp)
  80a5f0:	dc000017 	ldw	r16,0(sp)
  80a5f4:	dec00a04 	addi	sp,sp,40
  80a5f8:	f800283a 	ret
  80a5fc:	017fff04 	movi	r5,-4
  80a600:	414a703a 	and	r5,r8,r5
  80a604:	814d883a 	add	r6,r16,r5
  80a608:	30c01f16 	blt	r6,r3,80a688 <_realloc_r+0x22c>
  80a60c:	20800317 	ldw	r2,12(r4)
  80a610:	20c00217 	ldw	r3,8(r4)
  80a614:	a825883a 	mov	r18,r21
  80a618:	3021883a 	mov	r16,r6
  80a61c:	18800315 	stw	r2,12(r3)
  80a620:	10c00215 	stw	r3,8(r2)
  80a624:	003fdb06 	br	80a594 <__alt_mem_onchip_mem+0xff802594>
  80a628:	00800304 	movi	r2,12
  80a62c:	a0800015 	stw	r2,0(r20)
  80a630:	0005883a 	mov	r2,zero
  80a634:	003fe506 	br	80a5cc <__alt_mem_onchip_mem+0xff8025cc>
  80a638:	98c00117 	ldw	r3,4(r19)
  80a63c:	9c4b883a 	add	r5,r19,r17
  80a640:	11000054 	ori	r4,r2,1
  80a644:	18c0004c 	andi	r3,r3,1
  80a648:	1c62b03a 	or	r17,r3,r17
  80a64c:	9c400115 	stw	r17,4(r19)
  80a650:	29000115 	stw	r4,4(r5)
  80a654:	2885883a 	add	r2,r5,r2
  80a658:	10c00117 	ldw	r3,4(r2)
  80a65c:	29400204 	addi	r5,r5,8
  80a660:	a009883a 	mov	r4,r20
  80a664:	18c00054 	ori	r3,r3,1
  80a668:	10c00115 	stw	r3,4(r2)
  80a66c:	080966c0 	call	80966c <_free_r>
  80a670:	003fd306 	br	80a5c0 <__alt_mem_onchip_mem+0xff8025c0>
  80a674:	017fff04 	movi	r5,-4
  80a678:	414a703a 	and	r5,r8,r5
  80a67c:	89800404 	addi	r6,r17,16
  80a680:	8151883a 	add	r8,r16,r5
  80a684:	4180590e 	bge	r8,r6,80a7ec <_realloc_r+0x390>
  80a688:	1080004c 	andi	r2,r2,1
  80a68c:	103f9e1e 	bne	r2,zero,80a508 <__alt_mem_onchip_mem+0xff802508>
  80a690:	adbffe17 	ldw	r22,-8(r21)
  80a694:	00bfff04 	movi	r2,-4
  80a698:	9dadc83a 	sub	r22,r19,r22
  80a69c:	b1800117 	ldw	r6,4(r22)
  80a6a0:	3084703a 	and	r2,r6,r2
  80a6a4:	20002026 	beq	r4,zero,80a728 <_realloc_r+0x2cc>
  80a6a8:	80af883a 	add	r23,r16,r2
  80a6ac:	b96f883a 	add	r23,r23,r5
  80a6b0:	21c05f26 	beq	r4,r7,80a830 <_realloc_r+0x3d4>
  80a6b4:	b8c01c16 	blt	r23,r3,80a728 <_realloc_r+0x2cc>
  80a6b8:	20800317 	ldw	r2,12(r4)
  80a6bc:	20c00217 	ldw	r3,8(r4)
  80a6c0:	81bfff04 	addi	r6,r16,-4
  80a6c4:	01000904 	movi	r4,36
  80a6c8:	18800315 	stw	r2,12(r3)
  80a6cc:	10c00215 	stw	r3,8(r2)
  80a6d0:	b0c00217 	ldw	r3,8(r22)
  80a6d4:	b0800317 	ldw	r2,12(r22)
  80a6d8:	b4800204 	addi	r18,r22,8
  80a6dc:	18800315 	stw	r2,12(r3)
  80a6e0:	10c00215 	stw	r3,8(r2)
  80a6e4:	21801b36 	bltu	r4,r6,80a754 <_realloc_r+0x2f8>
  80a6e8:	008004c4 	movi	r2,19
  80a6ec:	1180352e 	bgeu	r2,r6,80a7c4 <_realloc_r+0x368>
  80a6f0:	a8800017 	ldw	r2,0(r21)
  80a6f4:	b0800215 	stw	r2,8(r22)
  80a6f8:	a8800117 	ldw	r2,4(r21)
  80a6fc:	b0800315 	stw	r2,12(r22)
  80a700:	008006c4 	movi	r2,27
  80a704:	11807f36 	bltu	r2,r6,80a904 <_realloc_r+0x4a8>
  80a708:	b0800404 	addi	r2,r22,16
  80a70c:	ad400204 	addi	r21,r21,8
  80a710:	00002d06 	br	80a7c8 <_realloc_r+0x36c>
  80a714:	adbffe17 	ldw	r22,-8(r21)
  80a718:	00bfff04 	movi	r2,-4
  80a71c:	9dadc83a 	sub	r22,r19,r22
  80a720:	b1000117 	ldw	r4,4(r22)
  80a724:	2084703a 	and	r2,r4,r2
  80a728:	b03f7726 	beq	r22,zero,80a508 <__alt_mem_onchip_mem+0xff802508>
  80a72c:	80af883a 	add	r23,r16,r2
  80a730:	b8ff7516 	blt	r23,r3,80a508 <__alt_mem_onchip_mem+0xff802508>
  80a734:	b0800317 	ldw	r2,12(r22)
  80a738:	b0c00217 	ldw	r3,8(r22)
  80a73c:	81bfff04 	addi	r6,r16,-4
  80a740:	01000904 	movi	r4,36
  80a744:	18800315 	stw	r2,12(r3)
  80a748:	10c00215 	stw	r3,8(r2)
  80a74c:	b4800204 	addi	r18,r22,8
  80a750:	21bfe52e 	bgeu	r4,r6,80a6e8 <__alt_mem_onchip_mem+0xff8026e8>
  80a754:	a80b883a 	mov	r5,r21
  80a758:	9009883a 	mov	r4,r18
  80a75c:	080a2a00 	call	80a2a0 <memmove>
  80a760:	b821883a 	mov	r16,r23
  80a764:	b027883a 	mov	r19,r22
  80a768:	003f8a06 	br	80a594 <__alt_mem_onchip_mem+0xff802594>
  80a76c:	300b883a 	mov	r5,r6
  80a770:	dfc00917 	ldw	ra,36(sp)
  80a774:	df000817 	ldw	fp,32(sp)
  80a778:	ddc00717 	ldw	r23,28(sp)
  80a77c:	dd800617 	ldw	r22,24(sp)
  80a780:	dd400517 	ldw	r21,20(sp)
  80a784:	dd000417 	ldw	r20,16(sp)
  80a788:	dcc00317 	ldw	r19,12(sp)
  80a78c:	dc800217 	ldw	r18,8(sp)
  80a790:	dc400117 	ldw	r17,4(sp)
  80a794:	dc000017 	ldw	r16,0(sp)
  80a798:	dec00a04 	addi	sp,sp,40
  80a79c:	0807f201 	jmpi	807f20 <_malloc_r>
  80a7a0:	a8c00017 	ldw	r3,0(r21)
  80a7a4:	90c00015 	stw	r3,0(r18)
  80a7a8:	a8c00117 	ldw	r3,4(r21)
  80a7ac:	90c00115 	stw	r3,4(r18)
  80a7b0:	00c006c4 	movi	r3,27
  80a7b4:	19804536 	bltu	r3,r6,80a8cc <_realloc_r+0x470>
  80a7b8:	90800204 	addi	r2,r18,8
  80a7bc:	a8c00204 	addi	r3,r21,8
  80a7c0:	003f6306 	br	80a550 <__alt_mem_onchip_mem+0xff802550>
  80a7c4:	9005883a 	mov	r2,r18
  80a7c8:	a8c00017 	ldw	r3,0(r21)
  80a7cc:	b821883a 	mov	r16,r23
  80a7d0:	b027883a 	mov	r19,r22
  80a7d4:	10c00015 	stw	r3,0(r2)
  80a7d8:	a8c00117 	ldw	r3,4(r21)
  80a7dc:	10c00115 	stw	r3,4(r2)
  80a7e0:	a8c00217 	ldw	r3,8(r21)
  80a7e4:	10c00215 	stw	r3,8(r2)
  80a7e8:	003f6a06 	br	80a594 <__alt_mem_onchip_mem+0xff802594>
  80a7ec:	9c67883a 	add	r19,r19,r17
  80a7f0:	4445c83a 	sub	r2,r8,r17
  80a7f4:	e4c00215 	stw	r19,8(fp)
  80a7f8:	10800054 	ori	r2,r2,1
  80a7fc:	98800115 	stw	r2,4(r19)
  80a800:	a8bfff17 	ldw	r2,-4(r21)
  80a804:	a009883a 	mov	r4,r20
  80a808:	1080004c 	andi	r2,r2,1
  80a80c:	1462b03a 	or	r17,r2,r17
  80a810:	ac7fff15 	stw	r17,-4(r21)
  80a814:	080b6180 	call	80b618 <__malloc_unlock>
  80a818:	a805883a 	mov	r2,r21
  80a81c:	003f6b06 	br	80a5cc <__alt_mem_onchip_mem+0xff8025cc>
  80a820:	a80b883a 	mov	r5,r21
  80a824:	9009883a 	mov	r4,r18
  80a828:	080a2a00 	call	80a2a0 <memmove>
  80a82c:	003f4e06 	br	80a568 <__alt_mem_onchip_mem+0xff802568>
  80a830:	89000404 	addi	r4,r17,16
  80a834:	b93fbc16 	blt	r23,r4,80a728 <__alt_mem_onchip_mem+0xff802728>
  80a838:	b0800317 	ldw	r2,12(r22)
  80a83c:	b0c00217 	ldw	r3,8(r22)
  80a840:	81bfff04 	addi	r6,r16,-4
  80a844:	01000904 	movi	r4,36
  80a848:	18800315 	stw	r2,12(r3)
  80a84c:	10c00215 	stw	r3,8(r2)
  80a850:	b4800204 	addi	r18,r22,8
  80a854:	21804336 	bltu	r4,r6,80a964 <_realloc_r+0x508>
  80a858:	008004c4 	movi	r2,19
  80a85c:	11803f2e 	bgeu	r2,r6,80a95c <_realloc_r+0x500>
  80a860:	a8800017 	ldw	r2,0(r21)
  80a864:	b0800215 	stw	r2,8(r22)
  80a868:	a8800117 	ldw	r2,4(r21)
  80a86c:	b0800315 	stw	r2,12(r22)
  80a870:	008006c4 	movi	r2,27
  80a874:	11803f36 	bltu	r2,r6,80a974 <_realloc_r+0x518>
  80a878:	b0800404 	addi	r2,r22,16
  80a87c:	ad400204 	addi	r21,r21,8
  80a880:	a8c00017 	ldw	r3,0(r21)
  80a884:	10c00015 	stw	r3,0(r2)
  80a888:	a8c00117 	ldw	r3,4(r21)
  80a88c:	10c00115 	stw	r3,4(r2)
  80a890:	a8c00217 	ldw	r3,8(r21)
  80a894:	10c00215 	stw	r3,8(r2)
  80a898:	b447883a 	add	r3,r22,r17
  80a89c:	bc45c83a 	sub	r2,r23,r17
  80a8a0:	e0c00215 	stw	r3,8(fp)
  80a8a4:	10800054 	ori	r2,r2,1
  80a8a8:	18800115 	stw	r2,4(r3)
  80a8ac:	b0800117 	ldw	r2,4(r22)
  80a8b0:	a009883a 	mov	r4,r20
  80a8b4:	1080004c 	andi	r2,r2,1
  80a8b8:	1462b03a 	or	r17,r2,r17
  80a8bc:	b4400115 	stw	r17,4(r22)
  80a8c0:	080b6180 	call	80b618 <__malloc_unlock>
  80a8c4:	9005883a 	mov	r2,r18
  80a8c8:	003f4006 	br	80a5cc <__alt_mem_onchip_mem+0xff8025cc>
  80a8cc:	a8c00217 	ldw	r3,8(r21)
  80a8d0:	90c00215 	stw	r3,8(r18)
  80a8d4:	a8c00317 	ldw	r3,12(r21)
  80a8d8:	90c00315 	stw	r3,12(r18)
  80a8dc:	30801126 	beq	r6,r2,80a924 <_realloc_r+0x4c8>
  80a8e0:	90800404 	addi	r2,r18,16
  80a8e4:	a8c00404 	addi	r3,r21,16
  80a8e8:	003f1906 	br	80a550 <__alt_mem_onchip_mem+0xff802550>
  80a8ec:	90ffff17 	ldw	r3,-4(r18)
  80a8f0:	00bfff04 	movi	r2,-4
  80a8f4:	a825883a 	mov	r18,r21
  80a8f8:	1884703a 	and	r2,r3,r2
  80a8fc:	80a1883a 	add	r16,r16,r2
  80a900:	003f2406 	br	80a594 <__alt_mem_onchip_mem+0xff802594>
  80a904:	a8800217 	ldw	r2,8(r21)
  80a908:	b0800415 	stw	r2,16(r22)
  80a90c:	a8800317 	ldw	r2,12(r21)
  80a910:	b0800515 	stw	r2,20(r22)
  80a914:	31000a26 	beq	r6,r4,80a940 <_realloc_r+0x4e4>
  80a918:	b0800604 	addi	r2,r22,24
  80a91c:	ad400404 	addi	r21,r21,16
  80a920:	003fa906 	br	80a7c8 <__alt_mem_onchip_mem+0xff8027c8>
  80a924:	a9000417 	ldw	r4,16(r21)
  80a928:	90800604 	addi	r2,r18,24
  80a92c:	a8c00604 	addi	r3,r21,24
  80a930:	91000415 	stw	r4,16(r18)
  80a934:	a9000517 	ldw	r4,20(r21)
  80a938:	91000515 	stw	r4,20(r18)
  80a93c:	003f0406 	br	80a550 <__alt_mem_onchip_mem+0xff802550>
  80a940:	a8c00417 	ldw	r3,16(r21)
  80a944:	ad400604 	addi	r21,r21,24
  80a948:	b0800804 	addi	r2,r22,32
  80a94c:	b0c00615 	stw	r3,24(r22)
  80a950:	a8ffff17 	ldw	r3,-4(r21)
  80a954:	b0c00715 	stw	r3,28(r22)
  80a958:	003f9b06 	br	80a7c8 <__alt_mem_onchip_mem+0xff8027c8>
  80a95c:	9005883a 	mov	r2,r18
  80a960:	003fc706 	br	80a880 <__alt_mem_onchip_mem+0xff802880>
  80a964:	a80b883a 	mov	r5,r21
  80a968:	9009883a 	mov	r4,r18
  80a96c:	080a2a00 	call	80a2a0 <memmove>
  80a970:	003fc906 	br	80a898 <__alt_mem_onchip_mem+0xff802898>
  80a974:	a8800217 	ldw	r2,8(r21)
  80a978:	b0800415 	stw	r2,16(r22)
  80a97c:	a8800317 	ldw	r2,12(r21)
  80a980:	b0800515 	stw	r2,20(r22)
  80a984:	31000726 	beq	r6,r4,80a9a4 <_realloc_r+0x548>
  80a988:	b0800604 	addi	r2,r22,24
  80a98c:	ad400404 	addi	r21,r21,16
  80a990:	003fbb06 	br	80a880 <__alt_mem_onchip_mem+0xff802880>
  80a994:	a009883a 	mov	r4,r20
  80a998:	080b6180 	call	80b618 <__malloc_unlock>
  80a99c:	0005883a 	mov	r2,zero
  80a9a0:	003f0a06 	br	80a5cc <__alt_mem_onchip_mem+0xff8025cc>
  80a9a4:	a8c00417 	ldw	r3,16(r21)
  80a9a8:	ad400604 	addi	r21,r21,24
  80a9ac:	b0800804 	addi	r2,r22,32
  80a9b0:	b0c00615 	stw	r3,24(r22)
  80a9b4:	a8ffff17 	ldw	r3,-4(r21)
  80a9b8:	b0c00715 	stw	r3,28(r22)
  80a9bc:	003fb006 	br	80a880 <__alt_mem_onchip_mem+0xff802880>

0080a9c0 <__swsetup_r>:
  80a9c0:	00802074 	movhi	r2,129
  80a9c4:	defffd04 	addi	sp,sp,-12
  80a9c8:	10842a04 	addi	r2,r2,4264
  80a9cc:	dc400115 	stw	r17,4(sp)
  80a9d0:	2023883a 	mov	r17,r4
  80a9d4:	11000017 	ldw	r4,0(r2)
  80a9d8:	dc000015 	stw	r16,0(sp)
  80a9dc:	dfc00215 	stw	ra,8(sp)
  80a9e0:	2821883a 	mov	r16,r5
  80a9e4:	20000226 	beq	r4,zero,80a9f0 <__swsetup_r+0x30>
  80a9e8:	20800e17 	ldw	r2,56(r4)
  80a9ec:	10003126 	beq	r2,zero,80aab4 <__swsetup_r+0xf4>
  80a9f0:	8080030b 	ldhu	r2,12(r16)
  80a9f4:	10c0020c 	andi	r3,r2,8
  80a9f8:	1009883a 	mov	r4,r2
  80a9fc:	18000f26 	beq	r3,zero,80aa3c <__swsetup_r+0x7c>
  80aa00:	80c00417 	ldw	r3,16(r16)
  80aa04:	18001526 	beq	r3,zero,80aa5c <__swsetup_r+0x9c>
  80aa08:	1100004c 	andi	r4,r2,1
  80aa0c:	20001c1e 	bne	r4,zero,80aa80 <__swsetup_r+0xc0>
  80aa10:	1080008c 	andi	r2,r2,2
  80aa14:	1000291e 	bne	r2,zero,80aabc <__swsetup_r+0xfc>
  80aa18:	80800517 	ldw	r2,20(r16)
  80aa1c:	80800215 	stw	r2,8(r16)
  80aa20:	18001c26 	beq	r3,zero,80aa94 <__swsetup_r+0xd4>
  80aa24:	0005883a 	mov	r2,zero
  80aa28:	dfc00217 	ldw	ra,8(sp)
  80aa2c:	dc400117 	ldw	r17,4(sp)
  80aa30:	dc000017 	ldw	r16,0(sp)
  80aa34:	dec00304 	addi	sp,sp,12
  80aa38:	f800283a 	ret
  80aa3c:	2080040c 	andi	r2,r4,16
  80aa40:	10002e26 	beq	r2,zero,80aafc <__swsetup_r+0x13c>
  80aa44:	2080010c 	andi	r2,r4,4
  80aa48:	10001e1e 	bne	r2,zero,80aac4 <__swsetup_r+0x104>
  80aa4c:	80c00417 	ldw	r3,16(r16)
  80aa50:	20800214 	ori	r2,r4,8
  80aa54:	8080030d 	sth	r2,12(r16)
  80aa58:	183feb1e 	bne	r3,zero,80aa08 <__alt_mem_onchip_mem+0xff802a08>
  80aa5c:	1100a00c 	andi	r4,r2,640
  80aa60:	01408004 	movi	r5,512
  80aa64:	217fe826 	beq	r4,r5,80aa08 <__alt_mem_onchip_mem+0xff802a08>
  80aa68:	800b883a 	mov	r5,r16
  80aa6c:	8809883a 	mov	r4,r17
  80aa70:	0807d640 	call	807d64 <__smakebuf_r>
  80aa74:	8080030b 	ldhu	r2,12(r16)
  80aa78:	80c00417 	ldw	r3,16(r16)
  80aa7c:	003fe206 	br	80aa08 <__alt_mem_onchip_mem+0xff802a08>
  80aa80:	80800517 	ldw	r2,20(r16)
  80aa84:	80000215 	stw	zero,8(r16)
  80aa88:	0085c83a 	sub	r2,zero,r2
  80aa8c:	80800615 	stw	r2,24(r16)
  80aa90:	183fe41e 	bne	r3,zero,80aa24 <__alt_mem_onchip_mem+0xff802a24>
  80aa94:	80c0030b 	ldhu	r3,12(r16)
  80aa98:	0005883a 	mov	r2,zero
  80aa9c:	1900200c 	andi	r4,r3,128
  80aaa0:	203fe126 	beq	r4,zero,80aa28 <__alt_mem_onchip_mem+0xff802a28>
  80aaa4:	18c01014 	ori	r3,r3,64
  80aaa8:	80c0030d 	sth	r3,12(r16)
  80aaac:	00bfffc4 	movi	r2,-1
  80aab0:	003fdd06 	br	80aa28 <__alt_mem_onchip_mem+0xff802a28>
  80aab4:	080944c0 	call	80944c <__sinit>
  80aab8:	003fcd06 	br	80a9f0 <__alt_mem_onchip_mem+0xff8029f0>
  80aabc:	0005883a 	mov	r2,zero
  80aac0:	003fd606 	br	80aa1c <__alt_mem_onchip_mem+0xff802a1c>
  80aac4:	81400c17 	ldw	r5,48(r16)
  80aac8:	28000626 	beq	r5,zero,80aae4 <__swsetup_r+0x124>
  80aacc:	80801004 	addi	r2,r16,64
  80aad0:	28800326 	beq	r5,r2,80aae0 <__swsetup_r+0x120>
  80aad4:	8809883a 	mov	r4,r17
  80aad8:	080966c0 	call	80966c <_free_r>
  80aadc:	8100030b 	ldhu	r4,12(r16)
  80aae0:	80000c15 	stw	zero,48(r16)
  80aae4:	80c00417 	ldw	r3,16(r16)
  80aae8:	00bff6c4 	movi	r2,-37
  80aaec:	1108703a 	and	r4,r2,r4
  80aaf0:	80000115 	stw	zero,4(r16)
  80aaf4:	80c00015 	stw	r3,0(r16)
  80aaf8:	003fd506 	br	80aa50 <__alt_mem_onchip_mem+0xff802a50>
  80aafc:	00800244 	movi	r2,9
  80ab00:	88800015 	stw	r2,0(r17)
  80ab04:	20801014 	ori	r2,r4,64
  80ab08:	8080030d 	sth	r2,12(r16)
  80ab0c:	00bfffc4 	movi	r2,-1
  80ab10:	003fc506 	br	80aa28 <__alt_mem_onchip_mem+0xff802a28>

0080ab14 <_fclose_r>:
  80ab14:	28003926 	beq	r5,zero,80abfc <_fclose_r+0xe8>
  80ab18:	defffc04 	addi	sp,sp,-16
  80ab1c:	dc400115 	stw	r17,4(sp)
  80ab20:	dc000015 	stw	r16,0(sp)
  80ab24:	dfc00315 	stw	ra,12(sp)
  80ab28:	dc800215 	stw	r18,8(sp)
  80ab2c:	2023883a 	mov	r17,r4
  80ab30:	2821883a 	mov	r16,r5
  80ab34:	20000226 	beq	r4,zero,80ab40 <_fclose_r+0x2c>
  80ab38:	20800e17 	ldw	r2,56(r4)
  80ab3c:	10002726 	beq	r2,zero,80abdc <_fclose_r+0xc8>
  80ab40:	8080030f 	ldh	r2,12(r16)
  80ab44:	1000071e 	bne	r2,zero,80ab64 <_fclose_r+0x50>
  80ab48:	0005883a 	mov	r2,zero
  80ab4c:	dfc00317 	ldw	ra,12(sp)
  80ab50:	dc800217 	ldw	r18,8(sp)
  80ab54:	dc400117 	ldw	r17,4(sp)
  80ab58:	dc000017 	ldw	r16,0(sp)
  80ab5c:	dec00404 	addi	sp,sp,16
  80ab60:	f800283a 	ret
  80ab64:	800b883a 	mov	r5,r16
  80ab68:	8809883a 	mov	r4,r17
  80ab6c:	0808e540 	call	808e54 <__sflush_r>
  80ab70:	1025883a 	mov	r18,r2
  80ab74:	80800b17 	ldw	r2,44(r16)
  80ab78:	10000426 	beq	r2,zero,80ab8c <_fclose_r+0x78>
  80ab7c:	81400717 	ldw	r5,28(r16)
  80ab80:	8809883a 	mov	r4,r17
  80ab84:	103ee83a 	callr	r2
  80ab88:	10001616 	blt	r2,zero,80abe4 <_fclose_r+0xd0>
  80ab8c:	8080030b 	ldhu	r2,12(r16)
  80ab90:	1080200c 	andi	r2,r2,128
  80ab94:	1000151e 	bne	r2,zero,80abec <_fclose_r+0xd8>
  80ab98:	81400c17 	ldw	r5,48(r16)
  80ab9c:	28000526 	beq	r5,zero,80abb4 <_fclose_r+0xa0>
  80aba0:	80801004 	addi	r2,r16,64
  80aba4:	28800226 	beq	r5,r2,80abb0 <_fclose_r+0x9c>
  80aba8:	8809883a 	mov	r4,r17
  80abac:	080966c0 	call	80966c <_free_r>
  80abb0:	80000c15 	stw	zero,48(r16)
  80abb4:	81401117 	ldw	r5,68(r16)
  80abb8:	28000326 	beq	r5,zero,80abc8 <_fclose_r+0xb4>
  80abbc:	8809883a 	mov	r4,r17
  80abc0:	080966c0 	call	80966c <_free_r>
  80abc4:	80001115 	stw	zero,68(r16)
  80abc8:	080945c0 	call	80945c <__sfp_lock_acquire>
  80abcc:	8000030d 	sth	zero,12(r16)
  80abd0:	08094600 	call	809460 <__sfp_lock_release>
  80abd4:	9005883a 	mov	r2,r18
  80abd8:	003fdc06 	br	80ab4c <__alt_mem_onchip_mem+0xff802b4c>
  80abdc:	080944c0 	call	80944c <__sinit>
  80abe0:	003fd706 	br	80ab40 <__alt_mem_onchip_mem+0xff802b40>
  80abe4:	04bfffc4 	movi	r18,-1
  80abe8:	003fe806 	br	80ab8c <__alt_mem_onchip_mem+0xff802b8c>
  80abec:	81400417 	ldw	r5,16(r16)
  80abf0:	8809883a 	mov	r4,r17
  80abf4:	080966c0 	call	80966c <_free_r>
  80abf8:	003fe706 	br	80ab98 <__alt_mem_onchip_mem+0xff802b98>
  80abfc:	0005883a 	mov	r2,zero
  80ac00:	f800283a 	ret

0080ac04 <fclose>:
  80ac04:	00802074 	movhi	r2,129
  80ac08:	10842a04 	addi	r2,r2,4264
  80ac0c:	200b883a 	mov	r5,r4
  80ac10:	11000017 	ldw	r4,0(r2)
  80ac14:	080ab141 	jmpi	80ab14 <_fclose_r>

0080ac18 <__divsi3>:
  80ac18:	20001b16 	blt	r4,zero,80ac88 <__divsi3+0x70>
  80ac1c:	000f883a 	mov	r7,zero
  80ac20:	28001616 	blt	r5,zero,80ac7c <__divsi3+0x64>
  80ac24:	200d883a 	mov	r6,r4
  80ac28:	29001a2e 	bgeu	r5,r4,80ac94 <__divsi3+0x7c>
  80ac2c:	00800804 	movi	r2,32
  80ac30:	00c00044 	movi	r3,1
  80ac34:	00000106 	br	80ac3c <__divsi3+0x24>
  80ac38:	10000d26 	beq	r2,zero,80ac70 <__divsi3+0x58>
  80ac3c:	294b883a 	add	r5,r5,r5
  80ac40:	10bfffc4 	addi	r2,r2,-1
  80ac44:	18c7883a 	add	r3,r3,r3
  80ac48:	293ffb36 	bltu	r5,r4,80ac38 <__alt_mem_onchip_mem+0xff802c38>
  80ac4c:	0005883a 	mov	r2,zero
  80ac50:	18000726 	beq	r3,zero,80ac70 <__divsi3+0x58>
  80ac54:	0005883a 	mov	r2,zero
  80ac58:	31400236 	bltu	r6,r5,80ac64 <__divsi3+0x4c>
  80ac5c:	314dc83a 	sub	r6,r6,r5
  80ac60:	10c4b03a 	or	r2,r2,r3
  80ac64:	1806d07a 	srli	r3,r3,1
  80ac68:	280ad07a 	srli	r5,r5,1
  80ac6c:	183ffa1e 	bne	r3,zero,80ac58 <__alt_mem_onchip_mem+0xff802c58>
  80ac70:	38000126 	beq	r7,zero,80ac78 <__divsi3+0x60>
  80ac74:	0085c83a 	sub	r2,zero,r2
  80ac78:	f800283a 	ret
  80ac7c:	014bc83a 	sub	r5,zero,r5
  80ac80:	39c0005c 	xori	r7,r7,1
  80ac84:	003fe706 	br	80ac24 <__alt_mem_onchip_mem+0xff802c24>
  80ac88:	0109c83a 	sub	r4,zero,r4
  80ac8c:	01c00044 	movi	r7,1
  80ac90:	003fe306 	br	80ac20 <__alt_mem_onchip_mem+0xff802c20>
  80ac94:	00c00044 	movi	r3,1
  80ac98:	003fee06 	br	80ac54 <__alt_mem_onchip_mem+0xff802c54>

0080ac9c <__modsi3>:
  80ac9c:	20001716 	blt	r4,zero,80acfc <__modsi3+0x60>
  80aca0:	000f883a 	mov	r7,zero
  80aca4:	2005883a 	mov	r2,r4
  80aca8:	28001216 	blt	r5,zero,80acf4 <__modsi3+0x58>
  80acac:	2900162e 	bgeu	r5,r4,80ad08 <__modsi3+0x6c>
  80acb0:	01800804 	movi	r6,32
  80acb4:	00c00044 	movi	r3,1
  80acb8:	00000106 	br	80acc0 <__modsi3+0x24>
  80acbc:	30000a26 	beq	r6,zero,80ace8 <__modsi3+0x4c>
  80acc0:	294b883a 	add	r5,r5,r5
  80acc4:	31bfffc4 	addi	r6,r6,-1
  80acc8:	18c7883a 	add	r3,r3,r3
  80accc:	293ffb36 	bltu	r5,r4,80acbc <__alt_mem_onchip_mem+0xff802cbc>
  80acd0:	18000526 	beq	r3,zero,80ace8 <__modsi3+0x4c>
  80acd4:	1806d07a 	srli	r3,r3,1
  80acd8:	11400136 	bltu	r2,r5,80ace0 <__modsi3+0x44>
  80acdc:	1145c83a 	sub	r2,r2,r5
  80ace0:	280ad07a 	srli	r5,r5,1
  80ace4:	183ffb1e 	bne	r3,zero,80acd4 <__alt_mem_onchip_mem+0xff802cd4>
  80ace8:	38000126 	beq	r7,zero,80acf0 <__modsi3+0x54>
  80acec:	0085c83a 	sub	r2,zero,r2
  80acf0:	f800283a 	ret
  80acf4:	014bc83a 	sub	r5,zero,r5
  80acf8:	003fec06 	br	80acac <__alt_mem_onchip_mem+0xff802cac>
  80acfc:	0109c83a 	sub	r4,zero,r4
  80ad00:	01c00044 	movi	r7,1
  80ad04:	003fe706 	br	80aca4 <__alt_mem_onchip_mem+0xff802ca4>
  80ad08:	00c00044 	movi	r3,1
  80ad0c:	003ff106 	br	80acd4 <__alt_mem_onchip_mem+0xff802cd4>

0080ad10 <__udivsi3>:
  80ad10:	200d883a 	mov	r6,r4
  80ad14:	2900152e 	bgeu	r5,r4,80ad6c <__udivsi3+0x5c>
  80ad18:	28001416 	blt	r5,zero,80ad6c <__udivsi3+0x5c>
  80ad1c:	00800804 	movi	r2,32
  80ad20:	00c00044 	movi	r3,1
  80ad24:	00000206 	br	80ad30 <__udivsi3+0x20>
  80ad28:	10000e26 	beq	r2,zero,80ad64 <__udivsi3+0x54>
  80ad2c:	28000516 	blt	r5,zero,80ad44 <__udivsi3+0x34>
  80ad30:	294b883a 	add	r5,r5,r5
  80ad34:	10bfffc4 	addi	r2,r2,-1
  80ad38:	18c7883a 	add	r3,r3,r3
  80ad3c:	293ffa36 	bltu	r5,r4,80ad28 <__alt_mem_onchip_mem+0xff802d28>
  80ad40:	18000826 	beq	r3,zero,80ad64 <__udivsi3+0x54>
  80ad44:	0005883a 	mov	r2,zero
  80ad48:	31400236 	bltu	r6,r5,80ad54 <__udivsi3+0x44>
  80ad4c:	314dc83a 	sub	r6,r6,r5
  80ad50:	10c4b03a 	or	r2,r2,r3
  80ad54:	1806d07a 	srli	r3,r3,1
  80ad58:	280ad07a 	srli	r5,r5,1
  80ad5c:	183ffa1e 	bne	r3,zero,80ad48 <__alt_mem_onchip_mem+0xff802d48>
  80ad60:	f800283a 	ret
  80ad64:	0005883a 	mov	r2,zero
  80ad68:	f800283a 	ret
  80ad6c:	00c00044 	movi	r3,1
  80ad70:	003ff406 	br	80ad44 <__alt_mem_onchip_mem+0xff802d44>

0080ad74 <__umodsi3>:
  80ad74:	2005883a 	mov	r2,r4
  80ad78:	2900122e 	bgeu	r5,r4,80adc4 <__umodsi3+0x50>
  80ad7c:	28001116 	blt	r5,zero,80adc4 <__umodsi3+0x50>
  80ad80:	01800804 	movi	r6,32
  80ad84:	00c00044 	movi	r3,1
  80ad88:	00000206 	br	80ad94 <__umodsi3+0x20>
  80ad8c:	30000c26 	beq	r6,zero,80adc0 <__umodsi3+0x4c>
  80ad90:	28000516 	blt	r5,zero,80ada8 <__umodsi3+0x34>
  80ad94:	294b883a 	add	r5,r5,r5
  80ad98:	31bfffc4 	addi	r6,r6,-1
  80ad9c:	18c7883a 	add	r3,r3,r3
  80ada0:	293ffa36 	bltu	r5,r4,80ad8c <__alt_mem_onchip_mem+0xff802d8c>
  80ada4:	18000626 	beq	r3,zero,80adc0 <__umodsi3+0x4c>
  80ada8:	1806d07a 	srli	r3,r3,1
  80adac:	11400136 	bltu	r2,r5,80adb4 <__umodsi3+0x40>
  80adb0:	1145c83a 	sub	r2,r2,r5
  80adb4:	280ad07a 	srli	r5,r5,1
  80adb8:	183ffb1e 	bne	r3,zero,80ada8 <__alt_mem_onchip_mem+0xff802da8>
  80adbc:	f800283a 	ret
  80adc0:	f800283a 	ret
  80adc4:	00c00044 	movi	r3,1
  80adc8:	003ff706 	br	80ada8 <__alt_mem_onchip_mem+0xff802da8>

0080adcc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80adcc:	defff504 	addi	sp,sp,-44
  80add0:	df000a15 	stw	fp,40(sp)
  80add4:	df000a04 	addi	fp,sp,40
  80add8:	e13ffc15 	stw	r4,-16(fp)
  80addc:	e17ffd15 	stw	r5,-12(fp)
  80ade0:	e1bffe15 	stw	r6,-8(fp)
  80ade4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80ade8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80adec:	d0a73117 	ldw	r2,-25404(gp)
  
  if (alt_ticks_per_second ())
  80adf0:	10003c26 	beq	r2,zero,80aee4 <alt_alarm_start+0x118>
  {
    if (alarm)
  80adf4:	e0bffc17 	ldw	r2,-16(fp)
  80adf8:	10003826 	beq	r2,zero,80aedc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80adfc:	e0bffc17 	ldw	r2,-16(fp)
  80ae00:	e0fffe17 	ldw	r3,-8(fp)
  80ae04:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80ae08:	e0bffc17 	ldw	r2,-16(fp)
  80ae0c:	e0ffff17 	ldw	r3,-4(fp)
  80ae10:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ae14:	0005303a 	rdctl	r2,status
  80ae18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ae1c:	e0fff917 	ldw	r3,-28(fp)
  80ae20:	00bfff84 	movi	r2,-2
  80ae24:	1884703a 	and	r2,r3,r2
  80ae28:	1001703a 	wrctl	status,r2
  
  return context;
  80ae2c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80ae30:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80ae34:	d0a73217 	ldw	r2,-25400(gp)
      
      current_nticks = alt_nticks();
  80ae38:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80ae3c:	e0fffd17 	ldw	r3,-12(fp)
  80ae40:	e0bff617 	ldw	r2,-40(fp)
  80ae44:	1885883a 	add	r2,r3,r2
  80ae48:	10c00044 	addi	r3,r2,1
  80ae4c:	e0bffc17 	ldw	r2,-16(fp)
  80ae50:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80ae54:	e0bffc17 	ldw	r2,-16(fp)
  80ae58:	10c00217 	ldw	r3,8(r2)
  80ae5c:	e0bff617 	ldw	r2,-40(fp)
  80ae60:	1880042e 	bgeu	r3,r2,80ae74 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80ae64:	e0bffc17 	ldw	r2,-16(fp)
  80ae68:	00c00044 	movi	r3,1
  80ae6c:	10c00405 	stb	r3,16(r2)
  80ae70:	00000206 	br	80ae7c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80ae74:	e0bffc17 	ldw	r2,-16(fp)
  80ae78:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80ae7c:	e0bffc17 	ldw	r2,-16(fp)
  80ae80:	d0e00c04 	addi	r3,gp,-32720
  80ae84:	e0fffa15 	stw	r3,-24(fp)
  80ae88:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80ae8c:	e0bffb17 	ldw	r2,-20(fp)
  80ae90:	e0fffa17 	ldw	r3,-24(fp)
  80ae94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80ae98:	e0bffa17 	ldw	r2,-24(fp)
  80ae9c:	10c00017 	ldw	r3,0(r2)
  80aea0:	e0bffb17 	ldw	r2,-20(fp)
  80aea4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80aea8:	e0bffa17 	ldw	r2,-24(fp)
  80aeac:	10800017 	ldw	r2,0(r2)
  80aeb0:	e0fffb17 	ldw	r3,-20(fp)
  80aeb4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80aeb8:	e0bffa17 	ldw	r2,-24(fp)
  80aebc:	e0fffb17 	ldw	r3,-20(fp)
  80aec0:	10c00015 	stw	r3,0(r2)
  80aec4:	e0bff817 	ldw	r2,-32(fp)
  80aec8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80aecc:	e0bff717 	ldw	r2,-36(fp)
  80aed0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80aed4:	0005883a 	mov	r2,zero
  80aed8:	00000306 	br	80aee8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80aedc:	00bffa84 	movi	r2,-22
  80aee0:	00000106 	br	80aee8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80aee4:	00bfde84 	movi	r2,-134
  }
}
  80aee8:	e037883a 	mov	sp,fp
  80aeec:	df000017 	ldw	fp,0(sp)
  80aef0:	dec00104 	addi	sp,sp,4
  80aef4:	f800283a 	ret

0080aef8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80aef8:	defffe04 	addi	sp,sp,-8
  80aefc:	dfc00115 	stw	ra,4(sp)
  80af00:	df000015 	stw	fp,0(sp)
  80af04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80af08:	d0a00917 	ldw	r2,-32732(gp)
  80af0c:	10000326 	beq	r2,zero,80af1c <alt_get_errno+0x24>
  80af10:	d0a00917 	ldw	r2,-32732(gp)
  80af14:	103ee83a 	callr	r2
  80af18:	00000106 	br	80af20 <alt_get_errno+0x28>
  80af1c:	d0a72904 	addi	r2,gp,-25436
}
  80af20:	e037883a 	mov	sp,fp
  80af24:	dfc00117 	ldw	ra,4(sp)
  80af28:	df000017 	ldw	fp,0(sp)
  80af2c:	dec00204 	addi	sp,sp,8
  80af30:	f800283a 	ret

0080af34 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80af34:	defffb04 	addi	sp,sp,-20
  80af38:	dfc00415 	stw	ra,16(sp)
  80af3c:	df000315 	stw	fp,12(sp)
  80af40:	df000304 	addi	fp,sp,12
  80af44:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80af48:	e0bfff17 	ldw	r2,-4(fp)
  80af4c:	10000616 	blt	r2,zero,80af68 <close+0x34>
  80af50:	e0bfff17 	ldw	r2,-4(fp)
  80af54:	10c00324 	muli	r3,r2,12
  80af58:	00802074 	movhi	r2,129
  80af5c:	10bf3804 	addi	r2,r2,-800
  80af60:	1885883a 	add	r2,r3,r2
  80af64:	00000106 	br	80af6c <close+0x38>
  80af68:	0005883a 	mov	r2,zero
  80af6c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80af70:	e0bffd17 	ldw	r2,-12(fp)
  80af74:	10001926 	beq	r2,zero,80afdc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80af78:	e0bffd17 	ldw	r2,-12(fp)
  80af7c:	10800017 	ldw	r2,0(r2)
  80af80:	10800417 	ldw	r2,16(r2)
  80af84:	10000626 	beq	r2,zero,80afa0 <close+0x6c>
  80af88:	e0bffd17 	ldw	r2,-12(fp)
  80af8c:	10800017 	ldw	r2,0(r2)
  80af90:	10800417 	ldw	r2,16(r2)
  80af94:	e13ffd17 	ldw	r4,-12(fp)
  80af98:	103ee83a 	callr	r2
  80af9c:	00000106 	br	80afa4 <close+0x70>
  80afa0:	0005883a 	mov	r2,zero
  80afa4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80afa8:	e13fff17 	ldw	r4,-4(fp)
  80afac:	080b9c80 	call	80b9c8 <alt_release_fd>
    if (rval < 0)
  80afb0:	e0bffe17 	ldw	r2,-8(fp)
  80afb4:	1000070e 	bge	r2,zero,80afd4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80afb8:	080aef80 	call	80aef8 <alt_get_errno>
  80afbc:	1007883a 	mov	r3,r2
  80afc0:	e0bffe17 	ldw	r2,-8(fp)
  80afc4:	0085c83a 	sub	r2,zero,r2
  80afc8:	18800015 	stw	r2,0(r3)
      return -1;
  80afcc:	00bfffc4 	movi	r2,-1
  80afd0:	00000706 	br	80aff0 <close+0xbc>
    }
    return 0;
  80afd4:	0005883a 	mov	r2,zero
  80afd8:	00000506 	br	80aff0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80afdc:	080aef80 	call	80aef8 <alt_get_errno>
  80afe0:	1007883a 	mov	r3,r2
  80afe4:	00801444 	movi	r2,81
  80afe8:	18800015 	stw	r2,0(r3)
    return -1;
  80afec:	00bfffc4 	movi	r2,-1
  }
}
  80aff0:	e037883a 	mov	sp,fp
  80aff4:	dfc00117 	ldw	ra,4(sp)
  80aff8:	df000017 	ldw	fp,0(sp)
  80affc:	dec00204 	addi	sp,sp,8
  80b000:	f800283a 	ret

0080b004 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80b004:	defffc04 	addi	sp,sp,-16
  80b008:	df000315 	stw	fp,12(sp)
  80b00c:	df000304 	addi	fp,sp,12
  80b010:	e13ffd15 	stw	r4,-12(fp)
  80b014:	e17ffe15 	stw	r5,-8(fp)
  80b018:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80b01c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b020:	e037883a 	mov	sp,fp
  80b024:	df000017 	ldw	fp,0(sp)
  80b028:	dec00104 	addi	sp,sp,4
  80b02c:	f800283a 	ret

0080b030 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b030:	defffe04 	addi	sp,sp,-8
  80b034:	dfc00115 	stw	ra,4(sp)
  80b038:	df000015 	stw	fp,0(sp)
  80b03c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80b040:	d0a00917 	ldw	r2,-32732(gp)
  80b044:	10000326 	beq	r2,zero,80b054 <alt_get_errno+0x24>
  80b048:	d0a00917 	ldw	r2,-32732(gp)
  80b04c:	103ee83a 	callr	r2
  80b050:	00000106 	br	80b058 <alt_get_errno+0x28>
  80b054:	d0a72904 	addi	r2,gp,-25436
}
  80b058:	e037883a 	mov	sp,fp
  80b05c:	dfc00117 	ldw	ra,4(sp)
  80b060:	df000017 	ldw	fp,0(sp)
  80b064:	dec00204 	addi	sp,sp,8
  80b068:	f800283a 	ret

0080b06c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80b06c:	defffb04 	addi	sp,sp,-20
  80b070:	dfc00415 	stw	ra,16(sp)
  80b074:	df000315 	stw	fp,12(sp)
  80b078:	df000304 	addi	fp,sp,12
  80b07c:	e13ffe15 	stw	r4,-8(fp)
  80b080:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b084:	e0bffe17 	ldw	r2,-8(fp)
  80b088:	10000616 	blt	r2,zero,80b0a4 <fstat+0x38>
  80b08c:	e0bffe17 	ldw	r2,-8(fp)
  80b090:	10c00324 	muli	r3,r2,12
  80b094:	00802074 	movhi	r2,129
  80b098:	10bf3804 	addi	r2,r2,-800
  80b09c:	1885883a 	add	r2,r3,r2
  80b0a0:	00000106 	br	80b0a8 <fstat+0x3c>
  80b0a4:	0005883a 	mov	r2,zero
  80b0a8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80b0ac:	e0bffd17 	ldw	r2,-12(fp)
  80b0b0:	10001026 	beq	r2,zero,80b0f4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80b0b4:	e0bffd17 	ldw	r2,-12(fp)
  80b0b8:	10800017 	ldw	r2,0(r2)
  80b0bc:	10800817 	ldw	r2,32(r2)
  80b0c0:	10000726 	beq	r2,zero,80b0e0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80b0c4:	e0bffd17 	ldw	r2,-12(fp)
  80b0c8:	10800017 	ldw	r2,0(r2)
  80b0cc:	10800817 	ldw	r2,32(r2)
  80b0d0:	e17fff17 	ldw	r5,-4(fp)
  80b0d4:	e13ffd17 	ldw	r4,-12(fp)
  80b0d8:	103ee83a 	callr	r2
  80b0dc:	00000a06 	br	80b108 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80b0e0:	e0bfff17 	ldw	r2,-4(fp)
  80b0e4:	00c80004 	movi	r3,8192
  80b0e8:	10c00115 	stw	r3,4(r2)
      return 0;
  80b0ec:	0005883a 	mov	r2,zero
  80b0f0:	00000506 	br	80b108 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80b0f4:	080b0300 	call	80b030 <alt_get_errno>
  80b0f8:	1007883a 	mov	r3,r2
  80b0fc:	00801444 	movi	r2,81
  80b100:	18800015 	stw	r2,0(r3)
    return -1;
  80b104:	00bfffc4 	movi	r2,-1
  }
}
  80b108:	e037883a 	mov	sp,fp
  80b10c:	dfc00117 	ldw	ra,4(sp)
  80b110:	df000017 	ldw	fp,0(sp)
  80b114:	dec00204 	addi	sp,sp,8
  80b118:	f800283a 	ret

0080b11c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80b11c:	defff004 	addi	sp,sp,-64
  80b120:	df000f15 	stw	fp,60(sp)
  80b124:	df000f04 	addi	fp,sp,60
  80b128:	e13ffd15 	stw	r4,-12(fp)
  80b12c:	e17ffe15 	stw	r5,-8(fp)
  80b130:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80b134:	00bffa84 	movi	r2,-22
  80b138:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80b13c:	e0bffd17 	ldw	r2,-12(fp)
  80b140:	10800828 	cmpgeui	r2,r2,32
  80b144:	1000501e 	bne	r2,zero,80b288 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b148:	0005303a 	rdctl	r2,status
  80b14c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b150:	e0fff617 	ldw	r3,-40(fp)
  80b154:	00bfff84 	movi	r2,-2
  80b158:	1884703a 	and	r2,r3,r2
  80b15c:	1001703a 	wrctl	status,r2
  
  return context;
  80b160:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80b164:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  80b168:	00802074 	movhi	r2,129
  80b16c:	108b6704 	addi	r2,r2,11676
  80b170:	e0fffd17 	ldw	r3,-12(fp)
  80b174:	180690fa 	slli	r3,r3,3
  80b178:	10c5883a 	add	r2,r2,r3
  80b17c:	e0ffff17 	ldw	r3,-4(fp)
  80b180:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80b184:	00802074 	movhi	r2,129
  80b188:	108b6704 	addi	r2,r2,11676
  80b18c:	e0fffd17 	ldw	r3,-12(fp)
  80b190:	180690fa 	slli	r3,r3,3
  80b194:	10c5883a 	add	r2,r2,r3
  80b198:	10800104 	addi	r2,r2,4
  80b19c:	e0fffe17 	ldw	r3,-8(fp)
  80b1a0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80b1a4:	e0bfff17 	ldw	r2,-4(fp)
  80b1a8:	10001926 	beq	r2,zero,80b210 <alt_irq_register+0xf4>
  80b1ac:	e0bffd17 	ldw	r2,-12(fp)
  80b1b0:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b1b4:	0005303a 	rdctl	r2,status
  80b1b8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b1bc:	e0fff717 	ldw	r3,-36(fp)
  80b1c0:	00bfff84 	movi	r2,-2
  80b1c4:	1884703a 	and	r2,r3,r2
  80b1c8:	1001703a 	wrctl	status,r2
  
  return context;
  80b1cc:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80b1d0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80b1d4:	00c00044 	movi	r3,1
  80b1d8:	e0bff217 	ldw	r2,-56(fp)
  80b1dc:	1884983a 	sll	r2,r3,r2
  80b1e0:	1007883a 	mov	r3,r2
  80b1e4:	d0a72d17 	ldw	r2,-25420(gp)
  80b1e8:	1884b03a 	or	r2,r3,r2
  80b1ec:	d0a72d15 	stw	r2,-25420(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80b1f0:	d0a72d17 	ldw	r2,-25420(gp)
  80b1f4:	100170fa 	wrctl	ienable,r2
  80b1f8:	e0bff817 	ldw	r2,-32(fp)
  80b1fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b200:	e0bff917 	ldw	r2,-28(fp)
  80b204:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80b208:	0005883a 	mov	r2,zero
  80b20c:	00001906 	br	80b274 <alt_irq_register+0x158>
  80b210:	e0bffd17 	ldw	r2,-12(fp)
  80b214:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b218:	0005303a 	rdctl	r2,status
  80b21c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b220:	e0fffa17 	ldw	r3,-24(fp)
  80b224:	00bfff84 	movi	r2,-2
  80b228:	1884703a 	and	r2,r3,r2
  80b22c:	1001703a 	wrctl	status,r2
  
  return context;
  80b230:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80b234:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  80b238:	00c00044 	movi	r3,1
  80b23c:	e0bff417 	ldw	r2,-48(fp)
  80b240:	1884983a 	sll	r2,r3,r2
  80b244:	0084303a 	nor	r2,zero,r2
  80b248:	1007883a 	mov	r3,r2
  80b24c:	d0a72d17 	ldw	r2,-25420(gp)
  80b250:	1884703a 	and	r2,r3,r2
  80b254:	d0a72d15 	stw	r2,-25420(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80b258:	d0a72d17 	ldw	r2,-25420(gp)
  80b25c:	100170fa 	wrctl	ienable,r2
  80b260:	e0bffb17 	ldw	r2,-20(fp)
  80b264:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b268:	e0bffc17 	ldw	r2,-16(fp)
  80b26c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80b270:	0005883a 	mov	r2,zero
  80b274:	e0bff115 	stw	r2,-60(fp)
  80b278:	e0bff317 	ldw	r2,-52(fp)
  80b27c:	e0bff515 	stw	r2,-44(fp)
  80b280:	e0bff517 	ldw	r2,-44(fp)
  80b284:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80b288:	e0bff117 	ldw	r2,-60(fp)
}
  80b28c:	e037883a 	mov	sp,fp
  80b290:	df000017 	ldw	fp,0(sp)
  80b294:	dec00104 	addi	sp,sp,4
  80b298:	f800283a 	ret

0080b29c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b29c:	defffe04 	addi	sp,sp,-8
  80b2a0:	dfc00115 	stw	ra,4(sp)
  80b2a4:	df000015 	stw	fp,0(sp)
  80b2a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80b2ac:	d0a00917 	ldw	r2,-32732(gp)
  80b2b0:	10000326 	beq	r2,zero,80b2c0 <alt_get_errno+0x24>
  80b2b4:	d0a00917 	ldw	r2,-32732(gp)
  80b2b8:	103ee83a 	callr	r2
  80b2bc:	00000106 	br	80b2c4 <alt_get_errno+0x28>
  80b2c0:	d0a72904 	addi	r2,gp,-25436
}
  80b2c4:	e037883a 	mov	sp,fp
  80b2c8:	dfc00117 	ldw	ra,4(sp)
  80b2cc:	df000017 	ldw	fp,0(sp)
  80b2d0:	dec00204 	addi	sp,sp,8
  80b2d4:	f800283a 	ret

0080b2d8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80b2d8:	deffed04 	addi	sp,sp,-76
  80b2dc:	dfc01215 	stw	ra,72(sp)
  80b2e0:	df001115 	stw	fp,68(sp)
  80b2e4:	df001104 	addi	fp,sp,68
  80b2e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b2ec:	e0bfff17 	ldw	r2,-4(fp)
  80b2f0:	10000616 	blt	r2,zero,80b30c <isatty+0x34>
  80b2f4:	e0bfff17 	ldw	r2,-4(fp)
  80b2f8:	10c00324 	muli	r3,r2,12
  80b2fc:	00802074 	movhi	r2,129
  80b300:	10bf3804 	addi	r2,r2,-800
  80b304:	1885883a 	add	r2,r3,r2
  80b308:	00000106 	br	80b310 <isatty+0x38>
  80b30c:	0005883a 	mov	r2,zero
  80b310:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80b314:	e0bfef17 	ldw	r2,-68(fp)
  80b318:	10000e26 	beq	r2,zero,80b354 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80b31c:	e0bfef17 	ldw	r2,-68(fp)
  80b320:	10800017 	ldw	r2,0(r2)
  80b324:	10800817 	ldw	r2,32(r2)
  80b328:	1000021e 	bne	r2,zero,80b334 <isatty+0x5c>
    {
      return 1;
  80b32c:	00800044 	movi	r2,1
  80b330:	00000d06 	br	80b368 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80b334:	e0bff004 	addi	r2,fp,-64
  80b338:	100b883a 	mov	r5,r2
  80b33c:	e13fff17 	ldw	r4,-4(fp)
  80b340:	080b06c0 	call	80b06c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80b344:	e0bff117 	ldw	r2,-60(fp)
  80b348:	10880020 	cmpeqi	r2,r2,8192
  80b34c:	10803fcc 	andi	r2,r2,255
  80b350:	00000506 	br	80b368 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80b354:	080b29c0 	call	80b29c <alt_get_errno>
  80b358:	1007883a 	mov	r3,r2
  80b35c:	00801444 	movi	r2,81
  80b360:	18800015 	stw	r2,0(r3)
    return 0;
  80b364:	0005883a 	mov	r2,zero
  }
}
  80b368:	e037883a 	mov	sp,fp
  80b36c:	dfc00117 	ldw	ra,4(sp)
  80b370:	df000017 	ldw	fp,0(sp)
  80b374:	dec00204 	addi	sp,sp,8
  80b378:	f800283a 	ret

0080b37c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80b37c:	defffc04 	addi	sp,sp,-16
  80b380:	df000315 	stw	fp,12(sp)
  80b384:	df000304 	addi	fp,sp,12
  80b388:	e13ffd15 	stw	r4,-12(fp)
  80b38c:	e17ffe15 	stw	r5,-8(fp)
  80b390:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80b394:	e0fffe17 	ldw	r3,-8(fp)
  80b398:	e0bffd17 	ldw	r2,-12(fp)
  80b39c:	18800c26 	beq	r3,r2,80b3d0 <alt_load_section+0x54>
  {
    while( to != end )
  80b3a0:	00000806 	br	80b3c4 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80b3a4:	e0bffe17 	ldw	r2,-8(fp)
  80b3a8:	10c00104 	addi	r3,r2,4
  80b3ac:	e0fffe15 	stw	r3,-8(fp)
  80b3b0:	e0fffd17 	ldw	r3,-12(fp)
  80b3b4:	19000104 	addi	r4,r3,4
  80b3b8:	e13ffd15 	stw	r4,-12(fp)
  80b3bc:	18c00017 	ldw	r3,0(r3)
  80b3c0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80b3c4:	e0fffe17 	ldw	r3,-8(fp)
  80b3c8:	e0bfff17 	ldw	r2,-4(fp)
  80b3cc:	18bff51e 	bne	r3,r2,80b3a4 <__alt_mem_onchip_mem+0xff8033a4>
    {
      *to++ = *from++;
    }
  }
}
  80b3d0:	0001883a 	nop
  80b3d4:	e037883a 	mov	sp,fp
  80b3d8:	df000017 	ldw	fp,0(sp)
  80b3dc:	dec00104 	addi	sp,sp,4
  80b3e0:	f800283a 	ret

0080b3e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80b3e4:	defffe04 	addi	sp,sp,-8
  80b3e8:	dfc00115 	stw	ra,4(sp)
  80b3ec:	df000015 	stw	fp,0(sp)
  80b3f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80b3f4:	01802074 	movhi	r6,129
  80b3f8:	31843904 	addi	r6,r6,4324
  80b3fc:	01402074 	movhi	r5,129
  80b400:	297d2304 	addi	r5,r5,-2932
  80b404:	01002074 	movhi	r4,129
  80b408:	21043904 	addi	r4,r4,4324
  80b40c:	080b37c0 	call	80b37c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80b410:	01802034 	movhi	r6,128
  80b414:	31809104 	addi	r6,r6,580
  80b418:	01402034 	movhi	r5,128
  80b41c:	29400804 	addi	r5,r5,32
  80b420:	01002034 	movhi	r4,128
  80b424:	21000804 	addi	r4,r4,32
  80b428:	080b37c0 	call	80b37c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80b42c:	01802074 	movhi	r6,129
  80b430:	31bd2304 	addi	r6,r6,-2932
  80b434:	01402074 	movhi	r5,129
  80b438:	297c1b04 	addi	r5,r5,-3988
  80b43c:	01002074 	movhi	r4,129
  80b440:	213c1b04 	addi	r4,r4,-3988
  80b444:	080b37c0 	call	80b37c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80b448:	080e1c80 	call	80e1c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80b44c:	080e5ec0 	call	80e5ec <alt_icache_flush_all>
}
  80b450:	0001883a 	nop
  80b454:	e037883a 	mov	sp,fp
  80b458:	dfc00117 	ldw	ra,4(sp)
  80b45c:	df000017 	ldw	fp,0(sp)
  80b460:	dec00204 	addi	sp,sp,8
  80b464:	f800283a 	ret

0080b468 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b468:	defffe04 	addi	sp,sp,-8
  80b46c:	dfc00115 	stw	ra,4(sp)
  80b470:	df000015 	stw	fp,0(sp)
  80b474:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80b478:	d0a00917 	ldw	r2,-32732(gp)
  80b47c:	10000326 	beq	r2,zero,80b48c <alt_get_errno+0x24>
  80b480:	d0a00917 	ldw	r2,-32732(gp)
  80b484:	103ee83a 	callr	r2
  80b488:	00000106 	br	80b490 <alt_get_errno+0x28>
  80b48c:	d0a72904 	addi	r2,gp,-25436
}
  80b490:	e037883a 	mov	sp,fp
  80b494:	dfc00117 	ldw	ra,4(sp)
  80b498:	df000017 	ldw	fp,0(sp)
  80b49c:	dec00204 	addi	sp,sp,8
  80b4a0:	f800283a 	ret

0080b4a4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80b4a4:	defff904 	addi	sp,sp,-28
  80b4a8:	dfc00615 	stw	ra,24(sp)
  80b4ac:	df000515 	stw	fp,20(sp)
  80b4b0:	df000504 	addi	fp,sp,20
  80b4b4:	e13ffd15 	stw	r4,-12(fp)
  80b4b8:	e17ffe15 	stw	r5,-8(fp)
  80b4bc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80b4c0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b4c4:	e0bffd17 	ldw	r2,-12(fp)
  80b4c8:	10000616 	blt	r2,zero,80b4e4 <lseek+0x40>
  80b4cc:	e0bffd17 	ldw	r2,-12(fp)
  80b4d0:	10c00324 	muli	r3,r2,12
  80b4d4:	00802074 	movhi	r2,129
  80b4d8:	10bf3804 	addi	r2,r2,-800
  80b4dc:	1885883a 	add	r2,r3,r2
  80b4e0:	00000106 	br	80b4e8 <lseek+0x44>
  80b4e4:	0005883a 	mov	r2,zero
  80b4e8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80b4ec:	e0bffc17 	ldw	r2,-16(fp)
  80b4f0:	10001026 	beq	r2,zero,80b534 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80b4f4:	e0bffc17 	ldw	r2,-16(fp)
  80b4f8:	10800017 	ldw	r2,0(r2)
  80b4fc:	10800717 	ldw	r2,28(r2)
  80b500:	10000926 	beq	r2,zero,80b528 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80b504:	e0bffc17 	ldw	r2,-16(fp)
  80b508:	10800017 	ldw	r2,0(r2)
  80b50c:	10800717 	ldw	r2,28(r2)
  80b510:	e1bfff17 	ldw	r6,-4(fp)
  80b514:	e17ffe17 	ldw	r5,-8(fp)
  80b518:	e13ffc17 	ldw	r4,-16(fp)
  80b51c:	103ee83a 	callr	r2
  80b520:	e0bffb15 	stw	r2,-20(fp)
  80b524:	00000506 	br	80b53c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80b528:	00bfde84 	movi	r2,-134
  80b52c:	e0bffb15 	stw	r2,-20(fp)
  80b530:	00000206 	br	80b53c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80b534:	00bfebc4 	movi	r2,-81
  80b538:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80b53c:	e0bffb17 	ldw	r2,-20(fp)
  80b540:	1000070e 	bge	r2,zero,80b560 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80b544:	080b4680 	call	80b468 <alt_get_errno>
  80b548:	1007883a 	mov	r3,r2
  80b54c:	e0bffb17 	ldw	r2,-20(fp)
  80b550:	0085c83a 	sub	r2,zero,r2
  80b554:	18800015 	stw	r2,0(r3)
    rc = -1;
  80b558:	00bfffc4 	movi	r2,-1
  80b55c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80b560:	e0bffb17 	ldw	r2,-20(fp)
}
  80b564:	e037883a 	mov	sp,fp
  80b568:	dfc00117 	ldw	ra,4(sp)
  80b56c:	df000017 	ldw	fp,0(sp)
  80b570:	dec00204 	addi	sp,sp,8
  80b574:	f800283a 	ret

0080b578 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80b578:	defffd04 	addi	sp,sp,-12
  80b57c:	dfc00215 	stw	ra,8(sp)
  80b580:	df000115 	stw	fp,4(sp)
  80b584:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80b588:	0009883a 	mov	r4,zero
  80b58c:	080bde80 	call	80bde8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80b590:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80b594:	080be200 	call	80be20 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80b598:	01802074 	movhi	r6,129
  80b59c:	31bc7504 	addi	r6,r6,-3628
  80b5a0:	01402074 	movhi	r5,129
  80b5a4:	297c7504 	addi	r5,r5,-3628
  80b5a8:	01002074 	movhi	r4,129
  80b5ac:	213c7504 	addi	r4,r4,-3628
  80b5b0:	080e9840 	call	80e984 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80b5b4:	080e2f00 	call	80e2f0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80b5b8:	01002074 	movhi	r4,129
  80b5bc:	2138d404 	addi	r4,r4,-7344
  80b5c0:	080ecd80 	call	80ecd8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80b5c4:	d0a72e17 	ldw	r2,-25416(gp)
  80b5c8:	d0e72f17 	ldw	r3,-25412(gp)
  80b5cc:	d1273017 	ldw	r4,-25408(gp)
  80b5d0:	200d883a 	mov	r6,r4
  80b5d4:	180b883a 	mov	r5,r3
  80b5d8:	1009883a 	mov	r4,r2
  80b5dc:	080056c0 	call	80056c <main>
  80b5e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80b5e4:	01000044 	movi	r4,1
  80b5e8:	080af340 	call	80af34 <close>
  exit (result);
  80b5ec:	e13fff17 	ldw	r4,-4(fp)
  80b5f0:	080ecec0 	call	80ecec <exit>

0080b5f4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80b5f4:	defffe04 	addi	sp,sp,-8
  80b5f8:	df000115 	stw	fp,4(sp)
  80b5fc:	df000104 	addi	fp,sp,4
  80b600:	e13fff15 	stw	r4,-4(fp)
}
  80b604:	0001883a 	nop
  80b608:	e037883a 	mov	sp,fp
  80b60c:	df000017 	ldw	fp,0(sp)
  80b610:	dec00104 	addi	sp,sp,4
  80b614:	f800283a 	ret

0080b618 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80b618:	defffe04 	addi	sp,sp,-8
  80b61c:	df000115 	stw	fp,4(sp)
  80b620:	df000104 	addi	fp,sp,4
  80b624:	e13fff15 	stw	r4,-4(fp)
}
  80b628:	0001883a 	nop
  80b62c:	e037883a 	mov	sp,fp
  80b630:	df000017 	ldw	fp,0(sp)
  80b634:	dec00104 	addi	sp,sp,4
  80b638:	f800283a 	ret

0080b63c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b63c:	defffe04 	addi	sp,sp,-8
  80b640:	dfc00115 	stw	ra,4(sp)
  80b644:	df000015 	stw	fp,0(sp)
  80b648:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80b64c:	d0a00917 	ldw	r2,-32732(gp)
  80b650:	10000326 	beq	r2,zero,80b660 <alt_get_errno+0x24>
  80b654:	d0a00917 	ldw	r2,-32732(gp)
  80b658:	103ee83a 	callr	r2
  80b65c:	00000106 	br	80b664 <alt_get_errno+0x28>
  80b660:	d0a72904 	addi	r2,gp,-25436
}
  80b664:	e037883a 	mov	sp,fp
  80b668:	dfc00117 	ldw	ra,4(sp)
  80b66c:	df000017 	ldw	fp,0(sp)
  80b670:	dec00204 	addi	sp,sp,8
  80b674:	f800283a 	ret

0080b678 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80b678:	defffd04 	addi	sp,sp,-12
  80b67c:	df000215 	stw	fp,8(sp)
  80b680:	df000204 	addi	fp,sp,8
  80b684:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80b688:	e0bfff17 	ldw	r2,-4(fp)
  80b68c:	10800217 	ldw	r2,8(r2)
  80b690:	10d00034 	orhi	r3,r2,16384
  80b694:	e0bfff17 	ldw	r2,-4(fp)
  80b698:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80b69c:	e03ffe15 	stw	zero,-8(fp)
  80b6a0:	00001d06 	br	80b718 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80b6a4:	00802074 	movhi	r2,129
  80b6a8:	10bf3804 	addi	r2,r2,-800
  80b6ac:	e0fffe17 	ldw	r3,-8(fp)
  80b6b0:	18c00324 	muli	r3,r3,12
  80b6b4:	10c5883a 	add	r2,r2,r3
  80b6b8:	10c00017 	ldw	r3,0(r2)
  80b6bc:	e0bfff17 	ldw	r2,-4(fp)
  80b6c0:	10800017 	ldw	r2,0(r2)
  80b6c4:	1880111e 	bne	r3,r2,80b70c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80b6c8:	00802074 	movhi	r2,129
  80b6cc:	10bf3804 	addi	r2,r2,-800
  80b6d0:	e0fffe17 	ldw	r3,-8(fp)
  80b6d4:	18c00324 	muli	r3,r3,12
  80b6d8:	10c5883a 	add	r2,r2,r3
  80b6dc:	10800204 	addi	r2,r2,8
  80b6e0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80b6e4:	1000090e 	bge	r2,zero,80b70c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80b6e8:	e0bffe17 	ldw	r2,-8(fp)
  80b6ec:	10c00324 	muli	r3,r2,12
  80b6f0:	00802074 	movhi	r2,129
  80b6f4:	10bf3804 	addi	r2,r2,-800
  80b6f8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80b6fc:	e0bfff17 	ldw	r2,-4(fp)
  80b700:	18800226 	beq	r3,r2,80b70c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80b704:	00bffcc4 	movi	r2,-13
  80b708:	00000806 	br	80b72c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80b70c:	e0bffe17 	ldw	r2,-8(fp)
  80b710:	10800044 	addi	r2,r2,1
  80b714:	e0bffe15 	stw	r2,-8(fp)
  80b718:	d0a00817 	ldw	r2,-32736(gp)
  80b71c:	1007883a 	mov	r3,r2
  80b720:	e0bffe17 	ldw	r2,-8(fp)
  80b724:	18bfdf2e 	bgeu	r3,r2,80b6a4 <__alt_mem_onchip_mem+0xff8036a4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80b728:	0005883a 	mov	r2,zero
}
  80b72c:	e037883a 	mov	sp,fp
  80b730:	df000017 	ldw	fp,0(sp)
  80b734:	dec00104 	addi	sp,sp,4
  80b738:	f800283a 	ret

0080b73c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80b73c:	defff604 	addi	sp,sp,-40
  80b740:	dfc00915 	stw	ra,36(sp)
  80b744:	df000815 	stw	fp,32(sp)
  80b748:	df000804 	addi	fp,sp,32
  80b74c:	e13ffd15 	stw	r4,-12(fp)
  80b750:	e17ffe15 	stw	r5,-8(fp)
  80b754:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80b758:	00bfffc4 	movi	r2,-1
  80b75c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80b760:	00bffb44 	movi	r2,-19
  80b764:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80b768:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80b76c:	d1600604 	addi	r5,gp,-32744
  80b770:	e13ffd17 	ldw	r4,-12(fp)
  80b774:	080e3b00 	call	80e3b0 <alt_find_dev>
  80b778:	e0bff815 	stw	r2,-32(fp)
  80b77c:	e0bff817 	ldw	r2,-32(fp)
  80b780:	1000051e 	bne	r2,zero,80b798 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80b784:	e13ffd17 	ldw	r4,-12(fp)
  80b788:	080e4400 	call	80e440 <alt_find_file>
  80b78c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80b790:	00800044 	movi	r2,1
  80b794:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80b798:	e0bff817 	ldw	r2,-32(fp)
  80b79c:	10002926 	beq	r2,zero,80b844 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80b7a0:	e13ff817 	ldw	r4,-32(fp)
  80b7a4:	080e5480 	call	80e548 <alt_get_fd>
  80b7a8:	e0bff915 	stw	r2,-28(fp)
  80b7ac:	e0bff917 	ldw	r2,-28(fp)
  80b7b0:	1000030e 	bge	r2,zero,80b7c0 <open+0x84>
    {
      status = index;
  80b7b4:	e0bff917 	ldw	r2,-28(fp)
  80b7b8:	e0bffa15 	stw	r2,-24(fp)
  80b7bc:	00002306 	br	80b84c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80b7c0:	e0bff917 	ldw	r2,-28(fp)
  80b7c4:	10c00324 	muli	r3,r2,12
  80b7c8:	00802074 	movhi	r2,129
  80b7cc:	10bf3804 	addi	r2,r2,-800
  80b7d0:	1885883a 	add	r2,r3,r2
  80b7d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80b7d8:	e0fffe17 	ldw	r3,-8(fp)
  80b7dc:	00900034 	movhi	r2,16384
  80b7e0:	10bfffc4 	addi	r2,r2,-1
  80b7e4:	1886703a 	and	r3,r3,r2
  80b7e8:	e0bffc17 	ldw	r2,-16(fp)
  80b7ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80b7f0:	e0bffb17 	ldw	r2,-20(fp)
  80b7f4:	1000051e 	bne	r2,zero,80b80c <open+0xd0>
  80b7f8:	e13ffc17 	ldw	r4,-16(fp)
  80b7fc:	080b6780 	call	80b678 <alt_file_locked>
  80b800:	e0bffa15 	stw	r2,-24(fp)
  80b804:	e0bffa17 	ldw	r2,-24(fp)
  80b808:	10001016 	blt	r2,zero,80b84c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80b80c:	e0bff817 	ldw	r2,-32(fp)
  80b810:	10800317 	ldw	r2,12(r2)
  80b814:	10000826 	beq	r2,zero,80b838 <open+0xfc>
  80b818:	e0bff817 	ldw	r2,-32(fp)
  80b81c:	10800317 	ldw	r2,12(r2)
  80b820:	e1ffff17 	ldw	r7,-4(fp)
  80b824:	e1bffe17 	ldw	r6,-8(fp)
  80b828:	e17ffd17 	ldw	r5,-12(fp)
  80b82c:	e13ffc17 	ldw	r4,-16(fp)
  80b830:	103ee83a 	callr	r2
  80b834:	00000106 	br	80b83c <open+0x100>
  80b838:	0005883a 	mov	r2,zero
  80b83c:	e0bffa15 	stw	r2,-24(fp)
  80b840:	00000206 	br	80b84c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80b844:	00bffb44 	movi	r2,-19
  80b848:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80b84c:	e0bffa17 	ldw	r2,-24(fp)
  80b850:	1000090e 	bge	r2,zero,80b878 <open+0x13c>
  {
    alt_release_fd (index);  
  80b854:	e13ff917 	ldw	r4,-28(fp)
  80b858:	080b9c80 	call	80b9c8 <alt_release_fd>
    ALT_ERRNO = -status;
  80b85c:	080b63c0 	call	80b63c <alt_get_errno>
  80b860:	1007883a 	mov	r3,r2
  80b864:	e0bffa17 	ldw	r2,-24(fp)
  80b868:	0085c83a 	sub	r2,zero,r2
  80b86c:	18800015 	stw	r2,0(r3)
    return -1;
  80b870:	00bfffc4 	movi	r2,-1
  80b874:	00000106 	br	80b87c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80b878:	e0bff917 	ldw	r2,-28(fp)
}
  80b87c:	e037883a 	mov	sp,fp
  80b880:	dfc00117 	ldw	ra,4(sp)
  80b884:	df000017 	ldw	fp,0(sp)
  80b888:	dec00204 	addi	sp,sp,8
  80b88c:	f800283a 	ret

0080b890 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b890:	defffe04 	addi	sp,sp,-8
  80b894:	dfc00115 	stw	ra,4(sp)
  80b898:	df000015 	stw	fp,0(sp)
  80b89c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80b8a0:	d0a00917 	ldw	r2,-32732(gp)
  80b8a4:	10000326 	beq	r2,zero,80b8b4 <alt_get_errno+0x24>
  80b8a8:	d0a00917 	ldw	r2,-32732(gp)
  80b8ac:	103ee83a 	callr	r2
  80b8b0:	00000106 	br	80b8b8 <alt_get_errno+0x28>
  80b8b4:	d0a72904 	addi	r2,gp,-25436
}
  80b8b8:	e037883a 	mov	sp,fp
  80b8bc:	dfc00117 	ldw	ra,4(sp)
  80b8c0:	df000017 	ldw	fp,0(sp)
  80b8c4:	dec00204 	addi	sp,sp,8
  80b8c8:	f800283a 	ret

0080b8cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80b8cc:	defff904 	addi	sp,sp,-28
  80b8d0:	dfc00615 	stw	ra,24(sp)
  80b8d4:	df000515 	stw	fp,20(sp)
  80b8d8:	df000504 	addi	fp,sp,20
  80b8dc:	e13ffd15 	stw	r4,-12(fp)
  80b8e0:	e17ffe15 	stw	r5,-8(fp)
  80b8e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b8e8:	e0bffd17 	ldw	r2,-12(fp)
  80b8ec:	10000616 	blt	r2,zero,80b908 <read+0x3c>
  80b8f0:	e0bffd17 	ldw	r2,-12(fp)
  80b8f4:	10c00324 	muli	r3,r2,12
  80b8f8:	00802074 	movhi	r2,129
  80b8fc:	10bf3804 	addi	r2,r2,-800
  80b900:	1885883a 	add	r2,r3,r2
  80b904:	00000106 	br	80b90c <read+0x40>
  80b908:	0005883a 	mov	r2,zero
  80b90c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80b910:	e0bffb17 	ldw	r2,-20(fp)
  80b914:	10002226 	beq	r2,zero,80b9a0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80b918:	e0bffb17 	ldw	r2,-20(fp)
  80b91c:	10800217 	ldw	r2,8(r2)
  80b920:	108000cc 	andi	r2,r2,3
  80b924:	10800060 	cmpeqi	r2,r2,1
  80b928:	1000181e 	bne	r2,zero,80b98c <read+0xc0>
        (fd->dev->read))
  80b92c:	e0bffb17 	ldw	r2,-20(fp)
  80b930:	10800017 	ldw	r2,0(r2)
  80b934:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80b938:	10001426 	beq	r2,zero,80b98c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80b93c:	e0bffb17 	ldw	r2,-20(fp)
  80b940:	10800017 	ldw	r2,0(r2)
  80b944:	10800517 	ldw	r2,20(r2)
  80b948:	e0ffff17 	ldw	r3,-4(fp)
  80b94c:	180d883a 	mov	r6,r3
  80b950:	e17ffe17 	ldw	r5,-8(fp)
  80b954:	e13ffb17 	ldw	r4,-20(fp)
  80b958:	103ee83a 	callr	r2
  80b95c:	e0bffc15 	stw	r2,-16(fp)
  80b960:	e0bffc17 	ldw	r2,-16(fp)
  80b964:	1000070e 	bge	r2,zero,80b984 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80b968:	080b8900 	call	80b890 <alt_get_errno>
  80b96c:	1007883a 	mov	r3,r2
  80b970:	e0bffc17 	ldw	r2,-16(fp)
  80b974:	0085c83a 	sub	r2,zero,r2
  80b978:	18800015 	stw	r2,0(r3)
          return -1;
  80b97c:	00bfffc4 	movi	r2,-1
  80b980:	00000c06 	br	80b9b4 <read+0xe8>
        }
        return rval;
  80b984:	e0bffc17 	ldw	r2,-16(fp)
  80b988:	00000a06 	br	80b9b4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80b98c:	080b8900 	call	80b890 <alt_get_errno>
  80b990:	1007883a 	mov	r3,r2
  80b994:	00800344 	movi	r2,13
  80b998:	18800015 	stw	r2,0(r3)
  80b99c:	00000406 	br	80b9b0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80b9a0:	080b8900 	call	80b890 <alt_get_errno>
  80b9a4:	1007883a 	mov	r3,r2
  80b9a8:	00801444 	movi	r2,81
  80b9ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80b9b0:	00bfffc4 	movi	r2,-1
}
  80b9b4:	e037883a 	mov	sp,fp
  80b9b8:	dfc00117 	ldw	ra,4(sp)
  80b9bc:	df000017 	ldw	fp,0(sp)
  80b9c0:	dec00204 	addi	sp,sp,8
  80b9c4:	f800283a 	ret

0080b9c8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80b9c8:	defffe04 	addi	sp,sp,-8
  80b9cc:	df000115 	stw	fp,4(sp)
  80b9d0:	df000104 	addi	fp,sp,4
  80b9d4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80b9d8:	e0bfff17 	ldw	r2,-4(fp)
  80b9dc:	108000d0 	cmplti	r2,r2,3
  80b9e0:	10000d1e 	bne	r2,zero,80ba18 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80b9e4:	00802074 	movhi	r2,129
  80b9e8:	10bf3804 	addi	r2,r2,-800
  80b9ec:	e0ffff17 	ldw	r3,-4(fp)
  80b9f0:	18c00324 	muli	r3,r3,12
  80b9f4:	10c5883a 	add	r2,r2,r3
  80b9f8:	10800204 	addi	r2,r2,8
  80b9fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80ba00:	00802074 	movhi	r2,129
  80ba04:	10bf3804 	addi	r2,r2,-800
  80ba08:	e0ffff17 	ldw	r3,-4(fp)
  80ba0c:	18c00324 	muli	r3,r3,12
  80ba10:	10c5883a 	add	r2,r2,r3
  80ba14:	10000015 	stw	zero,0(r2)
  }
}
  80ba18:	0001883a 	nop
  80ba1c:	e037883a 	mov	sp,fp
  80ba20:	df000017 	ldw	fp,0(sp)
  80ba24:	dec00104 	addi	sp,sp,4
  80ba28:	f800283a 	ret

0080ba2c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80ba2c:	defff904 	addi	sp,sp,-28
  80ba30:	df000615 	stw	fp,24(sp)
  80ba34:	df000604 	addi	fp,sp,24
  80ba38:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ba3c:	0005303a 	rdctl	r2,status
  80ba40:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ba44:	e0fffe17 	ldw	r3,-8(fp)
  80ba48:	00bfff84 	movi	r2,-2
  80ba4c:	1884703a 	and	r2,r3,r2
  80ba50:	1001703a 	wrctl	status,r2
  
  return context;
  80ba54:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80ba58:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80ba5c:	d0a00b17 	ldw	r2,-32724(gp)
  80ba60:	10c000c4 	addi	r3,r2,3
  80ba64:	00bfff04 	movi	r2,-4
  80ba68:	1884703a 	and	r2,r3,r2
  80ba6c:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80ba70:	d0e00b17 	ldw	r3,-32724(gp)
  80ba74:	e0bfff17 	ldw	r2,-4(fp)
  80ba78:	1887883a 	add	r3,r3,r2
  80ba7c:	00804034 	movhi	r2,256
  80ba80:	10800004 	addi	r2,r2,0
  80ba84:	10c0062e 	bgeu	r2,r3,80baa0 <sbrk+0x74>
  80ba88:	e0bffb17 	ldw	r2,-20(fp)
  80ba8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ba90:	e0bffa17 	ldw	r2,-24(fp)
  80ba94:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80ba98:	00bfffc4 	movi	r2,-1
  80ba9c:	00000b06 	br	80bacc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80baa0:	d0a00b17 	ldw	r2,-32724(gp)
  80baa4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80baa8:	d0e00b17 	ldw	r3,-32724(gp)
  80baac:	e0bfff17 	ldw	r2,-4(fp)
  80bab0:	1885883a 	add	r2,r3,r2
  80bab4:	d0a00b15 	stw	r2,-32724(gp)
  80bab8:	e0bffb17 	ldw	r2,-20(fp)
  80babc:	e0bffc15 	stw	r2,-16(fp)
  80bac0:	e0bffc17 	ldw	r2,-16(fp)
  80bac4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80bac8:	e0bffd17 	ldw	r2,-12(fp)
} 
  80bacc:	e037883a 	mov	sp,fp
  80bad0:	df000017 	ldw	fp,0(sp)
  80bad4:	dec00104 	addi	sp,sp,4
  80bad8:	f800283a 	ret

0080badc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80badc:	defffa04 	addi	sp,sp,-24
  80bae0:	df000515 	stw	fp,20(sp)
  80bae4:	df000504 	addi	fp,sp,20
  80bae8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80baec:	0005303a 	rdctl	r2,status
  80baf0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80baf4:	e0fffc17 	ldw	r3,-16(fp)
  80baf8:	00bfff84 	movi	r2,-2
  80bafc:	1884703a 	and	r2,r3,r2
  80bb00:	1001703a 	wrctl	status,r2
  
  return context;
  80bb04:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80bb08:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80bb0c:	e0bfff17 	ldw	r2,-4(fp)
  80bb10:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80bb14:	e0bffd17 	ldw	r2,-12(fp)
  80bb18:	10800017 	ldw	r2,0(r2)
  80bb1c:	e0fffd17 	ldw	r3,-12(fp)
  80bb20:	18c00117 	ldw	r3,4(r3)
  80bb24:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80bb28:	e0bffd17 	ldw	r2,-12(fp)
  80bb2c:	10800117 	ldw	r2,4(r2)
  80bb30:	e0fffd17 	ldw	r3,-12(fp)
  80bb34:	18c00017 	ldw	r3,0(r3)
  80bb38:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80bb3c:	e0bffd17 	ldw	r2,-12(fp)
  80bb40:	e0fffd17 	ldw	r3,-12(fp)
  80bb44:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80bb48:	e0bffd17 	ldw	r2,-12(fp)
  80bb4c:	e0fffd17 	ldw	r3,-12(fp)
  80bb50:	10c00015 	stw	r3,0(r2)
  80bb54:	e0bffb17 	ldw	r2,-20(fp)
  80bb58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bb5c:	e0bffe17 	ldw	r2,-8(fp)
  80bb60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80bb64:	0001883a 	nop
  80bb68:	e037883a 	mov	sp,fp
  80bb6c:	df000017 	ldw	fp,0(sp)
  80bb70:	dec00104 	addi	sp,sp,4
  80bb74:	f800283a 	ret

0080bb78 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80bb78:	defffb04 	addi	sp,sp,-20
  80bb7c:	dfc00415 	stw	ra,16(sp)
  80bb80:	df000315 	stw	fp,12(sp)
  80bb84:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80bb88:	d0a00c17 	ldw	r2,-32720(gp)
  80bb8c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80bb90:	d0a73217 	ldw	r2,-25400(gp)
  80bb94:	10800044 	addi	r2,r2,1
  80bb98:	d0a73215 	stw	r2,-25400(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80bb9c:	00002e06 	br	80bc58 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80bba0:	e0bffd17 	ldw	r2,-12(fp)
  80bba4:	10800017 	ldw	r2,0(r2)
  80bba8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80bbac:	e0bffd17 	ldw	r2,-12(fp)
  80bbb0:	10800403 	ldbu	r2,16(r2)
  80bbb4:	10803fcc 	andi	r2,r2,255
  80bbb8:	10000426 	beq	r2,zero,80bbcc <alt_tick+0x54>
  80bbbc:	d0a73217 	ldw	r2,-25400(gp)
  80bbc0:	1000021e 	bne	r2,zero,80bbcc <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80bbc4:	e0bffd17 	ldw	r2,-12(fp)
  80bbc8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80bbcc:	e0bffd17 	ldw	r2,-12(fp)
  80bbd0:	10800217 	ldw	r2,8(r2)
  80bbd4:	d0e73217 	ldw	r3,-25400(gp)
  80bbd8:	18801d36 	bltu	r3,r2,80bc50 <alt_tick+0xd8>
  80bbdc:	e0bffd17 	ldw	r2,-12(fp)
  80bbe0:	10800403 	ldbu	r2,16(r2)
  80bbe4:	10803fcc 	andi	r2,r2,255
  80bbe8:	1000191e 	bne	r2,zero,80bc50 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80bbec:	e0bffd17 	ldw	r2,-12(fp)
  80bbf0:	10800317 	ldw	r2,12(r2)
  80bbf4:	e0fffd17 	ldw	r3,-12(fp)
  80bbf8:	18c00517 	ldw	r3,20(r3)
  80bbfc:	1809883a 	mov	r4,r3
  80bc00:	103ee83a 	callr	r2
  80bc04:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80bc08:	e0bfff17 	ldw	r2,-4(fp)
  80bc0c:	1000031e 	bne	r2,zero,80bc1c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80bc10:	e13ffd17 	ldw	r4,-12(fp)
  80bc14:	080badc0 	call	80badc <alt_alarm_stop>
  80bc18:	00000d06 	br	80bc50 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80bc1c:	e0bffd17 	ldw	r2,-12(fp)
  80bc20:	10c00217 	ldw	r3,8(r2)
  80bc24:	e0bfff17 	ldw	r2,-4(fp)
  80bc28:	1887883a 	add	r3,r3,r2
  80bc2c:	e0bffd17 	ldw	r2,-12(fp)
  80bc30:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80bc34:	e0bffd17 	ldw	r2,-12(fp)
  80bc38:	10c00217 	ldw	r3,8(r2)
  80bc3c:	d0a73217 	ldw	r2,-25400(gp)
  80bc40:	1880032e 	bgeu	r3,r2,80bc50 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80bc44:	e0bffd17 	ldw	r2,-12(fp)
  80bc48:	00c00044 	movi	r3,1
  80bc4c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80bc50:	e0bffe17 	ldw	r2,-8(fp)
  80bc54:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80bc58:	e0fffd17 	ldw	r3,-12(fp)
  80bc5c:	d0a00c04 	addi	r2,gp,-32720
  80bc60:	18bfcf1e 	bne	r3,r2,80bba0 <__alt_mem_onchip_mem+0xff803ba0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80bc64:	0001883a 	nop
}
  80bc68:	0001883a 	nop
  80bc6c:	e037883a 	mov	sp,fp
  80bc70:	dfc00117 	ldw	ra,4(sp)
  80bc74:	df000017 	ldw	fp,0(sp)
  80bc78:	dec00204 	addi	sp,sp,8
  80bc7c:	f800283a 	ret

0080bc80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80bc80:	defffe04 	addi	sp,sp,-8
  80bc84:	dfc00115 	stw	ra,4(sp)
  80bc88:	df000015 	stw	fp,0(sp)
  80bc8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80bc90:	d0a00917 	ldw	r2,-32732(gp)
  80bc94:	10000326 	beq	r2,zero,80bca4 <alt_get_errno+0x24>
  80bc98:	d0a00917 	ldw	r2,-32732(gp)
  80bc9c:	103ee83a 	callr	r2
  80bca0:	00000106 	br	80bca8 <alt_get_errno+0x28>
  80bca4:	d0a72904 	addi	r2,gp,-25436
}
  80bca8:	e037883a 	mov	sp,fp
  80bcac:	dfc00117 	ldw	ra,4(sp)
  80bcb0:	df000017 	ldw	fp,0(sp)
  80bcb4:	dec00204 	addi	sp,sp,8
  80bcb8:	f800283a 	ret

0080bcbc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80bcbc:	defff904 	addi	sp,sp,-28
  80bcc0:	dfc00615 	stw	ra,24(sp)
  80bcc4:	df000515 	stw	fp,20(sp)
  80bcc8:	df000504 	addi	fp,sp,20
  80bccc:	e13ffd15 	stw	r4,-12(fp)
  80bcd0:	e17ffe15 	stw	r5,-8(fp)
  80bcd4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80bcd8:	e0bffd17 	ldw	r2,-12(fp)
  80bcdc:	10000616 	blt	r2,zero,80bcf8 <write+0x3c>
  80bce0:	e0bffd17 	ldw	r2,-12(fp)
  80bce4:	10c00324 	muli	r3,r2,12
  80bce8:	00802074 	movhi	r2,129
  80bcec:	10bf3804 	addi	r2,r2,-800
  80bcf0:	1885883a 	add	r2,r3,r2
  80bcf4:	00000106 	br	80bcfc <write+0x40>
  80bcf8:	0005883a 	mov	r2,zero
  80bcfc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80bd00:	e0bffb17 	ldw	r2,-20(fp)
  80bd04:	10002126 	beq	r2,zero,80bd8c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80bd08:	e0bffb17 	ldw	r2,-20(fp)
  80bd0c:	10800217 	ldw	r2,8(r2)
  80bd10:	108000cc 	andi	r2,r2,3
  80bd14:	10001826 	beq	r2,zero,80bd78 <write+0xbc>
  80bd18:	e0bffb17 	ldw	r2,-20(fp)
  80bd1c:	10800017 	ldw	r2,0(r2)
  80bd20:	10800617 	ldw	r2,24(r2)
  80bd24:	10001426 	beq	r2,zero,80bd78 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80bd28:	e0bffb17 	ldw	r2,-20(fp)
  80bd2c:	10800017 	ldw	r2,0(r2)
  80bd30:	10800617 	ldw	r2,24(r2)
  80bd34:	e0ffff17 	ldw	r3,-4(fp)
  80bd38:	180d883a 	mov	r6,r3
  80bd3c:	e17ffe17 	ldw	r5,-8(fp)
  80bd40:	e13ffb17 	ldw	r4,-20(fp)
  80bd44:	103ee83a 	callr	r2
  80bd48:	e0bffc15 	stw	r2,-16(fp)
  80bd4c:	e0bffc17 	ldw	r2,-16(fp)
  80bd50:	1000070e 	bge	r2,zero,80bd70 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80bd54:	080bc800 	call	80bc80 <alt_get_errno>
  80bd58:	1007883a 	mov	r3,r2
  80bd5c:	e0bffc17 	ldw	r2,-16(fp)
  80bd60:	0085c83a 	sub	r2,zero,r2
  80bd64:	18800015 	stw	r2,0(r3)
        return -1;
  80bd68:	00bfffc4 	movi	r2,-1
  80bd6c:	00000c06 	br	80bda0 <write+0xe4>
      }
      return rval;
  80bd70:	e0bffc17 	ldw	r2,-16(fp)
  80bd74:	00000a06 	br	80bda0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80bd78:	080bc800 	call	80bc80 <alt_get_errno>
  80bd7c:	1007883a 	mov	r3,r2
  80bd80:	00800344 	movi	r2,13
  80bd84:	18800015 	stw	r2,0(r3)
  80bd88:	00000406 	br	80bd9c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80bd8c:	080bc800 	call	80bc80 <alt_get_errno>
  80bd90:	1007883a 	mov	r3,r2
  80bd94:	00801444 	movi	r2,81
  80bd98:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80bd9c:	00bfffc4 	movi	r2,-1
}
  80bda0:	e037883a 	mov	sp,fp
  80bda4:	dfc00117 	ldw	ra,4(sp)
  80bda8:	df000017 	ldw	fp,0(sp)
  80bdac:	dec00204 	addi	sp,sp,8
  80bdb0:	f800283a 	ret

0080bdb4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80bdb4:	defffd04 	addi	sp,sp,-12
  80bdb8:	dfc00215 	stw	ra,8(sp)
  80bdbc:	df000115 	stw	fp,4(sp)
  80bdc0:	df000104 	addi	fp,sp,4
  80bdc4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80bdc8:	d1600604 	addi	r5,gp,-32744
  80bdcc:	e13fff17 	ldw	r4,-4(fp)
  80bdd0:	080e24c0 	call	80e24c <alt_dev_llist_insert>
}
  80bdd4:	e037883a 	mov	sp,fp
  80bdd8:	dfc00117 	ldw	ra,4(sp)
  80bddc:	df000017 	ldw	fp,0(sp)
  80bde0:	dec00204 	addi	sp,sp,8
  80bde4:	f800283a 	ret

0080bde8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80bde8:	defffd04 	addi	sp,sp,-12
  80bdec:	dfc00215 	stw	ra,8(sp)
  80bdf0:	df000115 	stw	fp,4(sp)
  80bdf4:	df000104 	addi	fp,sp,4
  80bdf8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80bdfc:	080ea300 	call	80ea30 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80be00:	00800044 	movi	r2,1
  80be04:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80be08:	0001883a 	nop
  80be0c:	e037883a 	mov	sp,fp
  80be10:	dfc00117 	ldw	ra,4(sp)
  80be14:	df000017 	ldw	fp,0(sp)
  80be18:	dec00204 	addi	sp,sp,8
  80be1c:	f800283a 	ret

0080be20 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80be20:	defffe04 	addi	sp,sp,-8
  80be24:	dfc00115 	stw	ra,4(sp)
  80be28:	df000015 	stw	fp,0(sp)
  80be2c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80be30:	01c0fa04 	movi	r7,1000
  80be34:	01800084 	movi	r6,2
  80be38:	000b883a 	mov	r5,zero
  80be3c:	01004074 	movhi	r4,257
  80be40:	21040804 	addi	r4,r4,4128
  80be44:	080d8740 	call	80d874 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80be48:	01800044 	movi	r6,1
  80be4c:	000b883a 	mov	r5,zero
  80be50:	01002074 	movhi	r4,129
  80be54:	213fa204 	addi	r4,r4,-376
  80be58:	080c01c0 	call	80c01c <altera_avalon_jtag_uart_init>
  80be5c:	01002074 	movhi	r4,129
  80be60:	213f9804 	addi	r4,r4,-416
  80be64:	080bdb40 	call	80bdb4 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80be68:	01002074 	movhi	r4,129
  80be6c:	2103ba04 	addi	r4,r4,3816
  80be70:	080d6680 	call	80d668 <altera_avalon_lcd_16207_init>
  80be74:	01002074 	movhi	r4,129
  80be78:	2103b004 	addi	r4,r4,3776
  80be7c:	080bdb40 	call	80bdb4 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80be80:	000d883a 	mov	r6,zero
  80be84:	000b883a 	mov	r5,zero
  80be88:	01002074 	movhi	r4,129
  80be8c:	21040204 	addi	r4,r4,4104
  80be90:	080da000 	call	80da00 <altera_avalon_uart_init>
  80be94:	01002074 	movhi	r4,129
  80be98:	2103f804 	addi	r4,r4,4064
  80be9c:	080bdb40 	call	80bdb4 <alt_dev_reg>
}
  80bea0:	0001883a 	nop
  80bea4:	e037883a 	mov	sp,fp
  80bea8:	dfc00117 	ldw	ra,4(sp)
  80beac:	df000017 	ldw	fp,0(sp)
  80beb0:	dec00204 	addi	sp,sp,8
  80beb4:	f800283a 	ret

0080beb8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80beb8:	defffa04 	addi	sp,sp,-24
  80bebc:	dfc00515 	stw	ra,20(sp)
  80bec0:	df000415 	stw	fp,16(sp)
  80bec4:	df000404 	addi	fp,sp,16
  80bec8:	e13ffd15 	stw	r4,-12(fp)
  80becc:	e17ffe15 	stw	r5,-8(fp)
  80bed0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bed4:	e0bffd17 	ldw	r2,-12(fp)
  80bed8:	10800017 	ldw	r2,0(r2)
  80bedc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80bee0:	e0bffc17 	ldw	r2,-16(fp)
  80bee4:	10c00a04 	addi	r3,r2,40
  80bee8:	e0bffd17 	ldw	r2,-12(fp)
  80beec:	10800217 	ldw	r2,8(r2)
  80bef0:	100f883a 	mov	r7,r2
  80bef4:	e1bfff17 	ldw	r6,-4(fp)
  80bef8:	e17ffe17 	ldw	r5,-8(fp)
  80befc:	1809883a 	mov	r4,r3
  80bf00:	080c4e00 	call	80c4e0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80bf04:	e037883a 	mov	sp,fp
  80bf08:	dfc00117 	ldw	ra,4(sp)
  80bf0c:	df000017 	ldw	fp,0(sp)
  80bf10:	dec00204 	addi	sp,sp,8
  80bf14:	f800283a 	ret

0080bf18 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80bf18:	defffa04 	addi	sp,sp,-24
  80bf1c:	dfc00515 	stw	ra,20(sp)
  80bf20:	df000415 	stw	fp,16(sp)
  80bf24:	df000404 	addi	fp,sp,16
  80bf28:	e13ffd15 	stw	r4,-12(fp)
  80bf2c:	e17ffe15 	stw	r5,-8(fp)
  80bf30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bf34:	e0bffd17 	ldw	r2,-12(fp)
  80bf38:	10800017 	ldw	r2,0(r2)
  80bf3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80bf40:	e0bffc17 	ldw	r2,-16(fp)
  80bf44:	10c00a04 	addi	r3,r2,40
  80bf48:	e0bffd17 	ldw	r2,-12(fp)
  80bf4c:	10800217 	ldw	r2,8(r2)
  80bf50:	100f883a 	mov	r7,r2
  80bf54:	e1bfff17 	ldw	r6,-4(fp)
  80bf58:	e17ffe17 	ldw	r5,-8(fp)
  80bf5c:	1809883a 	mov	r4,r3
  80bf60:	080c6fc0 	call	80c6fc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80bf64:	e037883a 	mov	sp,fp
  80bf68:	dfc00117 	ldw	ra,4(sp)
  80bf6c:	df000017 	ldw	fp,0(sp)
  80bf70:	dec00204 	addi	sp,sp,8
  80bf74:	f800283a 	ret

0080bf78 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80bf78:	defffc04 	addi	sp,sp,-16
  80bf7c:	dfc00315 	stw	ra,12(sp)
  80bf80:	df000215 	stw	fp,8(sp)
  80bf84:	df000204 	addi	fp,sp,8
  80bf88:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bf8c:	e0bfff17 	ldw	r2,-4(fp)
  80bf90:	10800017 	ldw	r2,0(r2)
  80bf94:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80bf98:	e0bffe17 	ldw	r2,-8(fp)
  80bf9c:	10c00a04 	addi	r3,r2,40
  80bfa0:	e0bfff17 	ldw	r2,-4(fp)
  80bfa4:	10800217 	ldw	r2,8(r2)
  80bfa8:	100b883a 	mov	r5,r2
  80bfac:	1809883a 	mov	r4,r3
  80bfb0:	080c3880 	call	80c388 <altera_avalon_jtag_uart_close>
}
  80bfb4:	e037883a 	mov	sp,fp
  80bfb8:	dfc00117 	ldw	ra,4(sp)
  80bfbc:	df000017 	ldw	fp,0(sp)
  80bfc0:	dec00204 	addi	sp,sp,8
  80bfc4:	f800283a 	ret

0080bfc8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80bfc8:	defffa04 	addi	sp,sp,-24
  80bfcc:	dfc00515 	stw	ra,20(sp)
  80bfd0:	df000415 	stw	fp,16(sp)
  80bfd4:	df000404 	addi	fp,sp,16
  80bfd8:	e13ffd15 	stw	r4,-12(fp)
  80bfdc:	e17ffe15 	stw	r5,-8(fp)
  80bfe0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80bfe4:	e0bffd17 	ldw	r2,-12(fp)
  80bfe8:	10800017 	ldw	r2,0(r2)
  80bfec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80bff0:	e0bffc17 	ldw	r2,-16(fp)
  80bff4:	10800a04 	addi	r2,r2,40
  80bff8:	e1bfff17 	ldw	r6,-4(fp)
  80bffc:	e17ffe17 	ldw	r5,-8(fp)
  80c000:	1009883a 	mov	r4,r2
  80c004:	080c3f00 	call	80c3f0 <altera_avalon_jtag_uart_ioctl>
}
  80c008:	e037883a 	mov	sp,fp
  80c00c:	dfc00117 	ldw	ra,4(sp)
  80c010:	df000017 	ldw	fp,0(sp)
  80c014:	dec00204 	addi	sp,sp,8
  80c018:	f800283a 	ret

0080c01c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80c01c:	defffa04 	addi	sp,sp,-24
  80c020:	dfc00515 	stw	ra,20(sp)
  80c024:	df000415 	stw	fp,16(sp)
  80c028:	df000404 	addi	fp,sp,16
  80c02c:	e13ffd15 	stw	r4,-12(fp)
  80c030:	e17ffe15 	stw	r5,-8(fp)
  80c034:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c038:	e0bffd17 	ldw	r2,-12(fp)
  80c03c:	00c00044 	movi	r3,1
  80c040:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80c044:	e0bffd17 	ldw	r2,-12(fp)
  80c048:	10800017 	ldw	r2,0(r2)
  80c04c:	10800104 	addi	r2,r2,4
  80c050:	1007883a 	mov	r3,r2
  80c054:	e0bffd17 	ldw	r2,-12(fp)
  80c058:	10800817 	ldw	r2,32(r2)
  80c05c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80c060:	e0bffe17 	ldw	r2,-8(fp)
  80c064:	e0ffff17 	ldw	r3,-4(fp)
  80c068:	d8000015 	stw	zero,0(sp)
  80c06c:	e1fffd17 	ldw	r7,-12(fp)
  80c070:	01802074 	movhi	r6,129
  80c074:	31b03704 	addi	r6,r6,-16164
  80c078:	180b883a 	mov	r5,r3
  80c07c:	1009883a 	mov	r4,r2
  80c080:	080e6200 	call	80e620 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80c084:	e0bffd17 	ldw	r2,-12(fp)
  80c088:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80c08c:	e0bffd17 	ldw	r2,-12(fp)
  80c090:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80c094:	d0e73117 	ldw	r3,-25404(gp)
  80c098:	e1fffd17 	ldw	r7,-12(fp)
  80c09c:	01802074 	movhi	r6,129
  80c0a0:	31b0ba04 	addi	r6,r6,-15640
  80c0a4:	180b883a 	mov	r5,r3
  80c0a8:	1009883a 	mov	r4,r2
  80c0ac:	080adcc0 	call	80adcc <alt_alarm_start>
  80c0b0:	1000040e 	bge	r2,zero,80c0c4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80c0b4:	e0fffd17 	ldw	r3,-12(fp)
  80c0b8:	00a00034 	movhi	r2,32768
  80c0bc:	10bfffc4 	addi	r2,r2,-1
  80c0c0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80c0c4:	0001883a 	nop
  80c0c8:	e037883a 	mov	sp,fp
  80c0cc:	dfc00117 	ldw	ra,4(sp)
  80c0d0:	df000017 	ldw	fp,0(sp)
  80c0d4:	dec00204 	addi	sp,sp,8
  80c0d8:	f800283a 	ret

0080c0dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80c0dc:	defff804 	addi	sp,sp,-32
  80c0e0:	df000715 	stw	fp,28(sp)
  80c0e4:	df000704 	addi	fp,sp,28
  80c0e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80c0ec:	e0bfff17 	ldw	r2,-4(fp)
  80c0f0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80c0f4:	e0bffb17 	ldw	r2,-20(fp)
  80c0f8:	10800017 	ldw	r2,0(r2)
  80c0fc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c100:	e0bffc17 	ldw	r2,-16(fp)
  80c104:	10800104 	addi	r2,r2,4
  80c108:	10800037 	ldwio	r2,0(r2)
  80c10c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80c110:	e0bffd17 	ldw	r2,-12(fp)
  80c114:	1080c00c 	andi	r2,r2,768
  80c118:	10006d26 	beq	r2,zero,80c2d0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80c11c:	e0bffd17 	ldw	r2,-12(fp)
  80c120:	1080400c 	andi	r2,r2,256
  80c124:	10003526 	beq	r2,zero,80c1fc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80c128:	00800074 	movhi	r2,1
  80c12c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c130:	e0bffb17 	ldw	r2,-20(fp)
  80c134:	10800a17 	ldw	r2,40(r2)
  80c138:	10800044 	addi	r2,r2,1
  80c13c:	1081ffcc 	andi	r2,r2,2047
  80c140:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80c144:	e0bffb17 	ldw	r2,-20(fp)
  80c148:	10c00b17 	ldw	r3,44(r2)
  80c14c:	e0bffe17 	ldw	r2,-8(fp)
  80c150:	18801526 	beq	r3,r2,80c1a8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80c154:	e0bffc17 	ldw	r2,-16(fp)
  80c158:	10800037 	ldwio	r2,0(r2)
  80c15c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80c160:	e0bff917 	ldw	r2,-28(fp)
  80c164:	10a0000c 	andi	r2,r2,32768
  80c168:	10001126 	beq	r2,zero,80c1b0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80c16c:	e0bffb17 	ldw	r2,-20(fp)
  80c170:	10800a17 	ldw	r2,40(r2)
  80c174:	e0fff917 	ldw	r3,-28(fp)
  80c178:	1809883a 	mov	r4,r3
  80c17c:	e0fffb17 	ldw	r3,-20(fp)
  80c180:	1885883a 	add	r2,r3,r2
  80c184:	10800e04 	addi	r2,r2,56
  80c188:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c18c:	e0bffb17 	ldw	r2,-20(fp)
  80c190:	10800a17 	ldw	r2,40(r2)
  80c194:	10800044 	addi	r2,r2,1
  80c198:	10c1ffcc 	andi	r3,r2,2047
  80c19c:	e0bffb17 	ldw	r2,-20(fp)
  80c1a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80c1a4:	003fe206 	br	80c130 <__alt_mem_onchip_mem+0xff804130>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80c1a8:	0001883a 	nop
  80c1ac:	00000106 	br	80c1b4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80c1b0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80c1b4:	e0bff917 	ldw	r2,-28(fp)
  80c1b8:	10bfffec 	andhi	r2,r2,65535
  80c1bc:	10000f26 	beq	r2,zero,80c1fc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c1c0:	e0bffb17 	ldw	r2,-20(fp)
  80c1c4:	10c00817 	ldw	r3,32(r2)
  80c1c8:	00bfff84 	movi	r2,-2
  80c1cc:	1886703a 	and	r3,r3,r2
  80c1d0:	e0bffb17 	ldw	r2,-20(fp)
  80c1d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80c1d8:	e0bffc17 	ldw	r2,-16(fp)
  80c1dc:	10800104 	addi	r2,r2,4
  80c1e0:	1007883a 	mov	r3,r2
  80c1e4:	e0bffb17 	ldw	r2,-20(fp)
  80c1e8:	10800817 	ldw	r2,32(r2)
  80c1ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c1f0:	e0bffc17 	ldw	r2,-16(fp)
  80c1f4:	10800104 	addi	r2,r2,4
  80c1f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80c1fc:	e0bffd17 	ldw	r2,-12(fp)
  80c200:	1080800c 	andi	r2,r2,512
  80c204:	103fbe26 	beq	r2,zero,80c100 <__alt_mem_onchip_mem+0xff804100>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80c208:	e0bffd17 	ldw	r2,-12(fp)
  80c20c:	1004d43a 	srli	r2,r2,16
  80c210:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80c214:	00001406 	br	80c268 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80c218:	e0bffc17 	ldw	r2,-16(fp)
  80c21c:	e0fffb17 	ldw	r3,-20(fp)
  80c220:	18c00d17 	ldw	r3,52(r3)
  80c224:	e13ffb17 	ldw	r4,-20(fp)
  80c228:	20c7883a 	add	r3,r4,r3
  80c22c:	18c20e04 	addi	r3,r3,2104
  80c230:	18c00003 	ldbu	r3,0(r3)
  80c234:	18c03fcc 	andi	r3,r3,255
  80c238:	18c0201c 	xori	r3,r3,128
  80c23c:	18ffe004 	addi	r3,r3,-128
  80c240:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c244:	e0bffb17 	ldw	r2,-20(fp)
  80c248:	10800d17 	ldw	r2,52(r2)
  80c24c:	10800044 	addi	r2,r2,1
  80c250:	10c1ffcc 	andi	r3,r2,2047
  80c254:	e0bffb17 	ldw	r2,-20(fp)
  80c258:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80c25c:	e0bffa17 	ldw	r2,-24(fp)
  80c260:	10bfffc4 	addi	r2,r2,-1
  80c264:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80c268:	e0bffa17 	ldw	r2,-24(fp)
  80c26c:	10000526 	beq	r2,zero,80c284 <altera_avalon_jtag_uart_irq+0x1a8>
  80c270:	e0bffb17 	ldw	r2,-20(fp)
  80c274:	10c00d17 	ldw	r3,52(r2)
  80c278:	e0bffb17 	ldw	r2,-20(fp)
  80c27c:	10800c17 	ldw	r2,48(r2)
  80c280:	18bfe51e 	bne	r3,r2,80c218 <__alt_mem_onchip_mem+0xff804218>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80c284:	e0bffa17 	ldw	r2,-24(fp)
  80c288:	103f9d26 	beq	r2,zero,80c100 <__alt_mem_onchip_mem+0xff804100>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80c28c:	e0bffb17 	ldw	r2,-20(fp)
  80c290:	10c00817 	ldw	r3,32(r2)
  80c294:	00bfff44 	movi	r2,-3
  80c298:	1886703a 	and	r3,r3,r2
  80c29c:	e0bffb17 	ldw	r2,-20(fp)
  80c2a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c2a4:	e0bffb17 	ldw	r2,-20(fp)
  80c2a8:	10800017 	ldw	r2,0(r2)
  80c2ac:	10800104 	addi	r2,r2,4
  80c2b0:	1007883a 	mov	r3,r2
  80c2b4:	e0bffb17 	ldw	r2,-20(fp)
  80c2b8:	10800817 	ldw	r2,32(r2)
  80c2bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c2c0:	e0bffc17 	ldw	r2,-16(fp)
  80c2c4:	10800104 	addi	r2,r2,4
  80c2c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80c2cc:	003f8c06 	br	80c100 <__alt_mem_onchip_mem+0xff804100>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80c2d0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80c2d4:	0001883a 	nop
  80c2d8:	e037883a 	mov	sp,fp
  80c2dc:	df000017 	ldw	fp,0(sp)
  80c2e0:	dec00104 	addi	sp,sp,4
  80c2e4:	f800283a 	ret

0080c2e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80c2e8:	defff804 	addi	sp,sp,-32
  80c2ec:	df000715 	stw	fp,28(sp)
  80c2f0:	df000704 	addi	fp,sp,28
  80c2f4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80c2f8:	e0bffb17 	ldw	r2,-20(fp)
  80c2fc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80c300:	e0bff917 	ldw	r2,-28(fp)
  80c304:	10800017 	ldw	r2,0(r2)
  80c308:	10800104 	addi	r2,r2,4
  80c30c:	10800037 	ldwio	r2,0(r2)
  80c310:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80c314:	e0bffa17 	ldw	r2,-24(fp)
  80c318:	1081000c 	andi	r2,r2,1024
  80c31c:	10000b26 	beq	r2,zero,80c34c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80c320:	e0bff917 	ldw	r2,-28(fp)
  80c324:	10800017 	ldw	r2,0(r2)
  80c328:	10800104 	addi	r2,r2,4
  80c32c:	1007883a 	mov	r3,r2
  80c330:	e0bff917 	ldw	r2,-28(fp)
  80c334:	10800817 	ldw	r2,32(r2)
  80c338:	10810014 	ori	r2,r2,1024
  80c33c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80c340:	e0bff917 	ldw	r2,-28(fp)
  80c344:	10000915 	stw	zero,36(r2)
  80c348:	00000a06 	br	80c374 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80c34c:	e0bff917 	ldw	r2,-28(fp)
  80c350:	10c00917 	ldw	r3,36(r2)
  80c354:	00a00034 	movhi	r2,32768
  80c358:	10bfff04 	addi	r2,r2,-4
  80c35c:	10c00536 	bltu	r2,r3,80c374 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80c360:	e0bff917 	ldw	r2,-28(fp)
  80c364:	10800917 	ldw	r2,36(r2)
  80c368:	10c00044 	addi	r3,r2,1
  80c36c:	e0bff917 	ldw	r2,-28(fp)
  80c370:	10c00915 	stw	r3,36(r2)
  80c374:	d0a73117 	ldw	r2,-25404(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80c378:	e037883a 	mov	sp,fp
  80c37c:	df000017 	ldw	fp,0(sp)
  80c380:	dec00104 	addi	sp,sp,4
  80c384:	f800283a 	ret

0080c388 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80c388:	defffd04 	addi	sp,sp,-12
  80c38c:	df000215 	stw	fp,8(sp)
  80c390:	df000204 	addi	fp,sp,8
  80c394:	e13ffe15 	stw	r4,-8(fp)
  80c398:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c39c:	00000506 	br	80c3b4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80c3a0:	e0bfff17 	ldw	r2,-4(fp)
  80c3a4:	1090000c 	andi	r2,r2,16384
  80c3a8:	10000226 	beq	r2,zero,80c3b4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80c3ac:	00bffd44 	movi	r2,-11
  80c3b0:	00000b06 	br	80c3e0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c3b4:	e0bffe17 	ldw	r2,-8(fp)
  80c3b8:	10c00d17 	ldw	r3,52(r2)
  80c3bc:	e0bffe17 	ldw	r2,-8(fp)
  80c3c0:	10800c17 	ldw	r2,48(r2)
  80c3c4:	18800526 	beq	r3,r2,80c3dc <altera_avalon_jtag_uart_close+0x54>
  80c3c8:	e0bffe17 	ldw	r2,-8(fp)
  80c3cc:	10c00917 	ldw	r3,36(r2)
  80c3d0:	e0bffe17 	ldw	r2,-8(fp)
  80c3d4:	10800117 	ldw	r2,4(r2)
  80c3d8:	18bff136 	bltu	r3,r2,80c3a0 <__alt_mem_onchip_mem+0xff8043a0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80c3dc:	0005883a 	mov	r2,zero
}
  80c3e0:	e037883a 	mov	sp,fp
  80c3e4:	df000017 	ldw	fp,0(sp)
  80c3e8:	dec00104 	addi	sp,sp,4
  80c3ec:	f800283a 	ret

0080c3f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80c3f0:	defffa04 	addi	sp,sp,-24
  80c3f4:	df000515 	stw	fp,20(sp)
  80c3f8:	df000504 	addi	fp,sp,20
  80c3fc:	e13ffd15 	stw	r4,-12(fp)
  80c400:	e17ffe15 	stw	r5,-8(fp)
  80c404:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80c408:	00bff9c4 	movi	r2,-25
  80c40c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80c410:	e0bffe17 	ldw	r2,-8(fp)
  80c414:	10da8060 	cmpeqi	r3,r2,27137
  80c418:	1800031e 	bne	r3,zero,80c428 <altera_avalon_jtag_uart_ioctl+0x38>
  80c41c:	109a80a0 	cmpeqi	r2,r2,27138
  80c420:	1000181e 	bne	r2,zero,80c484 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80c424:	00002906 	br	80c4cc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80c428:	e0bffd17 	ldw	r2,-12(fp)
  80c42c:	10c00117 	ldw	r3,4(r2)
  80c430:	00a00034 	movhi	r2,32768
  80c434:	10bfffc4 	addi	r2,r2,-1
  80c438:	18802126 	beq	r3,r2,80c4c0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80c43c:	e0bfff17 	ldw	r2,-4(fp)
  80c440:	10800017 	ldw	r2,0(r2)
  80c444:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80c448:	e0bffc17 	ldw	r2,-16(fp)
  80c44c:	10800090 	cmplti	r2,r2,2
  80c450:	1000061e 	bne	r2,zero,80c46c <altera_avalon_jtag_uart_ioctl+0x7c>
  80c454:	e0fffc17 	ldw	r3,-16(fp)
  80c458:	00a00034 	movhi	r2,32768
  80c45c:	10bfffc4 	addi	r2,r2,-1
  80c460:	18800226 	beq	r3,r2,80c46c <altera_avalon_jtag_uart_ioctl+0x7c>
  80c464:	e0bffc17 	ldw	r2,-16(fp)
  80c468:	00000206 	br	80c474 <altera_avalon_jtag_uart_ioctl+0x84>
  80c46c:	00a00034 	movhi	r2,32768
  80c470:	10bfff84 	addi	r2,r2,-2
  80c474:	e0fffd17 	ldw	r3,-12(fp)
  80c478:	18800115 	stw	r2,4(r3)
      rc = 0;
  80c47c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80c480:	00000f06 	br	80c4c0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80c484:	e0bffd17 	ldw	r2,-12(fp)
  80c488:	10c00117 	ldw	r3,4(r2)
  80c48c:	00a00034 	movhi	r2,32768
  80c490:	10bfffc4 	addi	r2,r2,-1
  80c494:	18800c26 	beq	r3,r2,80c4c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80c498:	e0bffd17 	ldw	r2,-12(fp)
  80c49c:	10c00917 	ldw	r3,36(r2)
  80c4a0:	e0bffd17 	ldw	r2,-12(fp)
  80c4a4:	10800117 	ldw	r2,4(r2)
  80c4a8:	1885803a 	cmpltu	r2,r3,r2
  80c4ac:	10c03fcc 	andi	r3,r2,255
  80c4b0:	e0bfff17 	ldw	r2,-4(fp)
  80c4b4:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80c4b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80c4bc:	00000206 	br	80c4c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80c4c0:	0001883a 	nop
  80c4c4:	00000106 	br	80c4cc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80c4c8:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80c4cc:	e0bffb17 	ldw	r2,-20(fp)
}
  80c4d0:	e037883a 	mov	sp,fp
  80c4d4:	df000017 	ldw	fp,0(sp)
  80c4d8:	dec00104 	addi	sp,sp,4
  80c4dc:	f800283a 	ret

0080c4e0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80c4e0:	defff304 	addi	sp,sp,-52
  80c4e4:	dfc00c15 	stw	ra,48(sp)
  80c4e8:	df000b15 	stw	fp,44(sp)
  80c4ec:	df000b04 	addi	fp,sp,44
  80c4f0:	e13ffc15 	stw	r4,-16(fp)
  80c4f4:	e17ffd15 	stw	r5,-12(fp)
  80c4f8:	e1bffe15 	stw	r6,-8(fp)
  80c4fc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80c500:	e0bffd17 	ldw	r2,-12(fp)
  80c504:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c508:	00004706 	br	80c628 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80c50c:	e0bffc17 	ldw	r2,-16(fp)
  80c510:	10800a17 	ldw	r2,40(r2)
  80c514:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80c518:	e0bffc17 	ldw	r2,-16(fp)
  80c51c:	10800b17 	ldw	r2,44(r2)
  80c520:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80c524:	e0fff717 	ldw	r3,-36(fp)
  80c528:	e0bff817 	ldw	r2,-32(fp)
  80c52c:	18800536 	bltu	r3,r2,80c544 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80c530:	e0fff717 	ldw	r3,-36(fp)
  80c534:	e0bff817 	ldw	r2,-32(fp)
  80c538:	1885c83a 	sub	r2,r3,r2
  80c53c:	e0bff615 	stw	r2,-40(fp)
  80c540:	00000406 	br	80c554 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80c544:	00c20004 	movi	r3,2048
  80c548:	e0bff817 	ldw	r2,-32(fp)
  80c54c:	1885c83a 	sub	r2,r3,r2
  80c550:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80c554:	e0bff617 	ldw	r2,-40(fp)
  80c558:	10001e26 	beq	r2,zero,80c5d4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80c55c:	e0fffe17 	ldw	r3,-8(fp)
  80c560:	e0bff617 	ldw	r2,-40(fp)
  80c564:	1880022e 	bgeu	r3,r2,80c570 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80c568:	e0bffe17 	ldw	r2,-8(fp)
  80c56c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80c570:	e0bffc17 	ldw	r2,-16(fp)
  80c574:	10c00e04 	addi	r3,r2,56
  80c578:	e0bff817 	ldw	r2,-32(fp)
  80c57c:	1885883a 	add	r2,r3,r2
  80c580:	e1bff617 	ldw	r6,-40(fp)
  80c584:	100b883a 	mov	r5,r2
  80c588:	e13ff517 	ldw	r4,-44(fp)
  80c58c:	080a1580 	call	80a158 <memcpy>
      ptr   += n;
  80c590:	e0fff517 	ldw	r3,-44(fp)
  80c594:	e0bff617 	ldw	r2,-40(fp)
  80c598:	1885883a 	add	r2,r3,r2
  80c59c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80c5a0:	e0fffe17 	ldw	r3,-8(fp)
  80c5a4:	e0bff617 	ldw	r2,-40(fp)
  80c5a8:	1885c83a 	sub	r2,r3,r2
  80c5ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c5b0:	e0fff817 	ldw	r3,-32(fp)
  80c5b4:	e0bff617 	ldw	r2,-40(fp)
  80c5b8:	1885883a 	add	r2,r3,r2
  80c5bc:	10c1ffcc 	andi	r3,r2,2047
  80c5c0:	e0bffc17 	ldw	r2,-16(fp)
  80c5c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80c5c8:	e0bffe17 	ldw	r2,-8(fp)
  80c5cc:	00bfcf16 	blt	zero,r2,80c50c <__alt_mem_onchip_mem+0xff80450c>
  80c5d0:	00000106 	br	80c5d8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80c5d4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80c5d8:	e0fff517 	ldw	r3,-44(fp)
  80c5dc:	e0bffd17 	ldw	r2,-12(fp)
  80c5e0:	1880141e 	bne	r3,r2,80c634 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80c5e4:	e0bfff17 	ldw	r2,-4(fp)
  80c5e8:	1090000c 	andi	r2,r2,16384
  80c5ec:	1000131e 	bne	r2,zero,80c63c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80c5f0:	0001883a 	nop
  80c5f4:	e0bffc17 	ldw	r2,-16(fp)
  80c5f8:	10c00a17 	ldw	r3,40(r2)
  80c5fc:	e0bff717 	ldw	r2,-36(fp)
  80c600:	1880051e 	bne	r3,r2,80c618 <altera_avalon_jtag_uart_read+0x138>
  80c604:	e0bffc17 	ldw	r2,-16(fp)
  80c608:	10c00917 	ldw	r3,36(r2)
  80c60c:	e0bffc17 	ldw	r2,-16(fp)
  80c610:	10800117 	ldw	r2,4(r2)
  80c614:	18bff736 	bltu	r3,r2,80c5f4 <__alt_mem_onchip_mem+0xff8045f4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80c618:	e0bffc17 	ldw	r2,-16(fp)
  80c61c:	10c00a17 	ldw	r3,40(r2)
  80c620:	e0bff717 	ldw	r2,-36(fp)
  80c624:	18800726 	beq	r3,r2,80c644 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c628:	e0bffe17 	ldw	r2,-8(fp)
  80c62c:	00bfb716 	blt	zero,r2,80c50c <__alt_mem_onchip_mem+0xff80450c>
  80c630:	00000506 	br	80c648 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80c634:	0001883a 	nop
  80c638:	00000306 	br	80c648 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80c63c:	0001883a 	nop
  80c640:	00000106 	br	80c648 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80c644:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80c648:	e0fff517 	ldw	r3,-44(fp)
  80c64c:	e0bffd17 	ldw	r2,-12(fp)
  80c650:	18801826 	beq	r3,r2,80c6b4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c654:	0005303a 	rdctl	r2,status
  80c658:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c65c:	e0fffb17 	ldw	r3,-20(fp)
  80c660:	00bfff84 	movi	r2,-2
  80c664:	1884703a 	and	r2,r3,r2
  80c668:	1001703a 	wrctl	status,r2
  
  return context;
  80c66c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80c670:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c674:	e0bffc17 	ldw	r2,-16(fp)
  80c678:	10800817 	ldw	r2,32(r2)
  80c67c:	10c00054 	ori	r3,r2,1
  80c680:	e0bffc17 	ldw	r2,-16(fp)
  80c684:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c688:	e0bffc17 	ldw	r2,-16(fp)
  80c68c:	10800017 	ldw	r2,0(r2)
  80c690:	10800104 	addi	r2,r2,4
  80c694:	1007883a 	mov	r3,r2
  80c698:	e0bffc17 	ldw	r2,-16(fp)
  80c69c:	10800817 	ldw	r2,32(r2)
  80c6a0:	18800035 	stwio	r2,0(r3)
  80c6a4:	e0bffa17 	ldw	r2,-24(fp)
  80c6a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c6ac:	e0bff917 	ldw	r2,-28(fp)
  80c6b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80c6b4:	e0fff517 	ldw	r3,-44(fp)
  80c6b8:	e0bffd17 	ldw	r2,-12(fp)
  80c6bc:	18800426 	beq	r3,r2,80c6d0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80c6c0:	e0fff517 	ldw	r3,-44(fp)
  80c6c4:	e0bffd17 	ldw	r2,-12(fp)
  80c6c8:	1885c83a 	sub	r2,r3,r2
  80c6cc:	00000606 	br	80c6e8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80c6d0:	e0bfff17 	ldw	r2,-4(fp)
  80c6d4:	1090000c 	andi	r2,r2,16384
  80c6d8:	10000226 	beq	r2,zero,80c6e4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80c6dc:	00bffd44 	movi	r2,-11
  80c6e0:	00000106 	br	80c6e8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80c6e4:	00bffec4 	movi	r2,-5
}
  80c6e8:	e037883a 	mov	sp,fp
  80c6ec:	dfc00117 	ldw	ra,4(sp)
  80c6f0:	df000017 	ldw	fp,0(sp)
  80c6f4:	dec00204 	addi	sp,sp,8
  80c6f8:	f800283a 	ret

0080c6fc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80c6fc:	defff304 	addi	sp,sp,-52
  80c700:	dfc00c15 	stw	ra,48(sp)
  80c704:	df000b15 	stw	fp,44(sp)
  80c708:	df000b04 	addi	fp,sp,44
  80c70c:	e13ffc15 	stw	r4,-16(fp)
  80c710:	e17ffd15 	stw	r5,-12(fp)
  80c714:	e1bffe15 	stw	r6,-8(fp)
  80c718:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80c71c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80c720:	e0bffd17 	ldw	r2,-12(fp)
  80c724:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c728:	00003706 	br	80c808 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80c72c:	e0bffc17 	ldw	r2,-16(fp)
  80c730:	10800c17 	ldw	r2,48(r2)
  80c734:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80c738:	e0bffc17 	ldw	r2,-16(fp)
  80c73c:	10800d17 	ldw	r2,52(r2)
  80c740:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80c744:	e0fff917 	ldw	r3,-28(fp)
  80c748:	e0bff517 	ldw	r2,-44(fp)
  80c74c:	1880062e 	bgeu	r3,r2,80c768 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80c750:	e0fff517 	ldw	r3,-44(fp)
  80c754:	e0bff917 	ldw	r2,-28(fp)
  80c758:	1885c83a 	sub	r2,r3,r2
  80c75c:	10bfffc4 	addi	r2,r2,-1
  80c760:	e0bff615 	stw	r2,-40(fp)
  80c764:	00000b06 	br	80c794 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80c768:	e0bff517 	ldw	r2,-44(fp)
  80c76c:	10000526 	beq	r2,zero,80c784 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80c770:	00c20004 	movi	r3,2048
  80c774:	e0bff917 	ldw	r2,-28(fp)
  80c778:	1885c83a 	sub	r2,r3,r2
  80c77c:	e0bff615 	stw	r2,-40(fp)
  80c780:	00000406 	br	80c794 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80c784:	00c1ffc4 	movi	r3,2047
  80c788:	e0bff917 	ldw	r2,-28(fp)
  80c78c:	1885c83a 	sub	r2,r3,r2
  80c790:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80c794:	e0bff617 	ldw	r2,-40(fp)
  80c798:	10001e26 	beq	r2,zero,80c814 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80c79c:	e0fffe17 	ldw	r3,-8(fp)
  80c7a0:	e0bff617 	ldw	r2,-40(fp)
  80c7a4:	1880022e 	bgeu	r3,r2,80c7b0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80c7a8:	e0bffe17 	ldw	r2,-8(fp)
  80c7ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80c7b0:	e0bffc17 	ldw	r2,-16(fp)
  80c7b4:	10c20e04 	addi	r3,r2,2104
  80c7b8:	e0bff917 	ldw	r2,-28(fp)
  80c7bc:	1885883a 	add	r2,r3,r2
  80c7c0:	e1bff617 	ldw	r6,-40(fp)
  80c7c4:	e17ffd17 	ldw	r5,-12(fp)
  80c7c8:	1009883a 	mov	r4,r2
  80c7cc:	080a1580 	call	80a158 <memcpy>
      ptr   += n;
  80c7d0:	e0fffd17 	ldw	r3,-12(fp)
  80c7d4:	e0bff617 	ldw	r2,-40(fp)
  80c7d8:	1885883a 	add	r2,r3,r2
  80c7dc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80c7e0:	e0fffe17 	ldw	r3,-8(fp)
  80c7e4:	e0bff617 	ldw	r2,-40(fp)
  80c7e8:	1885c83a 	sub	r2,r3,r2
  80c7ec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c7f0:	e0fff917 	ldw	r3,-28(fp)
  80c7f4:	e0bff617 	ldw	r2,-40(fp)
  80c7f8:	1885883a 	add	r2,r3,r2
  80c7fc:	10c1ffcc 	andi	r3,r2,2047
  80c800:	e0bffc17 	ldw	r2,-16(fp)
  80c804:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c808:	e0bffe17 	ldw	r2,-8(fp)
  80c80c:	00bfc716 	blt	zero,r2,80c72c <__alt_mem_onchip_mem+0xff80472c>
  80c810:	00000106 	br	80c818 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80c814:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c818:	0005303a 	rdctl	r2,status
  80c81c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c820:	e0fffb17 	ldw	r3,-20(fp)
  80c824:	00bfff84 	movi	r2,-2
  80c828:	1884703a 	and	r2,r3,r2
  80c82c:	1001703a 	wrctl	status,r2
  
  return context;
  80c830:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80c834:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80c838:	e0bffc17 	ldw	r2,-16(fp)
  80c83c:	10800817 	ldw	r2,32(r2)
  80c840:	10c00094 	ori	r3,r2,2
  80c844:	e0bffc17 	ldw	r2,-16(fp)
  80c848:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c84c:	e0bffc17 	ldw	r2,-16(fp)
  80c850:	10800017 	ldw	r2,0(r2)
  80c854:	10800104 	addi	r2,r2,4
  80c858:	1007883a 	mov	r3,r2
  80c85c:	e0bffc17 	ldw	r2,-16(fp)
  80c860:	10800817 	ldw	r2,32(r2)
  80c864:	18800035 	stwio	r2,0(r3)
  80c868:	e0bffa17 	ldw	r2,-24(fp)
  80c86c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c870:	e0bff817 	ldw	r2,-32(fp)
  80c874:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80c878:	e0bffe17 	ldw	r2,-8(fp)
  80c87c:	0080100e 	bge	zero,r2,80c8c0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80c880:	e0bfff17 	ldw	r2,-4(fp)
  80c884:	1090000c 	andi	r2,r2,16384
  80c888:	1000101e 	bne	r2,zero,80c8cc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80c88c:	0001883a 	nop
  80c890:	e0bffc17 	ldw	r2,-16(fp)
  80c894:	10c00d17 	ldw	r3,52(r2)
  80c898:	e0bff517 	ldw	r2,-44(fp)
  80c89c:	1880051e 	bne	r3,r2,80c8b4 <altera_avalon_jtag_uart_write+0x1b8>
  80c8a0:	e0bffc17 	ldw	r2,-16(fp)
  80c8a4:	10c00917 	ldw	r3,36(r2)
  80c8a8:	e0bffc17 	ldw	r2,-16(fp)
  80c8ac:	10800117 	ldw	r2,4(r2)
  80c8b0:	18bff736 	bltu	r3,r2,80c890 <__alt_mem_onchip_mem+0xff804890>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80c8b4:	e0bffc17 	ldw	r2,-16(fp)
  80c8b8:	10800917 	ldw	r2,36(r2)
  80c8bc:	1000051e 	bne	r2,zero,80c8d4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80c8c0:	e0bffe17 	ldw	r2,-8(fp)
  80c8c4:	00bfd016 	blt	zero,r2,80c808 <__alt_mem_onchip_mem+0xff804808>
  80c8c8:	00000306 	br	80c8d8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80c8cc:	0001883a 	nop
  80c8d0:	00000106 	br	80c8d8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80c8d4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80c8d8:	e0fffd17 	ldw	r3,-12(fp)
  80c8dc:	e0bff717 	ldw	r2,-36(fp)
  80c8e0:	18800426 	beq	r3,r2,80c8f4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80c8e4:	e0fffd17 	ldw	r3,-12(fp)
  80c8e8:	e0bff717 	ldw	r2,-36(fp)
  80c8ec:	1885c83a 	sub	r2,r3,r2
  80c8f0:	00000606 	br	80c90c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80c8f4:	e0bfff17 	ldw	r2,-4(fp)
  80c8f8:	1090000c 	andi	r2,r2,16384
  80c8fc:	10000226 	beq	r2,zero,80c908 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80c900:	00bffd44 	movi	r2,-11
  80c904:	00000106 	br	80c90c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80c908:	00bffec4 	movi	r2,-5
}
  80c90c:	e037883a 	mov	sp,fp
  80c910:	dfc00117 	ldw	ra,4(sp)
  80c914:	df000017 	ldw	fp,0(sp)
  80c918:	dec00204 	addi	sp,sp,8
  80c91c:	f800283a 	ret

0080c920 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80c920:	defffa04 	addi	sp,sp,-24
  80c924:	dfc00515 	stw	ra,20(sp)
  80c928:	df000415 	stw	fp,16(sp)
  80c92c:	df000404 	addi	fp,sp,16
  80c930:	e13ffe15 	stw	r4,-8(fp)
  80c934:	2805883a 	mov	r2,r5
  80c938:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80c93c:	e0bffe17 	ldw	r2,-8(fp)
  80c940:	10800017 	ldw	r2,0(r2)
  80c944:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80c948:	008003f4 	movhi	r2,15
  80c94c:	10909004 	addi	r2,r2,16960
  80c950:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80c954:	e0bffe17 	ldw	r2,-8(fp)
  80c958:	10800803 	ldbu	r2,32(r2)
  80c95c:	10803fcc 	andi	r2,r2,255
  80c960:	1080201c 	xori	r2,r2,128
  80c964:	10bfe004 	addi	r2,r2,-128
  80c968:	1000151e 	bne	r2,zero,80c9c0 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80c96c:	00000906 	br	80c994 <lcd_write_command+0x74>
    if (--i == 0)
  80c970:	e0bffc17 	ldw	r2,-16(fp)
  80c974:	10bfffc4 	addi	r2,r2,-1
  80c978:	e0bffc15 	stw	r2,-16(fp)
  80c97c:	e0bffc17 	ldw	r2,-16(fp)
  80c980:	1000041e 	bne	r2,zero,80c994 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  80c984:	e0bffe17 	ldw	r2,-8(fp)
  80c988:	00c00044 	movi	r3,1
  80c98c:	10c00805 	stb	r3,32(r2)
      return;
  80c990:	00000c06 	br	80c9c4 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80c994:	e0bffd17 	ldw	r2,-12(fp)
  80c998:	10800104 	addi	r2,r2,4
  80c99c:	10800037 	ldwio	r2,0(r2)
  80c9a0:	1080200c 	andi	r2,r2,128
  80c9a4:	103ff21e 	bne	r2,zero,80c970 <__alt_mem_onchip_mem+0xff804970>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80c9a8:	01001904 	movi	r4,100
  80c9ac:	080ea000 	call	80ea00 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80c9b0:	e0bffd17 	ldw	r2,-12(fp)
  80c9b4:	e0ffff03 	ldbu	r3,-4(fp)
  80c9b8:	10c00035 	stwio	r3,0(r2)
  80c9bc:	00000106 	br	80c9c4 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80c9c0:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  80c9c4:	e037883a 	mov	sp,fp
  80c9c8:	dfc00117 	ldw	ra,4(sp)
  80c9cc:	df000017 	ldw	fp,0(sp)
  80c9d0:	dec00204 	addi	sp,sp,8
  80c9d4:	f800283a 	ret

0080c9d8 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80c9d8:	defffa04 	addi	sp,sp,-24
  80c9dc:	dfc00515 	stw	ra,20(sp)
  80c9e0:	df000415 	stw	fp,16(sp)
  80c9e4:	df000404 	addi	fp,sp,16
  80c9e8:	e13ffe15 	stw	r4,-8(fp)
  80c9ec:	2805883a 	mov	r2,r5
  80c9f0:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80c9f4:	e0bffe17 	ldw	r2,-8(fp)
  80c9f8:	10800017 	ldw	r2,0(r2)
  80c9fc:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80ca00:	008003f4 	movhi	r2,15
  80ca04:	10909004 	addi	r2,r2,16960
  80ca08:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80ca0c:	e0bffe17 	ldw	r2,-8(fp)
  80ca10:	10800803 	ldbu	r2,32(r2)
  80ca14:	10803fcc 	andi	r2,r2,255
  80ca18:	1080201c 	xori	r2,r2,128
  80ca1c:	10bfe004 	addi	r2,r2,-128
  80ca20:	10001d1e 	bne	r2,zero,80ca98 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80ca24:	00000906 	br	80ca4c <lcd_write_data+0x74>
    if (--i == 0)
  80ca28:	e0bffc17 	ldw	r2,-16(fp)
  80ca2c:	10bfffc4 	addi	r2,r2,-1
  80ca30:	e0bffc15 	stw	r2,-16(fp)
  80ca34:	e0bffc17 	ldw	r2,-16(fp)
  80ca38:	1000041e 	bne	r2,zero,80ca4c <lcd_write_data+0x74>
    {
      sp->broken = 1;
  80ca3c:	e0bffe17 	ldw	r2,-8(fp)
  80ca40:	00c00044 	movi	r3,1
  80ca44:	10c00805 	stb	r3,32(r2)
      return;
  80ca48:	00001406 	br	80ca9c <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80ca4c:	e0bffd17 	ldw	r2,-12(fp)
  80ca50:	10800104 	addi	r2,r2,4
  80ca54:	10800037 	ldwio	r2,0(r2)
  80ca58:	1080200c 	andi	r2,r2,128
  80ca5c:	103ff21e 	bne	r2,zero,80ca28 <__alt_mem_onchip_mem+0xff804a28>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80ca60:	01001904 	movi	r4,100
  80ca64:	080ea000 	call	80ea00 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80ca68:	e0bffd17 	ldw	r2,-12(fp)
  80ca6c:	10800204 	addi	r2,r2,8
  80ca70:	1007883a 	mov	r3,r2
  80ca74:	e0bfff03 	ldbu	r2,-4(fp)
  80ca78:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80ca7c:	e0bffe17 	ldw	r2,-8(fp)
  80ca80:	108008c3 	ldbu	r2,35(r2)
  80ca84:	10800044 	addi	r2,r2,1
  80ca88:	1007883a 	mov	r3,r2
  80ca8c:	e0bffe17 	ldw	r2,-8(fp)
  80ca90:	10c008c5 	stb	r3,35(r2)
  80ca94:	00000106 	br	80ca9c <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80ca98:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  80ca9c:	e037883a 	mov	sp,fp
  80caa0:	dfc00117 	ldw	ra,4(sp)
  80caa4:	df000017 	ldw	fp,0(sp)
  80caa8:	dec00204 	addi	sp,sp,8
  80caac:	f800283a 	ret

0080cab0 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80cab0:	defffc04 	addi	sp,sp,-16
  80cab4:	dfc00315 	stw	ra,12(sp)
  80cab8:	df000215 	stw	fp,8(sp)
  80cabc:	df000204 	addi	fp,sp,8
  80cac0:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80cac4:	01400044 	movi	r5,1
  80cac8:	e13fff17 	ldw	r4,-4(fp)
  80cacc:	080c9200 	call	80c920 <lcd_write_command>

  sp->x = 0;
  80cad0:	e0bfff17 	ldw	r2,-4(fp)
  80cad4:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80cad8:	e0bfff17 	ldw	r2,-4(fp)
  80cadc:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80cae0:	e0bfff17 	ldw	r2,-4(fp)
  80cae4:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cae8:	e03ffe15 	stw	zero,-8(fp)
  80caec:	00001b06 	br	80cb5c <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80caf0:	e0bffe17 	ldw	r2,-8(fp)
  80caf4:	108018e4 	muli	r2,r2,99
  80caf8:	10801004 	addi	r2,r2,64
  80cafc:	e0ffff17 	ldw	r3,-4(fp)
  80cb00:	1885883a 	add	r2,r3,r2
  80cb04:	01801444 	movi	r6,81
  80cb08:	01400804 	movi	r5,32
  80cb0c:	1009883a 	mov	r4,r2
  80cb10:	080872c0 	call	80872c <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80cb14:	e0bffe17 	ldw	r2,-8(fp)
  80cb18:	108018e4 	muli	r2,r2,99
  80cb1c:	10800c04 	addi	r2,r2,48
  80cb20:	e0ffff17 	ldw	r3,-4(fp)
  80cb24:	1885883a 	add	r2,r3,r2
  80cb28:	01800404 	movi	r6,16
  80cb2c:	01400804 	movi	r5,32
  80cb30:	1009883a 	mov	r4,r2
  80cb34:	080872c0 	call	80872c <memset>
    sp->line[y].width = 0;
  80cb38:	e0ffff17 	ldw	r3,-4(fp)
  80cb3c:	e0bffe17 	ldw	r2,-8(fp)
  80cb40:	108018e4 	muli	r2,r2,99
  80cb44:	1885883a 	add	r2,r3,r2
  80cb48:	10802444 	addi	r2,r2,145
  80cb4c:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cb50:	e0bffe17 	ldw	r2,-8(fp)
  80cb54:	10800044 	addi	r2,r2,1
  80cb58:	e0bffe15 	stw	r2,-8(fp)
  80cb5c:	e0bffe17 	ldw	r2,-8(fp)
  80cb60:	10800090 	cmplti	r2,r2,2
  80cb64:	103fe21e 	bne	r2,zero,80caf0 <__alt_mem_onchip_mem+0xff804af0>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80cb68:	0001883a 	nop
  80cb6c:	e037883a 	mov	sp,fp
  80cb70:	dfc00117 	ldw	ra,4(sp)
  80cb74:	df000017 	ldw	fp,0(sp)
  80cb78:	dec00204 	addi	sp,sp,8
  80cb7c:	f800283a 	ret

0080cb80 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80cb80:	defff704 	addi	sp,sp,-36
  80cb84:	dfc00815 	stw	ra,32(sp)
  80cb88:	df000715 	stw	fp,28(sp)
  80cb8c:	df000704 	addi	fp,sp,28
  80cb90:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80cb94:	e0bfff17 	ldw	r2,-4(fp)
  80cb98:	10800943 	ldbu	r2,37(r2)
  80cb9c:	10803fcc 	andi	r2,r2,255
  80cba0:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cba4:	e03ff915 	stw	zero,-28(fp)
  80cba8:	00006706 	br	80cd48 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80cbac:	e0ffff17 	ldw	r3,-4(fp)
  80cbb0:	e0bff917 	ldw	r2,-28(fp)
  80cbb4:	108018e4 	muli	r2,r2,99
  80cbb8:	1885883a 	add	r2,r3,r2
  80cbbc:	10802444 	addi	r2,r2,145
  80cbc0:	10800003 	ldbu	r2,0(r2)
  80cbc4:	10803fcc 	andi	r2,r2,255
  80cbc8:	1080201c 	xori	r2,r2,128
  80cbcc:	10bfe004 	addi	r2,r2,-128
  80cbd0:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80cbd4:	e0ffff17 	ldw	r3,-4(fp)
  80cbd8:	e0bff917 	ldw	r2,-28(fp)
  80cbdc:	108018e4 	muli	r2,r2,99
  80cbe0:	1885883a 	add	r2,r3,r2
  80cbe4:	10802484 	addi	r2,r2,146
  80cbe8:	10800003 	ldbu	r2,0(r2)
  80cbec:	10c03fcc 	andi	r3,r2,255
  80cbf0:	e0bffc17 	ldw	r2,-16(fp)
  80cbf4:	1885383a 	mul	r2,r3,r2
  80cbf8:	1005d23a 	srai	r2,r2,8
  80cbfc:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80cc00:	e0fffb17 	ldw	r3,-20(fp)
  80cc04:	e0bffd17 	ldw	r2,-12(fp)
  80cc08:	18800116 	blt	r3,r2,80cc10 <lcd_repaint_screen+0x90>
      offset = 0;
  80cc0c:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80cc10:	e03ffa15 	stw	zero,-24(fp)
  80cc14:	00004606 	br	80cd30 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80cc18:	e0fffa17 	ldw	r3,-24(fp)
  80cc1c:	e0bffb17 	ldw	r2,-20(fp)
  80cc20:	1885883a 	add	r2,r3,r2
  80cc24:	e17ffd17 	ldw	r5,-12(fp)
  80cc28:	1009883a 	mov	r4,r2
  80cc2c:	080ac9c0 	call	80ac9c <__modsi3>
  80cc30:	1009883a 	mov	r4,r2
  80cc34:	e0ffff17 	ldw	r3,-4(fp)
  80cc38:	e0bff917 	ldw	r2,-28(fp)
  80cc3c:	108018e4 	muli	r2,r2,99
  80cc40:	1885883a 	add	r2,r3,r2
  80cc44:	1105883a 	add	r2,r2,r4
  80cc48:	10801004 	addi	r2,r2,64
  80cc4c:	10800003 	ldbu	r2,0(r2)
  80cc50:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80cc54:	e0ffff17 	ldw	r3,-4(fp)
  80cc58:	e0bff917 	ldw	r2,-28(fp)
  80cc5c:	108018e4 	muli	r2,r2,99
  80cc60:	1887883a 	add	r3,r3,r2
  80cc64:	e0bffa17 	ldw	r2,-24(fp)
  80cc68:	1885883a 	add	r2,r3,r2
  80cc6c:	10800c04 	addi	r2,r2,48
  80cc70:	10800003 	ldbu	r2,0(r2)
  80cc74:	10c03fcc 	andi	r3,r2,255
  80cc78:	18c0201c 	xori	r3,r3,128
  80cc7c:	18ffe004 	addi	r3,r3,-128
  80cc80:	e0bffe07 	ldb	r2,-8(fp)
  80cc84:	18802726 	beq	r3,r2,80cd24 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80cc88:	e0fff917 	ldw	r3,-28(fp)
  80cc8c:	d0a00e04 	addi	r2,gp,-32712
  80cc90:	1885883a 	add	r2,r3,r2
  80cc94:	10800003 	ldbu	r2,0(r2)
  80cc98:	1007883a 	mov	r3,r2
  80cc9c:	e0bffa17 	ldw	r2,-24(fp)
  80cca0:	1885883a 	add	r2,r3,r2
  80cca4:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80cca8:	e0fffe43 	ldbu	r3,-7(fp)
  80ccac:	e0bfff17 	ldw	r2,-4(fp)
  80ccb0:	108008c3 	ldbu	r2,35(r2)
  80ccb4:	10803fcc 	andi	r2,r2,255
  80ccb8:	1080201c 	xori	r2,r2,128
  80ccbc:	10bfe004 	addi	r2,r2,-128
  80ccc0:	18800a26 	beq	r3,r2,80ccec <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80ccc4:	e0fffe43 	ldbu	r3,-7(fp)
  80ccc8:	00bfe004 	movi	r2,-128
  80cccc:	1884b03a 	or	r2,r3,r2
  80ccd0:	10803fcc 	andi	r2,r2,255
  80ccd4:	100b883a 	mov	r5,r2
  80ccd8:	e13fff17 	ldw	r4,-4(fp)
  80ccdc:	080c9200 	call	80c920 <lcd_write_command>
          sp->address = address;
  80cce0:	e0fffe43 	ldbu	r3,-7(fp)
  80cce4:	e0bfff17 	ldw	r2,-4(fp)
  80cce8:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80ccec:	e0bffe03 	ldbu	r2,-8(fp)
  80ccf0:	10803fcc 	andi	r2,r2,255
  80ccf4:	100b883a 	mov	r5,r2
  80ccf8:	e13fff17 	ldw	r4,-4(fp)
  80ccfc:	080c9d80 	call	80c9d8 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80cd00:	e0ffff17 	ldw	r3,-4(fp)
  80cd04:	e0bff917 	ldw	r2,-28(fp)
  80cd08:	108018e4 	muli	r2,r2,99
  80cd0c:	1887883a 	add	r3,r3,r2
  80cd10:	e0bffa17 	ldw	r2,-24(fp)
  80cd14:	1885883a 	add	r2,r3,r2
  80cd18:	10800c04 	addi	r2,r2,48
  80cd1c:	e0fffe03 	ldbu	r3,-8(fp)
  80cd20:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80cd24:	e0bffa17 	ldw	r2,-24(fp)
  80cd28:	10800044 	addi	r2,r2,1
  80cd2c:	e0bffa15 	stw	r2,-24(fp)
  80cd30:	e0bffa17 	ldw	r2,-24(fp)
  80cd34:	10800410 	cmplti	r2,r2,16
  80cd38:	103fb71e 	bne	r2,zero,80cc18 <__alt_mem_onchip_mem+0xff804c18>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cd3c:	e0bff917 	ldw	r2,-28(fp)
  80cd40:	10800044 	addi	r2,r2,1
  80cd44:	e0bff915 	stw	r2,-28(fp)
  80cd48:	e0bff917 	ldw	r2,-28(fp)
  80cd4c:	10800090 	cmplti	r2,r2,2
  80cd50:	103f961e 	bne	r2,zero,80cbac <__alt_mem_onchip_mem+0xff804bac>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80cd54:	0001883a 	nop
  80cd58:	e037883a 	mov	sp,fp
  80cd5c:	dfc00117 	ldw	ra,4(sp)
  80cd60:	df000017 	ldw	fp,0(sp)
  80cd64:	dec00204 	addi	sp,sp,8
  80cd68:	f800283a 	ret

0080cd6c <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80cd6c:	defffc04 	addi	sp,sp,-16
  80cd70:	dfc00315 	stw	ra,12(sp)
  80cd74:	df000215 	stw	fp,8(sp)
  80cd78:	df000204 	addi	fp,sp,8
  80cd7c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cd80:	e03ffe15 	stw	zero,-8(fp)
  80cd84:	00001d06 	br	80cdfc <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80cd88:	e0bffe17 	ldw	r2,-8(fp)
  80cd8c:	00800f16 	blt	zero,r2,80cdcc <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80cd90:	e0bffe17 	ldw	r2,-8(fp)
  80cd94:	108018e4 	muli	r2,r2,99
  80cd98:	10801004 	addi	r2,r2,64
  80cd9c:	e0ffff17 	ldw	r3,-4(fp)
  80cda0:	1889883a 	add	r4,r3,r2
  80cda4:	e0bffe17 	ldw	r2,-8(fp)
  80cda8:	10800044 	addi	r2,r2,1
  80cdac:	108018e4 	muli	r2,r2,99
  80cdb0:	10801004 	addi	r2,r2,64
  80cdb4:	e0ffff17 	ldw	r3,-4(fp)
  80cdb8:	1885883a 	add	r2,r3,r2
  80cdbc:	01801404 	movi	r6,80
  80cdc0:	100b883a 	mov	r5,r2
  80cdc4:	080a1580 	call	80a158 <memcpy>
  80cdc8:	00000906 	br	80cdf0 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80cdcc:	e0bffe17 	ldw	r2,-8(fp)
  80cdd0:	108018e4 	muli	r2,r2,99
  80cdd4:	10801004 	addi	r2,r2,64
  80cdd8:	e0ffff17 	ldw	r3,-4(fp)
  80cddc:	1885883a 	add	r2,r3,r2
  80cde0:	01801404 	movi	r6,80
  80cde4:	01400804 	movi	r5,32
  80cde8:	1009883a 	mov	r4,r2
  80cdec:	080872c0 	call	80872c <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cdf0:	e0bffe17 	ldw	r2,-8(fp)
  80cdf4:	10800044 	addi	r2,r2,1
  80cdf8:	e0bffe15 	stw	r2,-8(fp)
  80cdfc:	e0bffe17 	ldw	r2,-8(fp)
  80ce00:	10800090 	cmplti	r2,r2,2
  80ce04:	103fe01e 	bne	r2,zero,80cd88 <__alt_mem_onchip_mem+0xff804d88>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80ce08:	e0bfff17 	ldw	r2,-4(fp)
  80ce0c:	10800883 	ldbu	r2,34(r2)
  80ce10:	10bfffc4 	addi	r2,r2,-1
  80ce14:	1007883a 	mov	r3,r2
  80ce18:	e0bfff17 	ldw	r2,-4(fp)
  80ce1c:	10c00885 	stb	r3,34(r2)
}
  80ce20:	0001883a 	nop
  80ce24:	e037883a 	mov	sp,fp
  80ce28:	dfc00117 	ldw	ra,4(sp)
  80ce2c:	df000017 	ldw	fp,0(sp)
  80ce30:	dec00204 	addi	sp,sp,8
  80ce34:	f800283a 	ret

0080ce38 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80ce38:	defff904 	addi	sp,sp,-28
  80ce3c:	dfc00615 	stw	ra,24(sp)
  80ce40:	df000515 	stw	fp,20(sp)
  80ce44:	df000504 	addi	fp,sp,20
  80ce48:	e13ffe15 	stw	r4,-8(fp)
  80ce4c:	2805883a 	mov	r2,r5
  80ce50:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80ce54:	e03ffb15 	stw	zero,-20(fp)
  80ce58:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  80ce5c:	e0bffe17 	ldw	r2,-8(fp)
  80ce60:	10800a03 	ldbu	r2,40(r2)
  80ce64:	10803fcc 	andi	r2,r2,255
  80ce68:	1080201c 	xori	r2,r2,128
  80ce6c:	10bfe004 	addi	r2,r2,-128
  80ce70:	108016d8 	cmpnei	r2,r2,91
  80ce74:	1000411e 	bne	r2,zero,80cf7c <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  80ce78:	e0bffe17 	ldw	r2,-8(fp)
  80ce7c:	10800a04 	addi	r2,r2,40
  80ce80:	10800044 	addi	r2,r2,1
  80ce84:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80ce88:	00000c06 	br	80cebc <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80ce8c:	e0bffb17 	ldw	r2,-20(fp)
  80ce90:	10c002a4 	muli	r3,r2,10
  80ce94:	e0bffd17 	ldw	r2,-12(fp)
  80ce98:	11000044 	addi	r4,r2,1
  80ce9c:	e13ffd15 	stw	r4,-12(fp)
  80cea0:	10800003 	ldbu	r2,0(r2)
  80cea4:	10803fcc 	andi	r2,r2,255
  80cea8:	1080201c 	xori	r2,r2,128
  80ceac:	10bfe004 	addi	r2,r2,-128
  80ceb0:	10bff404 	addi	r2,r2,-48
  80ceb4:	1885883a 	add	r2,r3,r2
  80ceb8:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80cebc:	d0e00f17 	ldw	r3,-32708(gp)
  80cec0:	e0bffd17 	ldw	r2,-12(fp)
  80cec4:	10800003 	ldbu	r2,0(r2)
  80cec8:	10803fcc 	andi	r2,r2,255
  80cecc:	1080201c 	xori	r2,r2,128
  80ced0:	10bfe004 	addi	r2,r2,-128
  80ced4:	10800044 	addi	r2,r2,1
  80ced8:	1885883a 	add	r2,r3,r2
  80cedc:	10800003 	ldbu	r2,0(r2)
  80cee0:	10803fcc 	andi	r2,r2,255
  80cee4:	1080010c 	andi	r2,r2,4
  80cee8:	103fe81e 	bne	r2,zero,80ce8c <__alt_mem_onchip_mem+0xff804e8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80ceec:	e0bffd17 	ldw	r2,-12(fp)
  80cef0:	10800003 	ldbu	r2,0(r2)
  80cef4:	10803fcc 	andi	r2,r2,255
  80cef8:	1080201c 	xori	r2,r2,128
  80cefc:	10bfe004 	addi	r2,r2,-128
  80cf00:	10800ed8 	cmpnei	r2,r2,59
  80cf04:	10001f1e 	bne	r2,zero,80cf84 <lcd_handle_escape+0x14c>
    {
      ptr++;
  80cf08:	e0bffd17 	ldw	r2,-12(fp)
  80cf0c:	10800044 	addi	r2,r2,1
  80cf10:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80cf14:	00000c06 	br	80cf48 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80cf18:	e0bffc17 	ldw	r2,-16(fp)
  80cf1c:	10c002a4 	muli	r3,r2,10
  80cf20:	e0bffd17 	ldw	r2,-12(fp)
  80cf24:	11000044 	addi	r4,r2,1
  80cf28:	e13ffd15 	stw	r4,-12(fp)
  80cf2c:	10800003 	ldbu	r2,0(r2)
  80cf30:	10803fcc 	andi	r2,r2,255
  80cf34:	1080201c 	xori	r2,r2,128
  80cf38:	10bfe004 	addi	r2,r2,-128
  80cf3c:	10bff404 	addi	r2,r2,-48
  80cf40:	1885883a 	add	r2,r3,r2
  80cf44:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80cf48:	d0e00f17 	ldw	r3,-32708(gp)
  80cf4c:	e0bffd17 	ldw	r2,-12(fp)
  80cf50:	10800003 	ldbu	r2,0(r2)
  80cf54:	10803fcc 	andi	r2,r2,255
  80cf58:	1080201c 	xori	r2,r2,128
  80cf5c:	10bfe004 	addi	r2,r2,-128
  80cf60:	10800044 	addi	r2,r2,1
  80cf64:	1885883a 	add	r2,r3,r2
  80cf68:	10800003 	ldbu	r2,0(r2)
  80cf6c:	10803fcc 	andi	r2,r2,255
  80cf70:	1080010c 	andi	r2,r2,4
  80cf74:	103fe81e 	bne	r2,zero,80cf18 <__alt_mem_onchip_mem+0xff804f18>
  80cf78:	00000206 	br	80cf84 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80cf7c:	00bfffc4 	movi	r2,-1
  80cf80:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80cf84:	e0bfff07 	ldb	r2,-4(fp)
  80cf88:	10c012a0 	cmpeqi	r3,r2,74
  80cf8c:	1800291e 	bne	r3,zero,80d034 <lcd_handle_escape+0x1fc>
  80cf90:	10c012c8 	cmpgei	r3,r2,75
  80cf94:	1800031e 	bne	r3,zero,80cfa4 <lcd_handle_escape+0x16c>
  80cf98:	10801220 	cmpeqi	r2,r2,72
  80cf9c:	1000061e 	bne	r2,zero,80cfb8 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80cfa0:	00004a06 	br	80d0cc <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  80cfa4:	10c012e0 	cmpeqi	r3,r2,75
  80cfa8:	1800281e 	bne	r3,zero,80d04c <lcd_handle_escape+0x214>
  80cfac:	108019a0 	cmpeqi	r2,r2,102
  80cfb0:	1000011e 	bne	r2,zero,80cfb8 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80cfb4:	00004506 	br	80d0cc <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80cfb8:	e0bffc17 	ldw	r2,-16(fp)
  80cfbc:	0080050e 	bge	zero,r2,80cfd4 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  80cfc0:	e0bffc17 	ldw	r2,-16(fp)
  80cfc4:	10bfffc4 	addi	r2,r2,-1
  80cfc8:	1007883a 	mov	r3,r2
  80cfcc:	e0bffe17 	ldw	r2,-8(fp)
  80cfd0:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80cfd4:	e0bffb17 	ldw	r2,-20(fp)
  80cfd8:	0080370e 	bge	zero,r2,80d0b8 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  80cfdc:	e0bffb17 	ldw	r2,-20(fp)
  80cfe0:	10bfffc4 	addi	r2,r2,-1
  80cfe4:	1007883a 	mov	r3,r2
  80cfe8:	e0bffe17 	ldw	r2,-8(fp)
  80cfec:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80cff0:	e0bffe17 	ldw	r2,-8(fp)
  80cff4:	10800883 	ldbu	r2,34(r2)
  80cff8:	10803fcc 	andi	r2,r2,255
  80cffc:	10800170 	cmpltui	r2,r2,5
  80d000:	1000061e 	bne	r2,zero,80d01c <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  80d004:	e0bffe17 	ldw	r2,-8(fp)
  80d008:	00c00104 	movi	r3,4
  80d00c:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  80d010:	00000206 	br	80d01c <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  80d014:	e13ffe17 	ldw	r4,-8(fp)
  80d018:	080cd6c0 	call	80cd6c <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80d01c:	e0bffe17 	ldw	r2,-8(fp)
  80d020:	10800883 	ldbu	r2,34(r2)
  80d024:	10803fcc 	andi	r2,r2,255
  80d028:	108000e8 	cmpgeui	r2,r2,3
  80d02c:	103ff91e 	bne	r2,zero,80d014 <__alt_mem_onchip_mem+0xff805014>
        lcd_scroll_up(sp);
    }
    break;
  80d030:	00002106 	br	80d0b8 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80d034:	e0bffb17 	ldw	r2,-20(fp)
  80d038:	10800098 	cmpnei	r2,r2,2
  80d03c:	1000201e 	bne	r2,zero,80d0c0 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  80d040:	e13ffe17 	ldw	r4,-8(fp)
  80d044:	080cab00 	call	80cab0 <lcd_clear_screen>
    break;
  80d048:	00001d06 	br	80d0c0 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80d04c:	e0bffb17 	ldw	r2,-20(fp)
  80d050:	00801d16 	blt	zero,r2,80d0c8 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80d054:	e0bffe17 	ldw	r2,-8(fp)
  80d058:	10800843 	ldbu	r2,33(r2)
  80d05c:	10803fcc 	andi	r2,r2,255
  80d060:	10801428 	cmpgeui	r2,r2,80
  80d064:	1000181e 	bne	r2,zero,80d0c8 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80d068:	e0bffe17 	ldw	r2,-8(fp)
  80d06c:	10800883 	ldbu	r2,34(r2)
  80d070:	10803fcc 	andi	r2,r2,255
  80d074:	108018e4 	muli	r2,r2,99
  80d078:	10801004 	addi	r2,r2,64
  80d07c:	e0fffe17 	ldw	r3,-8(fp)
  80d080:	1887883a 	add	r3,r3,r2
  80d084:	e0bffe17 	ldw	r2,-8(fp)
  80d088:	10800843 	ldbu	r2,33(r2)
  80d08c:	10803fcc 	andi	r2,r2,255
  80d090:	1889883a 	add	r4,r3,r2
  80d094:	e0bffe17 	ldw	r2,-8(fp)
  80d098:	10800843 	ldbu	r2,33(r2)
  80d09c:	10803fcc 	andi	r2,r2,255
  80d0a0:	00c01404 	movi	r3,80
  80d0a4:	1885c83a 	sub	r2,r3,r2
  80d0a8:	100d883a 	mov	r6,r2
  80d0ac:	01400804 	movi	r5,32
  80d0b0:	080872c0 	call	80872c <memset>
    }
    break;
  80d0b4:	00000406 	br	80d0c8 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  80d0b8:	0001883a 	nop
  80d0bc:	00000306 	br	80d0cc <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  80d0c0:	0001883a 	nop
  80d0c4:	00000106 	br	80d0cc <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  80d0c8:	0001883a 	nop
  }
}
  80d0cc:	0001883a 	nop
  80d0d0:	e037883a 	mov	sp,fp
  80d0d4:	dfc00117 	ldw	ra,4(sp)
  80d0d8:	df000017 	ldw	fp,0(sp)
  80d0dc:	dec00204 	addi	sp,sp,8
  80d0e0:	f800283a 	ret

0080d0e4 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80d0e4:	defff304 	addi	sp,sp,-52
  80d0e8:	dfc00c15 	stw	ra,48(sp)
  80d0ec:	df000b15 	stw	fp,44(sp)
  80d0f0:	df000b04 	addi	fp,sp,44
  80d0f4:	e13ffc15 	stw	r4,-16(fp)
  80d0f8:	e17ffd15 	stw	r5,-12(fp)
  80d0fc:	e1bffe15 	stw	r6,-8(fp)
  80d100:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80d104:	e0bffe17 	ldw	r2,-8(fp)
  80d108:	e0fffd17 	ldw	r3,-12(fp)
  80d10c:	1885883a 	add	r2,r3,r2
  80d110:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80d114:	e0bffc17 	ldw	r2,-16(fp)
  80d118:	00c00044 	movi	r3,1
  80d11c:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  80d120:	00009906 	br	80d388 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  80d124:	e0bffd17 	ldw	r2,-12(fp)
  80d128:	10800003 	ldbu	r2,0(r2)
  80d12c:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  80d130:	e0bffc17 	ldw	r2,-16(fp)
  80d134:	10800903 	ldbu	r2,36(r2)
  80d138:	10803fcc 	andi	r2,r2,255
  80d13c:	1080201c 	xori	r2,r2,128
  80d140:	10bfe004 	addi	r2,r2,-128
  80d144:	10003716 	blt	r2,zero,80d224 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  80d148:	e0bffc17 	ldw	r2,-16(fp)
  80d14c:	10800903 	ldbu	r2,36(r2)
  80d150:	10803fcc 	andi	r2,r2,255
  80d154:	1080201c 	xori	r2,r2,128
  80d158:	10bfe004 	addi	r2,r2,-128
  80d15c:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80d160:	e0bffa17 	ldw	r2,-24(fp)
  80d164:	1000031e 	bne	r2,zero,80d174 <altera_avalon_lcd_16207_write+0x90>
  80d168:	e0bff907 	ldb	r2,-28(fp)
  80d16c:	108016d8 	cmpnei	r2,r2,91
  80d170:	10000d1e 	bne	r2,zero,80d1a8 <altera_avalon_lcd_16207_write+0xc4>
  80d174:	e0bffa17 	ldw	r2,-24(fp)
  80d178:	10001826 	beq	r2,zero,80d1dc <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  80d17c:	d0e00f17 	ldw	r3,-32708(gp)
  80d180:	e0bff907 	ldb	r2,-28(fp)
  80d184:	10800044 	addi	r2,r2,1
  80d188:	1885883a 	add	r2,r3,r2
  80d18c:	10800003 	ldbu	r2,0(r2)
  80d190:	10803fcc 	andi	r2,r2,255
  80d194:	1080010c 	andi	r2,r2,4
  80d198:	1000101e 	bne	r2,zero,80d1dc <altera_avalon_lcd_16207_write+0xf8>
  80d19c:	e0bff907 	ldb	r2,-28(fp)
  80d1a0:	10800ee0 	cmpeqi	r2,r2,59
  80d1a4:	10000d1e 	bne	r2,zero,80d1dc <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  80d1a8:	e0fffc17 	ldw	r3,-16(fp)
  80d1ac:	e0bffa17 	ldw	r2,-24(fp)
  80d1b0:	1885883a 	add	r2,r3,r2
  80d1b4:	10800a04 	addi	r2,r2,40
  80d1b8:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80d1bc:	e0bff907 	ldb	r2,-28(fp)
  80d1c0:	100b883a 	mov	r5,r2
  80d1c4:	e13ffc17 	ldw	r4,-16(fp)
  80d1c8:	080ce380 	call	80ce38 <lcd_handle_escape>

        sp->esccount = -1;
  80d1cc:	e0bffc17 	ldw	r2,-16(fp)
  80d1d0:	00ffffc4 	movi	r3,-1
  80d1d4:	10c00905 	stb	r3,36(r2)
  80d1d8:	00006806 	br	80d37c <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80d1dc:	e0bffc17 	ldw	r2,-16(fp)
  80d1e0:	10800903 	ldbu	r2,36(r2)
  80d1e4:	10803fcc 	andi	r2,r2,255
  80d1e8:	108001e8 	cmpgeui	r2,r2,7
  80d1ec:	1000631e 	bne	r2,zero,80d37c <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  80d1f0:	e0fffc17 	ldw	r3,-16(fp)
  80d1f4:	e0bffa17 	ldw	r2,-24(fp)
  80d1f8:	1885883a 	add	r2,r3,r2
  80d1fc:	10800a04 	addi	r2,r2,40
  80d200:	e0fff903 	ldbu	r3,-28(fp)
  80d204:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  80d208:	e0bffc17 	ldw	r2,-16(fp)
  80d20c:	10800903 	ldbu	r2,36(r2)
  80d210:	10800044 	addi	r2,r2,1
  80d214:	1007883a 	mov	r3,r2
  80d218:	e0bffc17 	ldw	r2,-16(fp)
  80d21c:	10c00905 	stb	r3,36(r2)
  80d220:	00005606 	br	80d37c <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  80d224:	e0bff907 	ldb	r2,-28(fp)
  80d228:	108006d8 	cmpnei	r2,r2,27
  80d22c:	1000031e 	bne	r2,zero,80d23c <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  80d230:	e0bffc17 	ldw	r2,-16(fp)
  80d234:	10000905 	stb	zero,36(r2)
  80d238:	00005006 	br	80d37c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  80d23c:	e0bff907 	ldb	r2,-28(fp)
  80d240:	10800358 	cmpnei	r2,r2,13
  80d244:	1000031e 	bne	r2,zero,80d254 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  80d248:	e0bffc17 	ldw	r2,-16(fp)
  80d24c:	10000845 	stb	zero,33(r2)
  80d250:	00004a06 	br	80d37c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  80d254:	e0bff907 	ldb	r2,-28(fp)
  80d258:	10800298 	cmpnei	r2,r2,10
  80d25c:	1000101e 	bne	r2,zero,80d2a0 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  80d260:	e0bffc17 	ldw	r2,-16(fp)
  80d264:	10000845 	stb	zero,33(r2)
      sp->y++;
  80d268:	e0bffc17 	ldw	r2,-16(fp)
  80d26c:	10800883 	ldbu	r2,34(r2)
  80d270:	10800044 	addi	r2,r2,1
  80d274:	1007883a 	mov	r3,r2
  80d278:	e0bffc17 	ldw	r2,-16(fp)
  80d27c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80d280:	e0bffc17 	ldw	r2,-16(fp)
  80d284:	10800883 	ldbu	r2,34(r2)
  80d288:	10803fcc 	andi	r2,r2,255
  80d28c:	108000f0 	cmpltui	r2,r2,3
  80d290:	10003a1e 	bne	r2,zero,80d37c <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  80d294:	e13ffc17 	ldw	r4,-16(fp)
  80d298:	080cd6c0 	call	80cd6c <lcd_scroll_up>
  80d29c:	00003706 	br	80d37c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  80d2a0:	e0bff907 	ldb	r2,-28(fp)
  80d2a4:	10800218 	cmpnei	r2,r2,8
  80d2a8:	10000b1e 	bne	r2,zero,80d2d8 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  80d2ac:	e0bffc17 	ldw	r2,-16(fp)
  80d2b0:	10800843 	ldbu	r2,33(r2)
  80d2b4:	10803fcc 	andi	r2,r2,255
  80d2b8:	10003026 	beq	r2,zero,80d37c <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  80d2bc:	e0bffc17 	ldw	r2,-16(fp)
  80d2c0:	10800843 	ldbu	r2,33(r2)
  80d2c4:	10bfffc4 	addi	r2,r2,-1
  80d2c8:	1007883a 	mov	r3,r2
  80d2cc:	e0bffc17 	ldw	r2,-16(fp)
  80d2d0:	10c00845 	stb	r3,33(r2)
  80d2d4:	00002906 	br	80d37c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  80d2d8:	d0e00f17 	ldw	r3,-32708(gp)
  80d2dc:	e0bff907 	ldb	r2,-28(fp)
  80d2e0:	10800044 	addi	r2,r2,1
  80d2e4:	1885883a 	add	r2,r3,r2
  80d2e8:	10800003 	ldbu	r2,0(r2)
  80d2ec:	10803fcc 	andi	r2,r2,255
  80d2f0:	1080201c 	xori	r2,r2,128
  80d2f4:	10bfe004 	addi	r2,r2,-128
  80d2f8:	108025cc 	andi	r2,r2,151
  80d2fc:	10001f26 	beq	r2,zero,80d37c <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80d300:	e0bffc17 	ldw	r2,-16(fp)
  80d304:	10800883 	ldbu	r2,34(r2)
  80d308:	10803fcc 	andi	r2,r2,255
  80d30c:	108000b0 	cmpltui	r2,r2,2
  80d310:	1000021e 	bne	r2,zero,80d31c <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  80d314:	e13ffc17 	ldw	r4,-16(fp)
  80d318:	080cd6c0 	call	80cd6c <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80d31c:	e0bffc17 	ldw	r2,-16(fp)
  80d320:	10800843 	ldbu	r2,33(r2)
  80d324:	10803fcc 	andi	r2,r2,255
  80d328:	10801428 	cmpgeui	r2,r2,80
  80d32c:	10000d1e 	bne	r2,zero,80d364 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  80d330:	e0bffc17 	ldw	r2,-16(fp)
  80d334:	10800883 	ldbu	r2,34(r2)
  80d338:	10c03fcc 	andi	r3,r2,255
  80d33c:	e0bffc17 	ldw	r2,-16(fp)
  80d340:	10800843 	ldbu	r2,33(r2)
  80d344:	10803fcc 	andi	r2,r2,255
  80d348:	e13ffc17 	ldw	r4,-16(fp)
  80d34c:	18c018e4 	muli	r3,r3,99
  80d350:	20c7883a 	add	r3,r4,r3
  80d354:	1885883a 	add	r2,r3,r2
  80d358:	10801004 	addi	r2,r2,64
  80d35c:	e0fff903 	ldbu	r3,-28(fp)
  80d360:	10c00005 	stb	r3,0(r2)

      sp->x++;
  80d364:	e0bffc17 	ldw	r2,-16(fp)
  80d368:	10800843 	ldbu	r2,33(r2)
  80d36c:	10800044 	addi	r2,r2,1
  80d370:	1007883a 	mov	r3,r2
  80d374:	e0bffc17 	ldw	r2,-16(fp)
  80d378:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80d37c:	e0bffd17 	ldw	r2,-12(fp)
  80d380:	10800044 	addi	r2,r2,1
  80d384:	e0bffd15 	stw	r2,-12(fp)
  80d388:	e0fffd17 	ldw	r3,-12(fp)
  80d38c:	e0bff817 	ldw	r2,-32(fp)
  80d390:	18bf6436 	bltu	r3,r2,80d124 <__alt_mem_onchip_mem+0xff805124>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80d394:	00800404 	movi	r2,16
  80d398:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d39c:	e03ff515 	stw	zero,-44(fp)
  80d3a0:	00003706 	br	80d480 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80d3a4:	00801404 	movi	r2,80
  80d3a8:	e0bff715 	stw	r2,-36(fp)
  80d3ac:	00001106 	br	80d3f4 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  80d3b0:	e0bff717 	ldw	r2,-36(fp)
  80d3b4:	10bfffc4 	addi	r2,r2,-1
  80d3b8:	e13ffc17 	ldw	r4,-16(fp)
  80d3bc:	e0fff517 	ldw	r3,-44(fp)
  80d3c0:	18c018e4 	muli	r3,r3,99
  80d3c4:	20c7883a 	add	r3,r4,r3
  80d3c8:	1885883a 	add	r2,r3,r2
  80d3cc:	10801004 	addi	r2,r2,64
  80d3d0:	10800003 	ldbu	r2,0(r2)
  80d3d4:	10803fcc 	andi	r2,r2,255
  80d3d8:	1080201c 	xori	r2,r2,128
  80d3dc:	10bfe004 	addi	r2,r2,-128
  80d3e0:	10800820 	cmpeqi	r2,r2,32
  80d3e4:	10000626 	beq	r2,zero,80d400 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80d3e8:	e0bff717 	ldw	r2,-36(fp)
  80d3ec:	10bfffc4 	addi	r2,r2,-1
  80d3f0:	e0bff715 	stw	r2,-36(fp)
  80d3f4:	e0bff717 	ldw	r2,-36(fp)
  80d3f8:	00bfed16 	blt	zero,r2,80d3b0 <__alt_mem_onchip_mem+0xff8053b0>
  80d3fc:	00000106 	br	80d404 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  80d400:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80d404:	e0bff717 	ldw	r2,-36(fp)
  80d408:	10800448 	cmpgei	r2,r2,17
  80d40c:	1000031e 	bne	r2,zero,80d41c <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  80d410:	00800404 	movi	r2,16
  80d414:	e0bff715 	stw	r2,-36(fp)
  80d418:	00000306 	br	80d428 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  80d41c:	e0bff717 	ldw	r2,-36(fp)
  80d420:	10800044 	addi	r2,r2,1
  80d424:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  80d428:	e0bff717 	ldw	r2,-36(fp)
  80d42c:	1009883a 	mov	r4,r2
  80d430:	e0fffc17 	ldw	r3,-16(fp)
  80d434:	e0bff517 	ldw	r2,-44(fp)
  80d438:	108018e4 	muli	r2,r2,99
  80d43c:	1885883a 	add	r2,r3,r2
  80d440:	10802444 	addi	r2,r2,145
  80d444:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  80d448:	e0fff617 	ldw	r3,-40(fp)
  80d44c:	e0bff717 	ldw	r2,-36(fp)
  80d450:	1880020e 	bge	r3,r2,80d45c <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  80d454:	e0bff717 	ldw	r2,-36(fp)
  80d458:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80d45c:	e0fffc17 	ldw	r3,-16(fp)
  80d460:	e0bff517 	ldw	r2,-44(fp)
  80d464:	108018e4 	muli	r2,r2,99
  80d468:	1885883a 	add	r2,r3,r2
  80d46c:	10802484 	addi	r2,r2,146
  80d470:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d474:	e0bff517 	ldw	r2,-44(fp)
  80d478:	10800044 	addi	r2,r2,1
  80d47c:	e0bff515 	stw	r2,-44(fp)
  80d480:	e0bff517 	ldw	r2,-44(fp)
  80d484:	10800090 	cmplti	r2,r2,2
  80d488:	103fc61e 	bne	r2,zero,80d3a4 <__alt_mem_onchip_mem+0xff8053a4>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80d48c:	e0bff617 	ldw	r2,-40(fp)
  80d490:	10800448 	cmpgei	r2,r2,17
  80d494:	1000031e 	bne	r2,zero,80d4a4 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  80d498:	e0bffc17 	ldw	r2,-16(fp)
  80d49c:	10000985 	stb	zero,38(r2)
  80d4a0:	00002e06 	br	80d55c <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  80d4a4:	e0bff617 	ldw	r2,-40(fp)
  80d4a8:	1085883a 	add	r2,r2,r2
  80d4ac:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  80d4b0:	e0bff617 	ldw	r2,-40(fp)
  80d4b4:	1007883a 	mov	r3,r2
  80d4b8:	e0bffc17 	ldw	r2,-16(fp)
  80d4bc:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d4c0:	e03ff515 	stw	zero,-44(fp)
  80d4c4:	00002206 	br	80d550 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80d4c8:	e0fffc17 	ldw	r3,-16(fp)
  80d4cc:	e0bff517 	ldw	r2,-44(fp)
  80d4d0:	108018e4 	muli	r2,r2,99
  80d4d4:	1885883a 	add	r2,r3,r2
  80d4d8:	10802444 	addi	r2,r2,145
  80d4dc:	10800003 	ldbu	r2,0(r2)
  80d4e0:	10803fcc 	andi	r2,r2,255
  80d4e4:	1080201c 	xori	r2,r2,128
  80d4e8:	10bfe004 	addi	r2,r2,-128
  80d4ec:	10800450 	cmplti	r2,r2,17
  80d4f0:	1000141e 	bne	r2,zero,80d544 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80d4f4:	e0fffc17 	ldw	r3,-16(fp)
  80d4f8:	e0bff517 	ldw	r2,-44(fp)
  80d4fc:	108018e4 	muli	r2,r2,99
  80d500:	1885883a 	add	r2,r3,r2
  80d504:	10802444 	addi	r2,r2,145
  80d508:	10800003 	ldbu	r2,0(r2)
  80d50c:	10803fcc 	andi	r2,r2,255
  80d510:	1080201c 	xori	r2,r2,128
  80d514:	10bfe004 	addi	r2,r2,-128
  80d518:	1004923a 	slli	r2,r2,8
  80d51c:	e17ff617 	ldw	r5,-40(fp)
  80d520:	1009883a 	mov	r4,r2
  80d524:	080ac180 	call	80ac18 <__divsi3>
  80d528:	1009883a 	mov	r4,r2
  80d52c:	e0fffc17 	ldw	r3,-16(fp)
  80d530:	e0bff517 	ldw	r2,-44(fp)
  80d534:	108018e4 	muli	r2,r2,99
  80d538:	1885883a 	add	r2,r3,r2
  80d53c:	10802484 	addi	r2,r2,146
  80d540:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d544:	e0bff517 	ldw	r2,-44(fp)
  80d548:	10800044 	addi	r2,r2,1
  80d54c:	e0bff515 	stw	r2,-44(fp)
  80d550:	e0bff517 	ldw	r2,-44(fp)
  80d554:	10800090 	cmplti	r2,r2,2
  80d558:	103fdb1e 	bne	r2,zero,80d4c8 <__alt_mem_onchip_mem+0xff8054c8>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80d55c:	e0bffc17 	ldw	r2,-16(fp)
  80d560:	10800943 	ldbu	r2,37(r2)
  80d564:	10803fcc 	andi	r2,r2,255
  80d568:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  80d56c:	e13ffc17 	ldw	r4,-16(fp)
  80d570:	080cb800 	call	80cb80 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80d574:	e0bffc17 	ldw	r2,-16(fp)
  80d578:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80d57c:	e0bffc17 	ldw	r2,-16(fp)
  80d580:	10800943 	ldbu	r2,37(r2)
  80d584:	10c03fcc 	andi	r3,r2,255
  80d588:	e0bffb17 	ldw	r2,-20(fp)
  80d58c:	18800426 	beq	r3,r2,80d5a0 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80d590:	e0bffc17 	ldw	r2,-16(fp)
  80d594:	00c00044 	movi	r3,1
  80d598:	10c009c5 	stb	r3,39(r2)
  }
  80d59c:	003fef06 	br	80d55c <__alt_mem_onchip_mem+0xff80555c>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  80d5a0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80d5a4:	e0bffe17 	ldw	r2,-8(fp)
}
  80d5a8:	e037883a 	mov	sp,fp
  80d5ac:	dfc00117 	ldw	ra,4(sp)
  80d5b0:	df000017 	ldw	fp,0(sp)
  80d5b4:	dec00204 	addi	sp,sp,8
  80d5b8:	f800283a 	ret

0080d5bc <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80d5bc:	defffc04 	addi	sp,sp,-16
  80d5c0:	dfc00315 	stw	ra,12(sp)
  80d5c4:	df000215 	stw	fp,8(sp)
  80d5c8:	df000204 	addi	fp,sp,8
  80d5cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80d5d0:	e0bfff17 	ldw	r2,-4(fp)
  80d5d4:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80d5d8:	e0bffe17 	ldw	r2,-8(fp)
  80d5dc:	10800943 	ldbu	r2,37(r2)
  80d5e0:	10803fcc 	andi	r2,r2,255
  80d5e4:	10c00044 	addi	r3,r2,1
  80d5e8:	e0bffe17 	ldw	r2,-8(fp)
  80d5ec:	10800983 	ldbu	r2,38(r2)
  80d5f0:	10803fcc 	andi	r2,r2,255
  80d5f4:	18800316 	blt	r3,r2,80d604 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  80d5f8:	e0bffe17 	ldw	r2,-8(fp)
  80d5fc:	10000945 	stb	zero,37(r2)
  80d600:	00000606 	br	80d61c <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80d604:	e0bffe17 	ldw	r2,-8(fp)
  80d608:	10800943 	ldbu	r2,37(r2)
  80d60c:	10800044 	addi	r2,r2,1
  80d610:	1007883a 	mov	r3,r2
  80d614:	e0bffe17 	ldw	r2,-8(fp)
  80d618:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80d61c:	e0bffe17 	ldw	r2,-8(fp)
  80d620:	10800983 	ldbu	r2,38(r2)
  80d624:	10803fcc 	andi	r2,r2,255
  80d628:	10000826 	beq	r2,zero,80d64c <alt_lcd_16207_timeout+0x90>
  80d62c:	e0bffe17 	ldw	r2,-8(fp)
  80d630:	108009c3 	ldbu	r2,39(r2)
  80d634:	10803fcc 	andi	r2,r2,255
  80d638:	1080201c 	xori	r2,r2,128
  80d63c:	10bfe004 	addi	r2,r2,-128
  80d640:	1000021e 	bne	r2,zero,80d64c <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  80d644:	e13ffe17 	ldw	r4,-8(fp)
  80d648:	080cb800 	call	80cb80 <lcd_repaint_screen>

  return sp->period;
  80d64c:	e0bffe17 	ldw	r2,-8(fp)
  80d650:	10800717 	ldw	r2,28(r2)
}
  80d654:	e037883a 	mov	sp,fp
  80d658:	dfc00117 	ldw	ra,4(sp)
  80d65c:	df000017 	ldw	fp,0(sp)
  80d660:	dec00204 	addi	sp,sp,8
  80d664:	f800283a 	ret

0080d668 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80d668:	defffc04 	addi	sp,sp,-16
  80d66c:	dfc00315 	stw	ra,12(sp)
  80d670:	df000215 	stw	fp,8(sp)
  80d674:	df000204 	addi	fp,sp,8
  80d678:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80d67c:	e0bfff17 	ldw	r2,-4(fp)
  80d680:	10800017 	ldw	r2,0(r2)
  80d684:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80d688:	e0bfff17 	ldw	r2,-4(fp)
  80d68c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80d690:	010ea604 	movi	r4,15000
  80d694:	080ea000 	call	80ea00 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80d698:	e0bffe17 	ldw	r2,-8(fp)
  80d69c:	00c00c04 	movi	r3,48
  80d6a0:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80d6a4:	01040104 	movi	r4,4100
  80d6a8:	080ea000 	call	80ea00 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80d6ac:	e0bffe17 	ldw	r2,-8(fp)
  80d6b0:	00c00c04 	movi	r3,48
  80d6b4:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80d6b8:	0100fa04 	movi	r4,1000
  80d6bc:	080ea000 	call	80ea00 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80d6c0:	e0bffe17 	ldw	r2,-8(fp)
  80d6c4:	00c00c04 	movi	r3,48
  80d6c8:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80d6cc:	01400e04 	movi	r5,56
  80d6d0:	e13fff17 	ldw	r4,-4(fp)
  80d6d4:	080c9200 	call	80c920 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80d6d8:	01400204 	movi	r5,8
  80d6dc:	e13fff17 	ldw	r4,-4(fp)
  80d6e0:	080c9200 	call	80c920 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80d6e4:	e13fff17 	ldw	r4,-4(fp)
  80d6e8:	080cab00 	call	80cab0 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80d6ec:	01400184 	movi	r5,6
  80d6f0:	e13fff17 	ldw	r4,-4(fp)
  80d6f4:	080c9200 	call	80c920 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80d6f8:	01400304 	movi	r5,12
  80d6fc:	e13fff17 	ldw	r4,-4(fp)
  80d700:	080c9200 	call	80c920 <lcd_write_command>

  sp->esccount = -1;
  80d704:	e0bfff17 	ldw	r2,-4(fp)
  80d708:	00ffffc4 	movi	r3,-1
  80d70c:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  80d710:	e0bfff17 	ldw	r2,-4(fp)
  80d714:	10800a04 	addi	r2,r2,40
  80d718:	01800204 	movi	r6,8
  80d71c:	000b883a 	mov	r5,zero
  80d720:	1009883a 	mov	r4,r2
  80d724:	080872c0 	call	80872c <memset>

  sp->scrollpos = 0;
  80d728:	e0bfff17 	ldw	r2,-4(fp)
  80d72c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80d730:	e0bfff17 	ldw	r2,-4(fp)
  80d734:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80d738:	e0bfff17 	ldw	r2,-4(fp)
  80d73c:	100009c5 	stb	zero,39(r2)
  80d740:	d0a73117 	ldw	r2,-25404(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80d744:	01400284 	movi	r5,10
  80d748:	1009883a 	mov	r4,r2
  80d74c:	080ad100 	call	80ad10 <__udivsi3>
  80d750:	1007883a 	mov	r3,r2
  80d754:	e0bfff17 	ldw	r2,-4(fp)
  80d758:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80d75c:	e0bfff17 	ldw	r2,-4(fp)
  80d760:	10c00104 	addi	r3,r2,4
  80d764:	e0bfff17 	ldw	r2,-4(fp)
  80d768:	10800717 	ldw	r2,28(r2)
  80d76c:	e1ffff17 	ldw	r7,-4(fp)
  80d770:	01802074 	movhi	r6,129
  80d774:	31b56f04 	addi	r6,r6,-10820
  80d778:	100b883a 	mov	r5,r2
  80d77c:	1809883a 	mov	r4,r3
  80d780:	080adcc0 	call	80adcc <alt_alarm_start>
}
  80d784:	0001883a 	nop
  80d788:	e037883a 	mov	sp,fp
  80d78c:	dfc00117 	ldw	ra,4(sp)
  80d790:	df000017 	ldw	fp,0(sp)
  80d794:	dec00204 	addi	sp,sp,8
  80d798:	f800283a 	ret

0080d79c <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80d79c:	defffa04 	addi	sp,sp,-24
  80d7a0:	dfc00515 	stw	ra,20(sp)
  80d7a4:	df000415 	stw	fp,16(sp)
  80d7a8:	df000404 	addi	fp,sp,16
  80d7ac:	e13ffd15 	stw	r4,-12(fp)
  80d7b0:	e17ffe15 	stw	r5,-8(fp)
  80d7b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80d7b8:	e0bffd17 	ldw	r2,-12(fp)
  80d7bc:	10800017 	ldw	r2,0(r2)
  80d7c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80d7c4:	e0bffc17 	ldw	r2,-16(fp)
  80d7c8:	10c00a04 	addi	r3,r2,40
  80d7cc:	e0bffd17 	ldw	r2,-12(fp)
  80d7d0:	10800217 	ldw	r2,8(r2)
  80d7d4:	100f883a 	mov	r7,r2
  80d7d8:	e1bfff17 	ldw	r6,-4(fp)
  80d7dc:	e17ffe17 	ldw	r5,-8(fp)
  80d7e0:	1809883a 	mov	r4,r3
  80d7e4:	080d0e40 	call	80d0e4 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80d7e8:	e037883a 	mov	sp,fp
  80d7ec:	dfc00117 	ldw	ra,4(sp)
  80d7f0:	df000017 	ldw	fp,0(sp)
  80d7f4:	dec00204 	addi	sp,sp,8
  80d7f8:	f800283a 	ret

0080d7fc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80d7fc:	defffa04 	addi	sp,sp,-24
  80d800:	dfc00515 	stw	ra,20(sp)
  80d804:	df000415 	stw	fp,16(sp)
  80d808:	df000404 	addi	fp,sp,16
  80d80c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80d810:	0007883a 	mov	r3,zero
  80d814:	e0bfff17 	ldw	r2,-4(fp)
  80d818:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80d81c:	e0bfff17 	ldw	r2,-4(fp)
  80d820:	10800104 	addi	r2,r2,4
  80d824:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d828:	0005303a 	rdctl	r2,status
  80d82c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d830:	e0fffd17 	ldw	r3,-12(fp)
  80d834:	00bfff84 	movi	r2,-2
  80d838:	1884703a 	and	r2,r3,r2
  80d83c:	1001703a 	wrctl	status,r2
  
  return context;
  80d840:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80d844:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80d848:	080bb780 	call	80bb78 <alt_tick>
  80d84c:	e0bffc17 	ldw	r2,-16(fp)
  80d850:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d854:	e0bffe17 	ldw	r2,-8(fp)
  80d858:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80d85c:	0001883a 	nop
  80d860:	e037883a 	mov	sp,fp
  80d864:	dfc00117 	ldw	ra,4(sp)
  80d868:	df000017 	ldw	fp,0(sp)
  80d86c:	dec00204 	addi	sp,sp,8
  80d870:	f800283a 	ret

0080d874 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80d874:	defff804 	addi	sp,sp,-32
  80d878:	dfc00715 	stw	ra,28(sp)
  80d87c:	df000615 	stw	fp,24(sp)
  80d880:	df000604 	addi	fp,sp,24
  80d884:	e13ffc15 	stw	r4,-16(fp)
  80d888:	e17ffd15 	stw	r5,-12(fp)
  80d88c:	e1bffe15 	stw	r6,-8(fp)
  80d890:	e1ffff15 	stw	r7,-4(fp)
  80d894:	e0bfff17 	ldw	r2,-4(fp)
  80d898:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80d89c:	d0a73117 	ldw	r2,-25404(gp)
  80d8a0:	1000021e 	bne	r2,zero,80d8ac <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80d8a4:	e0bffb17 	ldw	r2,-20(fp)
  80d8a8:	d0a73115 	stw	r2,-25404(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80d8ac:	e0bffc17 	ldw	r2,-16(fp)
  80d8b0:	10800104 	addi	r2,r2,4
  80d8b4:	00c001c4 	movi	r3,7
  80d8b8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80d8bc:	d8000015 	stw	zero,0(sp)
  80d8c0:	e1fffc17 	ldw	r7,-16(fp)
  80d8c4:	01802074 	movhi	r6,129
  80d8c8:	31b5ff04 	addi	r6,r6,-10244
  80d8cc:	e17ffe17 	ldw	r5,-8(fp)
  80d8d0:	e13ffd17 	ldw	r4,-12(fp)
  80d8d4:	080e6200 	call	80e620 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80d8d8:	0001883a 	nop
  80d8dc:	e037883a 	mov	sp,fp
  80d8e0:	dfc00117 	ldw	ra,4(sp)
  80d8e4:	df000017 	ldw	fp,0(sp)
  80d8e8:	dec00204 	addi	sp,sp,8
  80d8ec:	f800283a 	ret

0080d8f0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80d8f0:	defffa04 	addi	sp,sp,-24
  80d8f4:	dfc00515 	stw	ra,20(sp)
  80d8f8:	df000415 	stw	fp,16(sp)
  80d8fc:	df000404 	addi	fp,sp,16
  80d900:	e13ffd15 	stw	r4,-12(fp)
  80d904:	e17ffe15 	stw	r5,-8(fp)
  80d908:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80d90c:	e0bffd17 	ldw	r2,-12(fp)
  80d910:	10800017 	ldw	r2,0(r2)
  80d914:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80d918:	e0bffc17 	ldw	r2,-16(fp)
  80d91c:	10c00a04 	addi	r3,r2,40
  80d920:	e0bffd17 	ldw	r2,-12(fp)
  80d924:	10800217 	ldw	r2,8(r2)
  80d928:	100f883a 	mov	r7,r2
  80d92c:	e1bfff17 	ldw	r6,-4(fp)
  80d930:	e17ffe17 	ldw	r5,-8(fp)
  80d934:	1809883a 	mov	r4,r3
  80d938:	080de040 	call	80de04 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80d93c:	e037883a 	mov	sp,fp
  80d940:	dfc00117 	ldw	ra,4(sp)
  80d944:	df000017 	ldw	fp,0(sp)
  80d948:	dec00204 	addi	sp,sp,8
  80d94c:	f800283a 	ret

0080d950 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80d950:	defffa04 	addi	sp,sp,-24
  80d954:	dfc00515 	stw	ra,20(sp)
  80d958:	df000415 	stw	fp,16(sp)
  80d95c:	df000404 	addi	fp,sp,16
  80d960:	e13ffd15 	stw	r4,-12(fp)
  80d964:	e17ffe15 	stw	r5,-8(fp)
  80d968:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80d96c:	e0bffd17 	ldw	r2,-12(fp)
  80d970:	10800017 	ldw	r2,0(r2)
  80d974:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80d978:	e0bffc17 	ldw	r2,-16(fp)
  80d97c:	10c00a04 	addi	r3,r2,40
  80d980:	e0bffd17 	ldw	r2,-12(fp)
  80d984:	10800217 	ldw	r2,8(r2)
  80d988:	100f883a 	mov	r7,r2
  80d98c:	e1bfff17 	ldw	r6,-4(fp)
  80d990:	e17ffe17 	ldw	r5,-8(fp)
  80d994:	1809883a 	mov	r4,r3
  80d998:	080e01c0 	call	80e01c <altera_avalon_uart_write>
      fd->fd_flags);
}
  80d99c:	e037883a 	mov	sp,fp
  80d9a0:	dfc00117 	ldw	ra,4(sp)
  80d9a4:	df000017 	ldw	fp,0(sp)
  80d9a8:	dec00204 	addi	sp,sp,8
  80d9ac:	f800283a 	ret

0080d9b0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80d9b0:	defffc04 	addi	sp,sp,-16
  80d9b4:	dfc00315 	stw	ra,12(sp)
  80d9b8:	df000215 	stw	fp,8(sp)
  80d9bc:	df000204 	addi	fp,sp,8
  80d9c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80d9c4:	e0bfff17 	ldw	r2,-4(fp)
  80d9c8:	10800017 	ldw	r2,0(r2)
  80d9cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80d9d0:	e0bffe17 	ldw	r2,-8(fp)
  80d9d4:	10c00a04 	addi	r3,r2,40
  80d9d8:	e0bfff17 	ldw	r2,-4(fp)
  80d9dc:	10800217 	ldw	r2,8(r2)
  80d9e0:	100b883a 	mov	r5,r2
  80d9e4:	1809883a 	mov	r4,r3
  80d9e8:	080dd740 	call	80dd74 <altera_avalon_uart_close>
}
  80d9ec:	e037883a 	mov	sp,fp
  80d9f0:	dfc00117 	ldw	ra,4(sp)
  80d9f4:	df000017 	ldw	fp,0(sp)
  80d9f8:	dec00204 	addi	sp,sp,8
  80d9fc:	f800283a 	ret

0080da00 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80da00:	defff804 	addi	sp,sp,-32
  80da04:	dfc00715 	stw	ra,28(sp)
  80da08:	df000615 	stw	fp,24(sp)
  80da0c:	df000604 	addi	fp,sp,24
  80da10:	e13ffd15 	stw	r4,-12(fp)
  80da14:	e17ffe15 	stw	r5,-8(fp)
  80da18:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  80da1c:	e0bffd17 	ldw	r2,-12(fp)
  80da20:	10800017 	ldw	r2,0(r2)
  80da24:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80da28:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80da2c:	1000041e 	bne	r2,zero,80da40 <altera_avalon_uart_init+0x40>
  80da30:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80da34:	1000021e 	bne	r2,zero,80da40 <altera_avalon_uart_init+0x40>
  80da38:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80da3c:	10000226 	beq	r2,zero,80da48 <altera_avalon_uart_init+0x48>
  80da40:	00800044 	movi	r2,1
  80da44:	00000106 	br	80da4c <altera_avalon_uart_init+0x4c>
  80da48:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80da4c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80da50:	e0bffc17 	ldw	r2,-16(fp)
  80da54:	10000f1e 	bne	r2,zero,80da94 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80da58:	e0bffd17 	ldw	r2,-12(fp)
  80da5c:	00c32004 	movi	r3,3200
  80da60:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80da64:	e0bffb17 	ldw	r2,-20(fp)
  80da68:	10800304 	addi	r2,r2,12
  80da6c:	e0fffd17 	ldw	r3,-12(fp)
  80da70:	18c00117 	ldw	r3,4(r3)
  80da74:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80da78:	d8000015 	stw	zero,0(sp)
  80da7c:	e1fffd17 	ldw	r7,-12(fp)
  80da80:	01802074 	movhi	r6,129
  80da84:	31b6ab04 	addi	r6,r6,-9556
  80da88:	e17fff17 	ldw	r5,-4(fp)
  80da8c:	e13ffe17 	ldw	r4,-8(fp)
  80da90:	080e6200 	call	80e620 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80da94:	0001883a 	nop
  80da98:	e037883a 	mov	sp,fp
  80da9c:	dfc00117 	ldw	ra,4(sp)
  80daa0:	df000017 	ldw	fp,0(sp)
  80daa4:	dec00204 	addi	sp,sp,8
  80daa8:	f800283a 	ret

0080daac <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80daac:	defffa04 	addi	sp,sp,-24
  80dab0:	dfc00515 	stw	ra,20(sp)
  80dab4:	df000415 	stw	fp,16(sp)
  80dab8:	df000404 	addi	fp,sp,16
  80dabc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80dac0:	e0bfff17 	ldw	r2,-4(fp)
  80dac4:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  80dac8:	e0bffc17 	ldw	r2,-16(fp)
  80dacc:	10800017 	ldw	r2,0(r2)
  80dad0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80dad4:	e0bffd17 	ldw	r2,-12(fp)
  80dad8:	10800204 	addi	r2,r2,8
  80dadc:	10800037 	ldwio	r2,0(r2)
  80dae0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80dae4:	e0bffd17 	ldw	r2,-12(fp)
  80dae8:	10800204 	addi	r2,r2,8
  80daec:	0007883a 	mov	r3,zero
  80daf0:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80daf4:	e0bffd17 	ldw	r2,-12(fp)
  80daf8:	10800204 	addi	r2,r2,8
  80dafc:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80db00:	e0bffe17 	ldw	r2,-8(fp)
  80db04:	1080200c 	andi	r2,r2,128
  80db08:	10000326 	beq	r2,zero,80db18 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80db0c:	e17ffe17 	ldw	r5,-8(fp)
  80db10:	e13ffc17 	ldw	r4,-16(fp)
  80db14:	080db480 	call	80db48 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80db18:	e0bffe17 	ldw	r2,-8(fp)
  80db1c:	1081100c 	andi	r2,r2,1088
  80db20:	10000326 	beq	r2,zero,80db30 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80db24:	e17ffe17 	ldw	r5,-8(fp)
  80db28:	e13ffc17 	ldw	r4,-16(fp)
  80db2c:	080dc2c0 	call	80dc2c <altera_avalon_uart_txirq>
  }
  

}
  80db30:	0001883a 	nop
  80db34:	e037883a 	mov	sp,fp
  80db38:	dfc00117 	ldw	ra,4(sp)
  80db3c:	df000017 	ldw	fp,0(sp)
  80db40:	dec00204 	addi	sp,sp,8
  80db44:	f800283a 	ret

0080db48 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80db48:	defffc04 	addi	sp,sp,-16
  80db4c:	df000315 	stw	fp,12(sp)
  80db50:	df000304 	addi	fp,sp,12
  80db54:	e13ffe15 	stw	r4,-8(fp)
  80db58:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80db5c:	e0bfff17 	ldw	r2,-4(fp)
  80db60:	108000cc 	andi	r2,r2,3
  80db64:	10002c1e 	bne	r2,zero,80dc18 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80db68:	e0bffe17 	ldw	r2,-8(fp)
  80db6c:	10800317 	ldw	r2,12(r2)
  80db70:	e0bffe17 	ldw	r2,-8(fp)
  80db74:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80db78:	e0bffe17 	ldw	r2,-8(fp)
  80db7c:	10800317 	ldw	r2,12(r2)
  80db80:	10800044 	addi	r2,r2,1
  80db84:	10800fcc 	andi	r2,r2,63
  80db88:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80db8c:	e0bffe17 	ldw	r2,-8(fp)
  80db90:	10800317 	ldw	r2,12(r2)
  80db94:	e0fffe17 	ldw	r3,-8(fp)
  80db98:	18c00017 	ldw	r3,0(r3)
  80db9c:	18c00037 	ldwio	r3,0(r3)
  80dba0:	1809883a 	mov	r4,r3
  80dba4:	e0fffe17 	ldw	r3,-8(fp)
  80dba8:	1885883a 	add	r2,r3,r2
  80dbac:	10800704 	addi	r2,r2,28
  80dbb0:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  80dbb4:	e0bffe17 	ldw	r2,-8(fp)
  80dbb8:	e0fffd17 	ldw	r3,-12(fp)
  80dbbc:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80dbc0:	e0bffe17 	ldw	r2,-8(fp)
  80dbc4:	10800317 	ldw	r2,12(r2)
  80dbc8:	10800044 	addi	r2,r2,1
  80dbcc:	10800fcc 	andi	r2,r2,63
  80dbd0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80dbd4:	e0bffe17 	ldw	r2,-8(fp)
  80dbd8:	10c00217 	ldw	r3,8(r2)
  80dbdc:	e0bffd17 	ldw	r2,-12(fp)
  80dbe0:	18800e1e 	bne	r3,r2,80dc1c <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80dbe4:	e0bffe17 	ldw	r2,-8(fp)
  80dbe8:	10c00117 	ldw	r3,4(r2)
  80dbec:	00bfdfc4 	movi	r2,-129
  80dbf0:	1886703a 	and	r3,r3,r2
  80dbf4:	e0bffe17 	ldw	r2,-8(fp)
  80dbf8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80dbfc:	e0bffe17 	ldw	r2,-8(fp)
  80dc00:	10800017 	ldw	r2,0(r2)
  80dc04:	10800304 	addi	r2,r2,12
  80dc08:	e0fffe17 	ldw	r3,-8(fp)
  80dc0c:	18c00117 	ldw	r3,4(r3)
  80dc10:	10c00035 	stwio	r3,0(r2)
  80dc14:	00000106 	br	80dc1c <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  80dc18:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  80dc1c:	e037883a 	mov	sp,fp
  80dc20:	df000017 	ldw	fp,0(sp)
  80dc24:	dec00104 	addi	sp,sp,4
  80dc28:	f800283a 	ret

0080dc2c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80dc2c:	defffb04 	addi	sp,sp,-20
  80dc30:	df000415 	stw	fp,16(sp)
  80dc34:	df000404 	addi	fp,sp,16
  80dc38:	e13ffc15 	stw	r4,-16(fp)
  80dc3c:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80dc40:	e0bffc17 	ldw	r2,-16(fp)
  80dc44:	10c00417 	ldw	r3,16(r2)
  80dc48:	e0bffc17 	ldw	r2,-16(fp)
  80dc4c:	10800517 	ldw	r2,20(r2)
  80dc50:	18803226 	beq	r3,r2,80dd1c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80dc54:	e0bffc17 	ldw	r2,-16(fp)
  80dc58:	10800617 	ldw	r2,24(r2)
  80dc5c:	1080008c 	andi	r2,r2,2
  80dc60:	10000326 	beq	r2,zero,80dc70 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80dc64:	e0bffd17 	ldw	r2,-12(fp)
  80dc68:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80dc6c:	10001d26 	beq	r2,zero,80dce4 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80dc70:	e0bffc17 	ldw	r2,-16(fp)
  80dc74:	10800417 	ldw	r2,16(r2)
  80dc78:	e0bffc17 	ldw	r2,-16(fp)
  80dc7c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80dc80:	e0bffc17 	ldw	r2,-16(fp)
  80dc84:	10800017 	ldw	r2,0(r2)
  80dc88:	10800104 	addi	r2,r2,4
  80dc8c:	e0fffc17 	ldw	r3,-16(fp)
  80dc90:	18c00417 	ldw	r3,16(r3)
  80dc94:	e13ffc17 	ldw	r4,-16(fp)
  80dc98:	20c7883a 	add	r3,r4,r3
  80dc9c:	18c01704 	addi	r3,r3,92
  80dca0:	18c00003 	ldbu	r3,0(r3)
  80dca4:	18c03fcc 	andi	r3,r3,255
  80dca8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80dcac:	e0bffc17 	ldw	r2,-16(fp)
  80dcb0:	10800417 	ldw	r2,16(r2)
  80dcb4:	10800044 	addi	r2,r2,1
  80dcb8:	e0fffc17 	ldw	r3,-16(fp)
  80dcbc:	18800415 	stw	r2,16(r3)
  80dcc0:	10c00fcc 	andi	r3,r2,63
  80dcc4:	e0bffc17 	ldw	r2,-16(fp)
  80dcc8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80dccc:	e0bffc17 	ldw	r2,-16(fp)
  80dcd0:	10800117 	ldw	r2,4(r2)
  80dcd4:	10c01014 	ori	r3,r2,64
  80dcd8:	e0bffc17 	ldw	r2,-16(fp)
  80dcdc:	10c00115 	stw	r3,4(r2)
  80dce0:	00000e06 	br	80dd1c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80dce4:	e0bffc17 	ldw	r2,-16(fp)
  80dce8:	10800017 	ldw	r2,0(r2)
  80dcec:	10800204 	addi	r2,r2,8
  80dcf0:	10800037 	ldwio	r2,0(r2)
  80dcf4:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80dcf8:	e0bffd17 	ldw	r2,-12(fp)
  80dcfc:	1082000c 	andi	r2,r2,2048
  80dd00:	1000061e 	bne	r2,zero,80dd1c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80dd04:	e0bffc17 	ldw	r2,-16(fp)
  80dd08:	10c00117 	ldw	r3,4(r2)
  80dd0c:	00bfefc4 	movi	r2,-65
  80dd10:	1886703a 	and	r3,r3,r2
  80dd14:	e0bffc17 	ldw	r2,-16(fp)
  80dd18:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80dd1c:	e0bffc17 	ldw	r2,-16(fp)
  80dd20:	10c00417 	ldw	r3,16(r2)
  80dd24:	e0bffc17 	ldw	r2,-16(fp)
  80dd28:	10800517 	ldw	r2,20(r2)
  80dd2c:	1880061e 	bne	r3,r2,80dd48 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80dd30:	e0bffc17 	ldw	r2,-16(fp)
  80dd34:	10c00117 	ldw	r3,4(r2)
  80dd38:	00beefc4 	movi	r2,-1089
  80dd3c:	1886703a 	and	r3,r3,r2
  80dd40:	e0bffc17 	ldw	r2,-16(fp)
  80dd44:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80dd48:	e0bffc17 	ldw	r2,-16(fp)
  80dd4c:	10800017 	ldw	r2,0(r2)
  80dd50:	10800304 	addi	r2,r2,12
  80dd54:	e0fffc17 	ldw	r3,-16(fp)
  80dd58:	18c00117 	ldw	r3,4(r3)
  80dd5c:	10c00035 	stwio	r3,0(r2)
}
  80dd60:	0001883a 	nop
  80dd64:	e037883a 	mov	sp,fp
  80dd68:	df000017 	ldw	fp,0(sp)
  80dd6c:	dec00104 	addi	sp,sp,4
  80dd70:	f800283a 	ret

0080dd74 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80dd74:	defffd04 	addi	sp,sp,-12
  80dd78:	df000215 	stw	fp,8(sp)
  80dd7c:	df000204 	addi	fp,sp,8
  80dd80:	e13ffe15 	stw	r4,-8(fp)
  80dd84:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80dd88:	00000506 	br	80dda0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80dd8c:	e0bfff17 	ldw	r2,-4(fp)
  80dd90:	1090000c 	andi	r2,r2,16384
  80dd94:	10000226 	beq	r2,zero,80dda0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80dd98:	00bffd44 	movi	r2,-11
  80dd9c:	00000606 	br	80ddb8 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80dda0:	e0bffe17 	ldw	r2,-8(fp)
  80dda4:	10c00417 	ldw	r3,16(r2)
  80dda8:	e0bffe17 	ldw	r2,-8(fp)
  80ddac:	10800517 	ldw	r2,20(r2)
  80ddb0:	18bff61e 	bne	r3,r2,80dd8c <__alt_mem_onchip_mem+0xff805d8c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80ddb4:	0005883a 	mov	r2,zero
}
  80ddb8:	e037883a 	mov	sp,fp
  80ddbc:	df000017 	ldw	fp,0(sp)
  80ddc0:	dec00104 	addi	sp,sp,4
  80ddc4:	f800283a 	ret

0080ddc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ddc8:	defffe04 	addi	sp,sp,-8
  80ddcc:	dfc00115 	stw	ra,4(sp)
  80ddd0:	df000015 	stw	fp,0(sp)
  80ddd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ddd8:	d0a00917 	ldw	r2,-32732(gp)
  80dddc:	10000326 	beq	r2,zero,80ddec <alt_get_errno+0x24>
  80dde0:	d0a00917 	ldw	r2,-32732(gp)
  80dde4:	103ee83a 	callr	r2
  80dde8:	00000106 	br	80ddf0 <alt_get_errno+0x28>
  80ddec:	d0a72904 	addi	r2,gp,-25436
}
  80ddf0:	e037883a 	mov	sp,fp
  80ddf4:	dfc00117 	ldw	ra,4(sp)
  80ddf8:	df000017 	ldw	fp,0(sp)
  80ddfc:	dec00204 	addi	sp,sp,8
  80de00:	f800283a 	ret

0080de04 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80de04:	defff204 	addi	sp,sp,-56
  80de08:	dfc00d15 	stw	ra,52(sp)
  80de0c:	df000c15 	stw	fp,48(sp)
  80de10:	df000c04 	addi	fp,sp,48
  80de14:	e13ffc15 	stw	r4,-16(fp)
  80de18:	e17ffd15 	stw	r5,-12(fp)
  80de1c:	e1bffe15 	stw	r6,-8(fp)
  80de20:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  80de24:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  80de28:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80de2c:	e0bfff17 	ldw	r2,-4(fp)
  80de30:	1090000c 	andi	r2,r2,16384
  80de34:	1005003a 	cmpeq	r2,r2,zero
  80de38:	10803fcc 	andi	r2,r2,255
  80de3c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80de40:	00001306 	br	80de90 <altera_avalon_uart_read+0x8c>
    {
      count++;
  80de44:	e0bff517 	ldw	r2,-44(fp)
  80de48:	10800044 	addi	r2,r2,1
  80de4c:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80de50:	e0bffd17 	ldw	r2,-12(fp)
  80de54:	10c00044 	addi	r3,r2,1
  80de58:	e0fffd15 	stw	r3,-12(fp)
  80de5c:	e0fffc17 	ldw	r3,-16(fp)
  80de60:	18c00217 	ldw	r3,8(r3)
  80de64:	e13ffc17 	ldw	r4,-16(fp)
  80de68:	20c7883a 	add	r3,r4,r3
  80de6c:	18c00704 	addi	r3,r3,28
  80de70:	18c00003 	ldbu	r3,0(r3)
  80de74:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  80de78:	e0bffc17 	ldw	r2,-16(fp)
  80de7c:	10800217 	ldw	r2,8(r2)
  80de80:	10800044 	addi	r2,r2,1
  80de84:	10c00fcc 	andi	r3,r2,63
  80de88:	e0bffc17 	ldw	r2,-16(fp)
  80de8c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80de90:	e0fff517 	ldw	r3,-44(fp)
  80de94:	e0bffe17 	ldw	r2,-8(fp)
  80de98:	1880050e 	bge	r3,r2,80deb0 <altera_avalon_uart_read+0xac>
  80de9c:	e0bffc17 	ldw	r2,-16(fp)
  80dea0:	10c00217 	ldw	r3,8(r2)
  80dea4:	e0bffc17 	ldw	r2,-16(fp)
  80dea8:	10800317 	ldw	r2,12(r2)
  80deac:	18bfe51e 	bne	r3,r2,80de44 <__alt_mem_onchip_mem+0xff805e44>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80deb0:	e0bff517 	ldw	r2,-44(fp)
  80deb4:	1000251e 	bne	r2,zero,80df4c <altera_avalon_uart_read+0x148>
  80deb8:	e0bffc17 	ldw	r2,-16(fp)
  80debc:	10c00217 	ldw	r3,8(r2)
  80dec0:	e0bffc17 	ldw	r2,-16(fp)
  80dec4:	10800317 	ldw	r2,12(r2)
  80dec8:	1880201e 	bne	r3,r2,80df4c <altera_avalon_uart_read+0x148>
    {
      if (!block)
  80decc:	e0bff617 	ldw	r2,-40(fp)
  80ded0:	1000071e 	bne	r2,zero,80def0 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80ded4:	080ddc80 	call	80ddc8 <alt_get_errno>
  80ded8:	1007883a 	mov	r3,r2
  80dedc:	008002c4 	movi	r2,11
  80dee0:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  80dee4:	00800044 	movi	r2,1
  80dee8:	e0bff405 	stb	r2,-48(fp)
        break;
  80deec:	00001b06 	br	80df5c <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80def0:	0005303a 	rdctl	r2,status
  80def4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80def8:	e0fff917 	ldw	r3,-28(fp)
  80defc:	00bfff84 	movi	r2,-2
  80df00:	1884703a 	and	r2,r3,r2
  80df04:	1001703a 	wrctl	status,r2
  
  return context;
  80df08:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80df0c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80df10:	e0bffc17 	ldw	r2,-16(fp)
  80df14:	10800117 	ldw	r2,4(r2)
  80df18:	10c02014 	ori	r3,r2,128
  80df1c:	e0bffc17 	ldw	r2,-16(fp)
  80df20:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80df24:	e0bffc17 	ldw	r2,-16(fp)
  80df28:	10800017 	ldw	r2,0(r2)
  80df2c:	10800304 	addi	r2,r2,12
  80df30:	e0fffc17 	ldw	r3,-16(fp)
  80df34:	18c00117 	ldw	r3,4(r3)
  80df38:	10c00035 	stwio	r3,0(r2)
  80df3c:	e0bff817 	ldw	r2,-32(fp)
  80df40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80df44:	e0bffa17 	ldw	r2,-24(fp)
  80df48:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80df4c:	e0bff517 	ldw	r2,-44(fp)
  80df50:	1000021e 	bne	r2,zero,80df5c <altera_avalon_uart_read+0x158>
  80df54:	e0bffe17 	ldw	r2,-8(fp)
  80df58:	103fcd1e 	bne	r2,zero,80de90 <__alt_mem_onchip_mem+0xff805e90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80df5c:	0005303a 	rdctl	r2,status
  80df60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80df64:	e0fffb17 	ldw	r3,-20(fp)
  80df68:	00bfff84 	movi	r2,-2
  80df6c:	1884703a 	and	r2,r3,r2
  80df70:	1001703a 	wrctl	status,r2
  
  return context;
  80df74:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80df78:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80df7c:	e0bffc17 	ldw	r2,-16(fp)
  80df80:	10800117 	ldw	r2,4(r2)
  80df84:	10c02014 	ori	r3,r2,128
  80df88:	e0bffc17 	ldw	r2,-16(fp)
  80df8c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80df90:	e0bffc17 	ldw	r2,-16(fp)
  80df94:	10800017 	ldw	r2,0(r2)
  80df98:	10800304 	addi	r2,r2,12
  80df9c:	e0fffc17 	ldw	r3,-16(fp)
  80dfa0:	18c00117 	ldw	r3,4(r3)
  80dfa4:	10c00035 	stwio	r3,0(r2)
  80dfa8:	e0bff817 	ldw	r2,-32(fp)
  80dfac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dfb0:	e0bff717 	ldw	r2,-36(fp)
  80dfb4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80dfb8:	e0bff403 	ldbu	r2,-48(fp)
  80dfbc:	10000226 	beq	r2,zero,80dfc8 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  80dfc0:	00bffd44 	movi	r2,-11
  80dfc4:	00000106 	br	80dfcc <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  80dfc8:	e0bff517 	ldw	r2,-44(fp)
  }
}
  80dfcc:	e037883a 	mov	sp,fp
  80dfd0:	dfc00117 	ldw	ra,4(sp)
  80dfd4:	df000017 	ldw	fp,0(sp)
  80dfd8:	dec00204 	addi	sp,sp,8
  80dfdc:	f800283a 	ret

0080dfe0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dfe0:	defffe04 	addi	sp,sp,-8
  80dfe4:	dfc00115 	stw	ra,4(sp)
  80dfe8:	df000015 	stw	fp,0(sp)
  80dfec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dff0:	d0a00917 	ldw	r2,-32732(gp)
  80dff4:	10000326 	beq	r2,zero,80e004 <alt_get_errno+0x24>
  80dff8:	d0a00917 	ldw	r2,-32732(gp)
  80dffc:	103ee83a 	callr	r2
  80e000:	00000106 	br	80e008 <alt_get_errno+0x28>
  80e004:	d0a72904 	addi	r2,gp,-25436
}
  80e008:	e037883a 	mov	sp,fp
  80e00c:	dfc00117 	ldw	ra,4(sp)
  80e010:	df000017 	ldw	fp,0(sp)
  80e014:	dec00204 	addi	sp,sp,8
  80e018:	f800283a 	ret

0080e01c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80e01c:	defff204 	addi	sp,sp,-56
  80e020:	dfc00d15 	stw	ra,52(sp)
  80e024:	df000c15 	stw	fp,48(sp)
  80e028:	df000c04 	addi	fp,sp,48
  80e02c:	e13ffc15 	stw	r4,-16(fp)
  80e030:	e17ffd15 	stw	r5,-12(fp)
  80e034:	e1bffe15 	stw	r6,-8(fp)
  80e038:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80e03c:	e0bffe17 	ldw	r2,-8(fp)
  80e040:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80e044:	e0bfff17 	ldw	r2,-4(fp)
  80e048:	1090000c 	andi	r2,r2,16384
  80e04c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80e050:	00003c06 	br	80e144 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80e054:	e0bffc17 	ldw	r2,-16(fp)
  80e058:	10800517 	ldw	r2,20(r2)
  80e05c:	10800044 	addi	r2,r2,1
  80e060:	10800fcc 	andi	r2,r2,63
  80e064:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80e068:	e0bffc17 	ldw	r2,-16(fp)
  80e06c:	10c00417 	ldw	r3,16(r2)
  80e070:	e0bff717 	ldw	r2,-36(fp)
  80e074:	1880221e 	bne	r3,r2,80e100 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  80e078:	e0bff517 	ldw	r2,-44(fp)
  80e07c:	10000526 	beq	r2,zero,80e094 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80e080:	080dfe00 	call	80dfe0 <alt_get_errno>
  80e084:	1007883a 	mov	r3,r2
  80e088:	008002c4 	movi	r2,11
  80e08c:	18800015 	stw	r2,0(r3)
        break;
  80e090:	00002e06 	br	80e14c <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e094:	0005303a 	rdctl	r2,status
  80e098:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e09c:	e0fff917 	ldw	r3,-28(fp)
  80e0a0:	00bfff84 	movi	r2,-2
  80e0a4:	1884703a 	and	r2,r3,r2
  80e0a8:	1001703a 	wrctl	status,r2
  
  return context;
  80e0ac:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80e0b0:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80e0b4:	e0bffc17 	ldw	r2,-16(fp)
  80e0b8:	10800117 	ldw	r2,4(r2)
  80e0bc:	10c11014 	ori	r3,r2,1088
  80e0c0:	e0bffc17 	ldw	r2,-16(fp)
  80e0c4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80e0c8:	e0bffc17 	ldw	r2,-16(fp)
  80e0cc:	10800017 	ldw	r2,0(r2)
  80e0d0:	10800304 	addi	r2,r2,12
  80e0d4:	e0fffc17 	ldw	r3,-16(fp)
  80e0d8:	18c00117 	ldw	r3,4(r3)
  80e0dc:	10c00035 	stwio	r3,0(r2)
  80e0e0:	e0bff817 	ldw	r2,-32(fp)
  80e0e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e0e8:	e0bff617 	ldw	r2,-40(fp)
  80e0ec:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80e0f0:	e0bffc17 	ldw	r2,-16(fp)
  80e0f4:	10c00417 	ldw	r3,16(r2)
  80e0f8:	e0bff717 	ldw	r2,-36(fp)
  80e0fc:	18bffc26 	beq	r3,r2,80e0f0 <__alt_mem_onchip_mem+0xff8060f0>
      }
    }

    count--;
  80e100:	e0bff417 	ldw	r2,-48(fp)
  80e104:	10bfffc4 	addi	r2,r2,-1
  80e108:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80e10c:	e0bffc17 	ldw	r2,-16(fp)
  80e110:	10c00517 	ldw	r3,20(r2)
  80e114:	e0bffd17 	ldw	r2,-12(fp)
  80e118:	11000044 	addi	r4,r2,1
  80e11c:	e13ffd15 	stw	r4,-12(fp)
  80e120:	10800003 	ldbu	r2,0(r2)
  80e124:	1009883a 	mov	r4,r2
  80e128:	e0bffc17 	ldw	r2,-16(fp)
  80e12c:	10c5883a 	add	r2,r2,r3
  80e130:	10801704 	addi	r2,r2,92
  80e134:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80e138:	e0bffc17 	ldw	r2,-16(fp)
  80e13c:	e0fff717 	ldw	r3,-36(fp)
  80e140:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80e144:	e0bff417 	ldw	r2,-48(fp)
  80e148:	103fc21e 	bne	r2,zero,80e054 <__alt_mem_onchip_mem+0xff806054>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e14c:	0005303a 	rdctl	r2,status
  80e150:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e154:	e0fffb17 	ldw	r3,-20(fp)
  80e158:	00bfff84 	movi	r2,-2
  80e15c:	1884703a 	and	r2,r3,r2
  80e160:	1001703a 	wrctl	status,r2
  
  return context;
  80e164:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80e168:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80e16c:	e0bffc17 	ldw	r2,-16(fp)
  80e170:	10800117 	ldw	r2,4(r2)
  80e174:	10c11014 	ori	r3,r2,1088
  80e178:	e0bffc17 	ldw	r2,-16(fp)
  80e17c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80e180:	e0bffc17 	ldw	r2,-16(fp)
  80e184:	10800017 	ldw	r2,0(r2)
  80e188:	10800304 	addi	r2,r2,12
  80e18c:	e0fffc17 	ldw	r3,-16(fp)
  80e190:	18c00117 	ldw	r3,4(r3)
  80e194:	10c00035 	stwio	r3,0(r2)
  80e198:	e0bff817 	ldw	r2,-32(fp)
  80e19c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e1a0:	e0bffa17 	ldw	r2,-24(fp)
  80e1a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80e1a8:	e0fffe17 	ldw	r3,-8(fp)
  80e1ac:	e0bff417 	ldw	r2,-48(fp)
  80e1b0:	1885c83a 	sub	r2,r3,r2
}
  80e1b4:	e037883a 	mov	sp,fp
  80e1b8:	dfc00117 	ldw	ra,4(sp)
  80e1bc:	df000017 	ldw	fp,0(sp)
  80e1c0:	dec00204 	addi	sp,sp,8
  80e1c4:	f800283a 	ret

0080e1c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80e1c8:	defffe04 	addi	sp,sp,-8
  80e1cc:	df000115 	stw	fp,4(sp)
  80e1d0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80e1d4:	e03fff15 	stw	zero,-4(fp)
  80e1d8:	00000506 	br	80e1f0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80e1dc:	e0bfff17 	ldw	r2,-4(fp)
  80e1e0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80e1e4:	e0bfff17 	ldw	r2,-4(fp)
  80e1e8:	10800804 	addi	r2,r2,32
  80e1ec:	e0bfff15 	stw	r2,-4(fp)
  80e1f0:	e0bfff17 	ldw	r2,-4(fp)
  80e1f4:	10820030 	cmpltui	r2,r2,2048
  80e1f8:	103ff81e 	bne	r2,zero,80e1dc <__alt_mem_onchip_mem+0xff8061dc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80e1fc:	0001883a 	nop
  80e200:	e037883a 	mov	sp,fp
  80e204:	df000017 	ldw	fp,0(sp)
  80e208:	dec00104 	addi	sp,sp,4
  80e20c:	f800283a 	ret

0080e210 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e210:	defffe04 	addi	sp,sp,-8
  80e214:	dfc00115 	stw	ra,4(sp)
  80e218:	df000015 	stw	fp,0(sp)
  80e21c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e220:	d0a00917 	ldw	r2,-32732(gp)
  80e224:	10000326 	beq	r2,zero,80e234 <alt_get_errno+0x24>
  80e228:	d0a00917 	ldw	r2,-32732(gp)
  80e22c:	103ee83a 	callr	r2
  80e230:	00000106 	br	80e238 <alt_get_errno+0x28>
  80e234:	d0a72904 	addi	r2,gp,-25436
}
  80e238:	e037883a 	mov	sp,fp
  80e23c:	dfc00117 	ldw	ra,4(sp)
  80e240:	df000017 	ldw	fp,0(sp)
  80e244:	dec00204 	addi	sp,sp,8
  80e248:	f800283a 	ret

0080e24c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80e24c:	defffa04 	addi	sp,sp,-24
  80e250:	dfc00515 	stw	ra,20(sp)
  80e254:	df000415 	stw	fp,16(sp)
  80e258:	df000404 	addi	fp,sp,16
  80e25c:	e13ffe15 	stw	r4,-8(fp)
  80e260:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80e264:	e0bffe17 	ldw	r2,-8(fp)
  80e268:	10000326 	beq	r2,zero,80e278 <alt_dev_llist_insert+0x2c>
  80e26c:	e0bffe17 	ldw	r2,-8(fp)
  80e270:	10800217 	ldw	r2,8(r2)
  80e274:	1000061e 	bne	r2,zero,80e290 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80e278:	080e2100 	call	80e210 <alt_get_errno>
  80e27c:	1007883a 	mov	r3,r2
  80e280:	00800584 	movi	r2,22
  80e284:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80e288:	00bffa84 	movi	r2,-22
  80e28c:	00001306 	br	80e2dc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80e290:	e0bffe17 	ldw	r2,-8(fp)
  80e294:	e0ffff17 	ldw	r3,-4(fp)
  80e298:	e0fffc15 	stw	r3,-16(fp)
  80e29c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80e2a0:	e0bffd17 	ldw	r2,-12(fp)
  80e2a4:	e0fffc17 	ldw	r3,-16(fp)
  80e2a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80e2ac:	e0bffc17 	ldw	r2,-16(fp)
  80e2b0:	10c00017 	ldw	r3,0(r2)
  80e2b4:	e0bffd17 	ldw	r2,-12(fp)
  80e2b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80e2bc:	e0bffc17 	ldw	r2,-16(fp)
  80e2c0:	10800017 	ldw	r2,0(r2)
  80e2c4:	e0fffd17 	ldw	r3,-12(fp)
  80e2c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80e2cc:	e0bffc17 	ldw	r2,-16(fp)
  80e2d0:	e0fffd17 	ldw	r3,-12(fp)
  80e2d4:	10c00015 	stw	r3,0(r2)

  return 0;  
  80e2d8:	0005883a 	mov	r2,zero
}
  80e2dc:	e037883a 	mov	sp,fp
  80e2e0:	dfc00117 	ldw	ra,4(sp)
  80e2e4:	df000017 	ldw	fp,0(sp)
  80e2e8:	dec00204 	addi	sp,sp,8
  80e2ec:	f800283a 	ret

0080e2f0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80e2f0:	defffd04 	addi	sp,sp,-12
  80e2f4:	dfc00215 	stw	ra,8(sp)
  80e2f8:	df000115 	stw	fp,4(sp)
  80e2fc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80e300:	00802074 	movhi	r2,129
  80e304:	10bc1a04 	addi	r2,r2,-3992
  80e308:	e0bfff15 	stw	r2,-4(fp)
  80e30c:	00000606 	br	80e328 <_do_ctors+0x38>
        (*ctor) (); 
  80e310:	e0bfff17 	ldw	r2,-4(fp)
  80e314:	10800017 	ldw	r2,0(r2)
  80e318:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80e31c:	e0bfff17 	ldw	r2,-4(fp)
  80e320:	10bfff04 	addi	r2,r2,-4
  80e324:	e0bfff15 	stw	r2,-4(fp)
  80e328:	e0ffff17 	ldw	r3,-4(fp)
  80e32c:	00802074 	movhi	r2,129
  80e330:	10bc1b04 	addi	r2,r2,-3988
  80e334:	18bff62e 	bgeu	r3,r2,80e310 <__alt_mem_onchip_mem+0xff806310>
        (*ctor) (); 
}
  80e338:	0001883a 	nop
  80e33c:	e037883a 	mov	sp,fp
  80e340:	dfc00117 	ldw	ra,4(sp)
  80e344:	df000017 	ldw	fp,0(sp)
  80e348:	dec00204 	addi	sp,sp,8
  80e34c:	f800283a 	ret

0080e350 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80e350:	defffd04 	addi	sp,sp,-12
  80e354:	dfc00215 	stw	ra,8(sp)
  80e358:	df000115 	stw	fp,4(sp)
  80e35c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80e360:	00802074 	movhi	r2,129
  80e364:	10bc1a04 	addi	r2,r2,-3992
  80e368:	e0bfff15 	stw	r2,-4(fp)
  80e36c:	00000606 	br	80e388 <_do_dtors+0x38>
        (*dtor) (); 
  80e370:	e0bfff17 	ldw	r2,-4(fp)
  80e374:	10800017 	ldw	r2,0(r2)
  80e378:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80e37c:	e0bfff17 	ldw	r2,-4(fp)
  80e380:	10bfff04 	addi	r2,r2,-4
  80e384:	e0bfff15 	stw	r2,-4(fp)
  80e388:	e0ffff17 	ldw	r3,-4(fp)
  80e38c:	00802074 	movhi	r2,129
  80e390:	10bc1b04 	addi	r2,r2,-3988
  80e394:	18bff62e 	bgeu	r3,r2,80e370 <__alt_mem_onchip_mem+0xff806370>
        (*dtor) (); 
}
  80e398:	0001883a 	nop
  80e39c:	e037883a 	mov	sp,fp
  80e3a0:	dfc00117 	ldw	ra,4(sp)
  80e3a4:	df000017 	ldw	fp,0(sp)
  80e3a8:	dec00204 	addi	sp,sp,8
  80e3ac:	f800283a 	ret

0080e3b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80e3b0:	defffa04 	addi	sp,sp,-24
  80e3b4:	dfc00515 	stw	ra,20(sp)
  80e3b8:	df000415 	stw	fp,16(sp)
  80e3bc:	df000404 	addi	fp,sp,16
  80e3c0:	e13ffe15 	stw	r4,-8(fp)
  80e3c4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80e3c8:	e0bfff17 	ldw	r2,-4(fp)
  80e3cc:	10800017 	ldw	r2,0(r2)
  80e3d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80e3d4:	e13ffe17 	ldw	r4,-8(fp)
  80e3d8:	0808d080 	call	808d08 <strlen>
  80e3dc:	10800044 	addi	r2,r2,1
  80e3e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80e3e4:	00000d06 	br	80e41c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80e3e8:	e0bffc17 	ldw	r2,-16(fp)
  80e3ec:	10800217 	ldw	r2,8(r2)
  80e3f0:	e0fffd17 	ldw	r3,-12(fp)
  80e3f4:	180d883a 	mov	r6,r3
  80e3f8:	e17ffe17 	ldw	r5,-8(fp)
  80e3fc:	1009883a 	mov	r4,r2
  80e400:	080ed240 	call	80ed24 <memcmp>
  80e404:	1000021e 	bne	r2,zero,80e410 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80e408:	e0bffc17 	ldw	r2,-16(fp)
  80e40c:	00000706 	br	80e42c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80e410:	e0bffc17 	ldw	r2,-16(fp)
  80e414:	10800017 	ldw	r2,0(r2)
  80e418:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80e41c:	e0fffc17 	ldw	r3,-16(fp)
  80e420:	e0bfff17 	ldw	r2,-4(fp)
  80e424:	18bff01e 	bne	r3,r2,80e3e8 <__alt_mem_onchip_mem+0xff8063e8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80e428:	0005883a 	mov	r2,zero
}
  80e42c:	e037883a 	mov	sp,fp
  80e430:	dfc00117 	ldw	ra,4(sp)
  80e434:	df000017 	ldw	fp,0(sp)
  80e438:	dec00204 	addi	sp,sp,8
  80e43c:	f800283a 	ret

0080e440 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80e440:	defffb04 	addi	sp,sp,-20
  80e444:	dfc00415 	stw	ra,16(sp)
  80e448:	df000315 	stw	fp,12(sp)
  80e44c:	df000304 	addi	fp,sp,12
  80e450:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80e454:	d0a00417 	ldw	r2,-32752(gp)
  80e458:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80e45c:	00003106 	br	80e524 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80e460:	e0bffd17 	ldw	r2,-12(fp)
  80e464:	10800217 	ldw	r2,8(r2)
  80e468:	1009883a 	mov	r4,r2
  80e46c:	0808d080 	call	808d08 <strlen>
  80e470:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80e474:	e0bffd17 	ldw	r2,-12(fp)
  80e478:	10c00217 	ldw	r3,8(r2)
  80e47c:	e0bffe17 	ldw	r2,-8(fp)
  80e480:	10bfffc4 	addi	r2,r2,-1
  80e484:	1885883a 	add	r2,r3,r2
  80e488:	10800003 	ldbu	r2,0(r2)
  80e48c:	10803fcc 	andi	r2,r2,255
  80e490:	1080201c 	xori	r2,r2,128
  80e494:	10bfe004 	addi	r2,r2,-128
  80e498:	10800bd8 	cmpnei	r2,r2,47
  80e49c:	1000031e 	bne	r2,zero,80e4ac <alt_find_file+0x6c>
    {
      len -= 1;
  80e4a0:	e0bffe17 	ldw	r2,-8(fp)
  80e4a4:	10bfffc4 	addi	r2,r2,-1
  80e4a8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80e4ac:	e0bffe17 	ldw	r2,-8(fp)
  80e4b0:	e0ffff17 	ldw	r3,-4(fp)
  80e4b4:	1885883a 	add	r2,r3,r2
  80e4b8:	10800003 	ldbu	r2,0(r2)
  80e4bc:	10803fcc 	andi	r2,r2,255
  80e4c0:	1080201c 	xori	r2,r2,128
  80e4c4:	10bfe004 	addi	r2,r2,-128
  80e4c8:	10800be0 	cmpeqi	r2,r2,47
  80e4cc:	1000081e 	bne	r2,zero,80e4f0 <alt_find_file+0xb0>
  80e4d0:	e0bffe17 	ldw	r2,-8(fp)
  80e4d4:	e0ffff17 	ldw	r3,-4(fp)
  80e4d8:	1885883a 	add	r2,r3,r2
  80e4dc:	10800003 	ldbu	r2,0(r2)
  80e4e0:	10803fcc 	andi	r2,r2,255
  80e4e4:	1080201c 	xori	r2,r2,128
  80e4e8:	10bfe004 	addi	r2,r2,-128
  80e4ec:	10000a1e 	bne	r2,zero,80e518 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80e4f0:	e0bffd17 	ldw	r2,-12(fp)
  80e4f4:	10800217 	ldw	r2,8(r2)
  80e4f8:	e0fffe17 	ldw	r3,-8(fp)
  80e4fc:	180d883a 	mov	r6,r3
  80e500:	e17fff17 	ldw	r5,-4(fp)
  80e504:	1009883a 	mov	r4,r2
  80e508:	080ed240 	call	80ed24 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80e50c:	1000021e 	bne	r2,zero,80e518 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80e510:	e0bffd17 	ldw	r2,-12(fp)
  80e514:	00000706 	br	80e534 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80e518:	e0bffd17 	ldw	r2,-12(fp)
  80e51c:	10800017 	ldw	r2,0(r2)
  80e520:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80e524:	e0fffd17 	ldw	r3,-12(fp)
  80e528:	d0a00404 	addi	r2,gp,-32752
  80e52c:	18bfcc1e 	bne	r3,r2,80e460 <__alt_mem_onchip_mem+0xff806460>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80e530:	0005883a 	mov	r2,zero
}
  80e534:	e037883a 	mov	sp,fp
  80e538:	dfc00117 	ldw	ra,4(sp)
  80e53c:	df000017 	ldw	fp,0(sp)
  80e540:	dec00204 	addi	sp,sp,8
  80e544:	f800283a 	ret

0080e548 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80e548:	defffc04 	addi	sp,sp,-16
  80e54c:	df000315 	stw	fp,12(sp)
  80e550:	df000304 	addi	fp,sp,12
  80e554:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80e558:	00bffa04 	movi	r2,-24
  80e55c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80e560:	e03ffd15 	stw	zero,-12(fp)
  80e564:	00001906 	br	80e5cc <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  80e568:	00802074 	movhi	r2,129
  80e56c:	10bf3804 	addi	r2,r2,-800
  80e570:	e0fffd17 	ldw	r3,-12(fp)
  80e574:	18c00324 	muli	r3,r3,12
  80e578:	10c5883a 	add	r2,r2,r3
  80e57c:	10800017 	ldw	r2,0(r2)
  80e580:	10000f1e 	bne	r2,zero,80e5c0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  80e584:	00802074 	movhi	r2,129
  80e588:	10bf3804 	addi	r2,r2,-800
  80e58c:	e0fffd17 	ldw	r3,-12(fp)
  80e590:	18c00324 	muli	r3,r3,12
  80e594:	10c5883a 	add	r2,r2,r3
  80e598:	e0ffff17 	ldw	r3,-4(fp)
  80e59c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80e5a0:	d0e00817 	ldw	r3,-32736(gp)
  80e5a4:	e0bffd17 	ldw	r2,-12(fp)
  80e5a8:	1880020e 	bge	r3,r2,80e5b4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  80e5ac:	e0bffd17 	ldw	r2,-12(fp)
  80e5b0:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  80e5b4:	e0bffd17 	ldw	r2,-12(fp)
  80e5b8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80e5bc:	00000606 	br	80e5d8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80e5c0:	e0bffd17 	ldw	r2,-12(fp)
  80e5c4:	10800044 	addi	r2,r2,1
  80e5c8:	e0bffd15 	stw	r2,-12(fp)
  80e5cc:	e0bffd17 	ldw	r2,-12(fp)
  80e5d0:	10800810 	cmplti	r2,r2,32
  80e5d4:	103fe41e 	bne	r2,zero,80e568 <__alt_mem_onchip_mem+0xff806568>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80e5d8:	e0bffe17 	ldw	r2,-8(fp)
}
  80e5dc:	e037883a 	mov	sp,fp
  80e5e0:	df000017 	ldw	fp,0(sp)
  80e5e4:	dec00104 	addi	sp,sp,4
  80e5e8:	f800283a 	ret

0080e5ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80e5ec:	defffe04 	addi	sp,sp,-8
  80e5f0:	dfc00115 	stw	ra,4(sp)
  80e5f4:	df000015 	stw	fp,0(sp)
  80e5f8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80e5fc:	01440004 	movi	r5,4096
  80e600:	0009883a 	mov	r4,zero
  80e604:	080ebac0 	call	80ebac <alt_icache_flush>
#endif
}
  80e608:	0001883a 	nop
  80e60c:	e037883a 	mov	sp,fp
  80e610:	dfc00117 	ldw	ra,4(sp)
  80e614:	df000017 	ldw	fp,0(sp)
  80e618:	dec00204 	addi	sp,sp,8
  80e61c:	f800283a 	ret

0080e620 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80e620:	defff904 	addi	sp,sp,-28
  80e624:	dfc00615 	stw	ra,24(sp)
  80e628:	df000515 	stw	fp,20(sp)
  80e62c:	df000504 	addi	fp,sp,20
  80e630:	e13ffc15 	stw	r4,-16(fp)
  80e634:	e17ffd15 	stw	r5,-12(fp)
  80e638:	e1bffe15 	stw	r6,-8(fp)
  80e63c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80e640:	e0800217 	ldw	r2,8(fp)
  80e644:	d8800015 	stw	r2,0(sp)
  80e648:	e1ffff17 	ldw	r7,-4(fp)
  80e64c:	e1bffe17 	ldw	r6,-8(fp)
  80e650:	e17ffd17 	ldw	r5,-12(fp)
  80e654:	e13ffc17 	ldw	r4,-16(fp)
  80e658:	080e7d00 	call	80e7d0 <alt_iic_isr_register>
}  
  80e65c:	e037883a 	mov	sp,fp
  80e660:	dfc00117 	ldw	ra,4(sp)
  80e664:	df000017 	ldw	fp,0(sp)
  80e668:	dec00204 	addi	sp,sp,8
  80e66c:	f800283a 	ret

0080e670 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80e670:	defff904 	addi	sp,sp,-28
  80e674:	df000615 	stw	fp,24(sp)
  80e678:	df000604 	addi	fp,sp,24
  80e67c:	e13ffe15 	stw	r4,-8(fp)
  80e680:	e17fff15 	stw	r5,-4(fp)
  80e684:	e0bfff17 	ldw	r2,-4(fp)
  80e688:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e68c:	0005303a 	rdctl	r2,status
  80e690:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e694:	e0fffb17 	ldw	r3,-20(fp)
  80e698:	00bfff84 	movi	r2,-2
  80e69c:	1884703a 	and	r2,r3,r2
  80e6a0:	1001703a 	wrctl	status,r2
  
  return context;
  80e6a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e6a8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80e6ac:	00c00044 	movi	r3,1
  80e6b0:	e0bffa17 	ldw	r2,-24(fp)
  80e6b4:	1884983a 	sll	r2,r3,r2
  80e6b8:	1007883a 	mov	r3,r2
  80e6bc:	d0a72d17 	ldw	r2,-25420(gp)
  80e6c0:	1884b03a 	or	r2,r3,r2
  80e6c4:	d0a72d15 	stw	r2,-25420(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e6c8:	d0a72d17 	ldw	r2,-25420(gp)
  80e6cc:	100170fa 	wrctl	ienable,r2
  80e6d0:	e0bffc17 	ldw	r2,-16(fp)
  80e6d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e6d8:	e0bffd17 	ldw	r2,-12(fp)
  80e6dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e6e0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80e6e4:	0001883a 	nop
}
  80e6e8:	e037883a 	mov	sp,fp
  80e6ec:	df000017 	ldw	fp,0(sp)
  80e6f0:	dec00104 	addi	sp,sp,4
  80e6f4:	f800283a 	ret

0080e6f8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80e6f8:	defff904 	addi	sp,sp,-28
  80e6fc:	df000615 	stw	fp,24(sp)
  80e700:	df000604 	addi	fp,sp,24
  80e704:	e13ffe15 	stw	r4,-8(fp)
  80e708:	e17fff15 	stw	r5,-4(fp)
  80e70c:	e0bfff17 	ldw	r2,-4(fp)
  80e710:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e714:	0005303a 	rdctl	r2,status
  80e718:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e71c:	e0fffb17 	ldw	r3,-20(fp)
  80e720:	00bfff84 	movi	r2,-2
  80e724:	1884703a 	and	r2,r3,r2
  80e728:	1001703a 	wrctl	status,r2
  
  return context;
  80e72c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e730:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80e734:	00c00044 	movi	r3,1
  80e738:	e0bffa17 	ldw	r2,-24(fp)
  80e73c:	1884983a 	sll	r2,r3,r2
  80e740:	0084303a 	nor	r2,zero,r2
  80e744:	1007883a 	mov	r3,r2
  80e748:	d0a72d17 	ldw	r2,-25420(gp)
  80e74c:	1884703a 	and	r2,r3,r2
  80e750:	d0a72d15 	stw	r2,-25420(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e754:	d0a72d17 	ldw	r2,-25420(gp)
  80e758:	100170fa 	wrctl	ienable,r2
  80e75c:	e0bffc17 	ldw	r2,-16(fp)
  80e760:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e764:	e0bffd17 	ldw	r2,-12(fp)
  80e768:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e76c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80e770:	0001883a 	nop
}
  80e774:	e037883a 	mov	sp,fp
  80e778:	df000017 	ldw	fp,0(sp)
  80e77c:	dec00104 	addi	sp,sp,4
  80e780:	f800283a 	ret

0080e784 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80e784:	defffc04 	addi	sp,sp,-16
  80e788:	df000315 	stw	fp,12(sp)
  80e78c:	df000304 	addi	fp,sp,12
  80e790:	e13ffe15 	stw	r4,-8(fp)
  80e794:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80e798:	000530fa 	rdctl	r2,ienable
  80e79c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80e7a0:	00c00044 	movi	r3,1
  80e7a4:	e0bfff17 	ldw	r2,-4(fp)
  80e7a8:	1884983a 	sll	r2,r3,r2
  80e7ac:	1007883a 	mov	r3,r2
  80e7b0:	e0bffd17 	ldw	r2,-12(fp)
  80e7b4:	1884703a 	and	r2,r3,r2
  80e7b8:	1004c03a 	cmpne	r2,r2,zero
  80e7bc:	10803fcc 	andi	r2,r2,255
}
  80e7c0:	e037883a 	mov	sp,fp
  80e7c4:	df000017 	ldw	fp,0(sp)
  80e7c8:	dec00104 	addi	sp,sp,4
  80e7cc:	f800283a 	ret

0080e7d0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80e7d0:	defff504 	addi	sp,sp,-44
  80e7d4:	dfc00a15 	stw	ra,40(sp)
  80e7d8:	df000915 	stw	fp,36(sp)
  80e7dc:	df000904 	addi	fp,sp,36
  80e7e0:	e13ffc15 	stw	r4,-16(fp)
  80e7e4:	e17ffd15 	stw	r5,-12(fp)
  80e7e8:	e1bffe15 	stw	r6,-8(fp)
  80e7ec:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80e7f0:	00bffa84 	movi	r2,-22
  80e7f4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80e7f8:	e0bffd17 	ldw	r2,-12(fp)
  80e7fc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80e800:	e0bff817 	ldw	r2,-32(fp)
  80e804:	10800808 	cmpgei	r2,r2,32
  80e808:	1000271e 	bne	r2,zero,80e8a8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e80c:	0005303a 	rdctl	r2,status
  80e810:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e814:	e0fffb17 	ldw	r3,-20(fp)
  80e818:	00bfff84 	movi	r2,-2
  80e81c:	1884703a 	and	r2,r3,r2
  80e820:	1001703a 	wrctl	status,r2
  
  return context;
  80e824:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80e828:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80e82c:	00802074 	movhi	r2,129
  80e830:	108b6704 	addi	r2,r2,11676
  80e834:	e0fff817 	ldw	r3,-32(fp)
  80e838:	180690fa 	slli	r3,r3,3
  80e83c:	10c5883a 	add	r2,r2,r3
  80e840:	e0fffe17 	ldw	r3,-8(fp)
  80e844:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80e848:	00802074 	movhi	r2,129
  80e84c:	108b6704 	addi	r2,r2,11676
  80e850:	e0fff817 	ldw	r3,-32(fp)
  80e854:	180690fa 	slli	r3,r3,3
  80e858:	10c5883a 	add	r2,r2,r3
  80e85c:	10800104 	addi	r2,r2,4
  80e860:	e0ffff17 	ldw	r3,-4(fp)
  80e864:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80e868:	e0bffe17 	ldw	r2,-8(fp)
  80e86c:	10000526 	beq	r2,zero,80e884 <alt_iic_isr_register+0xb4>
  80e870:	e0bff817 	ldw	r2,-32(fp)
  80e874:	100b883a 	mov	r5,r2
  80e878:	e13ffc17 	ldw	r4,-16(fp)
  80e87c:	080e6700 	call	80e670 <alt_ic_irq_enable>
  80e880:	00000406 	br	80e894 <alt_iic_isr_register+0xc4>
  80e884:	e0bff817 	ldw	r2,-32(fp)
  80e888:	100b883a 	mov	r5,r2
  80e88c:	e13ffc17 	ldw	r4,-16(fp)
  80e890:	080e6f80 	call	80e6f8 <alt_ic_irq_disable>
  80e894:	e0bff715 	stw	r2,-36(fp)
  80e898:	e0bffa17 	ldw	r2,-24(fp)
  80e89c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e8a0:	e0bff917 	ldw	r2,-28(fp)
  80e8a4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80e8a8:	e0bff717 	ldw	r2,-36(fp)
}
  80e8ac:	e037883a 	mov	sp,fp
  80e8b0:	dfc00117 	ldw	ra,4(sp)
  80e8b4:	df000017 	ldw	fp,0(sp)
  80e8b8:	dec00204 	addi	sp,sp,8
  80e8bc:	f800283a 	ret

0080e8c0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80e8c0:	defff904 	addi	sp,sp,-28
  80e8c4:	dfc00615 	stw	ra,24(sp)
  80e8c8:	df000515 	stw	fp,20(sp)
  80e8cc:	df000504 	addi	fp,sp,20
  80e8d0:	e13ffc15 	stw	r4,-16(fp)
  80e8d4:	e17ffd15 	stw	r5,-12(fp)
  80e8d8:	e1bffe15 	stw	r6,-8(fp)
  80e8dc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80e8e0:	e1bfff17 	ldw	r6,-4(fp)
  80e8e4:	e17ffe17 	ldw	r5,-8(fp)
  80e8e8:	e13ffd17 	ldw	r4,-12(fp)
  80e8ec:	080b73c0 	call	80b73c <open>
  80e8f0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80e8f4:	e0bffb17 	ldw	r2,-20(fp)
  80e8f8:	10001c16 	blt	r2,zero,80e96c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  80e8fc:	00802074 	movhi	r2,129
  80e900:	10bf3804 	addi	r2,r2,-800
  80e904:	e0fffb17 	ldw	r3,-20(fp)
  80e908:	18c00324 	muli	r3,r3,12
  80e90c:	10c5883a 	add	r2,r2,r3
  80e910:	10c00017 	ldw	r3,0(r2)
  80e914:	e0bffc17 	ldw	r2,-16(fp)
  80e918:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80e91c:	00802074 	movhi	r2,129
  80e920:	10bf3804 	addi	r2,r2,-800
  80e924:	e0fffb17 	ldw	r3,-20(fp)
  80e928:	18c00324 	muli	r3,r3,12
  80e92c:	10c5883a 	add	r2,r2,r3
  80e930:	10800104 	addi	r2,r2,4
  80e934:	10c00017 	ldw	r3,0(r2)
  80e938:	e0bffc17 	ldw	r2,-16(fp)
  80e93c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80e940:	00802074 	movhi	r2,129
  80e944:	10bf3804 	addi	r2,r2,-800
  80e948:	e0fffb17 	ldw	r3,-20(fp)
  80e94c:	18c00324 	muli	r3,r3,12
  80e950:	10c5883a 	add	r2,r2,r3
  80e954:	10800204 	addi	r2,r2,8
  80e958:	10c00017 	ldw	r3,0(r2)
  80e95c:	e0bffc17 	ldw	r2,-16(fp)
  80e960:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80e964:	e13ffb17 	ldw	r4,-20(fp)
  80e968:	080b9c80 	call	80b9c8 <alt_release_fd>
  }
} 
  80e96c:	0001883a 	nop
  80e970:	e037883a 	mov	sp,fp
  80e974:	dfc00117 	ldw	ra,4(sp)
  80e978:	df000017 	ldw	fp,0(sp)
  80e97c:	dec00204 	addi	sp,sp,8
  80e980:	f800283a 	ret

0080e984 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80e984:	defffb04 	addi	sp,sp,-20
  80e988:	dfc00415 	stw	ra,16(sp)
  80e98c:	df000315 	stw	fp,12(sp)
  80e990:	df000304 	addi	fp,sp,12
  80e994:	e13ffd15 	stw	r4,-12(fp)
  80e998:	e17ffe15 	stw	r5,-8(fp)
  80e99c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80e9a0:	01c07fc4 	movi	r7,511
  80e9a4:	01800044 	movi	r6,1
  80e9a8:	e17ffd17 	ldw	r5,-12(fp)
  80e9ac:	01002074 	movhi	r4,129
  80e9b0:	213f3b04 	addi	r4,r4,-788
  80e9b4:	080e8c00 	call	80e8c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80e9b8:	01c07fc4 	movi	r7,511
  80e9bc:	000d883a 	mov	r6,zero
  80e9c0:	e17ffe17 	ldw	r5,-8(fp)
  80e9c4:	01002074 	movhi	r4,129
  80e9c8:	213f3804 	addi	r4,r4,-800
  80e9cc:	080e8c00 	call	80e8c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80e9d0:	01c07fc4 	movi	r7,511
  80e9d4:	01800044 	movi	r6,1
  80e9d8:	e17fff17 	ldw	r5,-4(fp)
  80e9dc:	01002074 	movhi	r4,129
  80e9e0:	213f3e04 	addi	r4,r4,-776
  80e9e4:	080e8c00 	call	80e8c0 <alt_open_fd>
}  
  80e9e8:	0001883a 	nop
  80e9ec:	e037883a 	mov	sp,fp
  80e9f0:	dfc00117 	ldw	ra,4(sp)
  80e9f4:	df000017 	ldw	fp,0(sp)
  80e9f8:	dec00204 	addi	sp,sp,8
  80e9fc:	f800283a 	ret

0080ea00 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80ea00:	defffd04 	addi	sp,sp,-12
  80ea04:	dfc00215 	stw	ra,8(sp)
  80ea08:	df000115 	stw	fp,4(sp)
  80ea0c:	df000104 	addi	fp,sp,4
  80ea10:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80ea14:	e13fff17 	ldw	r4,-4(fp)
  80ea18:	080ea540 	call	80ea54 <alt_busy_sleep>
}
  80ea1c:	e037883a 	mov	sp,fp
  80ea20:	dfc00117 	ldw	ra,4(sp)
  80ea24:	df000017 	ldw	fp,0(sp)
  80ea28:	dec00204 	addi	sp,sp,8
  80ea2c:	f800283a 	ret

0080ea30 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80ea30:	deffff04 	addi	sp,sp,-4
  80ea34:	df000015 	stw	fp,0(sp)
  80ea38:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80ea3c:	000170fa 	wrctl	ienable,zero
}
  80ea40:	0001883a 	nop
  80ea44:	e037883a 	mov	sp,fp
  80ea48:	df000017 	ldw	fp,0(sp)
  80ea4c:	dec00104 	addi	sp,sp,4
  80ea50:	f800283a 	ret

0080ea54 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80ea54:	defffa04 	addi	sp,sp,-24
  80ea58:	dfc00515 	stw	ra,20(sp)
  80ea5c:	df000415 	stw	fp,16(sp)
  80ea60:	df000404 	addi	fp,sp,16
  80ea64:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80ea68:	008000c4 	movi	r2,3
  80ea6c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  80ea70:	e0fffd17 	ldw	r3,-12(fp)
  80ea74:	008003f4 	movhi	r2,15
  80ea78:	10909004 	addi	r2,r2,16960
  80ea7c:	1885383a 	mul	r2,r3,r2
  80ea80:	100b883a 	mov	r5,r2
  80ea84:	0100bef4 	movhi	r4,763
  80ea88:	213c2004 	addi	r4,r4,-3968
  80ea8c:	080ad100 	call	80ad10 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  80ea90:	100b883a 	mov	r5,r2
  80ea94:	01200034 	movhi	r4,32768
  80ea98:	213fffc4 	addi	r4,r4,-1
  80ea9c:	080ad100 	call	80ad10 <__udivsi3>
  80eaa0:	100b883a 	mov	r5,r2
  80eaa4:	e13fff17 	ldw	r4,-4(fp)
  80eaa8:	080ad100 	call	80ad10 <__udivsi3>
  80eaac:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80eab0:	e0bffe17 	ldw	r2,-8(fp)
  80eab4:	10002a26 	beq	r2,zero,80eb60 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  80eab8:	e03ffc15 	stw	zero,-16(fp)
  80eabc:	00001706 	br	80eb1c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80eac0:	00a00034 	movhi	r2,32768
  80eac4:	10bfffc4 	addi	r2,r2,-1
  80eac8:	10bfffc4 	addi	r2,r2,-1
  80eacc:	103ffe1e 	bne	r2,zero,80eac8 <__alt_mem_onchip_mem+0xff806ac8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  80ead0:	e0fffd17 	ldw	r3,-12(fp)
  80ead4:	008003f4 	movhi	r2,15
  80ead8:	10909004 	addi	r2,r2,16960
  80eadc:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80eae0:	100b883a 	mov	r5,r2
  80eae4:	0100bef4 	movhi	r4,763
  80eae8:	213c2004 	addi	r4,r4,-3968
  80eaec:	080ad100 	call	80ad10 <__udivsi3>
  80eaf0:	100b883a 	mov	r5,r2
  80eaf4:	01200034 	movhi	r4,32768
  80eaf8:	213fffc4 	addi	r4,r4,-1
  80eafc:	080ad100 	call	80ad10 <__udivsi3>
  80eb00:	1007883a 	mov	r3,r2
  80eb04:	e0bfff17 	ldw	r2,-4(fp)
  80eb08:	10c5c83a 	sub	r2,r2,r3
  80eb0c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80eb10:	e0bffc17 	ldw	r2,-16(fp)
  80eb14:	10800044 	addi	r2,r2,1
  80eb18:	e0bffc15 	stw	r2,-16(fp)
  80eb1c:	e0fffc17 	ldw	r3,-16(fp)
  80eb20:	e0bffe17 	ldw	r2,-8(fp)
  80eb24:	18bfe616 	blt	r3,r2,80eac0 <__alt_mem_onchip_mem+0xff806ac0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80eb28:	e0fffd17 	ldw	r3,-12(fp)
  80eb2c:	008003f4 	movhi	r2,15
  80eb30:	10909004 	addi	r2,r2,16960
  80eb34:	1885383a 	mul	r2,r3,r2
  80eb38:	100b883a 	mov	r5,r2
  80eb3c:	0100bef4 	movhi	r4,763
  80eb40:	213c2004 	addi	r4,r4,-3968
  80eb44:	080ad100 	call	80ad10 <__udivsi3>
  80eb48:	1007883a 	mov	r3,r2
  80eb4c:	e0bfff17 	ldw	r2,-4(fp)
  80eb50:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80eb54:	10bfffc4 	addi	r2,r2,-1
  80eb58:	103ffe1e 	bne	r2,zero,80eb54 <__alt_mem_onchip_mem+0xff806b54>
  80eb5c:	00000d06 	br	80eb94 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80eb60:	e0fffd17 	ldw	r3,-12(fp)
  80eb64:	008003f4 	movhi	r2,15
  80eb68:	10909004 	addi	r2,r2,16960
  80eb6c:	1885383a 	mul	r2,r3,r2
  80eb70:	100b883a 	mov	r5,r2
  80eb74:	0100bef4 	movhi	r4,763
  80eb78:	213c2004 	addi	r4,r4,-3968
  80eb7c:	080ad100 	call	80ad10 <__udivsi3>
  80eb80:	1007883a 	mov	r3,r2
  80eb84:	e0bfff17 	ldw	r2,-4(fp)
  80eb88:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80eb8c:	10bfffc4 	addi	r2,r2,-1
  80eb90:	00bffe16 	blt	zero,r2,80eb8c <__alt_mem_onchip_mem+0xff806b8c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80eb94:	0005883a 	mov	r2,zero
}
  80eb98:	e037883a 	mov	sp,fp
  80eb9c:	dfc00117 	ldw	ra,4(sp)
  80eba0:	df000017 	ldw	fp,0(sp)
  80eba4:	dec00204 	addi	sp,sp,8
  80eba8:	f800283a 	ret

0080ebac <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80ebac:	defffb04 	addi	sp,sp,-20
  80ebb0:	df000415 	stw	fp,16(sp)
  80ebb4:	df000404 	addi	fp,sp,16
  80ebb8:	e13ffe15 	stw	r4,-8(fp)
  80ebbc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80ebc0:	e0bfff17 	ldw	r2,-4(fp)
  80ebc4:	10840070 	cmpltui	r2,r2,4097
  80ebc8:	1000021e 	bne	r2,zero,80ebd4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80ebcc:	00840004 	movi	r2,4096
  80ebd0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80ebd4:	e0fffe17 	ldw	r3,-8(fp)
  80ebd8:	e0bfff17 	ldw	r2,-4(fp)
  80ebdc:	1885883a 	add	r2,r3,r2
  80ebe0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80ebe4:	e0bffe17 	ldw	r2,-8(fp)
  80ebe8:	e0bffc15 	stw	r2,-16(fp)
  80ebec:	00000506 	br	80ec04 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80ebf0:	e0bffc17 	ldw	r2,-16(fp)
  80ebf4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80ebf8:	e0bffc17 	ldw	r2,-16(fp)
  80ebfc:	10800804 	addi	r2,r2,32
  80ec00:	e0bffc15 	stw	r2,-16(fp)
  80ec04:	e0fffc17 	ldw	r3,-16(fp)
  80ec08:	e0bffd17 	ldw	r2,-12(fp)
  80ec0c:	18bff836 	bltu	r3,r2,80ebf0 <__alt_mem_onchip_mem+0xff806bf0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80ec10:	e0bffe17 	ldw	r2,-8(fp)
  80ec14:	108007cc 	andi	r2,r2,31
  80ec18:	10000226 	beq	r2,zero,80ec24 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80ec1c:	e0bffc17 	ldw	r2,-16(fp)
  80ec20:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80ec24:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80ec28:	0001883a 	nop
  80ec2c:	e037883a 	mov	sp,fp
  80ec30:	df000017 	ldw	fp,0(sp)
  80ec34:	dec00104 	addi	sp,sp,4
  80ec38:	f800283a 	ret

0080ec3c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80ec3c:	defffe04 	addi	sp,sp,-8
  80ec40:	df000115 	stw	fp,4(sp)
  80ec44:	df000104 	addi	fp,sp,4
  80ec48:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  80ec4c:	e0bfff17 	ldw	r2,-4(fp)
  80ec50:	10bffe84 	addi	r2,r2,-6
  80ec54:	10c00428 	cmpgeui	r3,r2,16
  80ec58:	18001a1e 	bne	r3,zero,80ecc4 <alt_exception_cause_generated_bad_addr+0x88>
  80ec5c:	100690ba 	slli	r3,r2,2
  80ec60:	00802074 	movhi	r2,129
  80ec64:	10bb1d04 	addi	r2,r2,-5004
  80ec68:	1885883a 	add	r2,r3,r2
  80ec6c:	10800017 	ldw	r2,0(r2)
  80ec70:	1000683a 	jmp	r2
  80ec74:	0080ecb4 	movhi	r2,946
  80ec78:	0080ecb4 	movhi	r2,946
  80ec7c:	0080ecc4 	movi	r2,947
  80ec80:	0080ecc4 	movi	r2,947
  80ec84:	0080ecc4 	movi	r2,947
  80ec88:	0080ecb4 	movhi	r2,946
  80ec8c:	0080ecbc 	xorhi	r2,zero,946
  80ec90:	0080ecc4 	movi	r2,947
  80ec94:	0080ecb4 	movhi	r2,946
  80ec98:	0080ecb4 	movhi	r2,946
  80ec9c:	0080ecc4 	movi	r2,947
  80eca0:	0080ecb4 	movhi	r2,946
  80eca4:	0080ecbc 	xorhi	r2,zero,946
  80eca8:	0080ecc4 	movi	r2,947
  80ecac:	0080ecc4 	movi	r2,947
  80ecb0:	0080ecb4 	movhi	r2,946
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80ecb4:	00800044 	movi	r2,1
  80ecb8:	00000306 	br	80ecc8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80ecbc:	0005883a 	mov	r2,zero
  80ecc0:	00000106 	br	80ecc8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  80ecc4:	0005883a 	mov	r2,zero
  }
}
  80ecc8:	e037883a 	mov	sp,fp
  80eccc:	df000017 	ldw	fp,0(sp)
  80ecd0:	dec00104 	addi	sp,sp,4
  80ecd4:	f800283a 	ret

0080ecd8 <atexit>:
  80ecd8:	200b883a 	mov	r5,r4
  80ecdc:	000f883a 	mov	r7,zero
  80ece0:	000d883a 	mov	r6,zero
  80ece4:	0009883a 	mov	r4,zero
  80ece8:	080eda01 	jmpi	80eda0 <__register_exitproc>

0080ecec <exit>:
  80ecec:	defffe04 	addi	sp,sp,-8
  80ecf0:	000b883a 	mov	r5,zero
  80ecf4:	dc000015 	stw	r16,0(sp)
  80ecf8:	dfc00115 	stw	ra,4(sp)
  80ecfc:	2021883a 	mov	r16,r4
  80ed00:	080eeb80 	call	80eeb8 <__call_exitprocs>
  80ed04:	00802074 	movhi	r2,129
  80ed08:	10842904 	addi	r2,r2,4260
  80ed0c:	11000017 	ldw	r4,0(r2)
  80ed10:	20800f17 	ldw	r2,60(r4)
  80ed14:	10000126 	beq	r2,zero,80ed1c <exit+0x30>
  80ed18:	103ee83a 	callr	r2
  80ed1c:	8009883a 	mov	r4,r16
  80ed20:	080f0380 	call	80f038 <_exit>

0080ed24 <memcmp>:
  80ed24:	01c000c4 	movi	r7,3
  80ed28:	3980192e 	bgeu	r7,r6,80ed90 <memcmp+0x6c>
  80ed2c:	2144b03a 	or	r2,r4,r5
  80ed30:	11c4703a 	and	r2,r2,r7
  80ed34:	10000f26 	beq	r2,zero,80ed74 <memcmp+0x50>
  80ed38:	20800003 	ldbu	r2,0(r4)
  80ed3c:	28c00003 	ldbu	r3,0(r5)
  80ed40:	10c0151e 	bne	r2,r3,80ed98 <memcmp+0x74>
  80ed44:	31bfff84 	addi	r6,r6,-2
  80ed48:	01ffffc4 	movi	r7,-1
  80ed4c:	00000406 	br	80ed60 <memcmp+0x3c>
  80ed50:	20800003 	ldbu	r2,0(r4)
  80ed54:	28c00003 	ldbu	r3,0(r5)
  80ed58:	31bfffc4 	addi	r6,r6,-1
  80ed5c:	10c00e1e 	bne	r2,r3,80ed98 <memcmp+0x74>
  80ed60:	21000044 	addi	r4,r4,1
  80ed64:	29400044 	addi	r5,r5,1
  80ed68:	31fff91e 	bne	r6,r7,80ed50 <__alt_mem_onchip_mem+0xff806d50>
  80ed6c:	0005883a 	mov	r2,zero
  80ed70:	f800283a 	ret
  80ed74:	20c00017 	ldw	r3,0(r4)
  80ed78:	28800017 	ldw	r2,0(r5)
  80ed7c:	18bfee1e 	bne	r3,r2,80ed38 <__alt_mem_onchip_mem+0xff806d38>
  80ed80:	31bfff04 	addi	r6,r6,-4
  80ed84:	21000104 	addi	r4,r4,4
  80ed88:	29400104 	addi	r5,r5,4
  80ed8c:	39bff936 	bltu	r7,r6,80ed74 <__alt_mem_onchip_mem+0xff806d74>
  80ed90:	303fe91e 	bne	r6,zero,80ed38 <__alt_mem_onchip_mem+0xff806d38>
  80ed94:	003ff506 	br	80ed6c <__alt_mem_onchip_mem+0xff806d6c>
  80ed98:	10c5c83a 	sub	r2,r2,r3
  80ed9c:	f800283a 	ret

0080eda0 <__register_exitproc>:
  80eda0:	defffa04 	addi	sp,sp,-24
  80eda4:	dc000315 	stw	r16,12(sp)
  80eda8:	04002074 	movhi	r16,129
  80edac:	84042904 	addi	r16,r16,4260
  80edb0:	80c00017 	ldw	r3,0(r16)
  80edb4:	dc400415 	stw	r17,16(sp)
  80edb8:	dfc00515 	stw	ra,20(sp)
  80edbc:	18805217 	ldw	r2,328(r3)
  80edc0:	2023883a 	mov	r17,r4
  80edc4:	10003726 	beq	r2,zero,80eea4 <__register_exitproc+0x104>
  80edc8:	10c00117 	ldw	r3,4(r2)
  80edcc:	010007c4 	movi	r4,31
  80edd0:	20c00e16 	blt	r4,r3,80ee0c <__register_exitproc+0x6c>
  80edd4:	1a000044 	addi	r8,r3,1
  80edd8:	8800221e 	bne	r17,zero,80ee64 <__register_exitproc+0xc4>
  80eddc:	18c00084 	addi	r3,r3,2
  80ede0:	18c7883a 	add	r3,r3,r3
  80ede4:	18c7883a 	add	r3,r3,r3
  80ede8:	12000115 	stw	r8,4(r2)
  80edec:	10c7883a 	add	r3,r2,r3
  80edf0:	19400015 	stw	r5,0(r3)
  80edf4:	0005883a 	mov	r2,zero
  80edf8:	dfc00517 	ldw	ra,20(sp)
  80edfc:	dc400417 	ldw	r17,16(sp)
  80ee00:	dc000317 	ldw	r16,12(sp)
  80ee04:	dec00604 	addi	sp,sp,24
  80ee08:	f800283a 	ret
  80ee0c:	00800034 	movhi	r2,0
  80ee10:	10800004 	addi	r2,r2,0
  80ee14:	10002626 	beq	r2,zero,80eeb0 <__register_exitproc+0x110>
  80ee18:	01006404 	movi	r4,400
  80ee1c:	d9400015 	stw	r5,0(sp)
  80ee20:	d9800115 	stw	r6,4(sp)
  80ee24:	d9c00215 	stw	r7,8(sp)
  80ee28:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80ee2c:	d9400017 	ldw	r5,0(sp)
  80ee30:	d9800117 	ldw	r6,4(sp)
  80ee34:	d9c00217 	ldw	r7,8(sp)
  80ee38:	10001d26 	beq	r2,zero,80eeb0 <__register_exitproc+0x110>
  80ee3c:	81000017 	ldw	r4,0(r16)
  80ee40:	10000115 	stw	zero,4(r2)
  80ee44:	02000044 	movi	r8,1
  80ee48:	22405217 	ldw	r9,328(r4)
  80ee4c:	0007883a 	mov	r3,zero
  80ee50:	12400015 	stw	r9,0(r2)
  80ee54:	20805215 	stw	r2,328(r4)
  80ee58:	10006215 	stw	zero,392(r2)
  80ee5c:	10006315 	stw	zero,396(r2)
  80ee60:	883fde26 	beq	r17,zero,80eddc <__alt_mem_onchip_mem+0xff806ddc>
  80ee64:	18c9883a 	add	r4,r3,r3
  80ee68:	2109883a 	add	r4,r4,r4
  80ee6c:	1109883a 	add	r4,r2,r4
  80ee70:	21802215 	stw	r6,136(r4)
  80ee74:	01800044 	movi	r6,1
  80ee78:	12406217 	ldw	r9,392(r2)
  80ee7c:	30cc983a 	sll	r6,r6,r3
  80ee80:	4992b03a 	or	r9,r9,r6
  80ee84:	12406215 	stw	r9,392(r2)
  80ee88:	21c04215 	stw	r7,264(r4)
  80ee8c:	01000084 	movi	r4,2
  80ee90:	893fd21e 	bne	r17,r4,80eddc <__alt_mem_onchip_mem+0xff806ddc>
  80ee94:	11006317 	ldw	r4,396(r2)
  80ee98:	218cb03a 	or	r6,r4,r6
  80ee9c:	11806315 	stw	r6,396(r2)
  80eea0:	003fce06 	br	80eddc <__alt_mem_onchip_mem+0xff806ddc>
  80eea4:	18805304 	addi	r2,r3,332
  80eea8:	18805215 	stw	r2,328(r3)
  80eeac:	003fc606 	br	80edc8 <__alt_mem_onchip_mem+0xff806dc8>
  80eeb0:	00bfffc4 	movi	r2,-1
  80eeb4:	003fd006 	br	80edf8 <__alt_mem_onchip_mem+0xff806df8>

0080eeb8 <__call_exitprocs>:
  80eeb8:	defff504 	addi	sp,sp,-44
  80eebc:	df000915 	stw	fp,36(sp)
  80eec0:	dd400615 	stw	r21,24(sp)
  80eec4:	dc800315 	stw	r18,12(sp)
  80eec8:	dfc00a15 	stw	ra,40(sp)
  80eecc:	ddc00815 	stw	r23,32(sp)
  80eed0:	dd800715 	stw	r22,28(sp)
  80eed4:	dd000515 	stw	r20,20(sp)
  80eed8:	dcc00415 	stw	r19,16(sp)
  80eedc:	dc400215 	stw	r17,8(sp)
  80eee0:	dc000115 	stw	r16,4(sp)
  80eee4:	d9000015 	stw	r4,0(sp)
  80eee8:	2839883a 	mov	fp,r5
  80eeec:	04800044 	movi	r18,1
  80eef0:	057fffc4 	movi	r21,-1
  80eef4:	00802074 	movhi	r2,129
  80eef8:	10842904 	addi	r2,r2,4260
  80eefc:	12000017 	ldw	r8,0(r2)
  80ef00:	45005217 	ldw	r20,328(r8)
  80ef04:	44c05204 	addi	r19,r8,328
  80ef08:	a0001c26 	beq	r20,zero,80ef7c <__call_exitprocs+0xc4>
  80ef0c:	a0800117 	ldw	r2,4(r20)
  80ef10:	15ffffc4 	addi	r23,r2,-1
  80ef14:	b8000d16 	blt	r23,zero,80ef4c <__call_exitprocs+0x94>
  80ef18:	14000044 	addi	r16,r2,1
  80ef1c:	8421883a 	add	r16,r16,r16
  80ef20:	8421883a 	add	r16,r16,r16
  80ef24:	84402004 	addi	r17,r16,128
  80ef28:	a463883a 	add	r17,r20,r17
  80ef2c:	a421883a 	add	r16,r20,r16
  80ef30:	e0001e26 	beq	fp,zero,80efac <__call_exitprocs+0xf4>
  80ef34:	80804017 	ldw	r2,256(r16)
  80ef38:	e0801c26 	beq	fp,r2,80efac <__call_exitprocs+0xf4>
  80ef3c:	bdffffc4 	addi	r23,r23,-1
  80ef40:	843fff04 	addi	r16,r16,-4
  80ef44:	8c7fff04 	addi	r17,r17,-4
  80ef48:	bd7ff91e 	bne	r23,r21,80ef30 <__alt_mem_onchip_mem+0xff806f30>
  80ef4c:	00800034 	movhi	r2,0
  80ef50:	10800004 	addi	r2,r2,0
  80ef54:	10000926 	beq	r2,zero,80ef7c <__call_exitprocs+0xc4>
  80ef58:	a0800117 	ldw	r2,4(r20)
  80ef5c:	1000301e 	bne	r2,zero,80f020 <__call_exitprocs+0x168>
  80ef60:	a0800017 	ldw	r2,0(r20)
  80ef64:	10003226 	beq	r2,zero,80f030 <__call_exitprocs+0x178>
  80ef68:	a009883a 	mov	r4,r20
  80ef6c:	98800015 	stw	r2,0(r19)
  80ef70:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80ef74:	9d000017 	ldw	r20,0(r19)
  80ef78:	a03fe41e 	bne	r20,zero,80ef0c <__alt_mem_onchip_mem+0xff806f0c>
  80ef7c:	dfc00a17 	ldw	ra,40(sp)
  80ef80:	df000917 	ldw	fp,36(sp)
  80ef84:	ddc00817 	ldw	r23,32(sp)
  80ef88:	dd800717 	ldw	r22,28(sp)
  80ef8c:	dd400617 	ldw	r21,24(sp)
  80ef90:	dd000517 	ldw	r20,20(sp)
  80ef94:	dcc00417 	ldw	r19,16(sp)
  80ef98:	dc800317 	ldw	r18,12(sp)
  80ef9c:	dc400217 	ldw	r17,8(sp)
  80efa0:	dc000117 	ldw	r16,4(sp)
  80efa4:	dec00b04 	addi	sp,sp,44
  80efa8:	f800283a 	ret
  80efac:	a0800117 	ldw	r2,4(r20)
  80efb0:	80c00017 	ldw	r3,0(r16)
  80efb4:	10bfffc4 	addi	r2,r2,-1
  80efb8:	15c01426 	beq	r2,r23,80f00c <__call_exitprocs+0x154>
  80efbc:	80000015 	stw	zero,0(r16)
  80efc0:	183fde26 	beq	r3,zero,80ef3c <__alt_mem_onchip_mem+0xff806f3c>
  80efc4:	95c8983a 	sll	r4,r18,r23
  80efc8:	a0806217 	ldw	r2,392(r20)
  80efcc:	a5800117 	ldw	r22,4(r20)
  80efd0:	2084703a 	and	r2,r4,r2
  80efd4:	10000b26 	beq	r2,zero,80f004 <__call_exitprocs+0x14c>
  80efd8:	a0806317 	ldw	r2,396(r20)
  80efdc:	2088703a 	and	r4,r4,r2
  80efe0:	20000c1e 	bne	r4,zero,80f014 <__call_exitprocs+0x15c>
  80efe4:	89400017 	ldw	r5,0(r17)
  80efe8:	d9000017 	ldw	r4,0(sp)
  80efec:	183ee83a 	callr	r3
  80eff0:	a0800117 	ldw	r2,4(r20)
  80eff4:	15bfbf1e 	bne	r2,r22,80eef4 <__alt_mem_onchip_mem+0xff806ef4>
  80eff8:	98800017 	ldw	r2,0(r19)
  80effc:	153fcf26 	beq	r2,r20,80ef3c <__alt_mem_onchip_mem+0xff806f3c>
  80f000:	003fbc06 	br	80eef4 <__alt_mem_onchip_mem+0xff806ef4>
  80f004:	183ee83a 	callr	r3
  80f008:	003ff906 	br	80eff0 <__alt_mem_onchip_mem+0xff806ff0>
  80f00c:	a5c00115 	stw	r23,4(r20)
  80f010:	003feb06 	br	80efc0 <__alt_mem_onchip_mem+0xff806fc0>
  80f014:	89000017 	ldw	r4,0(r17)
  80f018:	183ee83a 	callr	r3
  80f01c:	003ff406 	br	80eff0 <__alt_mem_onchip_mem+0xff806ff0>
  80f020:	a0800017 	ldw	r2,0(r20)
  80f024:	a027883a 	mov	r19,r20
  80f028:	1029883a 	mov	r20,r2
  80f02c:	003fb606 	br	80ef08 <__alt_mem_onchip_mem+0xff806f08>
  80f030:	0005883a 	mov	r2,zero
  80f034:	003ffb06 	br	80f024 <__alt_mem_onchip_mem+0xff807024>

0080f038 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80f038:	defffd04 	addi	sp,sp,-12
  80f03c:	df000215 	stw	fp,8(sp)
  80f040:	df000204 	addi	fp,sp,8
  80f044:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80f048:	0001883a 	nop
  80f04c:	e0bfff17 	ldw	r2,-4(fp)
  80f050:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80f054:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80f058:	10000226 	beq	r2,zero,80f064 <_exit+0x2c>
    ALT_SIM_FAIL();
  80f05c:	002af070 	cmpltui	zero,zero,43969
  80f060:	00000106 	br	80f068 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80f064:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80f068:	003fff06 	br	80f068 <__alt_mem_onchip_mem+0xff807068>
