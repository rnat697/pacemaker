
HeLlOwOrLD.elf:     file format elf32-littlenios2
HeLlOwOrLD.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000f620 memsz 0x0000f620 flags r-x
    LOAD off    0x00010640 vaddr 0x0080f640 paddr 0x00811298 align 2**12
         filesz 0x00001c58 memsz 0x00001c58 flags rw-
    LOAD off    0x00012ef0 vaddr 0x00812ef0 paddr 0x00812ef0 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000efcc  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000430  0080f210  0080f210  00010210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c58  0080f640  00811298  00010640  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00812ef0  00812ef0  00012ef0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00813050  00813050  00012298  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  00012298  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00012298  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000da0  00000000  00000000  000122c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002052c  00000000  00000000  00013060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008679  00000000  00000000  0003358c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ab1a  00000000  00000000  0003bc05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001f78  00000000  00000000  00046720  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003f4d  00000000  00000000  00048698  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00009725  00000000  00000000  0004c5e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00055d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000f78  00000000  00000000  00055d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00059ce9  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00059cec  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00059cef  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00059cf0  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00059cf1  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00059cfa  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00059d03  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  00059d0c  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000043  00000000  00000000  00059d18  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b17b  00000000  00000000  00059d5b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
0080f210 l    d  .rodata	00000000 .rodata
0080f640 l    d  .rwdata	00000000 .rwdata
00812ef0 l    d  .bss	00000000 .bss
00813050 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HeLlOwOrLD_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 pacecharts.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
0080f640 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00808b2c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008092a0 l     F .text	00000008 __fp_unlock
008092b4 l     F .text	0000019c __sinit.part.1
00809450 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080b09c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080b1a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080b1d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080b440 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080b520 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080b60c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080b7e0 l     F .text	0000003c alt_get_errno
0080b81c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0080ba34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00811284 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080be24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080bf58 l     F .text	00000034 alt_dev_reg
00810014 l     O .rwdata	00001060 jtag_uart
00811074 l     O .rwdata	00000120 lcd
00811194 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080c280 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080c48c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00811290 l     O .rwdata	00000004 colstart
0080cac4 l     F .text	000000b8 lcd_write_command
0080cb7c l     F .text	000000d8 lcd_write_data
0080cc54 l     F .text	000000d0 lcd_clear_screen
0080cd24 l     F .text	000001ec lcd_repaint_screen
0080cf10 l     F .text	000000cc lcd_scroll_up
0080cfdc l     F .text	000002ac lcd_handle_escape
0080d760 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080d9a0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080dc50 l     F .text	0000009c altera_avalon_uart_irq
0080dcec l     F .text	000000e4 altera_avalon_uart_rxirq
0080ddd0 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080df6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080e184 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080e3b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080ea64 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080f4bf l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00812f24 g     O .bss	00000004 alt_instruction_exception_handler
0080a164 g     F .text	00000054 _isatty_r
0080b71c g     F .text	0000007c alt_main
00808a58 g     F .text	000000c0 _puts_r
00812f50 g     O .bss	00000100 alt_irq
0080a1b8 g     F .text	00000060 _lseek_r
00811298 g       *ABS*	00000000 __flash_rwdata_start
00809640 g     F .text	000000ac __sflags
00813050 g       *ABS*	00000000 __alt_heap_start
00808e48 g     F .text	0000005c __sseek
008095f0 g     F .text	00000010 __sinit
00809458 g     F .text	00000068 __sfmoreglue
0080b7bc g     F .text	00000024 __malloc_unlock
0080a444 g     F .text	0000015c memmove
008003a4 g     F .text	00000040 getGreenLED
008095d8 g     F .text	00000018 _cleanup
00806554 g     F .text	000000dc .hidden __gtdf2
0080ebd4 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00807eac g     F .text	0000005c _fstat_r
00812efc g     O .bss	00000004 errno
00808dc4 g     F .text	00000008 __seofread
00812f14 g     O .bss	00000004 alt_argv
00819258 g       *ABS*	00000000 _gp
0080eba4 g     F .text	00000030 usleep
008057f4 g     F .text	000001f8 reset
0080fe94 g     O .rwdata	00000180 alt_fd_list
0080e554 g     F .text	00000090 alt_find_dev
0080a2fc g     F .text	00000148 memcpy
008092a8 g     F .text	0000000c _cleanup_r
00807738 g     F .text	000000dc .hidden __floatsidf
0080eb28 g     F .text	0000007c alt_io_redirect
00806630 g     F .text	000000f4 .hidden __ltdf2
00800424 g     F .text	00000038 vsLEDISR
0080f210 g       *ABS*	00000000 __DTOR_END__
00808b18 g     F .text	00000014 puts
0080ede0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080c684 g     F .text	0000021c altera_avalon_jtag_uart_read
0080aeb4 g     F .text	00000064 .hidden __udivsi3
0080b47c g     F .text	000000a4 isatty
0080ed50 g     F .text	00000090 alt_icache_flush
00812f08 g     O .bss	00000004 __malloc_top_pad
00809b20 g     F .text	000004bc __sfvwrite_r
00808d1c g     F .text	00000054 _sbrk_r
0080a5a0 g     F .text	00000060 _read_r
00811278 g     O .rwdata	00000004 alt_max_fd
0080acb8 g     F .text	000000f0 _fclose_r
00809270 g     F .text	00000030 fflush
00812f04 g     O .bss	00000004 __malloc_max_sbrked_mem
0080b2c0 g     F .text	00000180 alt_irq_register
00805ca8 g     F .text	000008ac .hidden __adddf3
0080b648 g     F .text	000000d4 lseek
00811258 g     O .rwdata	00000004 _global_impure_ptr
0080a600 g     F .text	00000564 _realloc_r
00813050 g       *ABS*	00000000 __bss_end
0080e974 g     F .text	000000f0 alt_iic_isr_register
0080bd1c g     F .text	00000108 alt_tick
00807814 g     F .text	000000a8 .hidden __floatunsidf
0080dba4 g     F .text	000000ac altera_avalon_uart_init
00809610 g     F .text	00000018 __fp_lock_all
0080e928 g     F .text	0000004c alt_ic_irq_enabled
0080bc80 g     F .text	0000009c alt_alarm_stop
00812f0c g     O .bss	00000004 alt_irq_active
00807a4c g     F .text	00000444 _fseeko_r
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
0080fe6c g     O .rwdata	00000028 alt_dev_null
0080e36c g     F .text	00000048 alt_dcache_flush_all
00811298 g       *ABS*	00000000 __ram_rwdata_end
00811270 g     O .rwdata	00000008 alt_dev_list
0080be60 g     F .text	000000f8 write
0080f640 g       *ABS*	00000000 __ram_rodata_end
0080b210 g     F .text	000000b0 fstat
00806630 g     F .text	000000f4 .hidden __ledf2
00812ef0 g     O .bss	00000004 buttonVS
0080af18 g     F .text	00000058 .hidden __umodsi3
00813050 g       *ABS*	00000000 end
0080d288 g     F .text	000004d8 altera_avalon_lcd_16207_write
00807e90 g     F .text	0000001c fseeko
0080e1c0 g     F .text	000001ac altera_avalon_uart_write
00807a30 g     F .text	0000001c fseek
0080c1c0 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0080f210 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080da18 g     F .text	0000007c alt_avalon_timer_sc_init
0080daf4 g     F .text	00000060 altera_avalon_uart_write_fd
008078bc g     F .text	00000064 .hidden __clzsi2
0080db54 g     F .text	00000050 altera_avalon_uart_close_fd
0080c8a0 g     F .text	00000224 altera_avalon_jtag_uart_write
00809600 g     F .text	00000004 __sfp_lock_acquire
0080a218 g     F .text	000000e4 memchr
00809810 g     F .text	00000310 _free_r
0080f05c g     F .text	00000180 __call_exitprocs
00811260 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00812f1c g     O .bss	00000004 _alt_tick_rate
00805c38 g     F .text	00000070 .hidden __floatundidf
00812f20 g     O .bss	00000004 _alt_nticks
0080ba70 g     F .text	000000fc read
0080bfc4 g     F .text	00000098 alt_sys_init
008089f8 g     F .text	00000060 _open_r
0080ef44 g     F .text	00000118 __register_exitproc
0080c52c g     F .text	00000068 altera_avalon_jtag_uart_close
0080f640 g       *ABS*	00000000 __ram_rwdata_start
0080f210 g       *ABS*	00000000 __ram_rodata_start
00812f28 g     O .bss	00000028 __malloc_current_mallinfo
0080c05c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080e6ec g     F .text	000000a4 alt_get_fd
0080ebf8 g     F .text	00000158 alt_busy_sleep
00808fa4 g     F .text	00000054 _close_r
0080eec8 g     F .text	0000007c memcmp
0080c11c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00813050 g       *ABS*	00000000 __alt_stack_base
0080c16c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080ab64 g     F .text	00000154 __swsetup_r
008059ec g     F .text	0000024c tick
008094c0 g     F .text	00000118 __sfp
0080fa64 g     O .rwdata	00000408 __malloc_av_
0080960c g     F .text	00000004 __sinit_lock_release
00806724 g     F .text	00000718 .hidden __muldf3
00808d70 g     F .text	00000054 __sread
0080e5e4 g     F .text	00000108 alt_find_file
0080e3f0 g     F .text	000000a4 alt_dev_llist_insert
0080b798 g     F .text	00000024 __malloc_lock
0080bbd0 g     F .text	000000b0 sbrk
00809214 g     F .text	0000005c _fflush_r
00807a14 g     F .text	00000018 fopen
00812ef0 g       *ABS*	00000000 __bss_start
008088d0 g     F .text	00000128 memset
0080075c g     F .text	000002b4 main
00812f18 g     O .bss	00000004 alt_envp
00812f00 g     O .bss	00000004 __malloc_max_total_mem
0080c0bc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080d80c g     F .text	00000134 altera_avalon_lcd_16207_init
00808ea4 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080ada8 g     F .text	00000014 fclose
00800290 g     F .text	00000088 button_interrupt_function
008080c4 g     F .text	0000080c _malloc_r
0081127c g     O .rwdata	00000004 alt_errno
00809fdc g     F .text	000000c4 _fwalk
0080adbc g     F .text	00000084 .hidden __divsi3
008096ec g     F .text	00000124 _malloc_trim_r
0080f210 g       *ABS*	00000000 __CTOR_END__
00800504 g     F .text	00000068 setup_interrupt
00800494 g     F .text	00000038 apLEDISR
00800318 g     F .text	0000008c setGreenLED
0080f210 g       *ABS*	00000000 __flash_rodata_start
0080f210 g       *ABS*	00000000 __DTOR_LIST__
0080bf8c g     F .text	00000038 alt_irq_init
0080bb6c g     F .text	00000064 alt_release_fd
0080f272 g     O .rodata	00000100 .hidden __clz_tab
0080ee7c g     F .text	00000014 atexit
00808f44 g     F .text	00000060 _write_r
0081125c g     O .rwdata	00000004 _impure_ptr
00812f10 g     O .bss	00000004 alt_argc
00808ff8 g     F .text	0000021c __sflush_r
0080e4f4 g     F .text	00000060 _do_dtors
00807a2c g     F .text	00000004 _fseek_r
00808b48 g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00809628 g     F .text	00000018 __fp_unlock_all
0080d940 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00811268 g     O .rwdata	00000008 alt_fs_list
008004cc g     F .text	00000038 vpLEDISR
00800020 g       *ABS*	00000000 __ram_exceptions_start
00812ef4 g     O .bss	00000004 turnOffLED
008003e4 g     F .text	00000040 timerISR
0080e7c4 g     F .text	00000050 alt_ic_isr_register
00811298 g       *ABS*	00000000 _edata
0080da94 g     F .text	00000060 altera_avalon_uart_read_fd
00813050 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080c594 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0080e89c g     F .text	0000008c alt_ic_irq_disable
00808dcc g     F .text	0000007c __swrite
00811264 g     O .rwdata	00000004 __malloc_trim_threshold
0080ee90 g     F .text	00000038 exit
0080a0a0 g     F .text	000000c4 _fwalk_reent
0080ae40 g     F .text	00000074 .hidden __modsi3
00800a10 g     F .text	00004de4 logic
00811294 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00809604 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080f3be g     O .rodata	00000101 _ctype_
0080df18 g     F .text	00000054 altera_avalon_uart_close
00807920 g     F .text	000000f4 _fopen_r
0080f1dc g     F .text	00000034 _exit
0080af70 g     F .text	0000012c alt_alarm_start
00807f08 g     F .text	000001bc __smakebuf_r
0080056c g     F .text	000001f0 mode_1
00808eac g     F .text	00000098 strlen
0080b8e0 g     F .text	00000154 open
00806554 g     F .text	000000dc .hidden __gedf2
0080e790 g     F .text	00000034 alt_icache_flush_all
00811280 g     O .rwdata	00000004 alt_priority_mask
0080e814 g     F .text	00000088 alt_ic_irq_enable
0080dfa8 g     F .text	000001dc altera_avalon_uart_read
00806e3c g     F .text	000008fc .hidden __subdf3
00811288 g     O .rwdata	00000008 alt_alarm_list
0080e494 g     F .text	00000060 _do_ctors
00812ef8 g     O .bss	00000004 buttonAS
0080b0d8 g     F .text	000000d0 close
0080b588 g     F .text	00000084 alt_load
0080045c g     F .text	00000038 asLEDISR
00809608 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	108bd404 	addi	r2,r2,12112
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	108bd404 	addi	r2,r2,12112
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a73317 	ldw	r2,-25396(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a73317 	ldw	r2,-25396(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6a49614 	ori	gp,gp,37464
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	108bbc14 	ori	r2,r2,12016

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18cc1414 	ori	r3,r3,12368

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080b5880 	call	80b588 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080b71c0 	call	80b71c <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <button_interrupt_function>:
	alt_alarm ticker_APLED;
	alt_alarm ticker_VPLED;

}Ticks;

void button_interrupt_function(void* context, alt_u32 id){
  800290:	defffc04 	addi	sp,sp,-16
  800294:	df000315 	stw	fp,12(sp)
  800298:	df000304 	addi	fp,sp,12
  80029c:	e13ffe15 	stw	r4,-8(fp)
  8002a0:	e17fff15 	stw	r5,-4(fp)
	int* temp = (int*) context; // casting context first
  8002a4:	e0bffe17 	ldw	r2,-8(fp)
  8002a8:	e0bffd15 	stw	r2,-12(fp)
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  8002ac:	00804074 	movhi	r2,257
  8002b0:	10842b04 	addi	r2,r2,4268
  8002b4:	10c00037 	ldwio	r3,0(r2)
  8002b8:	e0bffd17 	ldw	r2,-12(fp)
  8002bc:	10c00015 	stw	r3,0(r2)

	// clear edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE,0);
  8002c0:	0007883a 	mov	r3,zero
  8002c4:	00804074 	movhi	r2,257
  8002c8:	10842b04 	addi	r2,r2,4268
  8002cc:	10c00035 	stwio	r3,0(r2)
	if(*temp == 2){
  8002d0:	e0bffd17 	ldw	r2,-12(fp)
  8002d4:	10800017 	ldw	r2,0(r2)
  8002d8:	10800098 	cmpnei	r2,r2,2
  8002dc:	1000031e 	bne	r2,zero,8002ec <button_interrupt_function+0x5c>

		buttonAS = 1;
  8002e0:	00800044 	movi	r2,1
  8002e4:	d0a72815 	stw	r2,-25440(gp)

	}else if (*temp == 1){
		buttonVS = 1;
	}
}
  8002e8:	00000606 	br	800304 <button_interrupt_function+0x74>
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE,0);
	if(*temp == 2){

		buttonAS = 1;

	}else if (*temp == 1){
  8002ec:	e0bffd17 	ldw	r2,-12(fp)
  8002f0:	10800017 	ldw	r2,0(r2)
  8002f4:	10800058 	cmpnei	r2,r2,1
  8002f8:	1000021e 	bne	r2,zero,800304 <button_interrupt_function+0x74>
		buttonVS = 1;
  8002fc:	00800044 	movi	r2,1
  800300:	d0a72615 	stw	r2,-25448(gp)
	}
}
  800304:	0001883a 	nop
  800308:	e037883a 	mov	sp,fp
  80030c:	df000017 	ldw	fp,0(sp)
  800310:	dec00104 	addi	sp,sp,4
  800314:	f800283a 	ret

00800318 <setGreenLED>:

void setGreenLED(uint pos, char val) {
  800318:	defffc04 	addi	sp,sp,-16
  80031c:	df000315 	stw	fp,12(sp)
  800320:	df000304 	addi	fp,sp,12
  800324:	e13ffe15 	stw	r4,-8(fp)
  800328:	2805883a 	mov	r2,r5
  80032c:	e0bfff05 	stb	r2,-4(fp)
	int current = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800330:	00804074 	movhi	r2,257
  800334:	10841c04 	addi	r2,r2,4208
  800338:	10800037 	ldwio	r2,0(r2)
  80033c:	e0bffd15 	stw	r2,-12(fp)
	//printf("Setting LED %d to %d\n", pos, val);
	if(val) {
  800340:	e0bfff07 	ldb	r2,-4(fp)
  800344:	10000926 	beq	r2,zero,80036c <setGreenLED+0x54>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, current | (1 << pos));
  800348:	00c00044 	movi	r3,1
  80034c:	e0bffe17 	ldw	r2,-8(fp)
  800350:	1886983a 	sll	r3,r3,r2
  800354:	e0bffd17 	ldw	r2,-12(fp)
  800358:	1886b03a 	or	r3,r3,r2
  80035c:	00804074 	movhi	r2,257
  800360:	10841c04 	addi	r2,r2,4208
  800364:	10c00035 	stwio	r3,0(r2)
	}
	else {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, current & (~(1 << pos)));
	}
}
  800368:	00000906 	br	800390 <setGreenLED+0x78>
	//printf("Setting LED %d to %d\n", pos, val);
	if(val) {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, current | (1 << pos));
	}
	else {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, current & (~(1 << pos)));
  80036c:	00c00044 	movi	r3,1
  800370:	e0bffe17 	ldw	r2,-8(fp)
  800374:	1884983a 	sll	r2,r3,r2
  800378:	0086303a 	nor	r3,zero,r2
  80037c:	e0bffd17 	ldw	r2,-12(fp)
  800380:	1886703a 	and	r3,r3,r2
  800384:	00804074 	movhi	r2,257
  800388:	10841c04 	addi	r2,r2,4208
  80038c:	10c00035 	stwio	r3,0(r2)
	}
}
  800390:	0001883a 	nop
  800394:	e037883a 	mov	sp,fp
  800398:	df000017 	ldw	fp,0(sp)
  80039c:	dec00104 	addi	sp,sp,4
  8003a0:	f800283a 	ret

008003a4 <getGreenLED>:

char getGreenLED(uint pos) {
  8003a4:	defffd04 	addi	sp,sp,-12
  8003a8:	df000215 	stw	fp,8(sp)
  8003ac:	df000204 	addi	fp,sp,8
  8003b0:	e13fff15 	stw	r4,-4(fp)
	int current = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  8003b4:	00804074 	movhi	r2,257
  8003b8:	10841c04 	addi	r2,r2,4208
  8003bc:	10800037 	ldwio	r2,0(r2)
  8003c0:	e0bffe15 	stw	r2,-8(fp)
	return (current >> pos) & 0x1;
  8003c4:	e0fffe17 	ldw	r3,-8(fp)
  8003c8:	e0bfff17 	ldw	r2,-4(fp)
  8003cc:	1885d83a 	sra	r2,r3,r2
  8003d0:	1080004c 	andi	r2,r2,1
}
  8003d4:	e037883a 	mov	sp,fp
  8003d8:	df000017 	ldw	fp,0(sp)
  8003dc:	dec00104 	addi	sp,sp,4
  8003e0:	f800283a 	ret

008003e4 <timerISR>:

//source from aron, :)
alt_u32 timerISR(void* context){
  8003e4:	defffd04 	addi	sp,sp,-12
  8003e8:	df000215 	stw	fp,8(sp)
  8003ec:	df000204 	addi	fp,sp,8
  8003f0:	e13fff15 	stw	r4,-4(fp)
	int* timeCount = (int*) context;
  8003f4:	e0bfff17 	ldw	r2,-4(fp)
  8003f8:	e0bffe15 	stw	r2,-8(fp)
	(*timeCount)++;
  8003fc:	e0bffe17 	ldw	r2,-8(fp)
  800400:	10800017 	ldw	r2,0(r2)
  800404:	10c00044 	addi	r3,r2,1
  800408:	e0bffe17 	ldw	r2,-8(fp)
  80040c:	10c00015 	stw	r3,0(r2)
	return 1; // next time out is 1ms
  800410:	00800044 	movi	r2,1
}
  800414:	e037883a 	mov	sp,fp
  800418:	df000017 	ldw	fp,0(sp)
  80041c:	dec00104 	addi	sp,sp,4
  800420:	f800283a 	ret

00800424 <vsLEDISR>:

alt_u32 vsLEDISR(void* context){
  800424:	defffd04 	addi	sp,sp,-12
  800428:	dfc00215 	stw	ra,8(sp)
  80042c:	df000115 	stw	fp,4(sp)
  800430:	df000104 	addi	fp,sp,4
  800434:	e13fff15 	stw	r4,-4(fp)
	setGreenLED(4, 0);
  800438:	000b883a 	mov	r5,zero
  80043c:	01000104 	movi	r4,4
  800440:	08003180 	call	800318 <setGreenLED>

	return 0;
  800444:	0005883a 	mov	r2,zero
}
  800448:	e037883a 	mov	sp,fp
  80044c:	dfc00117 	ldw	ra,4(sp)
  800450:	df000017 	ldw	fp,0(sp)
  800454:	dec00204 	addi	sp,sp,8
  800458:	f800283a 	ret

0080045c <asLEDISR>:

alt_u32 asLEDISR(void* context){
  80045c:	defffd04 	addi	sp,sp,-12
  800460:	dfc00215 	stw	ra,8(sp)
  800464:	df000115 	stw	fp,4(sp)
  800468:	df000104 	addi	fp,sp,4
  80046c:	e13fff15 	stw	r4,-4(fp)
	setGreenLED(5, 0);
  800470:	000b883a 	mov	r5,zero
  800474:	01000144 	movi	r4,5
  800478:	08003180 	call	800318 <setGreenLED>

	return 0;
  80047c:	0005883a 	mov	r2,zero
}
  800480:	e037883a 	mov	sp,fp
  800484:	dfc00117 	ldw	ra,4(sp)
  800488:	df000017 	ldw	fp,0(sp)
  80048c:	dec00204 	addi	sp,sp,8
  800490:	f800283a 	ret

00800494 <apLEDISR>:

alt_u32 apLEDISR(void* context){
  800494:	defffd04 	addi	sp,sp,-12
  800498:	dfc00215 	stw	ra,8(sp)
  80049c:	df000115 	stw	fp,4(sp)
  8004a0:	df000104 	addi	fp,sp,4
  8004a4:	e13fff15 	stw	r4,-4(fp)
	setGreenLED(1, 0);
  8004a8:	000b883a 	mov	r5,zero
  8004ac:	01000044 	movi	r4,1
  8004b0:	08003180 	call	800318 <setGreenLED>

	return 0;
  8004b4:	0005883a 	mov	r2,zero
}
  8004b8:	e037883a 	mov	sp,fp
  8004bc:	dfc00117 	ldw	ra,4(sp)
  8004c0:	df000017 	ldw	fp,0(sp)
  8004c4:	dec00204 	addi	sp,sp,8
  8004c8:	f800283a 	ret

008004cc <vpLEDISR>:

alt_u32 vpLEDISR(void* context){
  8004cc:	defffd04 	addi	sp,sp,-12
  8004d0:	dfc00215 	stw	ra,8(sp)
  8004d4:	df000115 	stw	fp,4(sp)
  8004d8:	df000104 	addi	fp,sp,4
  8004dc:	e13fff15 	stw	r4,-4(fp)
	setGreenLED(0, 0);
  8004e0:	000b883a 	mov	r5,zero
  8004e4:	0009883a 	mov	r4,zero
  8004e8:	08003180 	call	800318 <setGreenLED>

	return 0;
  8004ec:	0005883a 	mov	r2,zero
}
  8004f0:	e037883a 	mov	sp,fp
  8004f4:	dfc00117 	ldw	ra,4(sp)
  8004f8:	df000017 	ldw	fp,0(sp)
  8004fc:	dec00204 	addi	sp,sp,8
  800500:	f800283a 	ret

00800504 <setup_interrupt>:




void setup_interrupt(int*val){//buttons for Mode 1
  800504:	defffc04 	addi	sp,sp,-16
  800508:	dfc00315 	stw	ra,12(sp)
  80050c:	df000215 	stw	fp,8(sp)
  800510:	df000204 	addi	fp,sp,8
  800514:	e13fff15 	stw	r4,-4(fp)
	void *context_to_be_passed = (void*) val;
  800518:	e0bfff17 	ldw	r2,-4(fp)
  80051c:	e0bffe15 	stw	r2,-8(fp)
	//clear edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE,0);
  800520:	0007883a 	mov	r3,zero
  800524:	00804074 	movhi	r2,257
  800528:	10842b04 	addi	r2,r2,4268
  80052c:	10c00035 	stwio	r3,0(r2)
	// enable interrupts for left and right buttons i.e. button 2 and button 0
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0b00111111);// parameter ands value with mask so 7 = 111 which means key2-0 enabled.
  800530:	00c00fc4 	movi	r3,63
  800534:	00804074 	movhi	r2,257
  800538:	10842a04 	addi	r2,r2,4264
  80053c:	10c00035 	stwio	r3,0(r2)
	// register the ISR
	alt_irq_register(KEYS_IRQ,context_to_be_passed,button_interrupt_function);
  800540:	01802034 	movhi	r6,128
  800544:	3180a404 	addi	r6,r6,656
  800548:	e17ffe17 	ldw	r5,-8(fp)
  80054c:	01000104 	movi	r4,4
  800550:	080b2c00 	call	80b2c0 <alt_irq_register>
}
  800554:	0001883a 	nop
  800558:	e037883a 	mov	sp,fp
  80055c:	dfc00117 	ldw	ra,4(sp)
  800560:	df000017 	ldw	fp,0(sp)
  800564:	dec00204 	addi	sp,sp,8
  800568:	f800283a 	ret

0080056c <mode_1>:
//
//
//}

//Aron helped again :)
void mode_1(unsigned int uiButtonsValue, TickData* data, Ticks* tickStruct, void* timerContext){
  80056c:	defffa04 	addi	sp,sp,-24
  800570:	dfc00515 	stw	ra,20(sp)
  800574:	df000415 	stw	fp,16(sp)
  800578:	df000404 	addi	fp,sp,16
  80057c:	e13ffc15 	stw	r4,-16(fp)
  800580:	e17ffd15 	stw	r5,-12(fp)
  800584:	e1bffe15 	stw	r6,-8(fp)
  800588:	e1ffff15 	stw	r7,-4(fp)
	setup_interrupt(&uiButtonsValue);
  80058c:	e13ffc04 	addi	r4,fp,-16
  800590:	08005040 	call	800504 <setup_interrupt>
	if(buttonAS == 1){ // AS = KEY1
  800594:	d0a72817 	ldw	r2,-25440(gp)
  800598:	10800058 	cmpnei	r2,r2,1
  80059c:	1000191e 	bne	r2,zero,800604 <mode_1+0x98>

		 //use -> instead of . as it changes directly and not create a new instance?
		data->AS = 1;
  8005a0:	e0bffd17 	ldw	r2,-12(fp)
  8005a4:	00c00044 	movi	r3,1
  8005a8:	10c00605 	stb	r3,24(r2)
		buttonAS = 0; //global parameter doesn't need assignment.
  8005ac:	d0272815 	stw	zero,-25440(gp)
		printf("AS set\n");
  8005b0:	01002074 	movhi	r4,129
  8005b4:	213c8404 	addi	r4,r4,-3568
  8005b8:	0808b180 	call	808b18 <puts>

			if(!getGreenLED(5)) {
  8005bc:	01000144 	movi	r4,5
  8005c0:	08003a40 	call	8003a4 <getGreenLED>
  8005c4:	10803fcc 	andi	r2,r2,255
  8005c8:	1080201c 	xori	r2,r2,128
  8005cc:	10bfe004 	addi	r2,r2,-128
  8005d0:	1000271e 	bne	r2,zero,800670 <mode_1+0x104>
				setGreenLED(5, 1); // turn on LED 5 for AS
  8005d4:	01400044 	movi	r5,1
  8005d8:	01000144 	movi	r4,5
  8005dc:	08003180 	call	800318 <setGreenLED>
				alt_alarm_start(&tickStruct->ticker_ASLED, 200, asLEDISR, timerContext);
  8005e0:	e0bffe17 	ldw	r2,-8(fp)
  8005e4:	10800c04 	addi	r2,r2,48
  8005e8:	e1ffff17 	ldw	r7,-4(fp)
  8005ec:	01802034 	movhi	r6,128
  8005f0:	31811704 	addi	r6,r6,1116
  8005f4:	01403204 	movi	r5,200
  8005f8:	1009883a 	mov	r4,r2
  8005fc:	080af700 	call	80af70 <alt_alarm_start>
  800600:	00001b06 	br	800670 <mode_1+0x104>
			}
		}

	else if (buttonVS ==1){// VS = KEY0
  800604:	d0a72617 	ldw	r2,-25448(gp)
  800608:	10800058 	cmpnei	r2,r2,1
  80060c:	1000181e 	bne	r2,zero,800670 <mode_1+0x104>
		data->VS = 1;
  800610:	e0bffd17 	ldw	r2,-12(fp)
  800614:	00c00044 	movi	r3,1
  800618:	10c00645 	stb	r3,25(r2)
		buttonVS =0;
  80061c:	d0272615 	stw	zero,-25448(gp)
		printf("VS set\n");
  800620:	01002074 	movhi	r4,129
  800624:	213c8604 	addi	r4,r4,-3560
  800628:	0808b180 	call	808b18 <puts>
		if(!getGreenLED(4)) {
  80062c:	01000104 	movi	r4,4
  800630:	08003a40 	call	8003a4 <getGreenLED>
  800634:	10803fcc 	andi	r2,r2,255
  800638:	1080201c 	xori	r2,r2,128
  80063c:	10bfe004 	addi	r2,r2,-128
  800640:	10000b1e 	bne	r2,zero,800670 <mode_1+0x104>
			setGreenLED(4, 1); // turn on LED 4 for VS
  800644:	01400044 	movi	r5,1
  800648:	01000104 	movi	r4,4
  80064c:	08003180 	call	800318 <setGreenLED>
			alt_alarm_start(&tickStruct->ticker_VSLED, 200, vsLEDISR, timerContext);
  800650:	e0bffe17 	ldw	r2,-8(fp)
  800654:	10800604 	addi	r2,r2,24
  800658:	e1ffff17 	ldw	r7,-4(fp)
  80065c:	01802034 	movhi	r6,128
  800660:	31810904 	addi	r6,r6,1060
  800664:	01403204 	movi	r5,200
  800668:	1009883a 	mov	r4,r2
  80066c:	080af700 	call	80af70 <alt_alarm_start>
		}
	}


	if(data->AP)//remove == coz checking chara gainst number variable.
  800670:	e0bffd17 	ldw	r2,-12(fp)
  800674:	10801303 	ldbu	r2,76(r2)
  800678:	10803fcc 	andi	r2,r2,255
  80067c:	1080201c 	xori	r2,r2,128
  800680:	10bfe004 	addi	r2,r2,-128
  800684:	10001526 	beq	r2,zero,8006dc <mode_1+0x170>
	{	printf("AP is paced\n");
  800688:	01002074 	movhi	r4,129
  80068c:	213c8804 	addi	r4,r4,-3552
  800690:	0808b180 	call	808b18 <puts>
		if(!getGreenLED(1)) {
  800694:	01000044 	movi	r4,1
  800698:	08003a40 	call	8003a4 <getGreenLED>
  80069c:	10803fcc 	andi	r2,r2,255
  8006a0:	1080201c 	xori	r2,r2,128
  8006a4:	10bfe004 	addi	r2,r2,-128
  8006a8:	1000261e 	bne	r2,zero,800744 <mode_1+0x1d8>
			setGreenLED(1, 1); // turn on LED 1 for AP
  8006ac:	01400044 	movi	r5,1
  8006b0:	01000044 	movi	r4,1
  8006b4:	08003180 	call	800318 <setGreenLED>
			alt_alarm_start(&tickStruct->ticker_APLED, 200, apLEDISR, timerContext);
  8006b8:	e0bffe17 	ldw	r2,-8(fp)
  8006bc:	10801204 	addi	r2,r2,72
  8006c0:	e1ffff17 	ldw	r7,-4(fp)
  8006c4:	01802034 	movhi	r6,128
  8006c8:	31812504 	addi	r6,r6,1172
  8006cc:	01403204 	movi	r5,200
  8006d0:	1009883a 	mov	r4,r2
  8006d4:	080af700 	call	80af70 <alt_alarm_start>
			setGreenLED(0, 1); // turn on LED 0 for VS

			alt_alarm_start(&tickStruct->ticker_VPLED, 200, vpLEDISR, timerContext);
		}
	}
}
  8006d8:	00001a06 	br	800744 <mode_1+0x1d8>
			alt_alarm_start(&tickStruct->ticker_APLED, 200, apLEDISR, timerContext);
		}
	}


	else if(data->VP){
  8006dc:	e0bffd17 	ldw	r2,-12(fp)
  8006e0:	10801343 	ldbu	r2,77(r2)
  8006e4:	10803fcc 	andi	r2,r2,255
  8006e8:	1080201c 	xori	r2,r2,128
  8006ec:	10bfe004 	addi	r2,r2,-128
  8006f0:	10001426 	beq	r2,zero,800744 <mode_1+0x1d8>
		printf("VP is paced\n");
  8006f4:	01002074 	movhi	r4,129
  8006f8:	213c8b04 	addi	r4,r4,-3540
  8006fc:	0808b180 	call	808b18 <puts>
		if(!getGreenLED(0)) {
  800700:	0009883a 	mov	r4,zero
  800704:	08003a40 	call	8003a4 <getGreenLED>
  800708:	10803fcc 	andi	r2,r2,255
  80070c:	1080201c 	xori	r2,r2,128
  800710:	10bfe004 	addi	r2,r2,-128
  800714:	10000b1e 	bne	r2,zero,800744 <mode_1+0x1d8>
			setGreenLED(0, 1); // turn on LED 0 for VS
  800718:	01400044 	movi	r5,1
  80071c:	0009883a 	mov	r4,zero
  800720:	08003180 	call	800318 <setGreenLED>

			alt_alarm_start(&tickStruct->ticker_VPLED, 200, vpLEDISR, timerContext);
  800724:	e0bffe17 	ldw	r2,-8(fp)
  800728:	10801804 	addi	r2,r2,96
  80072c:	e1ffff17 	ldw	r7,-4(fp)
  800730:	01802034 	movhi	r6,128
  800734:	31813304 	addi	r6,r6,1228
  800738:	01403204 	movi	r5,200
  80073c:	1009883a 	mov	r4,r2
  800740:	080af700 	call	80af70 <alt_alarm_start>
		}
	}
}
  800744:	0001883a 	nop
  800748:	e037883a 	mov	sp,fp
  80074c:	dfc00117 	ldw	ra,4(sp)
  800750:	df000017 	ldw	fp,0(sp)
  800754:	dec00204 	addi	sp,sp,8
  800758:	f800283a 	ret

0080075c <main>:



int main()
{
  80075c:	deff7804 	addi	sp,sp,-544
  800760:	dfc08715 	stw	ra,540(sp)
  800764:	df008615 	stw	fp,536(sp)
  800768:	df008604 	addi	fp,sp,536
	TickData data;
	Ticks tickStruct;
	reset(&data);
  80076c:	e0bf8704 	addi	r2,fp,-484
  800770:	1009883a 	mov	r4,r2
  800774:	08057f40 	call	8057f4 <reset>
	tick(&data);
  800778:	e0bf8704 	addi	r2,fp,-484
  80077c:	1009883a 	mov	r4,r2
  800780:	08059ec0 	call	8059ec <tick>

	unsigned int uiSwitchValue = 0;
  800784:	e03f7c15 	stw	zero,-528(fp)
	unsigned int uiButtonsValue;
	unsigned int uiButtonsValuePrevious;


	FILE *lcd;
	printf("Hello from Nios II!\n");
  800788:	01002074 	movhi	r4,129
  80078c:	213c8e04 	addi	r4,r4,-3528
  800790:	0808b180 	call	808b18 <puts>
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
  800794:	0007883a 	mov	r3,zero
  800798:	00804074 	movhi	r2,257
  80079c:	10841c04 	addi	r2,r2,4208
  8007a0:	10c00035 	stwio	r3,0(r2)
	lcd = fopen(LCD_NAME, "w");
  8007a4:	01402074 	movhi	r5,129
  8007a8:	297c9304 	addi	r5,r5,-3508
  8007ac:	01002074 	movhi	r4,129
  8007b0:	213c9404 	addi	r4,r4,-3504
  8007b4:	0807a140 	call	807a14 <fopen>
  8007b8:	e0bf7d15 	stw	r2,-524(fp)

	// set up timer for SCChart
	uint64_t prevTime = 0;
  8007bc:	e03f7a15 	stw	zero,-536(fp)
  8007c0:	e03f7b15 	stw	zero,-532(fp)
	uint64_t systemTime = 0;
  8007c4:	e03ffe15 	stw	zero,-8(fp)
  8007c8:	e03fff15 	stw	zero,-4(fp)
	void* timerContext = (void*) &systemTime;   //from aron github https://github.com/aron-jeremiah/CompSys303-SCCharts-Examples/blob/main/NiosExamples/SCCharts_Timer_Intergration_Example/main.c
  8007cc:	e0bffe04 	addi	r2,fp,-8
  8007d0:	e0bf7e15 	stw	r2,-520(fp)
	alt_alarm_start(&tickStruct.ticker, 1, timerISR, timerContext);
  8007d4:	e0bfe004 	addi	r2,fp,-128
  8007d8:	e1ff7e17 	ldw	r7,-520(fp)
  8007dc:	01802034 	movhi	r6,128
  8007e0:	3180f904 	addi	r6,r6,996
  8007e4:	01400044 	movi	r5,1
  8007e8:	1009883a 	mov	r4,r2
  8007ec:	080af700 	call	80af70 <alt_alarm_start>



	while(1)
	{
		data.deltaT = systemTime - prevTime;
  8007f0:	e13ffe17 	ldw	r4,-8(fp)
  8007f4:	e17fff17 	ldw	r5,-4(fp)
  8007f8:	e1bf7a17 	ldw	r6,-536(fp)
  8007fc:	e1ff7b17 	ldw	r7,-532(fp)
  800800:	2185c83a 	sub	r2,r4,r6
  800804:	2091803a 	cmpltu	r8,r4,r2
  800808:	29c7c83a 	sub	r3,r5,r7
  80080c:	1a09c83a 	sub	r4,r3,r8
  800810:	2007883a 	mov	r3,r4
  800814:	100b883a 	mov	r5,r2
  800818:	180d883a 	mov	r6,r3
  80081c:	2809883a 	mov	r4,r5
  800820:	300b883a 	mov	r5,r6
  800824:	0805c380 	call	805c38 <__floatundidf>
  800828:	1009883a 	mov	r4,r2
  80082c:	180b883a 	mov	r5,r3
  800830:	e13f9b15 	stw	r4,-404(fp)
  800834:	e17f9c15 	stw	r5,-400(fp)
		prevTime = systemTime;
  800838:	e0bffe17 	ldw	r2,-8(fp)
  80083c:	e0bf7a15 	stw	r2,-536(fp)
  800840:	e0bfff17 	ldw	r2,-4(fp)
  800844:	e0bf7b15 	stw	r2,-532(fp)


		int countAtimer;
		//update inputs
		tick(&data);
  800848:	e0bf8704 	addi	r2,fp,-484
  80084c:	1009883a 	mov	r4,r2
  800850:	08059ec0 	call	8059ec <tick>
		uiButtonsValue = 0;
  800854:	e03f7f15 	stw	zero,-516(fp)
		uiButtonsValuePrevious = 0;
  800858:	e03f8015 	stw	zero,-512(fp)
		uiSwitchValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  80085c:	00804074 	movhi	r2,257
  800860:	10842404 	addi	r2,r2,4240
  800864:	10800037 	ldwio	r2,0(r2)
  800868:	e0bf7c15 	stw	r2,-528(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, uiSwitchValue);
  80086c:	e0ff7c17 	ldw	r3,-528(fp)
  800870:	00804074 	movhi	r2,257
  800874:	10842004 	addi	r2,r2,4224
  800878:	10c00035 	stwio	r3,0(r2)
		int switchValueInteger = (int)(uiSwitchValue);
  80087c:	e0bf7c17 	ldw	r2,-528(fp)
  800880:	e0bf8115 	stw	r2,-508(fp)

		data.AS =0;// reset on new tick
  800884:	e03f8d05 	stb	zero,-460(fp)
		data.VS = 0; // reset on new tick
  800888:	e03f8d45 	stb	zero,-459(fp)

		int countVP = 100;
  80088c:	00801904 	movi	r2,100
  800890:	e0bf8215 	stw	r2,-504(fp)
		int countAP = 100;
  800894:	00801904 	movi	r2,100
  800898:	e0bf8315 	stw	r2,-500(fp)
		int countAS = 100;
  80089c:	00801904 	movi	r2,100
  8008a0:	e0bf8415 	stw	r2,-496(fp)
		int countVS = 100;
  8008a4:	00801904 	movi	r2,100
  8008a8:	e0bf8515 	stw	r2,-492(fp)

		if (switchValueInteger==1){ //mode 1
  8008ac:	e0bf8117 	ldw	r2,-508(fp)
  8008b0:	10800058 	cmpnei	r2,r2,1
  8008b4:	1000081e 	bne	r2,zero,8008d8 <main+0x17c>
			// if have time to do: only print mode 1 once
			//fprintf(lcd, "BUTTON VALUE: %d\n", uiButtonsValue);
			//printf("MODE 1\n");
			mode_1(uiButtonsValue,&data,&tickStruct, timerContext);
  8008b8:	e0ffe004 	addi	r3,fp,-128
  8008bc:	e0bf8704 	addi	r2,fp,-484
  8008c0:	e1ff7e17 	ldw	r7,-520(fp)
  8008c4:	180d883a 	mov	r6,r3
  8008c8:	100b883a 	mov	r5,r2
  8008cc:	e13f7f17 	ldw	r4,-516(fp)
  8008d0:	080056c0 	call	80056c <mode_1>
  8008d4:	003fc606 	br	8007f0 <__alt_mem_onchip_mem+0xff7f87f0>



		}else if (switchValueInteger==2){//mode2
  8008d8:	e0bf8117 	ldw	r2,-508(fp)
  8008dc:	10800098 	cmpnei	r2,r2,2
  8008e0:	103fc31e 	bne	r2,zero,8007f0 <__alt_mem_onchip_mem+0xff7f87f0>
			//printf("mode 2\n");
			//mode_2();
			///////Uart Code//////

			IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,0);
  8008e4:	0007883a 	mov	r3,zero
  8008e8:	00804074 	movhi	r2,257
  8008ec:	10841304 	addi	r2,r2,4172
  8008f0:	10c00035 	stwio	r3,0(r2)

//			IOWR_ALTERA_AVALON_PIO_IRQ_MASK() call to enable the interrupt handler, and associated
//			IOWR_ALTERA_AVALON_PIO_EDGE_CAP() calls whenever the interrupts should be cleared.


			if(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)& ALTERA_AVALON_UART_STATUS_RRDY_MSK){
  8008f4:	00804074 	movhi	r2,257
  8008f8:	10841204 	addi	r2,r2,4168
  8008fc:	10800037 	ldwio	r2,0(r2)
  800900:	1080200c 	andi	r2,r2,128
  800904:	10001e26 	beq	r2,zero,800980 <main+0x224>
				char input= IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);// read input data from UART
  800908:	00804074 	movhi	r2,257
  80090c:	10841004 	addi	r2,r2,4160
  800910:	10800037 	ldwio	r2,0(r2)
  800914:	e0bf8605 	stb	r2,-488(fp)
				IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,(1<<7));
  800918:	00c02004 	movi	r3,128
  80091c:	00804074 	movhi	r2,257
  800920:	10841304 	addi	r2,r2,4172
  800924:	10c00035 	stwio	r3,0(r2)

				//char dataInMemory[1000];
				//FILE * fileDescriptor = fmemopen(dataInMemory, sizeof(dataInMemory), "W");
				//printf('%s\n',input);

				if((input=='A')||(input=='a'))
  800928:	e0bf8607 	ldb	r2,-488(fp)
  80092c:	10801060 	cmpeqi	r2,r2,65
  800930:	1000031e 	bne	r2,zero,800940 <main+0x1e4>
  800934:	e0bf8607 	ldb	r2,-488(fp)
  800938:	10801858 	cmpnei	r2,r2,97
  80093c:	1000051e 	bne	r2,zero,800954 <main+0x1f8>
				{
					printf("AS is set\n");
  800940:	01002074 	movhi	r4,129
  800944:	213c9704 	addi	r4,r4,-3492
  800948:	0808b180 	call	808b18 <puts>
					data.AS = 1;
  80094c:	00800044 	movi	r2,1
  800950:	e0bf8d05 	stb	r2,-460(fp)
//					countAS = 100;
//				}else if (countAS > 0){
//					countAS--;
//				}

				if((input=='V')||(input=='v'))
  800954:	e0bf8607 	ldb	r2,-488(fp)
  800958:	108015a0 	cmpeqi	r2,r2,86
  80095c:	1000031e 	bne	r2,zero,80096c <main+0x210>
  800960:	e0bf8607 	ldb	r2,-488(fp)
  800964:	10801d98 	cmpnei	r2,r2,118
  800968:	1000051e 	bne	r2,zero,800980 <main+0x224>
				{
					printf("VS is set\n");
  80096c:	01002074 	movhi	r4,129
  800970:	213c9a04 	addi	r4,r4,-3480
  800974:	0808b180 	call	808b18 <puts>
					data.VS=1;
  800978:	00800044 	movi	r2,1
  80097c:	e0bf8d45 	stb	r2,-459(fp)
//				}else if (countVS > 0){
//					countVS--;
//				}

			}
			if(data.AP){//remove == coz checking chara gainst number variable.
  800980:	e0bf9a03 	ldbu	r2,-408(fp)
  800984:	10803fcc 	andi	r2,r2,255
  800988:	1080201c 	xori	r2,r2,128
  80098c:	10bfe004 	addi	r2,r2,-128
  800990:	10000a26 	beq	r2,zero,8009bc <main+0x260>
//					printf("AP is paced\n");
					while(!(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)& ALTERA_AVALON_UART_STATUS_TRDY_MSK)){}
  800994:	0001883a 	nop
  800998:	00804074 	movhi	r2,257
  80099c:	10841204 	addi	r2,r2,4168
  8009a0:	10800037 	ldwio	r2,0(r2)
  8009a4:	1080100c 	andi	r2,r2,64
  8009a8:	103ffb26 	beq	r2,zero,800998 <__alt_mem_onchip_mem+0xff7f8998>
					IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, 'A');
  8009ac:	00c01044 	movi	r3,65
  8009b0:	00804074 	movhi	r2,257
  8009b4:	10841104 	addi	r2,r2,4164
  8009b8:	10c00035 	stwio	r3,0(r2)
//					countAP = 100;


			}
			if(data.VP){
  8009bc:	e0bf9a43 	ldbu	r2,-407(fp)
  8009c0:	10803fcc 	andi	r2,r2,255
  8009c4:	1080201c 	xori	r2,r2,128
  8009c8:	10bfe004 	addi	r2,r2,-128
  8009cc:	103f8826 	beq	r2,zero,8007f0 <__alt_mem_onchip_mem+0xff7f87f0>
				printf("VP is paced\n");
  8009d0:	01002074 	movhi	r4,129
  8009d4:	213c8b04 	addi	r4,r4,-3540
  8009d8:	0808b180 	call	808b18 <puts>
				while(!(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)& ALTERA_AVALON_UART_STATUS_TRDY_MSK)){}
  8009dc:	0001883a 	nop
  8009e0:	00804074 	movhi	r2,257
  8009e4:	10841204 	addi	r2,r2,4168
  8009e8:	10800037 	ldwio	r2,0(r2)
  8009ec:	1080100c 	andi	r2,r2,64
  8009f0:	103ffb26 	beq	r2,zero,8009e0 <__alt_mem_onchip_mem+0xff7f89e0>
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, 'V');
  8009f4:	00c01584 	movi	r3,86
  8009f8:	00804074 	movhi	r2,257
  8009fc:	10841104 	addi	r2,r2,4164
  800a00:	10c00035 	stwio	r3,0(r2)
				countVP = 100;
  800a04:	00801904 	movi	r2,100
  800a08:	e0bf8215 	stw	r2,-504(fp)

			}
		}//switch mode end

	}
  800a0c:	003f7806 	br	8007f0 <__alt_mem_onchip_mem+0xff7f87f0>

00800a10 <logic>:
 */

#include "pacecharts.h"
#include "timing.h"

void logic(TickData* d) {
  800a10:	defffa04 	addi	sp,sp,-24
  800a14:	dfc00515 	stw	ra,20(sp)
  800a18:	df000415 	stw	fp,16(sp)
  800a1c:	dc800315 	stw	r18,12(sp)
  800a20:	dc400215 	stw	r17,8(sp)
  800a24:	dc000115 	stw	r16,4(sp)
  800a28:	df000404 	addi	fp,sp,16
  800a2c:	e13ffc15 	stw	r4,-16(fp)
  d->_DDDpacemake2_local_AP_temp = 0;
  800a30:	e0bffc17 	ldw	r2,-16(fp)
  800a34:	10001a05 	stb	zero,104(r2)
  d->_DDDpacemake2_local_VP_temp = 0;
  800a38:	e0bffc17 	ldw	r2,-16(fp)
  800a3c:	10001a45 	stb	zero,105(r2)
  d->_DDDpacemake2_local_real_AS = 0;
  800a40:	e0bffc17 	ldw	r2,-16(fp)
  800a44:	10001a85 	stb	zero,106(r2)
  d->_DDDpacemake2_local_real_VS = 0;
  800a48:	e0bffc17 	ldw	r2,-16(fp)
  800a4c:	10001ac5 	stb	zero,107(r2)
  d->_DDDpacemake2_local__pre_VP_temp = d->_DDDpacemake2_local__reg_VP_temp;
  800a50:	e0bffc17 	ldw	r2,-16(fp)
  800a54:	10c01b03 	ldbu	r3,108(r2)
  800a58:	e0bffc17 	ldw	r2,-16(fp)
  800a5c:	10c01b45 	stb	r3,109(r2)
  d->_g73 = d->_pg91_e2;
  800a60:	e0bffc17 	ldw	r2,-16(fp)
  800a64:	10c05083 	ldbu	r3,322(r2)
  800a68:	e0bffc17 	ldw	r2,-16(fp)
  800a6c:	10c02cc5 	stb	r3,179(r2)
  d->_cg73 = d->VS || d->_DDDpacemake2_local__pre_VP_temp;
  800a70:	e0bffc17 	ldw	r2,-16(fp)
  800a74:	10800643 	ldbu	r2,25(r2)
  800a78:	10803fcc 	andi	r2,r2,255
  800a7c:	1080201c 	xori	r2,r2,128
  800a80:	10bfe004 	addi	r2,r2,-128
  800a84:	1000061e 	bne	r2,zero,800aa0 <logic+0x90>
  800a88:	e0bffc17 	ldw	r2,-16(fp)
  800a8c:	10801b43 	ldbu	r2,109(r2)
  800a90:	10803fcc 	andi	r2,r2,255
  800a94:	1080201c 	xori	r2,r2,128
  800a98:	10bfe004 	addi	r2,r2,-128
  800a9c:	10000226 	beq	r2,zero,800aa8 <logic+0x98>
  800aa0:	00800044 	movi	r2,1
  800aa4:	00000106 	br	800aac <logic+0x9c>
  800aa8:	0005883a 	mov	r2,zero
  800aac:	1007883a 	mov	r3,r2
  800ab0:	e0bffc17 	ldw	r2,-16(fp)
  800ab4:	10c04505 	stb	r3,276(r2)
  d->_g97 = d->_g73 && !d->_cg73;
  800ab8:	e0bffc17 	ldw	r2,-16(fp)
  800abc:	10802cc3 	ldbu	r2,179(r2)
  800ac0:	10803fcc 	andi	r2,r2,255
  800ac4:	1080201c 	xori	r2,r2,128
  800ac8:	10bfe004 	addi	r2,r2,-128
  800acc:	10000826 	beq	r2,zero,800af0 <logic+0xe0>
  800ad0:	e0bffc17 	ldw	r2,-16(fp)
  800ad4:	10804503 	ldbu	r2,276(r2)
  800ad8:	10803fcc 	andi	r2,r2,255
  800adc:	1080201c 	xori	r2,r2,128
  800ae0:	10bfe004 	addi	r2,r2,-128
  800ae4:	1000021e 	bne	r2,zero,800af0 <logic+0xe0>
  800ae8:	00800044 	movi	r2,1
  800aec:	00000106 	br	800af4 <logic+0xe4>
  800af0:	0005883a 	mov	r2,zero
  800af4:	1007883a 	mov	r3,r2
  800af8:	e0bffc17 	ldw	r2,-16(fp)
  800afc:	10c03185 	stb	r3,198(r2)
  d->_g98 = d->_g97 && d->AS;
  800b00:	e0bffc17 	ldw	r2,-16(fp)
  800b04:	10803183 	ldbu	r2,198(r2)
  800b08:	10803fcc 	andi	r2,r2,255
  800b0c:	1080201c 	xori	r2,r2,128
  800b10:	10bfe004 	addi	r2,r2,-128
  800b14:	10000826 	beq	r2,zero,800b38 <logic+0x128>
  800b18:	e0bffc17 	ldw	r2,-16(fp)
  800b1c:	10800603 	ldbu	r2,24(r2)
  800b20:	10803fcc 	andi	r2,r2,255
  800b24:	1080201c 	xori	r2,r2,128
  800b28:	10bfe004 	addi	r2,r2,-128
  800b2c:	10000226 	beq	r2,zero,800b38 <logic+0x128>
  800b30:	00800044 	movi	r2,1
  800b34:	00000106 	br	800b3c <logic+0x12c>
  800b38:	0005883a 	mov	r2,zero
  800b3c:	1007883a 	mov	r3,r2
  800b40:	e0bffc17 	ldw	r2,-16(fp)
  800b44:	10c031c5 	stb	r3,199(r2)
  if (d->_g98) {
  800b48:	e0bffc17 	ldw	r2,-16(fp)
  800b4c:	108031c3 	ldbu	r2,199(r2)
  800b50:	10803fcc 	andi	r2,r2,255
  800b54:	1080201c 	xori	r2,r2,128
  800b58:	10bfe004 	addi	r2,r2,-128
  800b5c:	10000626 	beq	r2,zero,800b78 <logic+0x168>
    d->_DDDpacemake2_local_real_AS |= 1;
  800b60:	e0bffc17 	ldw	r2,-16(fp)
  800b64:	10801a83 	ldbu	r2,106(r2)
  800b68:	10800054 	ori	r2,r2,1
  800b6c:	1007883a 	mov	r3,r2
  800b70:	e0bffc17 	ldw	r2,-16(fp)
  800b74:	10c01a85 	stb	r3,106(r2)
  }
  d->_DDDpacemake2_local__pre_AP_temp = d->_DDDpacemake2_local__reg_AP_temp;
  800b78:	e0bffc17 	ldw	r2,-16(fp)
  800b7c:	10c01b83 	ldbu	r3,110(r2)
  800b80:	e0bffc17 	ldw	r2,-16(fp)
  800b84:	10c01bc5 	stb	r3,111(r2)
  d->_g4 = d->_pg11_e1;
  800b88:	e0bffc17 	ldw	r2,-16(fp)
  800b8c:	10c050c3 	ldbu	r3,323(r2)
  800b90:	e0bffc17 	ldw	r2,-16(fp)
  800b94:	10c01f05 	stb	r3,124(r2)
  d->_cg4 = !d->_DDDpacemake2_local_real_AS && !d->_DDDpacemake2_local__pre_AP_temp;
  800b98:	e0bffc17 	ldw	r2,-16(fp)
  800b9c:	10801a83 	ldbu	r2,106(r2)
  800ba0:	10803fcc 	andi	r2,r2,255
  800ba4:	1080201c 	xori	r2,r2,128
  800ba8:	10bfe004 	addi	r2,r2,-128
  800bac:	1000081e 	bne	r2,zero,800bd0 <logic+0x1c0>
  800bb0:	e0bffc17 	ldw	r2,-16(fp)
  800bb4:	10801bc3 	ldbu	r2,111(r2)
  800bb8:	10803fcc 	andi	r2,r2,255
  800bbc:	1080201c 	xori	r2,r2,128
  800bc0:	10bfe004 	addi	r2,r2,-128
  800bc4:	1000021e 	bne	r2,zero,800bd0 <logic+0x1c0>
  800bc8:	00800044 	movi	r2,1
  800bcc:	00000106 	br	800bd4 <logic+0x1c4>
  800bd0:	0005883a 	mov	r2,zero
  800bd4:	1007883a 	mov	r3,r2
  800bd8:	e0bffc17 	ldw	r2,-16(fp)
  800bdc:	10c03f45 	stb	r3,253(r2)
  d->_g5 = d->_g4 && d->_cg4;
  800be0:	e0bffc17 	ldw	r2,-16(fp)
  800be4:	10801f03 	ldbu	r2,124(r2)
  800be8:	10803fcc 	andi	r2,r2,255
  800bec:	1080201c 	xori	r2,r2,128
  800bf0:	10bfe004 	addi	r2,r2,-128
  800bf4:	10000826 	beq	r2,zero,800c18 <logic+0x208>
  800bf8:	e0bffc17 	ldw	r2,-16(fp)
  800bfc:	10803f43 	ldbu	r2,253(r2)
  800c00:	10803fcc 	andi	r2,r2,255
  800c04:	1080201c 	xori	r2,r2,128
  800c08:	10bfe004 	addi	r2,r2,-128
  800c0c:	10000226 	beq	r2,zero,800c18 <logic+0x208>
  800c10:	00800044 	movi	r2,1
  800c14:	00000106 	br	800c1c <logic+0x20c>
  800c18:	0005883a 	mov	r2,zero
  800c1c:	1007883a 	mov	r3,r2
  800c20:	e0bffc17 	ldw	r2,-16(fp)
  800c24:	10c01f45 	stb	r3,125(r2)
  if (d->_g5) {
  800c28:	e0bffc17 	ldw	r2,-16(fp)
  800c2c:	10801f43 	ldbu	r2,125(r2)
  800c30:	10803fcc 	andi	r2,r2,255
  800c34:	1080201c 	xori	r2,r2,128
  800c38:	10bfe004 	addi	r2,r2,-128
  800c3c:	10000226 	beq	r2,zero,800c48 <logic+0x238>
    d->VP = 0;
  800c40:	e0bffc17 	ldw	r2,-16(fp)
  800c44:	10001345 	stb	zero,77(r2)
  }
  d->_g102 = d->_pg120_e2;
  800c48:	e0bffc17 	ldw	r2,-16(fp)
  800c4c:	10c05103 	ldbu	r3,324(r2)
  800c50:	e0bffc17 	ldw	r2,-16(fp)
  800c54:	10c03205 	stb	r3,200(r2)
  d->_cg102 = d->VS || d->_DDDpacemake2_local__pre_VP_temp;
  800c58:	e0bffc17 	ldw	r2,-16(fp)
  800c5c:	10800643 	ldbu	r2,25(r2)
  800c60:	10803fcc 	andi	r2,r2,255
  800c64:	1080201c 	xori	r2,r2,128
  800c68:	10bfe004 	addi	r2,r2,-128
  800c6c:	1000061e 	bne	r2,zero,800c88 <logic+0x278>
  800c70:	e0bffc17 	ldw	r2,-16(fp)
  800c74:	10801b43 	ldbu	r2,109(r2)
  800c78:	10803fcc 	andi	r2,r2,255
  800c7c:	1080201c 	xori	r2,r2,128
  800c80:	10bfe004 	addi	r2,r2,-128
  800c84:	10000226 	beq	r2,zero,800c90 <logic+0x280>
  800c88:	00800044 	movi	r2,1
  800c8c:	00000106 	br	800c94 <logic+0x284>
  800c90:	0005883a 	mov	r2,zero
  800c94:	1007883a 	mov	r3,r2
  800c98:	e0bffc17 	ldw	r2,-16(fp)
  800c9c:	10c04785 	stb	r3,286(r2)
  d->_g103 = d->_g102 && d->_cg102;
  800ca0:	e0bffc17 	ldw	r2,-16(fp)
  800ca4:	10803203 	ldbu	r2,200(r2)
  800ca8:	10803fcc 	andi	r2,r2,255
  800cac:	1080201c 	xori	r2,r2,128
  800cb0:	10bfe004 	addi	r2,r2,-128
  800cb4:	10000826 	beq	r2,zero,800cd8 <logic+0x2c8>
  800cb8:	e0bffc17 	ldw	r2,-16(fp)
  800cbc:	10804783 	ldbu	r2,286(r2)
  800cc0:	10803fcc 	andi	r2,r2,255
  800cc4:	1080201c 	xori	r2,r2,128
  800cc8:	10bfe004 	addi	r2,r2,-128
  800ccc:	10000226 	beq	r2,zero,800cd8 <logic+0x2c8>
  800cd0:	00800044 	movi	r2,1
  800cd4:	00000106 	br	800cdc <logic+0x2cc>
  800cd8:	0005883a 	mov	r2,zero
  800cdc:	1007883a 	mov	r3,r2
  800ce0:	e0bffc17 	ldw	r2,-16(fp)
  800ce4:	10c03245 	stb	r3,201(r2)
  if (d->_g103) {
  800ce8:	e0bffc17 	ldw	r2,-16(fp)
  800cec:	10803243 	ldbu	r2,201(r2)
  800cf0:	10803fcc 	andi	r2,r2,255
  800cf4:	1080201c 	xori	r2,r2,128
  800cf8:	10bfe004 	addi	r2,r2,-128
  800cfc:	10000926 	beq	r2,zero,800d24 <logic+0x314>
    d->_DDDpacemake2_local_real_VS |= 1;
  800d00:	e0bffc17 	ldw	r2,-16(fp)
  800d04:	10801ac3 	ldbu	r2,107(r2)
  800d08:	10800054 	ori	r2,r2,1
  800d0c:	1007883a 	mov	r3,r2
  800d10:	e0bffc17 	ldw	r2,-16(fp)
  800d14:	10c01ac5 	stb	r3,107(r2)
    d->_DDDpacemake2_local_VRP_state = 1;
  800d18:	e0bffc17 	ldw	r2,-16(fp)
  800d1c:	00c00044 	movi	r3,1
  800d20:	10c01905 	stb	r3,100(r2)
  }
  d->_g28 = d->_pg23;
  800d24:	e0bffc17 	ldw	r2,-16(fp)
  800d28:	10c05143 	ldbu	r3,325(r2)
  800d2c:	e0bffc17 	ldw	r2,-16(fp)
  800d30:	10c02405 	stb	r3,144(r2)
  d->_cg28 = d->_DDDpacemake2_local_real_VS;
  800d34:	e0bffc17 	ldw	r2,-16(fp)
  800d38:	10c01ac3 	ldbu	r3,107(r2)
  800d3c:	e0bffc17 	ldw	r2,-16(fp)
  800d40:	10c04145 	stb	r3,261(r2)
  d->_g29 = d->_g28 && d->_cg28;
  800d44:	e0bffc17 	ldw	r2,-16(fp)
  800d48:	10802403 	ldbu	r2,144(r2)
  800d4c:	10803fcc 	andi	r2,r2,255
  800d50:	1080201c 	xori	r2,r2,128
  800d54:	10bfe004 	addi	r2,r2,-128
  800d58:	10000826 	beq	r2,zero,800d7c <logic+0x36c>
  800d5c:	e0bffc17 	ldw	r2,-16(fp)
  800d60:	10804143 	ldbu	r2,261(r2)
  800d64:	10803fcc 	andi	r2,r2,255
  800d68:	1080201c 	xori	r2,r2,128
  800d6c:	10bfe004 	addi	r2,r2,-128
  800d70:	10000226 	beq	r2,zero,800d7c <logic+0x36c>
  800d74:	00800044 	movi	r2,1
  800d78:	00000106 	br	800d80 <logic+0x370>
  800d7c:	0005883a 	mov	r2,zero
  800d80:	1007883a 	mov	r3,r2
  800d84:	e0bffc17 	ldw	r2,-16(fp)
  800d88:	10c02445 	stb	r3,145(r2)
  if (d->_g29) {
  800d8c:	e0bffc17 	ldw	r2,-16(fp)
  800d90:	10802443 	ldbu	r2,145(r2)
  800d94:	10803fcc 	andi	r2,r2,255
  800d98:	1080201c 	xori	r2,r2,128
  800d9c:	10bfe004 	addi	r2,r2,-128
  800da0:	10000326 	beq	r2,zero,800db0 <logic+0x3a0>
    d->_DDDpacemake2_local__Atrig = 1;
  800da4:	e0bffc17 	ldw	r2,-16(fp)
  800da8:	00c00044 	movi	r3,1
  800dac:	10c01c05 	stb	r3,112(r2)
  }
  d->_g153 = d->_pg144_e2;
  800db0:	e0bffc17 	ldw	r2,-16(fp)
  800db4:	10c05183 	ldbu	r3,326(r2)
  800db8:	e0bffc17 	ldw	r2,-16(fp)
  800dbc:	10c03b45 	stb	r3,237(r2)
  d->_cg153 = d->_DDDpacemake2_local_real_VS || d->_DDDpacemake2_local__pre_VP_temp;
  800dc0:	e0bffc17 	ldw	r2,-16(fp)
  800dc4:	10801ac3 	ldbu	r2,107(r2)
  800dc8:	10803fcc 	andi	r2,r2,255
  800dcc:	1080201c 	xori	r2,r2,128
  800dd0:	10bfe004 	addi	r2,r2,-128
  800dd4:	1000061e 	bne	r2,zero,800df0 <logic+0x3e0>
  800dd8:	e0bffc17 	ldw	r2,-16(fp)
  800ddc:	10801b43 	ldbu	r2,109(r2)
  800de0:	10803fcc 	andi	r2,r2,255
  800de4:	1080201c 	xori	r2,r2,128
  800de8:	10bfe004 	addi	r2,r2,-128
  800dec:	10000226 	beq	r2,zero,800df8 <logic+0x3e8>
  800df0:	00800044 	movi	r2,1
  800df4:	00000106 	br	800dfc <logic+0x3ec>
  800df8:	0005883a 	mov	r2,zero
  800dfc:	1007883a 	mov	r3,r2
  800e00:	e0bffc17 	ldw	r2,-16(fp)
  800e04:	10c04bc5 	stb	r3,303(r2)
  d->_g154 = d->_g153 && d->_cg153;
  800e08:	e0bffc17 	ldw	r2,-16(fp)
  800e0c:	10803b43 	ldbu	r2,237(r2)
  800e10:	10803fcc 	andi	r2,r2,255
  800e14:	1080201c 	xori	r2,r2,128
  800e18:	10bfe004 	addi	r2,r2,-128
  800e1c:	10000826 	beq	r2,zero,800e40 <logic+0x430>
  800e20:	e0bffc17 	ldw	r2,-16(fp)
  800e24:	10804bc3 	ldbu	r2,303(r2)
  800e28:	10803fcc 	andi	r2,r2,255
  800e2c:	1080201c 	xori	r2,r2,128
  800e30:	10bfe004 	addi	r2,r2,-128
  800e34:	10000226 	beq	r2,zero,800e40 <logic+0x430>
  800e38:	00800044 	movi	r2,1
  800e3c:	00000106 	br	800e44 <logic+0x434>
  800e40:	0005883a 	mov	r2,zero
  800e44:	1007883a 	mov	r3,r2
  800e48:	e0bffc17 	ldw	r2,-16(fp)
  800e4c:	10c03b85 	stb	r3,238(r2)
  if (d->_g154) {
  800e50:	e0bffc17 	ldw	r2,-16(fp)
  800e54:	10803b83 	ldbu	r2,238(r2)
  800e58:	10803fcc 	andi	r2,r2,255
  800e5c:	1080201c 	xori	r2,r2,128
  800e60:	10bfe004 	addi	r2,r2,-128
  800e64:	10000326 	beq	r2,zero,800e74 <logic+0x464>
    d->_DDDpacemake2_local_URI_state = 1;
  800e68:	e0bffc17 	ldw	r2,-16(fp)
  800e6c:	00c00044 	movi	r3,1
  800e70:	10c01945 	stb	r3,101(r2)
  }
  d->_g212 = d->_pg168;
  800e74:	e0bffc17 	ldw	r2,-16(fp)
  800e78:	10c051c3 	ldbu	r3,327(r2)
  800e7c:	e0bffc17 	ldw	r2,-16(fp)
  800e80:	10c03e85 	stb	r3,250(r2)
  if (d->_g212) {
  800e84:	e0bffc17 	ldw	r2,-16(fp)
  800e88:	10803e83 	ldbu	r2,250(r2)
  800e8c:	10803fcc 	andi	r2,r2,255
  800e90:	1080201c 	xori	r2,r2,128
  800e94:	10bfe004 	addi	r2,r2,-128
  800e98:	10001226 	beq	r2,zero,800ee4 <logic+0x4d4>
    d->URI_counter += d->deltaT;
  800e9c:	e13ffc17 	ldw	r4,-16(fp)
  800ea0:	20801117 	ldw	r2,68(r4)
  800ea4:	20c01217 	ldw	r3,72(r4)
  800ea8:	e1bffc17 	ldw	r6,-16(fp)
  800eac:	31001417 	ldw	r4,80(r6)
  800eb0:	31401517 	ldw	r5,84(r6)
  800eb4:	200d883a 	mov	r6,r4
  800eb8:	280f883a 	mov	r7,r5
  800ebc:	1009883a 	mov	r4,r2
  800ec0:	180b883a 	mov	r5,r3
  800ec4:	0805ca80 	call	805ca8 <__adddf3>
  800ec8:	1009883a 	mov	r4,r2
  800ecc:	180b883a 	mov	r5,r3
  800ed0:	2005883a 	mov	r2,r4
  800ed4:	2807883a 	mov	r3,r5
  800ed8:	e13ffc17 	ldw	r4,-16(fp)
  800edc:	20801115 	stw	r2,68(r4)
  800ee0:	20c01215 	stw	r3,72(r4)
  }
  d->_g166 = d->_pg161;
  800ee4:	e0bffc17 	ldw	r2,-16(fp)
  800ee8:	10c05203 	ldbu	r3,328(r2)
  800eec:	e0bffc17 	ldw	r2,-16(fp)
  800ef0:	10c03dc5 	stb	r3,247(r2)
  d->_cg166 = d->URI_counter >= d->URI_DEADLINE;
  800ef4:	e0bffc17 	ldw	r2,-16(fp)
  800ef8:	14001117 	ldw	r16,68(r2)
  800efc:	14401217 	ldw	r17,72(r2)
  800f00:	e0bffc17 	ldw	r2,-16(fp)
  800f04:	10800117 	ldw	r2,4(r2)
  800f08:	1009883a 	mov	r4,r2
  800f0c:	08077380 	call	807738 <__floatsidf>
  800f10:	1009883a 	mov	r4,r2
  800f14:	180b883a 	mov	r5,r3
  800f18:	04800044 	movi	r18,1
  800f1c:	200d883a 	mov	r6,r4
  800f20:	280f883a 	mov	r7,r5
  800f24:	8009883a 	mov	r4,r16
  800f28:	880b883a 	mov	r5,r17
  800f2c:	08065540 	call	806554 <__gedf2>
  800f30:	1000010e 	bge	r2,zero,800f38 <logic+0x528>
  800f34:	0025883a 	mov	r18,zero
  800f38:	9007883a 	mov	r3,r18
  800f3c:	e0bffc17 	ldw	r2,-16(fp)
  800f40:	10c04cc5 	stb	r3,307(r2)
  d->_g167 = d->_g166 && d->_cg166;
  800f44:	e0bffc17 	ldw	r2,-16(fp)
  800f48:	10803dc3 	ldbu	r2,247(r2)
  800f4c:	10803fcc 	andi	r2,r2,255
  800f50:	1080201c 	xori	r2,r2,128
  800f54:	10bfe004 	addi	r2,r2,-128
  800f58:	10000826 	beq	r2,zero,800f7c <logic+0x56c>
  800f5c:	e0bffc17 	ldw	r2,-16(fp)
  800f60:	10804cc3 	ldbu	r2,307(r2)
  800f64:	10803fcc 	andi	r2,r2,255
  800f68:	1080201c 	xori	r2,r2,128
  800f6c:	10bfe004 	addi	r2,r2,-128
  800f70:	10000226 	beq	r2,zero,800f7c <logic+0x56c>
  800f74:	00800044 	movi	r2,1
  800f78:	00000106 	br	800f80 <logic+0x570>
  800f7c:	0005883a 	mov	r2,zero
  800f80:	1007883a 	mov	r3,r2
  800f84:	e0bffc17 	ldw	r2,-16(fp)
  800f88:	10c03e05 	stb	r3,248(r2)
  if (d->_g167) {
  800f8c:	e0bffc17 	ldw	r2,-16(fp)
  800f90:	10803e03 	ldbu	r2,248(r2)
  800f94:	10803fcc 	andi	r2,r2,255
  800f98:	1080201c 	xori	r2,r2,128
  800f9c:	10bfe004 	addi	r2,r2,-128
  800fa0:	10000326 	beq	r2,zero,800fb0 <logic+0x5a0>
    d->_DDDpacemake2_local__Atrig11 = 1;
  800fa4:	e0bffc17 	ldw	r2,-16(fp)
  800fa8:	00c00044 	movi	r3,1
  800fac:	10c01ec5 	stb	r3,123(r2)
  }
  if (d->_g154) {
  800fb0:	e0bffc17 	ldw	r2,-16(fp)
  800fb4:	10803b83 	ldbu	r2,238(r2)
  800fb8:	10803fcc 	andi	r2,r2,255
  800fbc:	1080201c 	xori	r2,r2,128
  800fc0:	10bfe004 	addi	r2,r2,-128
  800fc4:	10000526 	beq	r2,zero,800fdc <logic+0x5cc>
    d->URI_counter = 0;
  800fc8:	e0bffc17 	ldw	r2,-16(fp)
  800fcc:	10001115 	stw	zero,68(r2)
  800fd0:	10001215 	stw	zero,72(r2)
    d->_DDDpacemake2_local__Atrig11 = 0;
  800fd4:	e0bffc17 	ldw	r2,-16(fp)
  800fd8:	10001ec5 	stb	zero,123(r2)
  }
  d->_g160 = d->_pg159;
  800fdc:	e0bffc17 	ldw	r2,-16(fp)
  800fe0:	10c05243 	ldbu	r3,329(r2)
  800fe4:	e0bffc17 	ldw	r2,-16(fp)
  800fe8:	10c03cc5 	stb	r3,243(r2)
  d->_g163 = d->_pg162;
  800fec:	e0bffc17 	ldw	r2,-16(fp)
  800ff0:	10c05283 	ldbu	r3,330(r2)
  800ff4:	e0bffc17 	ldw	r2,-16(fp)
  800ff8:	10c03d85 	stb	r3,246(r2)
  d->_g163 = d->_g154 || d->_g160 || d->_g163;
  800ffc:	e0bffc17 	ldw	r2,-16(fp)
  801000:	10803b83 	ldbu	r2,238(r2)
  801004:	10803fcc 	andi	r2,r2,255
  801008:	1080201c 	xori	r2,r2,128
  80100c:	10bfe004 	addi	r2,r2,-128
  801010:	10000c1e 	bne	r2,zero,801044 <logic+0x634>
  801014:	e0bffc17 	ldw	r2,-16(fp)
  801018:	10803cc3 	ldbu	r2,243(r2)
  80101c:	10803fcc 	andi	r2,r2,255
  801020:	1080201c 	xori	r2,r2,128
  801024:	10bfe004 	addi	r2,r2,-128
  801028:	1000061e 	bne	r2,zero,801044 <logic+0x634>
  80102c:	e0bffc17 	ldw	r2,-16(fp)
  801030:	10803d83 	ldbu	r2,246(r2)
  801034:	10803fcc 	andi	r2,r2,255
  801038:	1080201c 	xori	r2,r2,128
  80103c:	10bfe004 	addi	r2,r2,-128
  801040:	10000226 	beq	r2,zero,80104c <logic+0x63c>
  801044:	00800044 	movi	r2,1
  801048:	00000106 	br	801050 <logic+0x640>
  80104c:	0005883a 	mov	r2,zero
  801050:	1007883a 	mov	r3,r2
  801054:	e0bffc17 	ldw	r2,-16(fp)
  801058:	10c03d85 	stb	r3,246(r2)
  d->_cg156 = d->URI_counter < d->URI_DEADLINE;
  80105c:	e0bffc17 	ldw	r2,-16(fp)
  801060:	14001117 	ldw	r16,68(r2)
  801064:	14401217 	ldw	r17,72(r2)
  801068:	e0bffc17 	ldw	r2,-16(fp)
  80106c:	10800117 	ldw	r2,4(r2)
  801070:	1009883a 	mov	r4,r2
  801074:	08077380 	call	807738 <__floatsidf>
  801078:	1009883a 	mov	r4,r2
  80107c:	180b883a 	mov	r5,r3
  801080:	04800044 	movi	r18,1
  801084:	200d883a 	mov	r6,r4
  801088:	280f883a 	mov	r7,r5
  80108c:	8009883a 	mov	r4,r16
  801090:	880b883a 	mov	r5,r17
  801094:	08066300 	call	806630 <__ledf2>
  801098:	10000116 	blt	r2,zero,8010a0 <logic+0x690>
  80109c:	0025883a 	mov	r18,zero
  8010a0:	9007883a 	mov	r3,r18
  8010a4:	e0bffc17 	ldw	r2,-16(fp)
  8010a8:	10c04c05 	stb	r3,304(r2)
  d->_g160 = d->_g163 && !d->_cg156;
  8010ac:	e0bffc17 	ldw	r2,-16(fp)
  8010b0:	10803d83 	ldbu	r2,246(r2)
  8010b4:	10803fcc 	andi	r2,r2,255
  8010b8:	1080201c 	xori	r2,r2,128
  8010bc:	10bfe004 	addi	r2,r2,-128
  8010c0:	10000826 	beq	r2,zero,8010e4 <logic+0x6d4>
  8010c4:	e0bffc17 	ldw	r2,-16(fp)
  8010c8:	10804c03 	ldbu	r2,304(r2)
  8010cc:	10803fcc 	andi	r2,r2,255
  8010d0:	1080201c 	xori	r2,r2,128
  8010d4:	10bfe004 	addi	r2,r2,-128
  8010d8:	1000021e 	bne	r2,zero,8010e4 <logic+0x6d4>
  8010dc:	00800044 	movi	r2,1
  8010e0:	00000106 	br	8010e8 <logic+0x6d8>
  8010e4:	0005883a 	mov	r2,zero
  8010e8:	1007883a 	mov	r3,r2
  8010ec:	e0bffc17 	ldw	r2,-16(fp)
  8010f0:	10c03cc5 	stb	r3,243(r2)
  d->_cg161 = d->_DDDpacemake2_local__Atrig11;
  8010f4:	e0bffc17 	ldw	r2,-16(fp)
  8010f8:	10c01ec3 	ldbu	r3,123(r2)
  8010fc:	e0bffc17 	ldw	r2,-16(fp)
  801100:	10c04c85 	stb	r3,306(r2)
  d->_g162 = d->_g160 && !d->_cg161;
  801104:	e0bffc17 	ldw	r2,-16(fp)
  801108:	10803cc3 	ldbu	r2,243(r2)
  80110c:	10803fcc 	andi	r2,r2,255
  801110:	1080201c 	xori	r2,r2,128
  801114:	10bfe004 	addi	r2,r2,-128
  801118:	10000826 	beq	r2,zero,80113c <logic+0x72c>
  80111c:	e0bffc17 	ldw	r2,-16(fp)
  801120:	10804c83 	ldbu	r2,306(r2)
  801124:	10803fcc 	andi	r2,r2,255
  801128:	1080201c 	xori	r2,r2,128
  80112c:	10bfe004 	addi	r2,r2,-128
  801130:	1000021e 	bne	r2,zero,80113c <logic+0x72c>
  801134:	00800044 	movi	r2,1
  801138:	00000106 	br	801140 <logic+0x730>
  80113c:	0005883a 	mov	r2,zero
  801140:	1007883a 	mov	r3,r2
  801144:	e0bffc17 	ldw	r2,-16(fp)
  801148:	10c03d45 	stb	r3,245(r2)
  d->sleepT = 1000.0;
  80114c:	e0fffc17 	ldw	r3,-16(fp)
  801150:	18001615 	stw	zero,88(r3)
  801154:	009023f4 	movhi	r2,16527
  801158:	10900004 	addi	r2,r2,16384
  80115c:	18801715 	stw	r2,92(r3)
  d->_g156 = d->_g163 && d->_cg156;
  801160:	e0bffc17 	ldw	r2,-16(fp)
  801164:	10803d83 	ldbu	r2,246(r2)
  801168:	10803fcc 	andi	r2,r2,255
  80116c:	1080201c 	xori	r2,r2,128
  801170:	10bfe004 	addi	r2,r2,-128
  801174:	10000826 	beq	r2,zero,801198 <logic+0x788>
  801178:	e0bffc17 	ldw	r2,-16(fp)
  80117c:	10804c03 	ldbu	r2,304(r2)
  801180:	10803fcc 	andi	r2,r2,255
  801184:	1080201c 	xori	r2,r2,128
  801188:	10bfe004 	addi	r2,r2,-128
  80118c:	10000226 	beq	r2,zero,801198 <logic+0x788>
  801190:	00800044 	movi	r2,1
  801194:	00000106 	br	80119c <logic+0x78c>
  801198:	0005883a 	mov	r2,zero
  80119c:	1007883a 	mov	r3,r2
  8011a0:	e0bffc17 	ldw	r2,-16(fp)
  8011a4:	10c03bc5 	stb	r3,239(r2)
  if (d->_g156) {
  8011a8:	e0bffc17 	ldw	r2,-16(fp)
  8011ac:	10803bc3 	ldbu	r2,239(r2)
  8011b0:	10803fcc 	andi	r2,r2,255
  8011b4:	1080201c 	xori	r2,r2,128
  8011b8:	10bfe004 	addi	r2,r2,-128
  8011bc:	10003426 	beq	r2,zero,801290 <logic+0x880>
    d->sleepT = (d->sleepT < (d->URI_DEADLINE - d->URI_counter)) ? d->sleepT : (d->URI_DEADLINE - d->URI_counter);
  8011c0:	e0bffc17 	ldw	r2,-16(fp)
  8011c4:	14001617 	ldw	r16,88(r2)
  8011c8:	14401717 	ldw	r17,92(r2)
  8011cc:	e0bffc17 	ldw	r2,-16(fp)
  8011d0:	10800117 	ldw	r2,4(r2)
  8011d4:	1009883a 	mov	r4,r2
  8011d8:	08077380 	call	807738 <__floatsidf>
  8011dc:	1011883a 	mov	r8,r2
  8011e0:	1813883a 	mov	r9,r3
  8011e4:	e13ffc17 	ldw	r4,-16(fp)
  8011e8:	20801117 	ldw	r2,68(r4)
  8011ec:	20c01217 	ldw	r3,72(r4)
  8011f0:	100d883a 	mov	r6,r2
  8011f4:	180f883a 	mov	r7,r3
  8011f8:	4009883a 	mov	r4,r8
  8011fc:	480b883a 	mov	r5,r9
  801200:	0806e3c0 	call	806e3c <__subdf3>
  801204:	1009883a 	mov	r4,r2
  801208:	180b883a 	mov	r5,r3
  80120c:	2005883a 	mov	r2,r4
  801210:	2807883a 	mov	r3,r5
  801214:	100d883a 	mov	r6,r2
  801218:	180f883a 	mov	r7,r3
  80121c:	8009883a 	mov	r4,r16
  801220:	880b883a 	mov	r5,r17
  801224:	08066300 	call	806630 <__ledf2>
  801228:	1000040e 	bge	r2,zero,80123c <logic+0x82c>
  80122c:	e13ffc17 	ldw	r4,-16(fp)
  801230:	20801617 	ldw	r2,88(r4)
  801234:	20c01717 	ldw	r3,92(r4)
  801238:	00001206 	br	801284 <logic+0x874>
  80123c:	e0bffc17 	ldw	r2,-16(fp)
  801240:	10800117 	ldw	r2,4(r2)
  801244:	1009883a 	mov	r4,r2
  801248:	08077380 	call	807738 <__floatsidf>
  80124c:	1011883a 	mov	r8,r2
  801250:	1813883a 	mov	r9,r3
  801254:	e13ffc17 	ldw	r4,-16(fp)
  801258:	20801117 	ldw	r2,68(r4)
  80125c:	20c01217 	ldw	r3,72(r4)
  801260:	100d883a 	mov	r6,r2
  801264:	180f883a 	mov	r7,r3
  801268:	4009883a 	mov	r4,r8
  80126c:	480b883a 	mov	r5,r9
  801270:	0806e3c0 	call	806e3c <__subdf3>
  801274:	1009883a 	mov	r4,r2
  801278:	180b883a 	mov	r5,r3
  80127c:	2005883a 	mov	r2,r4
  801280:	2807883a 	mov	r3,r5
  801284:	e13ffc17 	ldw	r4,-16(fp)
  801288:	20801615 	stw	r2,88(r4)
  80128c:	20c01715 	stw	r3,92(r4)
  }
  d->_cg157 = d->_DDDpacemake2_local__Atrig11;
  801290:	e0bffc17 	ldw	r2,-16(fp)
  801294:	10c01ec3 	ldbu	r3,123(r2)
  801298:	e0bffc17 	ldw	r2,-16(fp)
  80129c:	10c04c45 	stb	r3,305(r2)
  d->_g159 = d->_g156 && !d->_cg157;
  8012a0:	e0bffc17 	ldw	r2,-16(fp)
  8012a4:	10803bc3 	ldbu	r2,239(r2)
  8012a8:	10803fcc 	andi	r2,r2,255
  8012ac:	1080201c 	xori	r2,r2,128
  8012b0:	10bfe004 	addi	r2,r2,-128
  8012b4:	10000826 	beq	r2,zero,8012d8 <logic+0x8c8>
  8012b8:	e0bffc17 	ldw	r2,-16(fp)
  8012bc:	10804c43 	ldbu	r2,305(r2)
  8012c0:	10803fcc 	andi	r2,r2,255
  8012c4:	1080201c 	xori	r2,r2,128
  8012c8:	10bfe004 	addi	r2,r2,-128
  8012cc:	1000021e 	bne	r2,zero,8012d8 <logic+0x8c8>
  8012d0:	00800044 	movi	r2,1
  8012d4:	00000106 	br	8012dc <logic+0x8cc>
  8012d8:	0005883a 	mov	r2,zero
  8012dc:	1007883a 	mov	r3,r2
  8012e0:	e0bffc17 	ldw	r2,-16(fp)
  8012e4:	10c03c85 	stb	r3,242(r2)
  d->_g158_e1 = !(d->_g162 || d->_g159);
  8012e8:	e0bffc17 	ldw	r2,-16(fp)
  8012ec:	10803d43 	ldbu	r2,245(r2)
  8012f0:	10803fcc 	andi	r2,r2,255
  8012f4:	1080201c 	xori	r2,r2,128
  8012f8:	10bfe004 	addi	r2,r2,-128
  8012fc:	1000081e 	bne	r2,zero,801320 <logic+0x910>
  801300:	e0bffc17 	ldw	r2,-16(fp)
  801304:	10803c83 	ldbu	r2,242(r2)
  801308:	10803fcc 	andi	r2,r2,255
  80130c:	1080201c 	xori	r2,r2,128
  801310:	10bfe004 	addi	r2,r2,-128
  801314:	1000021e 	bne	r2,zero,801320 <logic+0x910>
  801318:	00800044 	movi	r2,1
  80131c:	00000106 	br	801324 <logic+0x914>
  801320:	0005883a 	mov	r2,zero
  801324:	1007883a 	mov	r3,r2
  801328:	e0bffc17 	ldw	r2,-16(fp)
  80132c:	10c04fc5 	stb	r3,319(r2)
  d->_g157 = d->_g156 && d->_cg157 || d->_g160 && d->_cg161;
  801330:	e0bffc17 	ldw	r2,-16(fp)
  801334:	10803bc3 	ldbu	r2,239(r2)
  801338:	10803fcc 	andi	r2,r2,255
  80133c:	1080201c 	xori	r2,r2,128
  801340:	10bfe004 	addi	r2,r2,-128
  801344:	10000626 	beq	r2,zero,801360 <logic+0x950>
  801348:	e0bffc17 	ldw	r2,-16(fp)
  80134c:	10804c43 	ldbu	r2,305(r2)
  801350:	10803fcc 	andi	r2,r2,255
  801354:	1080201c 	xori	r2,r2,128
  801358:	10bfe004 	addi	r2,r2,-128
  80135c:	10000c1e 	bne	r2,zero,801390 <logic+0x980>
  801360:	e0bffc17 	ldw	r2,-16(fp)
  801364:	10803cc3 	ldbu	r2,243(r2)
  801368:	10803fcc 	andi	r2,r2,255
  80136c:	1080201c 	xori	r2,r2,128
  801370:	10bfe004 	addi	r2,r2,-128
  801374:	10000826 	beq	r2,zero,801398 <logic+0x988>
  801378:	e0bffc17 	ldw	r2,-16(fp)
  80137c:	10804c83 	ldbu	r2,306(r2)
  801380:	10803fcc 	andi	r2,r2,255
  801384:	1080201c 	xori	r2,r2,128
  801388:	10bfe004 	addi	r2,r2,-128
  80138c:	10000226 	beq	r2,zero,801398 <logic+0x988>
  801390:	00800044 	movi	r2,1
  801394:	00000106 	br	80139c <logic+0x98c>
  801398:	0005883a 	mov	r2,zero
  80139c:	1007883a 	mov	r3,r2
  8013a0:	e0bffc17 	ldw	r2,-16(fp)
  8013a4:	10c03c05 	stb	r3,240(r2)
  d->_g161 = d->_g154 || d->_g166 && !d->_cg166;
  8013a8:	e0bffc17 	ldw	r2,-16(fp)
  8013ac:	10803b83 	ldbu	r2,238(r2)
  8013b0:	10803fcc 	andi	r2,r2,255
  8013b4:	1080201c 	xori	r2,r2,128
  8013b8:	10bfe004 	addi	r2,r2,-128
  8013bc:	10000c1e 	bne	r2,zero,8013f0 <logic+0x9e0>
  8013c0:	e0bffc17 	ldw	r2,-16(fp)
  8013c4:	10803dc3 	ldbu	r2,247(r2)
  8013c8:	10803fcc 	andi	r2,r2,255
  8013cc:	1080201c 	xori	r2,r2,128
  8013d0:	10bfe004 	addi	r2,r2,-128
  8013d4:	10000826 	beq	r2,zero,8013f8 <logic+0x9e8>
  8013d8:	e0bffc17 	ldw	r2,-16(fp)
  8013dc:	10804cc3 	ldbu	r2,307(r2)
  8013e0:	10803fcc 	andi	r2,r2,255
  8013e4:	1080201c 	xori	r2,r2,128
  8013e8:	10bfe004 	addi	r2,r2,-128
  8013ec:	1000021e 	bne	r2,zero,8013f8 <logic+0x9e8>
  8013f0:	00800044 	movi	r2,1
  8013f4:	00000106 	br	8013fc <logic+0x9ec>
  8013f8:	0005883a 	mov	r2,zero
  8013fc:	1007883a 	mov	r3,r2
  801400:	e0bffc17 	ldw	r2,-16(fp)
  801404:	10c03d05 	stb	r3,244(r2)
  d->_g154 = !d->_g161;
  801408:	e0bffc17 	ldw	r2,-16(fp)
  80140c:	10803d03 	ldbu	r2,244(r2)
  801410:	10803fcc 	andi	r2,r2,255
  801414:	1080201c 	xori	r2,r2,128
  801418:	10bfe004 	addi	r2,r2,-128
  80141c:	1005003a 	cmpeq	r2,r2,zero
  801420:	1007883a 	mov	r3,r2
  801424:	e0bffc17 	ldw	r2,-16(fp)
  801428:	10c03b85 	stb	r3,238(r2)
  d->_g166 = (d->_g158_e1 || d->_g157) && (d->_g154 || d->_g167) && (d->_g157 || d->_g167);
  80142c:	e0bffc17 	ldw	r2,-16(fp)
  801430:	10804fc3 	ldbu	r2,319(r2)
  801434:	10803fcc 	andi	r2,r2,255
  801438:	1080201c 	xori	r2,r2,128
  80143c:	10bfe004 	addi	r2,r2,-128
  801440:	1000061e 	bne	r2,zero,80145c <logic+0xa4c>
  801444:	e0bffc17 	ldw	r2,-16(fp)
  801448:	10803c03 	ldbu	r2,240(r2)
  80144c:	10803fcc 	andi	r2,r2,255
  801450:	1080201c 	xori	r2,r2,128
  801454:	10bfe004 	addi	r2,r2,-128
  801458:	10001a26 	beq	r2,zero,8014c4 <logic+0xab4>
  80145c:	e0bffc17 	ldw	r2,-16(fp)
  801460:	10803b83 	ldbu	r2,238(r2)
  801464:	10803fcc 	andi	r2,r2,255
  801468:	1080201c 	xori	r2,r2,128
  80146c:	10bfe004 	addi	r2,r2,-128
  801470:	1000061e 	bne	r2,zero,80148c <logic+0xa7c>
  801474:	e0bffc17 	ldw	r2,-16(fp)
  801478:	10803e03 	ldbu	r2,248(r2)
  80147c:	10803fcc 	andi	r2,r2,255
  801480:	1080201c 	xori	r2,r2,128
  801484:	10bfe004 	addi	r2,r2,-128
  801488:	10000e26 	beq	r2,zero,8014c4 <logic+0xab4>
  80148c:	e0bffc17 	ldw	r2,-16(fp)
  801490:	10803c03 	ldbu	r2,240(r2)
  801494:	10803fcc 	andi	r2,r2,255
  801498:	1080201c 	xori	r2,r2,128
  80149c:	10bfe004 	addi	r2,r2,-128
  8014a0:	1000061e 	bne	r2,zero,8014bc <logic+0xaac>
  8014a4:	e0bffc17 	ldw	r2,-16(fp)
  8014a8:	10803e03 	ldbu	r2,248(r2)
  8014ac:	10803fcc 	andi	r2,r2,255
  8014b0:	1080201c 	xori	r2,r2,128
  8014b4:	10bfe004 	addi	r2,r2,-128
  8014b8:	10000226 	beq	r2,zero,8014c4 <logic+0xab4>
  8014bc:	00800044 	movi	r2,1
  8014c0:	00000106 	br	8014c8 <logic+0xab8>
  8014c4:	0005883a 	mov	r2,zero
  8014c8:	1007883a 	mov	r3,r2
  8014cc:	e0bffc17 	ldw	r2,-16(fp)
  8014d0:	10c03dc5 	stb	r3,247(r2)
  if (d->_g166) {
  8014d4:	e0bffc17 	ldw	r2,-16(fp)
  8014d8:	10803dc3 	ldbu	r2,247(r2)
  8014dc:	10803fcc 	andi	r2,r2,255
  8014e0:	1080201c 	xori	r2,r2,128
  8014e4:	10bfe004 	addi	r2,r2,-128
  8014e8:	10000226 	beq	r2,zero,8014f4 <logic+0xae4>
    d->_DDDpacemake2_local_URI_state = 0;
  8014ec:	e0bffc17 	ldw	r2,-16(fp)
  8014f0:	10001945 	stb	zero,101(r2)
  }
  d->_g167 = d->_pg134_e1;
  8014f4:	e0bffc17 	ldw	r2,-16(fp)
  8014f8:	10c052c3 	ldbu	r3,331(r2)
  8014fc:	e0bffc17 	ldw	r2,-16(fp)
  801500:	10c03e05 	stb	r3,248(r2)
  if (d->_g167) {
  801504:	e0bffc17 	ldw	r2,-16(fp)
  801508:	10803e03 	ldbu	r2,248(r2)
  80150c:	10803fcc 	andi	r2,r2,255
  801510:	1080201c 	xori	r2,r2,128
  801514:	10bfe004 	addi	r2,r2,-128
  801518:	10001226 	beq	r2,zero,801564 <logic+0xb54>
    d->AVI_counter += d->deltaT;
  80151c:	e13ffc17 	ldw	r4,-16(fp)
  801520:	20800717 	ldw	r2,28(r4)
  801524:	20c00817 	ldw	r3,32(r4)
  801528:	e1bffc17 	ldw	r6,-16(fp)
  80152c:	31001417 	ldw	r4,80(r6)
  801530:	31401517 	ldw	r5,84(r6)
  801534:	200d883a 	mov	r6,r4
  801538:	280f883a 	mov	r7,r5
  80153c:	1009883a 	mov	r4,r2
  801540:	180b883a 	mov	r5,r3
  801544:	0805ca80 	call	805ca8 <__adddf3>
  801548:	1009883a 	mov	r4,r2
  80154c:	180b883a 	mov	r5,r3
  801550:	2005883a 	mov	r2,r4
  801554:	2807883a 	mov	r3,r5
  801558:	e13ffc17 	ldw	r4,-16(fp)
  80155c:	20800715 	stw	r2,28(r4)
  801560:	20c00815 	stw	r3,32(r4)
  }
  d->_g167_e2 = d->_g28 && !d->_cg28;
  801564:	e0bffc17 	ldw	r2,-16(fp)
  801568:	10802403 	ldbu	r2,144(r2)
  80156c:	10803fcc 	andi	r2,r2,255
  801570:	1080201c 	xori	r2,r2,128
  801574:	10bfe004 	addi	r2,r2,-128
  801578:	10000826 	beq	r2,zero,80159c <logic+0xb8c>
  80157c:	e0bffc17 	ldw	r2,-16(fp)
  801580:	10804143 	ldbu	r2,261(r2)
  801584:	10803fcc 	andi	r2,r2,255
  801588:	1080201c 	xori	r2,r2,128
  80158c:	10bfe004 	addi	r2,r2,-128
  801590:	1000021e 	bne	r2,zero,80159c <logic+0xb8c>
  801594:	00800044 	movi	r2,1
  801598:	00000106 	br	8015a0 <logic+0xb90>
  80159c:	0005883a 	mov	r2,zero
  8015a0:	1007883a 	mov	r3,r2
  8015a4:	e0bffc17 	ldw	r2,-16(fp)
  8015a8:	10c05005 	stb	r3,320(r2)
  d->_cg31 = d->AVI_counter >= d->AVI_DEADLINE && d->_DDDpacemake2_local_URI_state == 1;
  8015ac:	e0bffc17 	ldw	r2,-16(fp)
  8015b0:	14000717 	ldw	r16,28(r2)
  8015b4:	14400817 	ldw	r17,32(r2)
  8015b8:	e0bffc17 	ldw	r2,-16(fp)
  8015bc:	10800017 	ldw	r2,0(r2)
  8015c0:	1009883a 	mov	r4,r2
  8015c4:	08077380 	call	807738 <__floatsidf>
  8015c8:	1009883a 	mov	r4,r2
  8015cc:	180b883a 	mov	r5,r3
  8015d0:	200d883a 	mov	r6,r4
  8015d4:	280f883a 	mov	r7,r5
  8015d8:	8009883a 	mov	r4,r16
  8015dc:	880b883a 	mov	r5,r17
  8015e0:	08065540 	call	806554 <__gedf2>
  8015e4:	10000916 	blt	r2,zero,80160c <logic+0xbfc>
  8015e8:	e0bffc17 	ldw	r2,-16(fp)
  8015ec:	10801943 	ldbu	r2,101(r2)
  8015f0:	10803fcc 	andi	r2,r2,255
  8015f4:	1080201c 	xori	r2,r2,128
  8015f8:	10bfe004 	addi	r2,r2,-128
  8015fc:	10800058 	cmpnei	r2,r2,1
  801600:	1000021e 	bne	r2,zero,80160c <logic+0xbfc>
  801604:	00800044 	movi	r2,1
  801608:	00000106 	br	801610 <logic+0xc00>
  80160c:	0005883a 	mov	r2,zero
  801610:	1007883a 	mov	r3,r2
  801614:	e0bffc17 	ldw	r2,-16(fp)
  801618:	10c04185 	stb	r3,262(r2)
  d->_g158_e1 = d->_g167_e2 && d->_cg31;
  80161c:	e0bffc17 	ldw	r2,-16(fp)
  801620:	10805003 	ldbu	r2,320(r2)
  801624:	10803fcc 	andi	r2,r2,255
  801628:	1080201c 	xori	r2,r2,128
  80162c:	10bfe004 	addi	r2,r2,-128
  801630:	10000826 	beq	r2,zero,801654 <logic+0xc44>
  801634:	e0bffc17 	ldw	r2,-16(fp)
  801638:	10804183 	ldbu	r2,262(r2)
  80163c:	10803fcc 	andi	r2,r2,255
  801640:	1080201c 	xori	r2,r2,128
  801644:	10bfe004 	addi	r2,r2,-128
  801648:	10000226 	beq	r2,zero,801654 <logic+0xc44>
  80164c:	00800044 	movi	r2,1
  801650:	00000106 	br	801658 <logic+0xc48>
  801654:	0005883a 	mov	r2,zero
  801658:	1007883a 	mov	r3,r2
  80165c:	e0bffc17 	ldw	r2,-16(fp)
  801660:	10c04fc5 	stb	r3,319(r2)
  if (d->_g158_e1) {
  801664:	e0bffc17 	ldw	r2,-16(fp)
  801668:	10804fc3 	ldbu	r2,319(r2)
  80166c:	10803fcc 	andi	r2,r2,255
  801670:	1080201c 	xori	r2,r2,128
  801674:	10bfe004 	addi	r2,r2,-128
  801678:	10000326 	beq	r2,zero,801688 <logic+0xc78>
    d->_DDDpacemake2_local__Atrig1 = 1;
  80167c:	e0bffc17 	ldw	r2,-16(fp)
  801680:	00c00044 	movi	r3,1
  801684:	10c01c45 	stb	r3,113(r2)
  }
  d->_g158 = d->_g167_e2 && !d->_cg31;
  801688:	e0bffc17 	ldw	r2,-16(fp)
  80168c:	10805003 	ldbu	r2,320(r2)
  801690:	10803fcc 	andi	r2,r2,255
  801694:	1080201c 	xori	r2,r2,128
  801698:	10bfe004 	addi	r2,r2,-128
  80169c:	10000826 	beq	r2,zero,8016c0 <logic+0xcb0>
  8016a0:	e0bffc17 	ldw	r2,-16(fp)
  8016a4:	10804183 	ldbu	r2,262(r2)
  8016a8:	10803fcc 	andi	r2,r2,255
  8016ac:	1080201c 	xori	r2,r2,128
  8016b0:	10bfe004 	addi	r2,r2,-128
  8016b4:	1000021e 	bne	r2,zero,8016c0 <logic+0xcb0>
  8016b8:	00800044 	movi	r2,1
  8016bc:	00000106 	br	8016c4 <logic+0xcb4>
  8016c0:	0005883a 	mov	r2,zero
  8016c4:	1007883a 	mov	r3,r2
  8016c8:	e0bffc17 	ldw	r2,-16(fp)
  8016cc:	10c03c45 	stb	r3,241(r2)
  d->_cg33 = d->AVI_counter >= d->AVI_DEADLINE && d->_DDDpacemake2_local_URI_state == 0;
  8016d0:	e0bffc17 	ldw	r2,-16(fp)
  8016d4:	14000717 	ldw	r16,28(r2)
  8016d8:	14400817 	ldw	r17,32(r2)
  8016dc:	e0bffc17 	ldw	r2,-16(fp)
  8016e0:	10800017 	ldw	r2,0(r2)
  8016e4:	1009883a 	mov	r4,r2
  8016e8:	08077380 	call	807738 <__floatsidf>
  8016ec:	1009883a 	mov	r4,r2
  8016f0:	180b883a 	mov	r5,r3
  8016f4:	200d883a 	mov	r6,r4
  8016f8:	280f883a 	mov	r7,r5
  8016fc:	8009883a 	mov	r4,r16
  801700:	880b883a 	mov	r5,r17
  801704:	08065540 	call	806554 <__gedf2>
  801708:	10000816 	blt	r2,zero,80172c <logic+0xd1c>
  80170c:	e0bffc17 	ldw	r2,-16(fp)
  801710:	10801943 	ldbu	r2,101(r2)
  801714:	10803fcc 	andi	r2,r2,255
  801718:	1080201c 	xori	r2,r2,128
  80171c:	10bfe004 	addi	r2,r2,-128
  801720:	1000021e 	bne	r2,zero,80172c <logic+0xd1c>
  801724:	00800044 	movi	r2,1
  801728:	00000106 	br	801730 <logic+0xd20>
  80172c:	0005883a 	mov	r2,zero
  801730:	1007883a 	mov	r3,r2
  801734:	e0bffc17 	ldw	r2,-16(fp)
  801738:	10c04105 	stb	r3,260(r2)
  d->_g28 = d->_g158 && d->_cg33;
  80173c:	e0bffc17 	ldw	r2,-16(fp)
  801740:	10803c43 	ldbu	r2,241(r2)
  801744:	10803fcc 	andi	r2,r2,255
  801748:	1080201c 	xori	r2,r2,128
  80174c:	10bfe004 	addi	r2,r2,-128
  801750:	10000826 	beq	r2,zero,801774 <logic+0xd64>
  801754:	e0bffc17 	ldw	r2,-16(fp)
  801758:	10804103 	ldbu	r2,260(r2)
  80175c:	10803fcc 	andi	r2,r2,255
  801760:	1080201c 	xori	r2,r2,128
  801764:	10bfe004 	addi	r2,r2,-128
  801768:	10000226 	beq	r2,zero,801774 <logic+0xd64>
  80176c:	00800044 	movi	r2,1
  801770:	00000106 	br	801778 <logic+0xd68>
  801774:	0005883a 	mov	r2,zero
  801778:	1007883a 	mov	r3,r2
  80177c:	e0bffc17 	ldw	r2,-16(fp)
  801780:	10c02405 	stb	r3,144(r2)
  if (d->_g28) {
  801784:	e0bffc17 	ldw	r2,-16(fp)
  801788:	10802403 	ldbu	r2,144(r2)
  80178c:	10803fcc 	andi	r2,r2,255
  801790:	1080201c 	xori	r2,r2,128
  801794:	10bfe004 	addi	r2,r2,-128
  801798:	10000326 	beq	r2,zero,8017a8 <logic+0xd98>
    d->_DDDpacemake2_local__Atrig2 = 1;
  80179c:	e0bffc17 	ldw	r2,-16(fp)
  8017a0:	00c00044 	movi	r3,1
  8017a4:	10c01c85 	stb	r3,114(r2)
  }
  d->_g31 = d->_g4 && !d->_cg4;
  8017a8:	e0bffc17 	ldw	r2,-16(fp)
  8017ac:	10801f03 	ldbu	r2,124(r2)
  8017b0:	10803fcc 	andi	r2,r2,255
  8017b4:	1080201c 	xori	r2,r2,128
  8017b8:	10bfe004 	addi	r2,r2,-128
  8017bc:	10000826 	beq	r2,zero,8017e0 <logic+0xdd0>
  8017c0:	e0bffc17 	ldw	r2,-16(fp)
  8017c4:	10803f43 	ldbu	r2,253(r2)
  8017c8:	10803fcc 	andi	r2,r2,255
  8017cc:	1080201c 	xori	r2,r2,128
  8017d0:	10bfe004 	addi	r2,r2,-128
  8017d4:	1000021e 	bne	r2,zero,8017e0 <logic+0xdd0>
  8017d8:	00800044 	movi	r2,1
  8017dc:	00000106 	br	8017e4 <logic+0xdd4>
  8017e0:	0005883a 	mov	r2,zero
  8017e4:	1007883a 	mov	r3,r2
  8017e8:	e0bffc17 	ldw	r2,-16(fp)
  8017ec:	10c024c5 	stb	r3,147(r2)
  d->_cg6 = d->_DDDpacemake2_local_real_AS || d->_DDDpacemake2_local__pre_AP_temp;
  8017f0:	e0bffc17 	ldw	r2,-16(fp)
  8017f4:	10801a83 	ldbu	r2,106(r2)
  8017f8:	10803fcc 	andi	r2,r2,255
  8017fc:	1080201c 	xori	r2,r2,128
  801800:	10bfe004 	addi	r2,r2,-128
  801804:	1000061e 	bne	r2,zero,801820 <logic+0xe10>
  801808:	e0bffc17 	ldw	r2,-16(fp)
  80180c:	10801bc3 	ldbu	r2,111(r2)
  801810:	10803fcc 	andi	r2,r2,255
  801814:	1080201c 	xori	r2,r2,128
  801818:	10bfe004 	addi	r2,r2,-128
  80181c:	10000226 	beq	r2,zero,801828 <logic+0xe18>
  801820:	00800044 	movi	r2,1
  801824:	00000106 	br	80182c <logic+0xe1c>
  801828:	0005883a 	mov	r2,zero
  80182c:	1007883a 	mov	r3,r2
  801830:	e0bffc17 	ldw	r2,-16(fp)
  801834:	10c03f05 	stb	r3,252(r2)
  d->_g4 = d->_g31 && d->_cg6;
  801838:	e0bffc17 	ldw	r2,-16(fp)
  80183c:	108024c3 	ldbu	r2,147(r2)
  801840:	10803fcc 	andi	r2,r2,255
  801844:	1080201c 	xori	r2,r2,128
  801848:	10bfe004 	addi	r2,r2,-128
  80184c:	10000826 	beq	r2,zero,801870 <logic+0xe60>
  801850:	e0bffc17 	ldw	r2,-16(fp)
  801854:	10803f03 	ldbu	r2,252(r2)
  801858:	10803fcc 	andi	r2,r2,255
  80185c:	1080201c 	xori	r2,r2,128
  801860:	10bfe004 	addi	r2,r2,-128
  801864:	10000226 	beq	r2,zero,801870 <logic+0xe60>
  801868:	00800044 	movi	r2,1
  80186c:	00000106 	br	801874 <logic+0xe64>
  801870:	0005883a 	mov	r2,zero
  801874:	1007883a 	mov	r3,r2
  801878:	e0bffc17 	ldw	r2,-16(fp)
  80187c:	10c01f05 	stb	r3,124(r2)
  if (d->_g4) {
  801880:	e0bffc17 	ldw	r2,-16(fp)
  801884:	10801f03 	ldbu	r2,124(r2)
  801888:	10803fcc 	andi	r2,r2,255
  80188c:	1080201c 	xori	r2,r2,128
  801890:	10bfe004 	addi	r2,r2,-128
  801894:	10000c26 	beq	r2,zero,8018c8 <logic+0xeb8>
    d->_DDDpacemake2_local_AVI_state = 1;
  801898:	e0bffc17 	ldw	r2,-16(fp)
  80189c:	00c00044 	movi	r3,1
  8018a0:	10c01805 	stb	r3,96(r2)
    d->AVI_counter = 0;
  8018a4:	e0bffc17 	ldw	r2,-16(fp)
  8018a8:	10000715 	stw	zero,28(r2)
  8018ac:	10000815 	stw	zero,32(r2)
    d->_DDDpacemake2_local__Atrig = 0;
  8018b0:	e0bffc17 	ldw	r2,-16(fp)
  8018b4:	10001c05 	stb	zero,112(r2)
    d->_DDDpacemake2_local__Atrig1 = 0;
  8018b8:	e0bffc17 	ldw	r2,-16(fp)
  8018bc:	10001c45 	stb	zero,113(r2)
    d->_DDDpacemake2_local__Atrig2 = 0;
  8018c0:	e0bffc17 	ldw	r2,-16(fp)
  8018c4:	10001c85 	stb	zero,114(r2)
  }
  d->_g13 = d->_pg12;
  8018c8:	e0bffc17 	ldw	r2,-16(fp)
  8018cc:	10c05303 	ldbu	r3,332(r2)
  8018d0:	e0bffc17 	ldw	r2,-16(fp)
  8018d4:	10c02105 	stb	r3,132(r2)
  d->_g16 = d->_pg15;
  8018d8:	e0bffc17 	ldw	r2,-16(fp)
  8018dc:	10c05343 	ldbu	r3,333(r2)
  8018e0:	e0bffc17 	ldw	r2,-16(fp)
  8018e4:	10c021c5 	stb	r3,135(r2)
  d->_g16 = d->_g4 || d->_g13 || d->_g16;
  8018e8:	e0bffc17 	ldw	r2,-16(fp)
  8018ec:	10801f03 	ldbu	r2,124(r2)
  8018f0:	10803fcc 	andi	r2,r2,255
  8018f4:	1080201c 	xori	r2,r2,128
  8018f8:	10bfe004 	addi	r2,r2,-128
  8018fc:	10000c1e 	bne	r2,zero,801930 <logic+0xf20>
  801900:	e0bffc17 	ldw	r2,-16(fp)
  801904:	10802103 	ldbu	r2,132(r2)
  801908:	10803fcc 	andi	r2,r2,255
  80190c:	1080201c 	xori	r2,r2,128
  801910:	10bfe004 	addi	r2,r2,-128
  801914:	1000061e 	bne	r2,zero,801930 <logic+0xf20>
  801918:	e0bffc17 	ldw	r2,-16(fp)
  80191c:	108021c3 	ldbu	r2,135(r2)
  801920:	10803fcc 	andi	r2,r2,255
  801924:	1080201c 	xori	r2,r2,128
  801928:	10bfe004 	addi	r2,r2,-128
  80192c:	10000226 	beq	r2,zero,801938 <logic+0xf28>
  801930:	00800044 	movi	r2,1
  801934:	00000106 	br	80193c <logic+0xf2c>
  801938:	0005883a 	mov	r2,zero
  80193c:	1007883a 	mov	r3,r2
  801940:	e0bffc17 	ldw	r2,-16(fp)
  801944:	10c021c5 	stb	r3,135(r2)
  d->_cg9 = d->AVI_counter < d->AVI_DEADLINE;
  801948:	e0bffc17 	ldw	r2,-16(fp)
  80194c:	14000717 	ldw	r16,28(r2)
  801950:	14400817 	ldw	r17,32(r2)
  801954:	e0bffc17 	ldw	r2,-16(fp)
  801958:	10800017 	ldw	r2,0(r2)
  80195c:	1009883a 	mov	r4,r2
  801960:	08077380 	call	807738 <__floatsidf>
  801964:	1009883a 	mov	r4,r2
  801968:	180b883a 	mov	r5,r3
  80196c:	04800044 	movi	r18,1
  801970:	200d883a 	mov	r6,r4
  801974:	280f883a 	mov	r7,r5
  801978:	8009883a 	mov	r4,r16
  80197c:	880b883a 	mov	r5,r17
  801980:	08066300 	call	806630 <__ledf2>
  801984:	10000116 	blt	r2,zero,80198c <logic+0xf7c>
  801988:	0025883a 	mov	r18,zero
  80198c:	9007883a 	mov	r3,r18
  801990:	e0bffc17 	ldw	r2,-16(fp)
  801994:	10c03f85 	stb	r3,254(r2)
  d->_g13 = d->_g16 && !d->_cg9;
  801998:	e0bffc17 	ldw	r2,-16(fp)
  80199c:	108021c3 	ldbu	r2,135(r2)
  8019a0:	10803fcc 	andi	r2,r2,255
  8019a4:	1080201c 	xori	r2,r2,128
  8019a8:	10bfe004 	addi	r2,r2,-128
  8019ac:	10000826 	beq	r2,zero,8019d0 <logic+0xfc0>
  8019b0:	e0bffc17 	ldw	r2,-16(fp)
  8019b4:	10803f83 	ldbu	r2,254(r2)
  8019b8:	10803fcc 	andi	r2,r2,255
  8019bc:	1080201c 	xori	r2,r2,128
  8019c0:	10bfe004 	addi	r2,r2,-128
  8019c4:	1000021e 	bne	r2,zero,8019d0 <logic+0xfc0>
  8019c8:	00800044 	movi	r2,1
  8019cc:	00000106 	br	8019d4 <logic+0xfc4>
  8019d0:	0005883a 	mov	r2,zero
  8019d4:	1007883a 	mov	r3,r2
  8019d8:	e0bffc17 	ldw	r2,-16(fp)
  8019dc:	10c02105 	stb	r3,132(r2)
  d->_cg14 = d->_DDDpacemake2_local__Atrig || d->_DDDpacemake2_local__Atrig1 || d->_DDDpacemake2_local__Atrig2;
  8019e0:	e0bffc17 	ldw	r2,-16(fp)
  8019e4:	10801c03 	ldbu	r2,112(r2)
  8019e8:	10803fcc 	andi	r2,r2,255
  8019ec:	1080201c 	xori	r2,r2,128
  8019f0:	10bfe004 	addi	r2,r2,-128
  8019f4:	10000c1e 	bne	r2,zero,801a28 <logic+0x1018>
  8019f8:	e0bffc17 	ldw	r2,-16(fp)
  8019fc:	10801c43 	ldbu	r2,113(r2)
  801a00:	10803fcc 	andi	r2,r2,255
  801a04:	1080201c 	xori	r2,r2,128
  801a08:	10bfe004 	addi	r2,r2,-128
  801a0c:	1000061e 	bne	r2,zero,801a28 <logic+0x1018>
  801a10:	e0bffc17 	ldw	r2,-16(fp)
  801a14:	10801c83 	ldbu	r2,114(r2)
  801a18:	10803fcc 	andi	r2,r2,255
  801a1c:	1080201c 	xori	r2,r2,128
  801a20:	10bfe004 	addi	r2,r2,-128
  801a24:	10000226 	beq	r2,zero,801a30 <logic+0x1020>
  801a28:	00800044 	movi	r2,1
  801a2c:	00000106 	br	801a34 <logic+0x1024>
  801a30:	0005883a 	mov	r2,zero
  801a34:	1007883a 	mov	r3,r2
  801a38:	e0bffc17 	ldw	r2,-16(fp)
  801a3c:	10c04005 	stb	r3,256(r2)
  d->_g15 = d->_g13 && !d->_cg14;
  801a40:	e0bffc17 	ldw	r2,-16(fp)
  801a44:	10802103 	ldbu	r2,132(r2)
  801a48:	10803fcc 	andi	r2,r2,255
  801a4c:	1080201c 	xori	r2,r2,128
  801a50:	10bfe004 	addi	r2,r2,-128
  801a54:	10000826 	beq	r2,zero,801a78 <logic+0x1068>
  801a58:	e0bffc17 	ldw	r2,-16(fp)
  801a5c:	10804003 	ldbu	r2,256(r2)
  801a60:	10803fcc 	andi	r2,r2,255
  801a64:	1080201c 	xori	r2,r2,128
  801a68:	10bfe004 	addi	r2,r2,-128
  801a6c:	1000021e 	bne	r2,zero,801a78 <logic+0x1068>
  801a70:	00800044 	movi	r2,1
  801a74:	00000106 	br	801a7c <logic+0x106c>
  801a78:	0005883a 	mov	r2,zero
  801a7c:	1007883a 	mov	r3,r2
  801a80:	e0bffc17 	ldw	r2,-16(fp)
  801a84:	10c02185 	stb	r3,134(r2)
  d->_g9 = d->_g16 && d->_cg9;
  801a88:	e0bffc17 	ldw	r2,-16(fp)
  801a8c:	108021c3 	ldbu	r2,135(r2)
  801a90:	10803fcc 	andi	r2,r2,255
  801a94:	1080201c 	xori	r2,r2,128
  801a98:	10bfe004 	addi	r2,r2,-128
  801a9c:	10000826 	beq	r2,zero,801ac0 <logic+0x10b0>
  801aa0:	e0bffc17 	ldw	r2,-16(fp)
  801aa4:	10803f83 	ldbu	r2,254(r2)
  801aa8:	10803fcc 	andi	r2,r2,255
  801aac:	1080201c 	xori	r2,r2,128
  801ab0:	10bfe004 	addi	r2,r2,-128
  801ab4:	10000226 	beq	r2,zero,801ac0 <logic+0x10b0>
  801ab8:	00800044 	movi	r2,1
  801abc:	00000106 	br	801ac4 <logic+0x10b4>
  801ac0:	0005883a 	mov	r2,zero
  801ac4:	1007883a 	mov	r3,r2
  801ac8:	e0bffc17 	ldw	r2,-16(fp)
  801acc:	10c02005 	stb	r3,128(r2)
  if (d->_g9) {
  801ad0:	e0bffc17 	ldw	r2,-16(fp)
  801ad4:	10802003 	ldbu	r2,128(r2)
  801ad8:	10803fcc 	andi	r2,r2,255
  801adc:	1080201c 	xori	r2,r2,128
  801ae0:	10bfe004 	addi	r2,r2,-128
  801ae4:	10003426 	beq	r2,zero,801bb8 <logic+0x11a8>
    d->sleepT = (d->sleepT < (d->AVI_DEADLINE - d->AVI_counter)) ? d->sleepT : (d->AVI_DEADLINE - d->AVI_counter);
  801ae8:	e0bffc17 	ldw	r2,-16(fp)
  801aec:	14001617 	ldw	r16,88(r2)
  801af0:	14401717 	ldw	r17,92(r2)
  801af4:	e0bffc17 	ldw	r2,-16(fp)
  801af8:	10800017 	ldw	r2,0(r2)
  801afc:	1009883a 	mov	r4,r2
  801b00:	08077380 	call	807738 <__floatsidf>
  801b04:	1011883a 	mov	r8,r2
  801b08:	1813883a 	mov	r9,r3
  801b0c:	e13ffc17 	ldw	r4,-16(fp)
  801b10:	20800717 	ldw	r2,28(r4)
  801b14:	20c00817 	ldw	r3,32(r4)
  801b18:	100d883a 	mov	r6,r2
  801b1c:	180f883a 	mov	r7,r3
  801b20:	4009883a 	mov	r4,r8
  801b24:	480b883a 	mov	r5,r9
  801b28:	0806e3c0 	call	806e3c <__subdf3>
  801b2c:	1009883a 	mov	r4,r2
  801b30:	180b883a 	mov	r5,r3
  801b34:	2005883a 	mov	r2,r4
  801b38:	2807883a 	mov	r3,r5
  801b3c:	100d883a 	mov	r6,r2
  801b40:	180f883a 	mov	r7,r3
  801b44:	8009883a 	mov	r4,r16
  801b48:	880b883a 	mov	r5,r17
  801b4c:	08066300 	call	806630 <__ledf2>
  801b50:	1000040e 	bge	r2,zero,801b64 <logic+0x1154>
  801b54:	e13ffc17 	ldw	r4,-16(fp)
  801b58:	20801617 	ldw	r2,88(r4)
  801b5c:	20c01717 	ldw	r3,92(r4)
  801b60:	00001206 	br	801bac <logic+0x119c>
  801b64:	e0bffc17 	ldw	r2,-16(fp)
  801b68:	10800017 	ldw	r2,0(r2)
  801b6c:	1009883a 	mov	r4,r2
  801b70:	08077380 	call	807738 <__floatsidf>
  801b74:	1011883a 	mov	r8,r2
  801b78:	1813883a 	mov	r9,r3
  801b7c:	e13ffc17 	ldw	r4,-16(fp)
  801b80:	20800717 	ldw	r2,28(r4)
  801b84:	20c00817 	ldw	r3,32(r4)
  801b88:	100d883a 	mov	r6,r2
  801b8c:	180f883a 	mov	r7,r3
  801b90:	4009883a 	mov	r4,r8
  801b94:	480b883a 	mov	r5,r9
  801b98:	0806e3c0 	call	806e3c <__subdf3>
  801b9c:	1009883a 	mov	r4,r2
  801ba0:	180b883a 	mov	r5,r3
  801ba4:	2005883a 	mov	r2,r4
  801ba8:	2807883a 	mov	r3,r5
  801bac:	e13ffc17 	ldw	r4,-16(fp)
  801bb0:	20801615 	stw	r2,88(r4)
  801bb4:	20c01715 	stw	r3,92(r4)
  }
  d->_cg10 = d->_DDDpacemake2_local__Atrig || d->_DDDpacemake2_local__Atrig1 || d->_DDDpacemake2_local__Atrig2;
  801bb8:	e0bffc17 	ldw	r2,-16(fp)
  801bbc:	10801c03 	ldbu	r2,112(r2)
  801bc0:	10803fcc 	andi	r2,r2,255
  801bc4:	1080201c 	xori	r2,r2,128
  801bc8:	10bfe004 	addi	r2,r2,-128
  801bcc:	10000c1e 	bne	r2,zero,801c00 <logic+0x11f0>
  801bd0:	e0bffc17 	ldw	r2,-16(fp)
  801bd4:	10801c43 	ldbu	r2,113(r2)
  801bd8:	10803fcc 	andi	r2,r2,255
  801bdc:	1080201c 	xori	r2,r2,128
  801be0:	10bfe004 	addi	r2,r2,-128
  801be4:	1000061e 	bne	r2,zero,801c00 <logic+0x11f0>
  801be8:	e0bffc17 	ldw	r2,-16(fp)
  801bec:	10801c83 	ldbu	r2,114(r2)
  801bf0:	10803fcc 	andi	r2,r2,255
  801bf4:	1080201c 	xori	r2,r2,128
  801bf8:	10bfe004 	addi	r2,r2,-128
  801bfc:	10000226 	beq	r2,zero,801c08 <logic+0x11f8>
  801c00:	00800044 	movi	r2,1
  801c04:	00000106 	br	801c0c <logic+0x11fc>
  801c08:	0005883a 	mov	r2,zero
  801c0c:	1007883a 	mov	r3,r2
  801c10:	e0bffc17 	ldw	r2,-16(fp)
  801c14:	10c03fc5 	stb	r3,255(r2)
  d->_g12 = d->_g9 && !d->_cg10;
  801c18:	e0bffc17 	ldw	r2,-16(fp)
  801c1c:	10802003 	ldbu	r2,128(r2)
  801c20:	10803fcc 	andi	r2,r2,255
  801c24:	1080201c 	xori	r2,r2,128
  801c28:	10bfe004 	addi	r2,r2,-128
  801c2c:	10000826 	beq	r2,zero,801c50 <logic+0x1240>
  801c30:	e0bffc17 	ldw	r2,-16(fp)
  801c34:	10803fc3 	ldbu	r2,255(r2)
  801c38:	10803fcc 	andi	r2,r2,255
  801c3c:	1080201c 	xori	r2,r2,128
  801c40:	10bfe004 	addi	r2,r2,-128
  801c44:	1000021e 	bne	r2,zero,801c50 <logic+0x1240>
  801c48:	00800044 	movi	r2,1
  801c4c:	00000106 	br	801c54 <logic+0x1244>
  801c50:	0005883a 	mov	r2,zero
  801c54:	1007883a 	mov	r3,r2
  801c58:	e0bffc17 	ldw	r2,-16(fp)
  801c5c:	10c020c5 	stb	r3,131(r2)
  d->_g11_e1 = !(d->_g15 || d->_g12);
  801c60:	e0bffc17 	ldw	r2,-16(fp)
  801c64:	10802183 	ldbu	r2,134(r2)
  801c68:	10803fcc 	andi	r2,r2,255
  801c6c:	1080201c 	xori	r2,r2,128
  801c70:	10bfe004 	addi	r2,r2,-128
  801c74:	1000081e 	bne	r2,zero,801c98 <logic+0x1288>
  801c78:	e0bffc17 	ldw	r2,-16(fp)
  801c7c:	108020c3 	ldbu	r2,131(r2)
  801c80:	10803fcc 	andi	r2,r2,255
  801c84:	1080201c 	xori	r2,r2,128
  801c88:	10bfe004 	addi	r2,r2,-128
  801c8c:	1000021e 	bne	r2,zero,801c98 <logic+0x1288>
  801c90:	00800044 	movi	r2,1
  801c94:	00000106 	br	801c9c <logic+0x128c>
  801c98:	0005883a 	mov	r2,zero
  801c9c:	1007883a 	mov	r3,r2
  801ca0:	e0bffc17 	ldw	r2,-16(fp)
  801ca4:	10c04d05 	stb	r3,308(r2)
  d->_g14 = d->_g9 && d->_cg10 || d->_g13 && d->_cg14;
  801ca8:	e0bffc17 	ldw	r2,-16(fp)
  801cac:	10802003 	ldbu	r2,128(r2)
  801cb0:	10803fcc 	andi	r2,r2,255
  801cb4:	1080201c 	xori	r2,r2,128
  801cb8:	10bfe004 	addi	r2,r2,-128
  801cbc:	10000626 	beq	r2,zero,801cd8 <logic+0x12c8>
  801cc0:	e0bffc17 	ldw	r2,-16(fp)
  801cc4:	10803fc3 	ldbu	r2,255(r2)
  801cc8:	10803fcc 	andi	r2,r2,255
  801ccc:	1080201c 	xori	r2,r2,128
  801cd0:	10bfe004 	addi	r2,r2,-128
  801cd4:	10000c1e 	bne	r2,zero,801d08 <logic+0x12f8>
  801cd8:	e0bffc17 	ldw	r2,-16(fp)
  801cdc:	10802103 	ldbu	r2,132(r2)
  801ce0:	10803fcc 	andi	r2,r2,255
  801ce4:	1080201c 	xori	r2,r2,128
  801ce8:	10bfe004 	addi	r2,r2,-128
  801cec:	10000826 	beq	r2,zero,801d10 <logic+0x1300>
  801cf0:	e0bffc17 	ldw	r2,-16(fp)
  801cf4:	10804003 	ldbu	r2,256(r2)
  801cf8:	10803fcc 	andi	r2,r2,255
  801cfc:	1080201c 	xori	r2,r2,128
  801d00:	10bfe004 	addi	r2,r2,-128
  801d04:	10000226 	beq	r2,zero,801d10 <logic+0x1300>
  801d08:	00800044 	movi	r2,1
  801d0c:	00000106 	br	801d14 <logic+0x1304>
  801d10:	0005883a 	mov	r2,zero
  801d14:	1007883a 	mov	r3,r2
  801d18:	e0bffc17 	ldw	r2,-16(fp)
  801d1c:	10c02145 	stb	r3,133(r2)
  d->_g10 = d->_pg21;
  801d20:	e0bffc17 	ldw	r2,-16(fp)
  801d24:	10c05383 	ldbu	r3,334(r2)
  801d28:	e0bffc17 	ldw	r2,-16(fp)
  801d2c:	10c02045 	stb	r3,129(r2)
  d->_g25 = d->_pg24;
  801d30:	e0bffc17 	ldw	r2,-16(fp)
  801d34:	10c053c3 	ldbu	r3,335(r2)
  801d38:	e0bffc17 	ldw	r2,-16(fp)
  801d3c:	10c023c5 	stb	r3,143(r2)
  d->_g22 = d->_g4 || d->_g10 || d->_g25;
  801d40:	e0bffc17 	ldw	r2,-16(fp)
  801d44:	10801f03 	ldbu	r2,124(r2)
  801d48:	10803fcc 	andi	r2,r2,255
  801d4c:	1080201c 	xori	r2,r2,128
  801d50:	10bfe004 	addi	r2,r2,-128
  801d54:	10000c1e 	bne	r2,zero,801d88 <logic+0x1378>
  801d58:	e0bffc17 	ldw	r2,-16(fp)
  801d5c:	10802043 	ldbu	r2,129(r2)
  801d60:	10803fcc 	andi	r2,r2,255
  801d64:	1080201c 	xori	r2,r2,128
  801d68:	10bfe004 	addi	r2,r2,-128
  801d6c:	1000061e 	bne	r2,zero,801d88 <logic+0x1378>
  801d70:	e0bffc17 	ldw	r2,-16(fp)
  801d74:	108023c3 	ldbu	r2,143(r2)
  801d78:	10803fcc 	andi	r2,r2,255
  801d7c:	1080201c 	xori	r2,r2,128
  801d80:	10bfe004 	addi	r2,r2,-128
  801d84:	10000226 	beq	r2,zero,801d90 <logic+0x1380>
  801d88:	00800044 	movi	r2,1
  801d8c:	00000106 	br	801d94 <logic+0x1384>
  801d90:	0005883a 	mov	r2,zero
  801d94:	1007883a 	mov	r3,r2
  801d98:	e0bffc17 	ldw	r2,-16(fp)
  801d9c:	10c02305 	stb	r3,140(r2)
  d->_cg18 = d->AVI_counter < d->AVI_DEADLINE;
  801da0:	e0bffc17 	ldw	r2,-16(fp)
  801da4:	14000717 	ldw	r16,28(r2)
  801da8:	14400817 	ldw	r17,32(r2)
  801dac:	e0bffc17 	ldw	r2,-16(fp)
  801db0:	10800017 	ldw	r2,0(r2)
  801db4:	1009883a 	mov	r4,r2
  801db8:	08077380 	call	807738 <__floatsidf>
  801dbc:	1009883a 	mov	r4,r2
  801dc0:	180b883a 	mov	r5,r3
  801dc4:	04800044 	movi	r18,1
  801dc8:	200d883a 	mov	r6,r4
  801dcc:	280f883a 	mov	r7,r5
  801dd0:	8009883a 	mov	r4,r16
  801dd4:	880b883a 	mov	r5,r17
  801dd8:	08066300 	call	806630 <__ledf2>
  801ddc:	10000116 	blt	r2,zero,801de4 <logic+0x13d4>
  801de0:	0025883a 	mov	r18,zero
  801de4:	9007883a 	mov	r3,r18
  801de8:	e0bffc17 	ldw	r2,-16(fp)
  801dec:	10c04045 	stb	r3,257(r2)
  d->_g25 = d->_g22 && !d->_cg18;
  801df0:	e0bffc17 	ldw	r2,-16(fp)
  801df4:	10802303 	ldbu	r2,140(r2)
  801df8:	10803fcc 	andi	r2,r2,255
  801dfc:	1080201c 	xori	r2,r2,128
  801e00:	10bfe004 	addi	r2,r2,-128
  801e04:	10000826 	beq	r2,zero,801e28 <logic+0x1418>
  801e08:	e0bffc17 	ldw	r2,-16(fp)
  801e0c:	10804043 	ldbu	r2,257(r2)
  801e10:	10803fcc 	andi	r2,r2,255
  801e14:	1080201c 	xori	r2,r2,128
  801e18:	10bfe004 	addi	r2,r2,-128
  801e1c:	1000021e 	bne	r2,zero,801e28 <logic+0x1418>
  801e20:	00800044 	movi	r2,1
  801e24:	00000106 	br	801e2c <logic+0x141c>
  801e28:	0005883a 	mov	r2,zero
  801e2c:	1007883a 	mov	r3,r2
  801e30:	e0bffc17 	ldw	r2,-16(fp)
  801e34:	10c023c5 	stb	r3,143(r2)
  d->_cg23 = d->_DDDpacemake2_local__Atrig || d->_DDDpacemake2_local__Atrig1 || d->_DDDpacemake2_local__Atrig2;
  801e38:	e0bffc17 	ldw	r2,-16(fp)
  801e3c:	10801c03 	ldbu	r2,112(r2)
  801e40:	10803fcc 	andi	r2,r2,255
  801e44:	1080201c 	xori	r2,r2,128
  801e48:	10bfe004 	addi	r2,r2,-128
  801e4c:	10000c1e 	bne	r2,zero,801e80 <logic+0x1470>
  801e50:	e0bffc17 	ldw	r2,-16(fp)
  801e54:	10801c43 	ldbu	r2,113(r2)
  801e58:	10803fcc 	andi	r2,r2,255
  801e5c:	1080201c 	xori	r2,r2,128
  801e60:	10bfe004 	addi	r2,r2,-128
  801e64:	1000061e 	bne	r2,zero,801e80 <logic+0x1470>
  801e68:	e0bffc17 	ldw	r2,-16(fp)
  801e6c:	10801c83 	ldbu	r2,114(r2)
  801e70:	10803fcc 	andi	r2,r2,255
  801e74:	1080201c 	xori	r2,r2,128
  801e78:	10bfe004 	addi	r2,r2,-128
  801e7c:	10000226 	beq	r2,zero,801e88 <logic+0x1478>
  801e80:	00800044 	movi	r2,1
  801e84:	00000106 	br	801e8c <logic+0x147c>
  801e88:	0005883a 	mov	r2,zero
  801e8c:	1007883a 	mov	r3,r2
  801e90:	e0bffc17 	ldw	r2,-16(fp)
  801e94:	10c040c5 	stb	r3,259(r2)
  d->_g24 = d->_g25 && !d->_cg23;
  801e98:	e0bffc17 	ldw	r2,-16(fp)
  801e9c:	108023c3 	ldbu	r2,143(r2)
  801ea0:	10803fcc 	andi	r2,r2,255
  801ea4:	1080201c 	xori	r2,r2,128
  801ea8:	10bfe004 	addi	r2,r2,-128
  801eac:	10000826 	beq	r2,zero,801ed0 <logic+0x14c0>
  801eb0:	e0bffc17 	ldw	r2,-16(fp)
  801eb4:	108040c3 	ldbu	r2,259(r2)
  801eb8:	10803fcc 	andi	r2,r2,255
  801ebc:	1080201c 	xori	r2,r2,128
  801ec0:	10bfe004 	addi	r2,r2,-128
  801ec4:	1000021e 	bne	r2,zero,801ed0 <logic+0x14c0>
  801ec8:	00800044 	movi	r2,1
  801ecc:	00000106 	br	801ed4 <logic+0x14c4>
  801ed0:	0005883a 	mov	r2,zero
  801ed4:	1007883a 	mov	r3,r2
  801ed8:	e0bffc17 	ldw	r2,-16(fp)
  801edc:	10c02385 	stb	r3,142(r2)
  d->_g18 = d->_g22 && d->_cg18;
  801ee0:	e0bffc17 	ldw	r2,-16(fp)
  801ee4:	10802303 	ldbu	r2,140(r2)
  801ee8:	10803fcc 	andi	r2,r2,255
  801eec:	1080201c 	xori	r2,r2,128
  801ef0:	10bfe004 	addi	r2,r2,-128
  801ef4:	10000826 	beq	r2,zero,801f18 <logic+0x1508>
  801ef8:	e0bffc17 	ldw	r2,-16(fp)
  801efc:	10804043 	ldbu	r2,257(r2)
  801f00:	10803fcc 	andi	r2,r2,255
  801f04:	1080201c 	xori	r2,r2,128
  801f08:	10bfe004 	addi	r2,r2,-128
  801f0c:	10000226 	beq	r2,zero,801f18 <logic+0x1508>
  801f10:	00800044 	movi	r2,1
  801f14:	00000106 	br	801f1c <logic+0x150c>
  801f18:	0005883a 	mov	r2,zero
  801f1c:	1007883a 	mov	r3,r2
  801f20:	e0bffc17 	ldw	r2,-16(fp)
  801f24:	10c02205 	stb	r3,136(r2)
  if (d->_g18) {
  801f28:	e0bffc17 	ldw	r2,-16(fp)
  801f2c:	10802203 	ldbu	r2,136(r2)
  801f30:	10803fcc 	andi	r2,r2,255
  801f34:	1080201c 	xori	r2,r2,128
  801f38:	10bfe004 	addi	r2,r2,-128
  801f3c:	10003426 	beq	r2,zero,802010 <logic+0x1600>
    d->sleepT = (d->sleepT < (d->AVI_DEADLINE - d->AVI_counter)) ? d->sleepT : (d->AVI_DEADLINE - d->AVI_counter);
  801f40:	e0bffc17 	ldw	r2,-16(fp)
  801f44:	14001617 	ldw	r16,88(r2)
  801f48:	14401717 	ldw	r17,92(r2)
  801f4c:	e0bffc17 	ldw	r2,-16(fp)
  801f50:	10800017 	ldw	r2,0(r2)
  801f54:	1009883a 	mov	r4,r2
  801f58:	08077380 	call	807738 <__floatsidf>
  801f5c:	1011883a 	mov	r8,r2
  801f60:	1813883a 	mov	r9,r3
  801f64:	e13ffc17 	ldw	r4,-16(fp)
  801f68:	20800717 	ldw	r2,28(r4)
  801f6c:	20c00817 	ldw	r3,32(r4)
  801f70:	100d883a 	mov	r6,r2
  801f74:	180f883a 	mov	r7,r3
  801f78:	4009883a 	mov	r4,r8
  801f7c:	480b883a 	mov	r5,r9
  801f80:	0806e3c0 	call	806e3c <__subdf3>
  801f84:	1009883a 	mov	r4,r2
  801f88:	180b883a 	mov	r5,r3
  801f8c:	2005883a 	mov	r2,r4
  801f90:	2807883a 	mov	r3,r5
  801f94:	100d883a 	mov	r6,r2
  801f98:	180f883a 	mov	r7,r3
  801f9c:	8009883a 	mov	r4,r16
  801fa0:	880b883a 	mov	r5,r17
  801fa4:	08066300 	call	806630 <__ledf2>
  801fa8:	1000040e 	bge	r2,zero,801fbc <logic+0x15ac>
  801fac:	e13ffc17 	ldw	r4,-16(fp)
  801fb0:	20801617 	ldw	r2,88(r4)
  801fb4:	20c01717 	ldw	r3,92(r4)
  801fb8:	00001206 	br	802004 <logic+0x15f4>
  801fbc:	e0bffc17 	ldw	r2,-16(fp)
  801fc0:	10800017 	ldw	r2,0(r2)
  801fc4:	1009883a 	mov	r4,r2
  801fc8:	08077380 	call	807738 <__floatsidf>
  801fcc:	1011883a 	mov	r8,r2
  801fd0:	1813883a 	mov	r9,r3
  801fd4:	e13ffc17 	ldw	r4,-16(fp)
  801fd8:	20800717 	ldw	r2,28(r4)
  801fdc:	20c00817 	ldw	r3,32(r4)
  801fe0:	100d883a 	mov	r6,r2
  801fe4:	180f883a 	mov	r7,r3
  801fe8:	4009883a 	mov	r4,r8
  801fec:	480b883a 	mov	r5,r9
  801ff0:	0806e3c0 	call	806e3c <__subdf3>
  801ff4:	1009883a 	mov	r4,r2
  801ff8:	180b883a 	mov	r5,r3
  801ffc:	2005883a 	mov	r2,r4
  802000:	2807883a 	mov	r3,r5
  802004:	e13ffc17 	ldw	r4,-16(fp)
  802008:	20801615 	stw	r2,88(r4)
  80200c:	20c01715 	stw	r3,92(r4)
  }
  d->_cg19 = d->_DDDpacemake2_local__Atrig || d->_DDDpacemake2_local__Atrig1 || d->_DDDpacemake2_local__Atrig2;
  802010:	e0bffc17 	ldw	r2,-16(fp)
  802014:	10801c03 	ldbu	r2,112(r2)
  802018:	10803fcc 	andi	r2,r2,255
  80201c:	1080201c 	xori	r2,r2,128
  802020:	10bfe004 	addi	r2,r2,-128
  802024:	10000c1e 	bne	r2,zero,802058 <logic+0x1648>
  802028:	e0bffc17 	ldw	r2,-16(fp)
  80202c:	10801c43 	ldbu	r2,113(r2)
  802030:	10803fcc 	andi	r2,r2,255
  802034:	1080201c 	xori	r2,r2,128
  802038:	10bfe004 	addi	r2,r2,-128
  80203c:	1000061e 	bne	r2,zero,802058 <logic+0x1648>
  802040:	e0bffc17 	ldw	r2,-16(fp)
  802044:	10801c83 	ldbu	r2,114(r2)
  802048:	10803fcc 	andi	r2,r2,255
  80204c:	1080201c 	xori	r2,r2,128
  802050:	10bfe004 	addi	r2,r2,-128
  802054:	10000226 	beq	r2,zero,802060 <logic+0x1650>
  802058:	00800044 	movi	r2,1
  80205c:	00000106 	br	802064 <logic+0x1654>
  802060:	0005883a 	mov	r2,zero
  802064:	1007883a 	mov	r3,r2
  802068:	e0bffc17 	ldw	r2,-16(fp)
  80206c:	10c04085 	stb	r3,258(r2)
  d->_g21 = d->_g18 && !d->_cg19;
  802070:	e0bffc17 	ldw	r2,-16(fp)
  802074:	10802203 	ldbu	r2,136(r2)
  802078:	10803fcc 	andi	r2,r2,255
  80207c:	1080201c 	xori	r2,r2,128
  802080:	10bfe004 	addi	r2,r2,-128
  802084:	10000826 	beq	r2,zero,8020a8 <logic+0x1698>
  802088:	e0bffc17 	ldw	r2,-16(fp)
  80208c:	10804083 	ldbu	r2,258(r2)
  802090:	10803fcc 	andi	r2,r2,255
  802094:	1080201c 	xori	r2,r2,128
  802098:	10bfe004 	addi	r2,r2,-128
  80209c:	1000021e 	bne	r2,zero,8020a8 <logic+0x1698>
  8020a0:	00800044 	movi	r2,1
  8020a4:	00000106 	br	8020ac <logic+0x169c>
  8020a8:	0005883a 	mov	r2,zero
  8020ac:	1007883a 	mov	r3,r2
  8020b0:	e0bffc17 	ldw	r2,-16(fp)
  8020b4:	10c022c5 	stb	r3,139(r2)
  d->_g20_e2 = !(d->_g24 || d->_g21);
  8020b8:	e0bffc17 	ldw	r2,-16(fp)
  8020bc:	10802383 	ldbu	r2,142(r2)
  8020c0:	10803fcc 	andi	r2,r2,255
  8020c4:	1080201c 	xori	r2,r2,128
  8020c8:	10bfe004 	addi	r2,r2,-128
  8020cc:	1000081e 	bne	r2,zero,8020f0 <logic+0x16e0>
  8020d0:	e0bffc17 	ldw	r2,-16(fp)
  8020d4:	108022c3 	ldbu	r2,139(r2)
  8020d8:	10803fcc 	andi	r2,r2,255
  8020dc:	1080201c 	xori	r2,r2,128
  8020e0:	10bfe004 	addi	r2,r2,-128
  8020e4:	1000021e 	bne	r2,zero,8020f0 <logic+0x16e0>
  8020e8:	00800044 	movi	r2,1
  8020ec:	00000106 	br	8020f4 <logic+0x16e4>
  8020f0:	0005883a 	mov	r2,zero
  8020f4:	1007883a 	mov	r3,r2
  8020f8:	e0bffc17 	ldw	r2,-16(fp)
  8020fc:	10c04d45 	stb	r3,309(r2)
  d->_g19 = d->_g18 && d->_cg19 || d->_g25 && d->_cg23;
  802100:	e0bffc17 	ldw	r2,-16(fp)
  802104:	10802203 	ldbu	r2,136(r2)
  802108:	10803fcc 	andi	r2,r2,255
  80210c:	1080201c 	xori	r2,r2,128
  802110:	10bfe004 	addi	r2,r2,-128
  802114:	10000626 	beq	r2,zero,802130 <logic+0x1720>
  802118:	e0bffc17 	ldw	r2,-16(fp)
  80211c:	10804083 	ldbu	r2,258(r2)
  802120:	10803fcc 	andi	r2,r2,255
  802124:	1080201c 	xori	r2,r2,128
  802128:	10bfe004 	addi	r2,r2,-128
  80212c:	10000c1e 	bne	r2,zero,802160 <logic+0x1750>
  802130:	e0bffc17 	ldw	r2,-16(fp)
  802134:	108023c3 	ldbu	r2,143(r2)
  802138:	10803fcc 	andi	r2,r2,255
  80213c:	1080201c 	xori	r2,r2,128
  802140:	10bfe004 	addi	r2,r2,-128
  802144:	10000826 	beq	r2,zero,802168 <logic+0x1758>
  802148:	e0bffc17 	ldw	r2,-16(fp)
  80214c:	108040c3 	ldbu	r2,259(r2)
  802150:	10803fcc 	andi	r2,r2,255
  802154:	1080201c 	xori	r2,r2,128
  802158:	10bfe004 	addi	r2,r2,-128
  80215c:	10000226 	beq	r2,zero,802168 <logic+0x1758>
  802160:	00800044 	movi	r2,1
  802164:	00000106 	br	80216c <logic+0x175c>
  802168:	0005883a 	mov	r2,zero
  80216c:	1007883a 	mov	r3,r2
  802170:	e0bffc17 	ldw	r2,-16(fp)
  802174:	10c02245 	stb	r3,137(r2)
  d->_g23 = d->_g4 || d->_g158 && !d->_cg33;
  802178:	e0bffc17 	ldw	r2,-16(fp)
  80217c:	10801f03 	ldbu	r2,124(r2)
  802180:	10803fcc 	andi	r2,r2,255
  802184:	1080201c 	xori	r2,r2,128
  802188:	10bfe004 	addi	r2,r2,-128
  80218c:	10000c1e 	bne	r2,zero,8021c0 <logic+0x17b0>
  802190:	e0bffc17 	ldw	r2,-16(fp)
  802194:	10803c43 	ldbu	r2,241(r2)
  802198:	10803fcc 	andi	r2,r2,255
  80219c:	1080201c 	xori	r2,r2,128
  8021a0:	10bfe004 	addi	r2,r2,-128
  8021a4:	10000826 	beq	r2,zero,8021c8 <logic+0x17b8>
  8021a8:	e0bffc17 	ldw	r2,-16(fp)
  8021ac:	10804103 	ldbu	r2,260(r2)
  8021b0:	10803fcc 	andi	r2,r2,255
  8021b4:	1080201c 	xori	r2,r2,128
  8021b8:	10bfe004 	addi	r2,r2,-128
  8021bc:	1000021e 	bne	r2,zero,8021c8 <logic+0x17b8>
  8021c0:	00800044 	movi	r2,1
  8021c4:	00000106 	br	8021cc <logic+0x17bc>
  8021c8:	0005883a 	mov	r2,zero
  8021cc:	1007883a 	mov	r3,r2
  8021d0:	e0bffc17 	ldw	r2,-16(fp)
  8021d4:	10c02345 	stb	r3,141(r2)
  d->_g33 = !d->_g23;
  8021d8:	e0bffc17 	ldw	r2,-16(fp)
  8021dc:	10802343 	ldbu	r2,141(r2)
  8021e0:	10803fcc 	andi	r2,r2,255
  8021e4:	1080201c 	xori	r2,r2,128
  8021e8:	10bfe004 	addi	r2,r2,-128
  8021ec:	1005003a 	cmpeq	r2,r2,zero
  8021f0:	1007883a 	mov	r3,r2
  8021f4:	e0bffc17 	ldw	r2,-16(fp)
  8021f8:	10c02545 	stb	r3,149(r2)
  d->_g7 = d->_g29 || d->_g158_e1 || d->_g28;
  8021fc:	e0bffc17 	ldw	r2,-16(fp)
  802200:	10802443 	ldbu	r2,145(r2)
  802204:	10803fcc 	andi	r2,r2,255
  802208:	1080201c 	xori	r2,r2,128
  80220c:	10bfe004 	addi	r2,r2,-128
  802210:	10000c1e 	bne	r2,zero,802244 <logic+0x1834>
  802214:	e0bffc17 	ldw	r2,-16(fp)
  802218:	10804fc3 	ldbu	r2,319(r2)
  80221c:	10803fcc 	andi	r2,r2,255
  802220:	1080201c 	xori	r2,r2,128
  802224:	10bfe004 	addi	r2,r2,-128
  802228:	1000061e 	bne	r2,zero,802244 <logic+0x1834>
  80222c:	e0bffc17 	ldw	r2,-16(fp)
  802230:	10802403 	ldbu	r2,144(r2)
  802234:	10803fcc 	andi	r2,r2,255
  802238:	1080201c 	xori	r2,r2,128
  80223c:	10bfe004 	addi	r2,r2,-128
  802240:	10000226 	beq	r2,zero,80224c <logic+0x183c>
  802244:	00800044 	movi	r2,1
  802248:	00000106 	br	802250 <logic+0x1840>
  80224c:	0005883a 	mov	r2,zero
  802250:	1007883a 	mov	r3,r2
  802254:	e0bffc17 	ldw	r2,-16(fp)
  802258:	10c01fc5 	stb	r3,127(r2)
  d->_g34 = (d->_g11_e1 || d->_g14) && (d->_g20_e2 || d->_g19) && (d->_g33 || d->_g7) && (d->_g14 || d->_g19 || d->_g7);
  80225c:	e0bffc17 	ldw	r2,-16(fp)
  802260:	10804d03 	ldbu	r2,308(r2)
  802264:	10803fcc 	andi	r2,r2,255
  802268:	1080201c 	xori	r2,r2,128
  80226c:	10bfe004 	addi	r2,r2,-128
  802270:	1000061e 	bne	r2,zero,80228c <logic+0x187c>
  802274:	e0bffc17 	ldw	r2,-16(fp)
  802278:	10802143 	ldbu	r2,133(r2)
  80227c:	10803fcc 	andi	r2,r2,255
  802280:	1080201c 	xori	r2,r2,128
  802284:	10bfe004 	addi	r2,r2,-128
  802288:	10002c26 	beq	r2,zero,80233c <logic+0x192c>
  80228c:	e0bffc17 	ldw	r2,-16(fp)
  802290:	10804d43 	ldbu	r2,309(r2)
  802294:	10803fcc 	andi	r2,r2,255
  802298:	1080201c 	xori	r2,r2,128
  80229c:	10bfe004 	addi	r2,r2,-128
  8022a0:	1000061e 	bne	r2,zero,8022bc <logic+0x18ac>
  8022a4:	e0bffc17 	ldw	r2,-16(fp)
  8022a8:	10802243 	ldbu	r2,137(r2)
  8022ac:	10803fcc 	andi	r2,r2,255
  8022b0:	1080201c 	xori	r2,r2,128
  8022b4:	10bfe004 	addi	r2,r2,-128
  8022b8:	10002026 	beq	r2,zero,80233c <logic+0x192c>
  8022bc:	e0bffc17 	ldw	r2,-16(fp)
  8022c0:	10802543 	ldbu	r2,149(r2)
  8022c4:	10803fcc 	andi	r2,r2,255
  8022c8:	1080201c 	xori	r2,r2,128
  8022cc:	10bfe004 	addi	r2,r2,-128
  8022d0:	1000061e 	bne	r2,zero,8022ec <logic+0x18dc>
  8022d4:	e0bffc17 	ldw	r2,-16(fp)
  8022d8:	10801fc3 	ldbu	r2,127(r2)
  8022dc:	10803fcc 	andi	r2,r2,255
  8022e0:	1080201c 	xori	r2,r2,128
  8022e4:	10bfe004 	addi	r2,r2,-128
  8022e8:	10001426 	beq	r2,zero,80233c <logic+0x192c>
  8022ec:	e0bffc17 	ldw	r2,-16(fp)
  8022f0:	10802143 	ldbu	r2,133(r2)
  8022f4:	10803fcc 	andi	r2,r2,255
  8022f8:	1080201c 	xori	r2,r2,128
  8022fc:	10bfe004 	addi	r2,r2,-128
  802300:	10000c1e 	bne	r2,zero,802334 <logic+0x1924>
  802304:	e0bffc17 	ldw	r2,-16(fp)
  802308:	10802243 	ldbu	r2,137(r2)
  80230c:	10803fcc 	andi	r2,r2,255
  802310:	1080201c 	xori	r2,r2,128
  802314:	10bfe004 	addi	r2,r2,-128
  802318:	1000061e 	bne	r2,zero,802334 <logic+0x1924>
  80231c:	e0bffc17 	ldw	r2,-16(fp)
  802320:	10801fc3 	ldbu	r2,127(r2)
  802324:	10803fcc 	andi	r2,r2,255
  802328:	1080201c 	xori	r2,r2,128
  80232c:	10bfe004 	addi	r2,r2,-128
  802330:	10000226 	beq	r2,zero,80233c <logic+0x192c>
  802334:	00800044 	movi	r2,1
  802338:	00000106 	br	802340 <logic+0x1930>
  80233c:	0005883a 	mov	r2,zero
  802340:	1007883a 	mov	r3,r2
  802344:	e0bffc17 	ldw	r2,-16(fp)
  802348:	10c02585 	stb	r3,150(r2)
  d->_cg35 = d->_DDDpacemake2_local__Atrig;
  80234c:	e0bffc17 	ldw	r2,-16(fp)
  802350:	10c01c03 	ldbu	r3,112(r2)
  802354:	e0bffc17 	ldw	r2,-16(fp)
  802358:	10c041c5 	stb	r3,263(r2)
  d->_g29 = d->_g34 && d->_cg35;
  80235c:	e0bffc17 	ldw	r2,-16(fp)
  802360:	10802583 	ldbu	r2,150(r2)
  802364:	10803fcc 	andi	r2,r2,255
  802368:	1080201c 	xori	r2,r2,128
  80236c:	10bfe004 	addi	r2,r2,-128
  802370:	10000826 	beq	r2,zero,802394 <logic+0x1984>
  802374:	e0bffc17 	ldw	r2,-16(fp)
  802378:	108041c3 	ldbu	r2,263(r2)
  80237c:	10803fcc 	andi	r2,r2,255
  802380:	1080201c 	xori	r2,r2,128
  802384:	10bfe004 	addi	r2,r2,-128
  802388:	10000226 	beq	r2,zero,802394 <logic+0x1984>
  80238c:	00800044 	movi	r2,1
  802390:	00000106 	br	802398 <logic+0x1988>
  802394:	0005883a 	mov	r2,zero
  802398:	1007883a 	mov	r3,r2
  80239c:	e0bffc17 	ldw	r2,-16(fp)
  8023a0:	10c02445 	stb	r3,145(r2)
  if (d->_g29) {
  8023a4:	e0bffc17 	ldw	r2,-16(fp)
  8023a8:	10802443 	ldbu	r2,145(r2)
  8023ac:	10803fcc 	andi	r2,r2,255
  8023b0:	1080201c 	xori	r2,r2,128
  8023b4:	10bfe004 	addi	r2,r2,-128
  8023b8:	10000426 	beq	r2,zero,8023cc <logic+0x19bc>
    d->_DDDpacemake2_local_AVI_state = 0;
  8023bc:	e0bffc17 	ldw	r2,-16(fp)
  8023c0:	10001805 	stb	zero,96(r2)
    d->VP = 0;
  8023c4:	e0bffc17 	ldw	r2,-16(fp)
  8023c8:	10001345 	stb	zero,77(r2)
  }
  d->_g32 = d->_pg39;
  8023cc:	e0bffc17 	ldw	r2,-16(fp)
  8023d0:	10c05403 	ldbu	r3,336(r2)
  8023d4:	e0bffc17 	ldw	r2,-16(fp)
  8023d8:	10c02505 	stb	r3,148(r2)
  d->_cg39 = d->_DDDpacemake2_local_real_VS;
  8023dc:	e0bffc17 	ldw	r2,-16(fp)
  8023e0:	10c01ac3 	ldbu	r3,107(r2)
  8023e4:	e0bffc17 	ldw	r2,-16(fp)
  8023e8:	10c04285 	stb	r3,266(r2)
  d->_g30 = d->_g32 && d->_cg39;
  8023ec:	e0bffc17 	ldw	r2,-16(fp)
  8023f0:	10802503 	ldbu	r2,148(r2)
  8023f4:	10803fcc 	andi	r2,r2,255
  8023f8:	1080201c 	xori	r2,r2,128
  8023fc:	10bfe004 	addi	r2,r2,-128
  802400:	10000826 	beq	r2,zero,802424 <logic+0x1a14>
  802404:	e0bffc17 	ldw	r2,-16(fp)
  802408:	10804283 	ldbu	r2,266(r2)
  80240c:	10803fcc 	andi	r2,r2,255
  802410:	1080201c 	xori	r2,r2,128
  802414:	10bfe004 	addi	r2,r2,-128
  802418:	10000226 	beq	r2,zero,802424 <logic+0x1a14>
  80241c:	00800044 	movi	r2,1
  802420:	00000106 	br	802428 <logic+0x1a18>
  802424:	0005883a 	mov	r2,zero
  802428:	1007883a 	mov	r3,r2
  80242c:	e0bffc17 	ldw	r2,-16(fp)
  802430:	10c02485 	stb	r3,146(r2)
  if (d->_g30) {
  802434:	e0bffc17 	ldw	r2,-16(fp)
  802438:	10802483 	ldbu	r2,146(r2)
  80243c:	10803fcc 	andi	r2,r2,255
  802440:	1080201c 	xori	r2,r2,128
  802444:	10bfe004 	addi	r2,r2,-128
  802448:	10000426 	beq	r2,zero,80245c <logic+0x1a4c>
    d->VP = 0;
  80244c:	e0bffc17 	ldw	r2,-16(fp)
  802450:	10001345 	stb	zero,77(r2)
    d->_DDDpacemake2_local_AVI_state = 0;
  802454:	e0bffc17 	ldw	r2,-16(fp)
  802458:	10001805 	stb	zero,96(r2)
  }
  d->_g30_e3 = d->_g32 && !d->_cg39;
  80245c:	e0bffc17 	ldw	r2,-16(fp)
  802460:	10802503 	ldbu	r2,148(r2)
  802464:	10803fcc 	andi	r2,r2,255
  802468:	1080201c 	xori	r2,r2,128
  80246c:	10bfe004 	addi	r2,r2,-128
  802470:	10000826 	beq	r2,zero,802494 <logic+0x1a84>
  802474:	e0bffc17 	ldw	r2,-16(fp)
  802478:	10804283 	ldbu	r2,266(r2)
  80247c:	10803fcc 	andi	r2,r2,255
  802480:	1080201c 	xori	r2,r2,128
  802484:	10bfe004 	addi	r2,r2,-128
  802488:	1000021e 	bne	r2,zero,802494 <logic+0x1a84>
  80248c:	00800044 	movi	r2,1
  802490:	00000106 	br	802498 <logic+0x1a88>
  802494:	0005883a 	mov	r2,zero
  802498:	1007883a 	mov	r3,r2
  80249c:	e0bffc17 	ldw	r2,-16(fp)
  8024a0:	10c04d85 	stb	r3,310(r2)
  d->_cg41 = d->_DDDpacemake2_local_URI_state == 0;
  8024a4:	e0bffc17 	ldw	r2,-16(fp)
  8024a8:	10801943 	ldbu	r2,101(r2)
  8024ac:	10803fcc 	andi	r2,r2,255
  8024b0:	1080201c 	xori	r2,r2,128
  8024b4:	10bfe004 	addi	r2,r2,-128
  8024b8:	1005003a 	cmpeq	r2,r2,zero
  8024bc:	1007883a 	mov	r3,r2
  8024c0:	e0bffc17 	ldw	r2,-16(fp)
  8024c4:	10c04245 	stb	r3,265(r2)
  d->_g20 = d->_g30_e3 && d->_cg41;
  8024c8:	e0bffc17 	ldw	r2,-16(fp)
  8024cc:	10804d83 	ldbu	r2,310(r2)
  8024d0:	10803fcc 	andi	r2,r2,255
  8024d4:	1080201c 	xori	r2,r2,128
  8024d8:	10bfe004 	addi	r2,r2,-128
  8024dc:	10000826 	beq	r2,zero,802500 <logic+0x1af0>
  8024e0:	e0bffc17 	ldw	r2,-16(fp)
  8024e4:	10804243 	ldbu	r2,265(r2)
  8024e8:	10803fcc 	andi	r2,r2,255
  8024ec:	1080201c 	xori	r2,r2,128
  8024f0:	10bfe004 	addi	r2,r2,-128
  8024f4:	10000226 	beq	r2,zero,802500 <logic+0x1af0>
  8024f8:	00800044 	movi	r2,1
  8024fc:	00000106 	br	802504 <logic+0x1af4>
  802500:	0005883a 	mov	r2,zero
  802504:	1007883a 	mov	r3,r2
  802508:	e0bffc17 	ldw	r2,-16(fp)
  80250c:	10c02285 	stb	r3,138(r2)
  if (d->_g20) {
  802510:	e0bffc17 	ldw	r2,-16(fp)
  802514:	10802283 	ldbu	r2,138(r2)
  802518:	10803fcc 	andi	r2,r2,255
  80251c:	1080201c 	xori	r2,r2,128
  802520:	10bfe004 	addi	r2,r2,-128
  802524:	10000b26 	beq	r2,zero,802554 <logic+0x1b44>
    d->VP = 1;
  802528:	e0bffc17 	ldw	r2,-16(fp)
  80252c:	00c00044 	movi	r3,1
  802530:	10c01345 	stb	r3,77(r2)
    d->_DDDpacemake2_local_VP_temp |= 1;
  802534:	e0bffc17 	ldw	r2,-16(fp)
  802538:	10801a43 	ldbu	r2,105(r2)
  80253c:	10800054 	ori	r2,r2,1
  802540:	1007883a 	mov	r3,r2
  802544:	e0bffc17 	ldw	r2,-16(fp)
  802548:	10c01a45 	stb	r3,105(r2)
    d->_DDDpacemake2_local_AVI_state = 0;
  80254c:	e0bffc17 	ldw	r2,-16(fp)
  802550:	10001805 	stb	zero,96(r2)
  }
  d->_g11 = d->_g34 && !d->_cg35;
  802554:	e0bffc17 	ldw	r2,-16(fp)
  802558:	10802583 	ldbu	r2,150(r2)
  80255c:	10803fcc 	andi	r2,r2,255
  802560:	1080201c 	xori	r2,r2,128
  802564:	10bfe004 	addi	r2,r2,-128
  802568:	10000826 	beq	r2,zero,80258c <logic+0x1b7c>
  80256c:	e0bffc17 	ldw	r2,-16(fp)
  802570:	108041c3 	ldbu	r2,263(r2)
  802574:	10803fcc 	andi	r2,r2,255
  802578:	1080201c 	xori	r2,r2,128
  80257c:	10bfe004 	addi	r2,r2,-128
  802580:	1000021e 	bne	r2,zero,80258c <logic+0x1b7c>
  802584:	00800044 	movi	r2,1
  802588:	00000106 	br	802590 <logic+0x1b80>
  80258c:	0005883a 	mov	r2,zero
  802590:	1007883a 	mov	r3,r2
  802594:	e0bffc17 	ldw	r2,-16(fp)
  802598:	10c02085 	stb	r3,130(r2)
  d->_cg37 = d->_DDDpacemake2_local__Atrig1;
  80259c:	e0bffc17 	ldw	r2,-16(fp)
  8025a0:	10c01c43 	ldbu	r3,113(r2)
  8025a4:	e0bffc17 	ldw	r2,-16(fp)
  8025a8:	10c04205 	stb	r3,264(r2)
  d->_g20_e2 = d->_g11 && !d->_cg37;
  8025ac:	e0bffc17 	ldw	r2,-16(fp)
  8025b0:	10802083 	ldbu	r2,130(r2)
  8025b4:	10803fcc 	andi	r2,r2,255
  8025b8:	1080201c 	xori	r2,r2,128
  8025bc:	10bfe004 	addi	r2,r2,-128
  8025c0:	10000826 	beq	r2,zero,8025e4 <logic+0x1bd4>
  8025c4:	e0bffc17 	ldw	r2,-16(fp)
  8025c8:	10804203 	ldbu	r2,264(r2)
  8025cc:	10803fcc 	andi	r2,r2,255
  8025d0:	1080201c 	xori	r2,r2,128
  8025d4:	10bfe004 	addi	r2,r2,-128
  8025d8:	1000021e 	bne	r2,zero,8025e4 <logic+0x1bd4>
  8025dc:	00800044 	movi	r2,1
  8025e0:	00000106 	br	8025e8 <logic+0x1bd8>
  8025e4:	0005883a 	mov	r2,zero
  8025e8:	1007883a 	mov	r3,r2
  8025ec:	e0bffc17 	ldw	r2,-16(fp)
  8025f0:	10c04d45 	stb	r3,309(r2)
  if (d->_g20_e2) {
  8025f4:	e0bffc17 	ldw	r2,-16(fp)
  8025f8:	10804d43 	ldbu	r2,309(r2)
  8025fc:	10803fcc 	andi	r2,r2,255
  802600:	1080201c 	xori	r2,r2,128
  802604:	10bfe004 	addi	r2,r2,-128
  802608:	10000b26 	beq	r2,zero,802638 <logic+0x1c28>
    d->VP = 1;
  80260c:	e0bffc17 	ldw	r2,-16(fp)
  802610:	00c00044 	movi	r3,1
  802614:	10c01345 	stb	r3,77(r2)
    d->_DDDpacemake2_local_VP_temp |= 1;
  802618:	e0bffc17 	ldw	r2,-16(fp)
  80261c:	10801a43 	ldbu	r2,105(r2)
  802620:	10800054 	ori	r2,r2,1
  802624:	1007883a 	mov	r3,r2
  802628:	e0bffc17 	ldw	r2,-16(fp)
  80262c:	10c01a45 	stb	r3,105(r2)
    d->_DDDpacemake2_local_AVI_state = 0;
  802630:	e0bffc17 	ldw	r2,-16(fp)
  802634:	10001805 	stb	zero,96(r2)
  }
  d->_g11_e1 = d->_GO || d->_g5 || d->_g29 || d->_g30 || d->_g20 || d->_g20_e2 || d->_g31 && !d->_cg6;
  802638:	e0bffc17 	ldw	r2,-16(fp)
  80263c:	10803ec3 	ldbu	r2,251(r2)
  802640:	10803fcc 	andi	r2,r2,255
  802644:	1080201c 	xori	r2,r2,128
  802648:	10bfe004 	addi	r2,r2,-128
  80264c:	10002a1e 	bne	r2,zero,8026f8 <logic+0x1ce8>
  802650:	e0bffc17 	ldw	r2,-16(fp)
  802654:	10801f43 	ldbu	r2,125(r2)
  802658:	10803fcc 	andi	r2,r2,255
  80265c:	1080201c 	xori	r2,r2,128
  802660:	10bfe004 	addi	r2,r2,-128
  802664:	1000241e 	bne	r2,zero,8026f8 <logic+0x1ce8>
  802668:	e0bffc17 	ldw	r2,-16(fp)
  80266c:	10802443 	ldbu	r2,145(r2)
  802670:	10803fcc 	andi	r2,r2,255
  802674:	1080201c 	xori	r2,r2,128
  802678:	10bfe004 	addi	r2,r2,-128
  80267c:	10001e1e 	bne	r2,zero,8026f8 <logic+0x1ce8>
  802680:	e0bffc17 	ldw	r2,-16(fp)
  802684:	10802483 	ldbu	r2,146(r2)
  802688:	10803fcc 	andi	r2,r2,255
  80268c:	1080201c 	xori	r2,r2,128
  802690:	10bfe004 	addi	r2,r2,-128
  802694:	1000181e 	bne	r2,zero,8026f8 <logic+0x1ce8>
  802698:	e0bffc17 	ldw	r2,-16(fp)
  80269c:	10802283 	ldbu	r2,138(r2)
  8026a0:	10803fcc 	andi	r2,r2,255
  8026a4:	1080201c 	xori	r2,r2,128
  8026a8:	10bfe004 	addi	r2,r2,-128
  8026ac:	1000121e 	bne	r2,zero,8026f8 <logic+0x1ce8>
  8026b0:	e0bffc17 	ldw	r2,-16(fp)
  8026b4:	10804d43 	ldbu	r2,309(r2)
  8026b8:	10803fcc 	andi	r2,r2,255
  8026bc:	1080201c 	xori	r2,r2,128
  8026c0:	10bfe004 	addi	r2,r2,-128
  8026c4:	10000c1e 	bne	r2,zero,8026f8 <logic+0x1ce8>
  8026c8:	e0bffc17 	ldw	r2,-16(fp)
  8026cc:	108024c3 	ldbu	r2,147(r2)
  8026d0:	10803fcc 	andi	r2,r2,255
  8026d4:	1080201c 	xori	r2,r2,128
  8026d8:	10bfe004 	addi	r2,r2,-128
  8026dc:	10000826 	beq	r2,zero,802700 <logic+0x1cf0>
  8026e0:	e0bffc17 	ldw	r2,-16(fp)
  8026e4:	10803f03 	ldbu	r2,252(r2)
  8026e8:	10803fcc 	andi	r2,r2,255
  8026ec:	1080201c 	xori	r2,r2,128
  8026f0:	10bfe004 	addi	r2,r2,-128
  8026f4:	1000021e 	bne	r2,zero,802700 <logic+0x1cf0>
  8026f8:	00800044 	movi	r2,1
  8026fc:	00000106 	br	802704 <logic+0x1cf4>
  802700:	0005883a 	mov	r2,zero
  802704:	1007883a 	mov	r3,r2
  802708:	e0bffc17 	ldw	r2,-16(fp)
  80270c:	10c04d05 	stb	r3,308(r2)
  d->_g39 = d->_g11 && d->_cg37 || d->_g30_e3 && !d->_cg41;
  802710:	e0bffc17 	ldw	r2,-16(fp)
  802714:	10802083 	ldbu	r2,130(r2)
  802718:	10803fcc 	andi	r2,r2,255
  80271c:	1080201c 	xori	r2,r2,128
  802720:	10bfe004 	addi	r2,r2,-128
  802724:	10000626 	beq	r2,zero,802740 <logic+0x1d30>
  802728:	e0bffc17 	ldw	r2,-16(fp)
  80272c:	10804203 	ldbu	r2,264(r2)
  802730:	10803fcc 	andi	r2,r2,255
  802734:	1080201c 	xori	r2,r2,128
  802738:	10bfe004 	addi	r2,r2,-128
  80273c:	10000c1e 	bne	r2,zero,802770 <logic+0x1d60>
  802740:	e0bffc17 	ldw	r2,-16(fp)
  802744:	10804d83 	ldbu	r2,310(r2)
  802748:	10803fcc 	andi	r2,r2,255
  80274c:	1080201c 	xori	r2,r2,128
  802750:	10bfe004 	addi	r2,r2,-128
  802754:	10000826 	beq	r2,zero,802778 <logic+0x1d68>
  802758:	e0bffc17 	ldw	r2,-16(fp)
  80275c:	10804243 	ldbu	r2,265(r2)
  802760:	10803fcc 	andi	r2,r2,255
  802764:	1080201c 	xori	r2,r2,128
  802768:	10bfe004 	addi	r2,r2,-128
  80276c:	1000021e 	bne	r2,zero,802778 <logic+0x1d68>
  802770:	00800044 	movi	r2,1
  802774:	00000106 	br	80277c <logic+0x1d6c>
  802778:	0005883a 	mov	r2,zero
  80277c:	1007883a 	mov	r3,r2
  802780:	e0bffc17 	ldw	r2,-16(fp)
  802784:	10c02685 	stb	r3,154(r2)
  d->_g35 = d->_pg54_e1;
  802788:	e0bffc17 	ldw	r2,-16(fp)
  80278c:	10c05443 	ldbu	r3,337(r2)
  802790:	e0bffc17 	ldw	r2,-16(fp)
  802794:	10c025c5 	stb	r3,151(r2)
  d->_cg47 = !d->_DDDpacemake2_local_real_VS && !d->_DDDpacemake2_local_AP_temp;
  802798:	e0bffc17 	ldw	r2,-16(fp)
  80279c:	10801ac3 	ldbu	r2,107(r2)
  8027a0:	10803fcc 	andi	r2,r2,255
  8027a4:	1080201c 	xori	r2,r2,128
  8027a8:	10bfe004 	addi	r2,r2,-128
  8027ac:	1000081e 	bne	r2,zero,8027d0 <logic+0x1dc0>
  8027b0:	e0bffc17 	ldw	r2,-16(fp)
  8027b4:	10801a03 	ldbu	r2,104(r2)
  8027b8:	10803fcc 	andi	r2,r2,255
  8027bc:	1080201c 	xori	r2,r2,128
  8027c0:	10bfe004 	addi	r2,r2,-128
  8027c4:	1000021e 	bne	r2,zero,8027d0 <logic+0x1dc0>
  8027c8:	00800044 	movi	r2,1
  8027cc:	00000106 	br	8027d4 <logic+0x1dc4>
  8027d0:	0005883a 	mov	r2,zero
  8027d4:	1007883a 	mov	r3,r2
  8027d8:	e0bffc17 	ldw	r2,-16(fp)
  8027dc:	10c04305 	stb	r3,268(r2)
  d->_g40 = d->_g35 && d->_cg47;
  8027e0:	e0bffc17 	ldw	r2,-16(fp)
  8027e4:	108025c3 	ldbu	r2,151(r2)
  8027e8:	10803fcc 	andi	r2,r2,255
  8027ec:	1080201c 	xori	r2,r2,128
  8027f0:	10bfe004 	addi	r2,r2,-128
  8027f4:	10000826 	beq	r2,zero,802818 <logic+0x1e08>
  8027f8:	e0bffc17 	ldw	r2,-16(fp)
  8027fc:	10804303 	ldbu	r2,268(r2)
  802800:	10803fcc 	andi	r2,r2,255
  802804:	1080201c 	xori	r2,r2,128
  802808:	10bfe004 	addi	r2,r2,-128
  80280c:	10000226 	beq	r2,zero,802818 <logic+0x1e08>
  802810:	00800044 	movi	r2,1
  802814:	00000106 	br	80281c <logic+0x1e0c>
  802818:	0005883a 	mov	r2,zero
  80281c:	1007883a 	mov	r3,r2
  802820:	e0bffc17 	ldw	r2,-16(fp)
  802824:	10c026c5 	stb	r3,155(r2)
  if (d->_g40) {
  802828:	e0bffc17 	ldw	r2,-16(fp)
  80282c:	108026c3 	ldbu	r2,155(r2)
  802830:	10803fcc 	andi	r2,r2,255
  802834:	1080201c 	xori	r2,r2,128
  802838:	10bfe004 	addi	r2,r2,-128
  80283c:	10000226 	beq	r2,zero,802848 <logic+0x1e38>
    d->AP = 0;
  802840:	e0bffc17 	ldw	r2,-16(fp)
  802844:	10001305 	stb	zero,76(r2)
  }
  d->_g42 = d->_pg53;
  802848:	e0bffc17 	ldw	r2,-16(fp)
  80284c:	10c05483 	ldbu	r3,338(r2)
  802850:	e0bffc17 	ldw	r2,-16(fp)
  802854:	10c02745 	stb	r3,157(r2)
  d->_cg62 = d->_DDDpacemake2_local_real_AS;
  802858:	e0bffc17 	ldw	r2,-16(fp)
  80285c:	10c01a83 	ldbu	r3,106(r2)
  802860:	e0bffc17 	ldw	r2,-16(fp)
  802864:	10c04445 	stb	r3,273(r2)
  d->_g43 = d->_g42 && d->_cg62;
  802868:	e0bffc17 	ldw	r2,-16(fp)
  80286c:	10802743 	ldbu	r2,157(r2)
  802870:	10803fcc 	andi	r2,r2,255
  802874:	1080201c 	xori	r2,r2,128
  802878:	10bfe004 	addi	r2,r2,-128
  80287c:	10000826 	beq	r2,zero,8028a0 <logic+0x1e90>
  802880:	e0bffc17 	ldw	r2,-16(fp)
  802884:	10804443 	ldbu	r2,273(r2)
  802888:	10803fcc 	andi	r2,r2,255
  80288c:	1080201c 	xori	r2,r2,128
  802890:	10bfe004 	addi	r2,r2,-128
  802894:	10000226 	beq	r2,zero,8028a0 <logic+0x1e90>
  802898:	00800044 	movi	r2,1
  80289c:	00000106 	br	8028a4 <logic+0x1e94>
  8028a0:	0005883a 	mov	r2,zero
  8028a4:	1007883a 	mov	r3,r2
  8028a8:	e0bffc17 	ldw	r2,-16(fp)
  8028ac:	10c02785 	stb	r3,158(r2)
  if (d->_g43) {
  8028b0:	e0bffc17 	ldw	r2,-16(fp)
  8028b4:	10802783 	ldbu	r2,158(r2)
  8028b8:	10803fcc 	andi	r2,r2,255
  8028bc:	1080201c 	xori	r2,r2,128
  8028c0:	10bfe004 	addi	r2,r2,-128
  8028c4:	10000326 	beq	r2,zero,8028d4 <logic+0x1ec4>
    d->_DDDpacemake2_local__Atrig3 = 1;
  8028c8:	e0bffc17 	ldw	r2,-16(fp)
  8028cc:	00c00044 	movi	r3,1
  8028d0:	10c01cc5 	stb	r3,115(r2)
  }
  d->_g5 = d->_pg147;
  8028d4:	e0bffc17 	ldw	r2,-16(fp)
  8028d8:	10c054c3 	ldbu	r3,339(r2)
  8028dc:	e0bffc17 	ldw	r2,-16(fp)
  8028e0:	10c01f45 	stb	r3,125(r2)
  if (d->_g5) {
  8028e4:	e0bffc17 	ldw	r2,-16(fp)
  8028e8:	10801f43 	ldbu	r2,125(r2)
  8028ec:	10803fcc 	andi	r2,r2,255
  8028f0:	1080201c 	xori	r2,r2,128
  8028f4:	10bfe004 	addi	r2,r2,-128
  8028f8:	10001226 	beq	r2,zero,802944 <logic+0x1f34>
    d->AEI_counter += d->deltaT;
  8028fc:	e13ffc17 	ldw	r4,-16(fp)
  802900:	20800917 	ldw	r2,36(r4)
  802904:	20c00a17 	ldw	r3,40(r4)
  802908:	e1bffc17 	ldw	r6,-16(fp)
  80290c:	31001417 	ldw	r4,80(r6)
  802910:	31401517 	ldw	r5,84(r6)
  802914:	200d883a 	mov	r6,r4
  802918:	280f883a 	mov	r7,r5
  80291c:	1009883a 	mov	r4,r2
  802920:	180b883a 	mov	r5,r3
  802924:	0805ca80 	call	805ca8 <__adddf3>
  802928:	1009883a 	mov	r4,r2
  80292c:	180b883a 	mov	r5,r3
  802930:	2005883a 	mov	r2,r4
  802934:	2807883a 	mov	r3,r5
  802938:	e13ffc17 	ldw	r4,-16(fp)
  80293c:	20800915 	stw	r2,36(r4)
  802940:	20c00a15 	stw	r3,40(r4)
  }
  d->_g6 = d->_g42 && !d->_cg62;
  802944:	e0bffc17 	ldw	r2,-16(fp)
  802948:	10802743 	ldbu	r2,157(r2)
  80294c:	10803fcc 	andi	r2,r2,255
  802950:	1080201c 	xori	r2,r2,128
  802954:	10bfe004 	addi	r2,r2,-128
  802958:	10000826 	beq	r2,zero,80297c <logic+0x1f6c>
  80295c:	e0bffc17 	ldw	r2,-16(fp)
  802960:	10804443 	ldbu	r2,273(r2)
  802964:	10803fcc 	andi	r2,r2,255
  802968:	1080201c 	xori	r2,r2,128
  80296c:	10bfe004 	addi	r2,r2,-128
  802970:	1000021e 	bne	r2,zero,80297c <logic+0x1f6c>
  802974:	00800044 	movi	r2,1
  802978:	00000106 	br	802980 <logic+0x1f70>
  80297c:	0005883a 	mov	r2,zero
  802980:	1007883a 	mov	r3,r2
  802984:	e0bffc17 	ldw	r2,-16(fp)
  802988:	10c01f85 	stb	r3,126(r2)
  d->_cg65 = d->AEI_counter >= d->AEI_DEADLINE;
  80298c:	e0bffc17 	ldw	r2,-16(fp)
  802990:	14000917 	ldw	r16,36(r2)
  802994:	14400a17 	ldw	r17,40(r2)
  802998:	e0bffc17 	ldw	r2,-16(fp)
  80299c:	10800217 	ldw	r2,8(r2)
  8029a0:	1009883a 	mov	r4,r2
  8029a4:	08077380 	call	807738 <__floatsidf>
  8029a8:	1009883a 	mov	r4,r2
  8029ac:	180b883a 	mov	r5,r3
  8029b0:	04800044 	movi	r18,1
  8029b4:	200d883a 	mov	r6,r4
  8029b8:	280f883a 	mov	r7,r5
  8029bc:	8009883a 	mov	r4,r16
  8029c0:	880b883a 	mov	r5,r17
  8029c4:	08065540 	call	806554 <__gedf2>
  8029c8:	1000010e 	bge	r2,zero,8029d0 <logic+0x1fc0>
  8029cc:	0025883a 	mov	r18,zero
  8029d0:	9007883a 	mov	r3,r18
  8029d4:	e0bffc17 	ldw	r2,-16(fp)
  8029d8:	10c04405 	stb	r3,272(r2)
  d->_g36 = d->_g6 && d->_cg65;
  8029dc:	e0bffc17 	ldw	r2,-16(fp)
  8029e0:	10801f83 	ldbu	r2,126(r2)
  8029e4:	10803fcc 	andi	r2,r2,255
  8029e8:	1080201c 	xori	r2,r2,128
  8029ec:	10bfe004 	addi	r2,r2,-128
  8029f0:	10000826 	beq	r2,zero,802a14 <logic+0x2004>
  8029f4:	e0bffc17 	ldw	r2,-16(fp)
  8029f8:	10804403 	ldbu	r2,272(r2)
  8029fc:	10803fcc 	andi	r2,r2,255
  802a00:	1080201c 	xori	r2,r2,128
  802a04:	10bfe004 	addi	r2,r2,-128
  802a08:	10000226 	beq	r2,zero,802a14 <logic+0x2004>
  802a0c:	00800044 	movi	r2,1
  802a10:	00000106 	br	802a18 <logic+0x2008>
  802a14:	0005883a 	mov	r2,zero
  802a18:	1007883a 	mov	r3,r2
  802a1c:	e0bffc17 	ldw	r2,-16(fp)
  802a20:	10c02605 	stb	r3,152(r2)
  if (d->_g36) {
  802a24:	e0bffc17 	ldw	r2,-16(fp)
  802a28:	10802603 	ldbu	r2,152(r2)
  802a2c:	10803fcc 	andi	r2,r2,255
  802a30:	1080201c 	xori	r2,r2,128
  802a34:	10bfe004 	addi	r2,r2,-128
  802a38:	10000326 	beq	r2,zero,802a48 <logic+0x2038>
    d->_DDDpacemake2_local__Atrig4 = 1;
  802a3c:	e0bffc17 	ldw	r2,-16(fp)
  802a40:	00c00044 	movi	r3,1
  802a44:	10c01d05 	stb	r3,116(r2)
  }
  d->_g37 = d->_g35 && !d->_cg47;
  802a48:	e0bffc17 	ldw	r2,-16(fp)
  802a4c:	108025c3 	ldbu	r2,151(r2)
  802a50:	10803fcc 	andi	r2,r2,255
  802a54:	1080201c 	xori	r2,r2,128
  802a58:	10bfe004 	addi	r2,r2,-128
  802a5c:	10000826 	beq	r2,zero,802a80 <logic+0x2070>
  802a60:	e0bffc17 	ldw	r2,-16(fp)
  802a64:	10804303 	ldbu	r2,268(r2)
  802a68:	10803fcc 	andi	r2,r2,255
  802a6c:	1080201c 	xori	r2,r2,128
  802a70:	10bfe004 	addi	r2,r2,-128
  802a74:	1000021e 	bne	r2,zero,802a80 <logic+0x2070>
  802a78:	00800044 	movi	r2,1
  802a7c:	00000106 	br	802a84 <logic+0x2074>
  802a80:	0005883a 	mov	r2,zero
  802a84:	1007883a 	mov	r3,r2
  802a88:	e0bffc17 	ldw	r2,-16(fp)
  802a8c:	10c02645 	stb	r3,153(r2)
  d->_cg49 = d->_DDDpacemake2_local_real_VS || d->_DDDpacemake2_local_VP_temp;
  802a90:	e0bffc17 	ldw	r2,-16(fp)
  802a94:	10801ac3 	ldbu	r2,107(r2)
  802a98:	10803fcc 	andi	r2,r2,255
  802a9c:	1080201c 	xori	r2,r2,128
  802aa0:	10bfe004 	addi	r2,r2,-128
  802aa4:	1000061e 	bne	r2,zero,802ac0 <logic+0x20b0>
  802aa8:	e0bffc17 	ldw	r2,-16(fp)
  802aac:	10801a43 	ldbu	r2,105(r2)
  802ab0:	10803fcc 	andi	r2,r2,255
  802ab4:	1080201c 	xori	r2,r2,128
  802ab8:	10bfe004 	addi	r2,r2,-128
  802abc:	10000226 	beq	r2,zero,802ac8 <logic+0x20b8>
  802ac0:	00800044 	movi	r2,1
  802ac4:	00000106 	br	802acc <logic+0x20bc>
  802ac8:	0005883a 	mov	r2,zero
  802acc:	1007883a 	mov	r3,r2
  802ad0:	e0bffc17 	ldw	r2,-16(fp)
  802ad4:	10c042c5 	stb	r3,267(r2)
  d->_g41 = d->_g37 && d->_cg49;
  802ad8:	e0bffc17 	ldw	r2,-16(fp)
  802adc:	10802643 	ldbu	r2,153(r2)
  802ae0:	10803fcc 	andi	r2,r2,255
  802ae4:	1080201c 	xori	r2,r2,128
  802ae8:	10bfe004 	addi	r2,r2,-128
  802aec:	10000826 	beq	r2,zero,802b10 <logic+0x2100>
  802af0:	e0bffc17 	ldw	r2,-16(fp)
  802af4:	108042c3 	ldbu	r2,267(r2)
  802af8:	10803fcc 	andi	r2,r2,255
  802afc:	1080201c 	xori	r2,r2,128
  802b00:	10bfe004 	addi	r2,r2,-128
  802b04:	10000226 	beq	r2,zero,802b10 <logic+0x2100>
  802b08:	00800044 	movi	r2,1
  802b0c:	00000106 	br	802b14 <logic+0x2104>
  802b10:	0005883a 	mov	r2,zero
  802b14:	1007883a 	mov	r3,r2
  802b18:	e0bffc17 	ldw	r2,-16(fp)
  802b1c:	10c02705 	stb	r3,156(r2)
  if (d->_g41) {
  802b20:	e0bffc17 	ldw	r2,-16(fp)
  802b24:	10802703 	ldbu	r2,156(r2)
  802b28:	10803fcc 	andi	r2,r2,255
  802b2c:	1080201c 	xori	r2,r2,128
  802b30:	10bfe004 	addi	r2,r2,-128
  802b34:	10000a26 	beq	r2,zero,802b60 <logic+0x2150>
    d->_DDDpacemake2_local_AEI_state = 1;
  802b38:	e0bffc17 	ldw	r2,-16(fp)
  802b3c:	00c00044 	movi	r3,1
  802b40:	10c01845 	stb	r3,97(r2)
    d->AEI_counter = 0;
  802b44:	e0bffc17 	ldw	r2,-16(fp)
  802b48:	10000915 	stw	zero,36(r2)
  802b4c:	10000a15 	stw	zero,40(r2)
    d->_DDDpacemake2_local__Atrig3 = 0;
  802b50:	e0bffc17 	ldw	r2,-16(fp)
  802b54:	10001cc5 	stb	zero,115(r2)
    d->_DDDpacemake2_local__Atrig4 = 0;
  802b58:	e0bffc17 	ldw	r2,-16(fp)
  802b5c:	10001d05 	stb	zero,116(r2)
  }
  d->_g62 = d->_pg55;
  802b60:	e0bffc17 	ldw	r2,-16(fp)
  802b64:	10c05503 	ldbu	r3,340(r2)
  802b68:	e0bffc17 	ldw	r2,-16(fp)
  802b6c:	10c02ac5 	stb	r3,171(r2)
  d->_g47 = d->_pg58;
  802b70:	e0bffc17 	ldw	r2,-16(fp)
  802b74:	10c05543 	ldbu	r3,341(r2)
  802b78:	e0bffc17 	ldw	r2,-16(fp)
  802b7c:	10c027c5 	stb	r3,159(r2)
  d->_g59 = d->_g41 || d->_g62 || d->_g47;
  802b80:	e0bffc17 	ldw	r2,-16(fp)
  802b84:	10802703 	ldbu	r2,156(r2)
  802b88:	10803fcc 	andi	r2,r2,255
  802b8c:	1080201c 	xori	r2,r2,128
  802b90:	10bfe004 	addi	r2,r2,-128
  802b94:	10000c1e 	bne	r2,zero,802bc8 <logic+0x21b8>
  802b98:	e0bffc17 	ldw	r2,-16(fp)
  802b9c:	10802ac3 	ldbu	r2,171(r2)
  802ba0:	10803fcc 	andi	r2,r2,255
  802ba4:	1080201c 	xori	r2,r2,128
  802ba8:	10bfe004 	addi	r2,r2,-128
  802bac:	1000061e 	bne	r2,zero,802bc8 <logic+0x21b8>
  802bb0:	e0bffc17 	ldw	r2,-16(fp)
  802bb4:	108027c3 	ldbu	r2,159(r2)
  802bb8:	10803fcc 	andi	r2,r2,255
  802bbc:	1080201c 	xori	r2,r2,128
  802bc0:	10bfe004 	addi	r2,r2,-128
  802bc4:	10000226 	beq	r2,zero,802bd0 <logic+0x21c0>
  802bc8:	00800044 	movi	r2,1
  802bcc:	00000106 	br	802bd4 <logic+0x21c4>
  802bd0:	0005883a 	mov	r2,zero
  802bd4:	1007883a 	mov	r3,r2
  802bd8:	e0bffc17 	ldw	r2,-16(fp)
  802bdc:	10c02a85 	stb	r3,170(r2)
  d->_cg52 = d->AEI_counter < d->AEI_DEADLINE;
  802be0:	e0bffc17 	ldw	r2,-16(fp)
  802be4:	14000917 	ldw	r16,36(r2)
  802be8:	14400a17 	ldw	r17,40(r2)
  802bec:	e0bffc17 	ldw	r2,-16(fp)
  802bf0:	10800217 	ldw	r2,8(r2)
  802bf4:	1009883a 	mov	r4,r2
  802bf8:	08077380 	call	807738 <__floatsidf>
  802bfc:	1009883a 	mov	r4,r2
  802c00:	180b883a 	mov	r5,r3
  802c04:	04800044 	movi	r18,1
  802c08:	200d883a 	mov	r6,r4
  802c0c:	280f883a 	mov	r7,r5
  802c10:	8009883a 	mov	r4,r16
  802c14:	880b883a 	mov	r5,r17
  802c18:	08066300 	call	806630 <__ledf2>
  802c1c:	10000116 	blt	r2,zero,802c24 <logic+0x2214>
  802c20:	0025883a 	mov	r18,zero
  802c24:	9007883a 	mov	r3,r18
  802c28:	e0bffc17 	ldw	r2,-16(fp)
  802c2c:	10c04345 	stb	r3,269(r2)
  d->_g56 = d->_g59 && !d->_cg52;
  802c30:	e0bffc17 	ldw	r2,-16(fp)
  802c34:	10802a83 	ldbu	r2,170(r2)
  802c38:	10803fcc 	andi	r2,r2,255
  802c3c:	1080201c 	xori	r2,r2,128
  802c40:	10bfe004 	addi	r2,r2,-128
  802c44:	10000826 	beq	r2,zero,802c68 <logic+0x2258>
  802c48:	e0bffc17 	ldw	r2,-16(fp)
  802c4c:	10804343 	ldbu	r2,269(r2)
  802c50:	10803fcc 	andi	r2,r2,255
  802c54:	1080201c 	xori	r2,r2,128
  802c58:	10bfe004 	addi	r2,r2,-128
  802c5c:	1000021e 	bne	r2,zero,802c68 <logic+0x2258>
  802c60:	00800044 	movi	r2,1
  802c64:	00000106 	br	802c6c <logic+0x225c>
  802c68:	0005883a 	mov	r2,zero
  802c6c:	1007883a 	mov	r3,r2
  802c70:	e0bffc17 	ldw	r2,-16(fp)
  802c74:	10c029c5 	stb	r3,167(r2)
  d->_cg57 = d->_DDDpacemake2_local__Atrig3 || d->_DDDpacemake2_local__Atrig4;
  802c78:	e0bffc17 	ldw	r2,-16(fp)
  802c7c:	10801cc3 	ldbu	r2,115(r2)
  802c80:	10803fcc 	andi	r2,r2,255
  802c84:	1080201c 	xori	r2,r2,128
  802c88:	10bfe004 	addi	r2,r2,-128
  802c8c:	1000061e 	bne	r2,zero,802ca8 <logic+0x2298>
  802c90:	e0bffc17 	ldw	r2,-16(fp)
  802c94:	10801d03 	ldbu	r2,116(r2)
  802c98:	10803fcc 	andi	r2,r2,255
  802c9c:	1080201c 	xori	r2,r2,128
  802ca0:	10bfe004 	addi	r2,r2,-128
  802ca4:	10000226 	beq	r2,zero,802cb0 <logic+0x22a0>
  802ca8:	00800044 	movi	r2,1
  802cac:	00000106 	br	802cb4 <logic+0x22a4>
  802cb0:	0005883a 	mov	r2,zero
  802cb4:	1007883a 	mov	r3,r2
  802cb8:	e0bffc17 	ldw	r2,-16(fp)
  802cbc:	10c043c5 	stb	r3,271(r2)
  d->_g58 = d->_g56 && !d->_cg57;
  802cc0:	e0bffc17 	ldw	r2,-16(fp)
  802cc4:	108029c3 	ldbu	r2,167(r2)
  802cc8:	10803fcc 	andi	r2,r2,255
  802ccc:	1080201c 	xori	r2,r2,128
  802cd0:	10bfe004 	addi	r2,r2,-128
  802cd4:	10000826 	beq	r2,zero,802cf8 <logic+0x22e8>
  802cd8:	e0bffc17 	ldw	r2,-16(fp)
  802cdc:	108043c3 	ldbu	r2,271(r2)
  802ce0:	10803fcc 	andi	r2,r2,255
  802ce4:	1080201c 	xori	r2,r2,128
  802ce8:	10bfe004 	addi	r2,r2,-128
  802cec:	1000021e 	bne	r2,zero,802cf8 <logic+0x22e8>
  802cf0:	00800044 	movi	r2,1
  802cf4:	00000106 	br	802cfc <logic+0x22ec>
  802cf8:	0005883a 	mov	r2,zero
  802cfc:	1007883a 	mov	r3,r2
  802d00:	e0bffc17 	ldw	r2,-16(fp)
  802d04:	10c02a45 	stb	r3,169(r2)
  d->_g52 = d->_g59 && d->_cg52;
  802d08:	e0bffc17 	ldw	r2,-16(fp)
  802d0c:	10802a83 	ldbu	r2,170(r2)
  802d10:	10803fcc 	andi	r2,r2,255
  802d14:	1080201c 	xori	r2,r2,128
  802d18:	10bfe004 	addi	r2,r2,-128
  802d1c:	10000826 	beq	r2,zero,802d40 <logic+0x2330>
  802d20:	e0bffc17 	ldw	r2,-16(fp)
  802d24:	10804343 	ldbu	r2,269(r2)
  802d28:	10803fcc 	andi	r2,r2,255
  802d2c:	1080201c 	xori	r2,r2,128
  802d30:	10bfe004 	addi	r2,r2,-128
  802d34:	10000226 	beq	r2,zero,802d40 <logic+0x2330>
  802d38:	00800044 	movi	r2,1
  802d3c:	00000106 	br	802d44 <logic+0x2334>
  802d40:	0005883a 	mov	r2,zero
  802d44:	1007883a 	mov	r3,r2
  802d48:	e0bffc17 	ldw	r2,-16(fp)
  802d4c:	10c028c5 	stb	r3,163(r2)
  if (d->_g52) {
  802d50:	e0bffc17 	ldw	r2,-16(fp)
  802d54:	108028c3 	ldbu	r2,163(r2)
  802d58:	10803fcc 	andi	r2,r2,255
  802d5c:	1080201c 	xori	r2,r2,128
  802d60:	10bfe004 	addi	r2,r2,-128
  802d64:	10003426 	beq	r2,zero,802e38 <logic+0x2428>
    d->sleepT = (d->sleepT < (d->AEI_DEADLINE - d->AEI_counter)) ? d->sleepT : (d->AEI_DEADLINE - d->AEI_counter);
  802d68:	e0bffc17 	ldw	r2,-16(fp)
  802d6c:	14001617 	ldw	r16,88(r2)
  802d70:	14401717 	ldw	r17,92(r2)
  802d74:	e0bffc17 	ldw	r2,-16(fp)
  802d78:	10800217 	ldw	r2,8(r2)
  802d7c:	1009883a 	mov	r4,r2
  802d80:	08077380 	call	807738 <__floatsidf>
  802d84:	1011883a 	mov	r8,r2
  802d88:	1813883a 	mov	r9,r3
  802d8c:	e13ffc17 	ldw	r4,-16(fp)
  802d90:	20800917 	ldw	r2,36(r4)
  802d94:	20c00a17 	ldw	r3,40(r4)
  802d98:	100d883a 	mov	r6,r2
  802d9c:	180f883a 	mov	r7,r3
  802da0:	4009883a 	mov	r4,r8
  802da4:	480b883a 	mov	r5,r9
  802da8:	0806e3c0 	call	806e3c <__subdf3>
  802dac:	1009883a 	mov	r4,r2
  802db0:	180b883a 	mov	r5,r3
  802db4:	2005883a 	mov	r2,r4
  802db8:	2807883a 	mov	r3,r5
  802dbc:	100d883a 	mov	r6,r2
  802dc0:	180f883a 	mov	r7,r3
  802dc4:	8009883a 	mov	r4,r16
  802dc8:	880b883a 	mov	r5,r17
  802dcc:	08066300 	call	806630 <__ledf2>
  802dd0:	1000040e 	bge	r2,zero,802de4 <logic+0x23d4>
  802dd4:	e13ffc17 	ldw	r4,-16(fp)
  802dd8:	20801617 	ldw	r2,88(r4)
  802ddc:	20c01717 	ldw	r3,92(r4)
  802de0:	00001206 	br	802e2c <logic+0x241c>
  802de4:	e0bffc17 	ldw	r2,-16(fp)
  802de8:	10800217 	ldw	r2,8(r2)
  802dec:	1009883a 	mov	r4,r2
  802df0:	08077380 	call	807738 <__floatsidf>
  802df4:	1011883a 	mov	r8,r2
  802df8:	1813883a 	mov	r9,r3
  802dfc:	e13ffc17 	ldw	r4,-16(fp)
  802e00:	20800917 	ldw	r2,36(r4)
  802e04:	20c00a17 	ldw	r3,40(r4)
  802e08:	100d883a 	mov	r6,r2
  802e0c:	180f883a 	mov	r7,r3
  802e10:	4009883a 	mov	r4,r8
  802e14:	480b883a 	mov	r5,r9
  802e18:	0806e3c0 	call	806e3c <__subdf3>
  802e1c:	1009883a 	mov	r4,r2
  802e20:	180b883a 	mov	r5,r3
  802e24:	2005883a 	mov	r2,r4
  802e28:	2807883a 	mov	r3,r5
  802e2c:	e13ffc17 	ldw	r4,-16(fp)
  802e30:	20801615 	stw	r2,88(r4)
  802e34:	20c01715 	stw	r3,92(r4)
  }
  d->_cg53 = d->_DDDpacemake2_local__Atrig3 || d->_DDDpacemake2_local__Atrig4;
  802e38:	e0bffc17 	ldw	r2,-16(fp)
  802e3c:	10801cc3 	ldbu	r2,115(r2)
  802e40:	10803fcc 	andi	r2,r2,255
  802e44:	1080201c 	xori	r2,r2,128
  802e48:	10bfe004 	addi	r2,r2,-128
  802e4c:	1000061e 	bne	r2,zero,802e68 <logic+0x2458>
  802e50:	e0bffc17 	ldw	r2,-16(fp)
  802e54:	10801d03 	ldbu	r2,116(r2)
  802e58:	10803fcc 	andi	r2,r2,255
  802e5c:	1080201c 	xori	r2,r2,128
  802e60:	10bfe004 	addi	r2,r2,-128
  802e64:	10000226 	beq	r2,zero,802e70 <logic+0x2460>
  802e68:	00800044 	movi	r2,1
  802e6c:	00000106 	br	802e74 <logic+0x2464>
  802e70:	0005883a 	mov	r2,zero
  802e74:	1007883a 	mov	r3,r2
  802e78:	e0bffc17 	ldw	r2,-16(fp)
  802e7c:	10c04385 	stb	r3,270(r2)
  d->_g55 = d->_g52 && !d->_cg53;
  802e80:	e0bffc17 	ldw	r2,-16(fp)
  802e84:	108028c3 	ldbu	r2,163(r2)
  802e88:	10803fcc 	andi	r2,r2,255
  802e8c:	1080201c 	xori	r2,r2,128
  802e90:	10bfe004 	addi	r2,r2,-128
  802e94:	10000826 	beq	r2,zero,802eb8 <logic+0x24a8>
  802e98:	e0bffc17 	ldw	r2,-16(fp)
  802e9c:	10804383 	ldbu	r2,270(r2)
  802ea0:	10803fcc 	andi	r2,r2,255
  802ea4:	1080201c 	xori	r2,r2,128
  802ea8:	10bfe004 	addi	r2,r2,-128
  802eac:	1000021e 	bne	r2,zero,802eb8 <logic+0x24a8>
  802eb0:	00800044 	movi	r2,1
  802eb4:	00000106 	br	802ebc <logic+0x24ac>
  802eb8:	0005883a 	mov	r2,zero
  802ebc:	1007883a 	mov	r3,r2
  802ec0:	e0bffc17 	ldw	r2,-16(fp)
  802ec4:	10c02985 	stb	r3,166(r2)
  d->_g54_e1 = !(d->_g58 || d->_g55);
  802ec8:	e0bffc17 	ldw	r2,-16(fp)
  802ecc:	10802a43 	ldbu	r2,169(r2)
  802ed0:	10803fcc 	andi	r2,r2,255
  802ed4:	1080201c 	xori	r2,r2,128
  802ed8:	10bfe004 	addi	r2,r2,-128
  802edc:	1000081e 	bne	r2,zero,802f00 <logic+0x24f0>
  802ee0:	e0bffc17 	ldw	r2,-16(fp)
  802ee4:	10802983 	ldbu	r2,166(r2)
  802ee8:	10803fcc 	andi	r2,r2,255
  802eec:	1080201c 	xori	r2,r2,128
  802ef0:	10bfe004 	addi	r2,r2,-128
  802ef4:	1000021e 	bne	r2,zero,802f00 <logic+0x24f0>
  802ef8:	00800044 	movi	r2,1
  802efc:	00000106 	br	802f04 <logic+0x24f4>
  802f00:	0005883a 	mov	r2,zero
  802f04:	1007883a 	mov	r3,r2
  802f08:	e0bffc17 	ldw	r2,-16(fp)
  802f0c:	10c04dc5 	stb	r3,311(r2)
  d->_g57 = d->_g52 && d->_cg53 || d->_g56 && d->_cg57;
  802f10:	e0bffc17 	ldw	r2,-16(fp)
  802f14:	108028c3 	ldbu	r2,163(r2)
  802f18:	10803fcc 	andi	r2,r2,255
  802f1c:	1080201c 	xori	r2,r2,128
  802f20:	10bfe004 	addi	r2,r2,-128
  802f24:	10000626 	beq	r2,zero,802f40 <logic+0x2530>
  802f28:	e0bffc17 	ldw	r2,-16(fp)
  802f2c:	10804383 	ldbu	r2,270(r2)
  802f30:	10803fcc 	andi	r2,r2,255
  802f34:	1080201c 	xori	r2,r2,128
  802f38:	10bfe004 	addi	r2,r2,-128
  802f3c:	10000c1e 	bne	r2,zero,802f70 <logic+0x2560>
  802f40:	e0bffc17 	ldw	r2,-16(fp)
  802f44:	108029c3 	ldbu	r2,167(r2)
  802f48:	10803fcc 	andi	r2,r2,255
  802f4c:	1080201c 	xori	r2,r2,128
  802f50:	10bfe004 	addi	r2,r2,-128
  802f54:	10000826 	beq	r2,zero,802f78 <logic+0x2568>
  802f58:	e0bffc17 	ldw	r2,-16(fp)
  802f5c:	108043c3 	ldbu	r2,271(r2)
  802f60:	10803fcc 	andi	r2,r2,255
  802f64:	1080201c 	xori	r2,r2,128
  802f68:	10bfe004 	addi	r2,r2,-128
  802f6c:	10000226 	beq	r2,zero,802f78 <logic+0x2568>
  802f70:	00800044 	movi	r2,1
  802f74:	00000106 	br	802f7c <logic+0x256c>
  802f78:	0005883a 	mov	r2,zero
  802f7c:	1007883a 	mov	r3,r2
  802f80:	e0bffc17 	ldw	r2,-16(fp)
  802f84:	10c02a05 	stb	r3,168(r2)
  d->_g53 = d->_g41 || d->_g6 && !d->_cg65;
  802f88:	e0bffc17 	ldw	r2,-16(fp)
  802f8c:	10802703 	ldbu	r2,156(r2)
  802f90:	10803fcc 	andi	r2,r2,255
  802f94:	1080201c 	xori	r2,r2,128
  802f98:	10bfe004 	addi	r2,r2,-128
  802f9c:	10000c1e 	bne	r2,zero,802fd0 <logic+0x25c0>
  802fa0:	e0bffc17 	ldw	r2,-16(fp)
  802fa4:	10801f83 	ldbu	r2,126(r2)
  802fa8:	10803fcc 	andi	r2,r2,255
  802fac:	1080201c 	xori	r2,r2,128
  802fb0:	10bfe004 	addi	r2,r2,-128
  802fb4:	10000826 	beq	r2,zero,802fd8 <logic+0x25c8>
  802fb8:	e0bffc17 	ldw	r2,-16(fp)
  802fbc:	10804403 	ldbu	r2,272(r2)
  802fc0:	10803fcc 	andi	r2,r2,255
  802fc4:	1080201c 	xori	r2,r2,128
  802fc8:	10bfe004 	addi	r2,r2,-128
  802fcc:	1000021e 	bne	r2,zero,802fd8 <logic+0x25c8>
  802fd0:	00800044 	movi	r2,1
  802fd4:	00000106 	br	802fdc <logic+0x25cc>
  802fd8:	0005883a 	mov	r2,zero
  802fdc:	1007883a 	mov	r3,r2
  802fe0:	e0bffc17 	ldw	r2,-16(fp)
  802fe4:	10c02905 	stb	r3,164(r2)
  d->_g65 = !d->_g53;
  802fe8:	e0bffc17 	ldw	r2,-16(fp)
  802fec:	10802903 	ldbu	r2,164(r2)
  802ff0:	10803fcc 	andi	r2,r2,255
  802ff4:	1080201c 	xori	r2,r2,128
  802ff8:	10bfe004 	addi	r2,r2,-128
  802ffc:	1005003a 	cmpeq	r2,r2,zero
  803000:	1007883a 	mov	r3,r2
  803004:	e0bffc17 	ldw	r2,-16(fp)
  803008:	10c02b85 	stb	r3,174(r2)
  d->_g50 = d->_g43 || d->_g36;
  80300c:	e0bffc17 	ldw	r2,-16(fp)
  803010:	10802783 	ldbu	r2,158(r2)
  803014:	10803fcc 	andi	r2,r2,255
  803018:	1080201c 	xori	r2,r2,128
  80301c:	10bfe004 	addi	r2,r2,-128
  803020:	1000061e 	bne	r2,zero,80303c <logic+0x262c>
  803024:	e0bffc17 	ldw	r2,-16(fp)
  803028:	10802603 	ldbu	r2,152(r2)
  80302c:	10803fcc 	andi	r2,r2,255
  803030:	1080201c 	xori	r2,r2,128
  803034:	10bfe004 	addi	r2,r2,-128
  803038:	10000226 	beq	r2,zero,803044 <logic+0x2634>
  80303c:	00800044 	movi	r2,1
  803040:	00000106 	br	803048 <logic+0x2638>
  803044:	0005883a 	mov	r2,zero
  803048:	1007883a 	mov	r3,r2
  80304c:	e0bffc17 	ldw	r2,-16(fp)
  803050:	10c02885 	stb	r3,162(r2)
  d->_g66 = (d->_g54_e1 || d->_g57) && (d->_g65 || d->_g50) && (d->_g57 || d->_g50);
  803054:	e0bffc17 	ldw	r2,-16(fp)
  803058:	10804dc3 	ldbu	r2,311(r2)
  80305c:	10803fcc 	andi	r2,r2,255
  803060:	1080201c 	xori	r2,r2,128
  803064:	10bfe004 	addi	r2,r2,-128
  803068:	1000061e 	bne	r2,zero,803084 <logic+0x2674>
  80306c:	e0bffc17 	ldw	r2,-16(fp)
  803070:	10802a03 	ldbu	r2,168(r2)
  803074:	10803fcc 	andi	r2,r2,255
  803078:	1080201c 	xori	r2,r2,128
  80307c:	10bfe004 	addi	r2,r2,-128
  803080:	10001a26 	beq	r2,zero,8030ec <logic+0x26dc>
  803084:	e0bffc17 	ldw	r2,-16(fp)
  803088:	10802b83 	ldbu	r2,174(r2)
  80308c:	10803fcc 	andi	r2,r2,255
  803090:	1080201c 	xori	r2,r2,128
  803094:	10bfe004 	addi	r2,r2,-128
  803098:	1000061e 	bne	r2,zero,8030b4 <logic+0x26a4>
  80309c:	e0bffc17 	ldw	r2,-16(fp)
  8030a0:	10802883 	ldbu	r2,162(r2)
  8030a4:	10803fcc 	andi	r2,r2,255
  8030a8:	1080201c 	xori	r2,r2,128
  8030ac:	10bfe004 	addi	r2,r2,-128
  8030b0:	10000e26 	beq	r2,zero,8030ec <logic+0x26dc>
  8030b4:	e0bffc17 	ldw	r2,-16(fp)
  8030b8:	10802a03 	ldbu	r2,168(r2)
  8030bc:	10803fcc 	andi	r2,r2,255
  8030c0:	1080201c 	xori	r2,r2,128
  8030c4:	10bfe004 	addi	r2,r2,-128
  8030c8:	1000061e 	bne	r2,zero,8030e4 <logic+0x26d4>
  8030cc:	e0bffc17 	ldw	r2,-16(fp)
  8030d0:	10802883 	ldbu	r2,162(r2)
  8030d4:	10803fcc 	andi	r2,r2,255
  8030d8:	1080201c 	xori	r2,r2,128
  8030dc:	10bfe004 	addi	r2,r2,-128
  8030e0:	10000226 	beq	r2,zero,8030ec <logic+0x26dc>
  8030e4:	00800044 	movi	r2,1
  8030e8:	00000106 	br	8030f0 <logic+0x26e0>
  8030ec:	0005883a 	mov	r2,zero
  8030f0:	1007883a 	mov	r3,r2
  8030f4:	e0bffc17 	ldw	r2,-16(fp)
  8030f8:	10c02bc5 	stb	r3,175(r2)
  d->_cg67 = d->_DDDpacemake2_local__Atrig3;
  8030fc:	e0bffc17 	ldw	r2,-16(fp)
  803100:	10c01cc3 	ldbu	r3,115(r2)
  803104:	e0bffc17 	ldw	r2,-16(fp)
  803108:	10c04485 	stb	r3,274(r2)
  d->_g63 = d->_g66 && d->_cg67;
  80310c:	e0bffc17 	ldw	r2,-16(fp)
  803110:	10802bc3 	ldbu	r2,175(r2)
  803114:	10803fcc 	andi	r2,r2,255
  803118:	1080201c 	xori	r2,r2,128
  80311c:	10bfe004 	addi	r2,r2,-128
  803120:	10000826 	beq	r2,zero,803144 <logic+0x2734>
  803124:	e0bffc17 	ldw	r2,-16(fp)
  803128:	10804483 	ldbu	r2,274(r2)
  80312c:	10803fcc 	andi	r2,r2,255
  803130:	1080201c 	xori	r2,r2,128
  803134:	10bfe004 	addi	r2,r2,-128
  803138:	10000226 	beq	r2,zero,803144 <logic+0x2734>
  80313c:	00800044 	movi	r2,1
  803140:	00000106 	br	803148 <logic+0x2738>
  803144:	0005883a 	mov	r2,zero
  803148:	1007883a 	mov	r3,r2
  80314c:	e0bffc17 	ldw	r2,-16(fp)
  803150:	10c02b05 	stb	r3,172(r2)
  if (d->_g63) {
  803154:	e0bffc17 	ldw	r2,-16(fp)
  803158:	10802b03 	ldbu	r2,172(r2)
  80315c:	10803fcc 	andi	r2,r2,255
  803160:	1080201c 	xori	r2,r2,128
  803164:	10bfe004 	addi	r2,r2,-128
  803168:	10000426 	beq	r2,zero,80317c <logic+0x276c>
    d->_DDDpacemake2_local_AEI_state = 0;
  80316c:	e0bffc17 	ldw	r2,-16(fp)
  803170:	10001845 	stb	zero,97(r2)
    d->AP = 0;
  803174:	e0bffc17 	ldw	r2,-16(fp)
  803178:	10001305 	stb	zero,76(r2)
  }
  d->_g64 = d->_g66 && !d->_cg67;
  80317c:	e0bffc17 	ldw	r2,-16(fp)
  803180:	10802bc3 	ldbu	r2,175(r2)
  803184:	10803fcc 	andi	r2,r2,255
  803188:	1080201c 	xori	r2,r2,128
  80318c:	10bfe004 	addi	r2,r2,-128
  803190:	10000826 	beq	r2,zero,8031b4 <logic+0x27a4>
  803194:	e0bffc17 	ldw	r2,-16(fp)
  803198:	10804483 	ldbu	r2,274(r2)
  80319c:	10803fcc 	andi	r2,r2,255
  8031a0:	1080201c 	xori	r2,r2,128
  8031a4:	10bfe004 	addi	r2,r2,-128
  8031a8:	1000021e 	bne	r2,zero,8031b4 <logic+0x27a4>
  8031ac:	00800044 	movi	r2,1
  8031b0:	00000106 	br	8031b8 <logic+0x27a8>
  8031b4:	0005883a 	mov	r2,zero
  8031b8:	1007883a 	mov	r3,r2
  8031bc:	e0bffc17 	ldw	r2,-16(fp)
  8031c0:	10c02b45 	stb	r3,173(r2)
  if (d->_g64) {
  8031c4:	e0bffc17 	ldw	r2,-16(fp)
  8031c8:	10802b43 	ldbu	r2,173(r2)
  8031cc:	10803fcc 	andi	r2,r2,255
  8031d0:	1080201c 	xori	r2,r2,128
  8031d4:	10bfe004 	addi	r2,r2,-128
  8031d8:	10000b26 	beq	r2,zero,803208 <logic+0x27f8>
    d->AP = 1;
  8031dc:	e0bffc17 	ldw	r2,-16(fp)
  8031e0:	00c00044 	movi	r3,1
  8031e4:	10c01305 	stb	r3,76(r2)
    d->_DDDpacemake2_local_AP_temp |= 1;
  8031e8:	e0bffc17 	ldw	r2,-16(fp)
  8031ec:	10801a03 	ldbu	r2,104(r2)
  8031f0:	10800054 	ori	r2,r2,1
  8031f4:	1007883a 	mov	r3,r2
  8031f8:	e0bffc17 	ldw	r2,-16(fp)
  8031fc:	10c01a05 	stb	r3,104(r2)
    d->_DDDpacemake2_local_AEI_state = 0;
  803200:	e0bffc17 	ldw	r2,-16(fp)
  803204:	10001845 	stb	zero,97(r2)
  }
  d->_g54_e1 = d->_GO || d->_g40 || d->_g63 || d->_g64 || d->_g37 && !d->_cg49;
  803208:	e0bffc17 	ldw	r2,-16(fp)
  80320c:	10803ec3 	ldbu	r2,251(r2)
  803210:	10803fcc 	andi	r2,r2,255
  803214:	1080201c 	xori	r2,r2,128
  803218:	10bfe004 	addi	r2,r2,-128
  80321c:	10001e1e 	bne	r2,zero,803298 <logic+0x2888>
  803220:	e0bffc17 	ldw	r2,-16(fp)
  803224:	108026c3 	ldbu	r2,155(r2)
  803228:	10803fcc 	andi	r2,r2,255
  80322c:	1080201c 	xori	r2,r2,128
  803230:	10bfe004 	addi	r2,r2,-128
  803234:	1000181e 	bne	r2,zero,803298 <logic+0x2888>
  803238:	e0bffc17 	ldw	r2,-16(fp)
  80323c:	10802b03 	ldbu	r2,172(r2)
  803240:	10803fcc 	andi	r2,r2,255
  803244:	1080201c 	xori	r2,r2,128
  803248:	10bfe004 	addi	r2,r2,-128
  80324c:	1000121e 	bne	r2,zero,803298 <logic+0x2888>
  803250:	e0bffc17 	ldw	r2,-16(fp)
  803254:	10802b43 	ldbu	r2,173(r2)
  803258:	10803fcc 	andi	r2,r2,255
  80325c:	1080201c 	xori	r2,r2,128
  803260:	10bfe004 	addi	r2,r2,-128
  803264:	10000c1e 	bne	r2,zero,803298 <logic+0x2888>
  803268:	e0bffc17 	ldw	r2,-16(fp)
  80326c:	10802643 	ldbu	r2,153(r2)
  803270:	10803fcc 	andi	r2,r2,255
  803274:	1080201c 	xori	r2,r2,128
  803278:	10bfe004 	addi	r2,r2,-128
  80327c:	10000826 	beq	r2,zero,8032a0 <logic+0x2890>
  803280:	e0bffc17 	ldw	r2,-16(fp)
  803284:	108042c3 	ldbu	r2,267(r2)
  803288:	10803fcc 	andi	r2,r2,255
  80328c:	1080201c 	xori	r2,r2,128
  803290:	10bfe004 	addi	r2,r2,-128
  803294:	1000021e 	bne	r2,zero,8032a0 <logic+0x2890>
  803298:	00800044 	movi	r2,1
  80329c:	00000106 	br	8032a4 <logic+0x2894>
  8032a0:	0005883a 	mov	r2,zero
  8032a4:	1007883a 	mov	r3,r2
  8032a8:	e0bffc17 	ldw	r2,-16(fp)
  8032ac:	10c04dc5 	stb	r3,311(r2)
  d->_g54 = d->_pg94;
  8032b0:	e0bffc17 	ldw	r2,-16(fp)
  8032b4:	10c05583 	ldbu	r3,342(r2)
  8032b8:	e0bffc17 	ldw	r2,-16(fp)
  8032bc:	10c02945 	stb	r3,165(r2)
  d->_g64_e2 = d->_pg98;
  8032c0:	e0bffc17 	ldw	r2,-16(fp)
  8032c4:	10c055c3 	ldbu	r3,343(r2)
  8032c8:	e0bffc17 	ldw	r2,-16(fp)
  8032cc:	10c04e05 	stb	r3,312(r2)
  d->_g67 = !(d->_g54 || d->_g64_e2);
  8032d0:	e0bffc17 	ldw	r2,-16(fp)
  8032d4:	10802943 	ldbu	r2,165(r2)
  8032d8:	10803fcc 	andi	r2,r2,255
  8032dc:	1080201c 	xori	r2,r2,128
  8032e0:	10bfe004 	addi	r2,r2,-128
  8032e4:	1000081e 	bne	r2,zero,803308 <logic+0x28f8>
  8032e8:	e0bffc17 	ldw	r2,-16(fp)
  8032ec:	10804e03 	ldbu	r2,312(r2)
  8032f0:	10803fcc 	andi	r2,r2,255
  8032f4:	1080201c 	xori	r2,r2,128
  8032f8:	10bfe004 	addi	r2,r2,-128
  8032fc:	1000021e 	bne	r2,zero,803308 <logic+0x28f8>
  803300:	00800044 	movi	r2,1
  803304:	00000106 	br	80330c <logic+0x28fc>
  803308:	0005883a 	mov	r2,zero
  80330c:	1007883a 	mov	r3,r2
  803310:	e0bffc17 	ldw	r2,-16(fp)
  803314:	10c02c05 	stb	r3,176(r2)
  d->_g48 = d->_pg95;
  803318:	e0bffc17 	ldw	r2,-16(fp)
  80331c:	10c05603 	ldbu	r3,344(r2)
  803320:	e0bffc17 	ldw	r2,-16(fp)
  803324:	10c02805 	stb	r3,160(r2)
  d->_g49 = d->_g48 && d->AS;
  803328:	e0bffc17 	ldw	r2,-16(fp)
  80332c:	10802803 	ldbu	r2,160(r2)
  803330:	10803fcc 	andi	r2,r2,255
  803334:	1080201c 	xori	r2,r2,128
  803338:	10bfe004 	addi	r2,r2,-128
  80333c:	10000826 	beq	r2,zero,803360 <logic+0x2950>
  803340:	e0bffc17 	ldw	r2,-16(fp)
  803344:	10800603 	ldbu	r2,24(r2)
  803348:	10803fcc 	andi	r2,r2,255
  80334c:	1080201c 	xori	r2,r2,128
  803350:	10bfe004 	addi	r2,r2,-128
  803354:	10000226 	beq	r2,zero,803360 <logic+0x2950>
  803358:	00800044 	movi	r2,1
  80335c:	00000106 	br	803364 <logic+0x2954>
  803360:	0005883a 	mov	r2,zero
  803364:	1007883a 	mov	r3,r2
  803368:	e0bffc17 	ldw	r2,-16(fp)
  80336c:	10c02845 	stb	r3,161(r2)
  if (d->_g49) {
  803370:	e0bffc17 	ldw	r2,-16(fp)
  803374:	10802843 	ldbu	r2,161(r2)
  803378:	10803fcc 	andi	r2,r2,255
  80337c:	1080201c 	xori	r2,r2,128
  803380:	10bfe004 	addi	r2,r2,-128
  803384:	10000326 	beq	r2,zero,803394 <logic+0x2984>
    d->_DDDpacemake2_local__Atrig5 = 1;
  803388:	e0bffc17 	ldw	r2,-16(fp)
  80338c:	00c00044 	movi	r3,1
  803390:	10c01d45 	stb	r3,117(r2)
  }
  d->_g68 = d->_pg149;
  803394:	e0bffc17 	ldw	r2,-16(fp)
  803398:	10c05643 	ldbu	r3,345(r2)
  80339c:	e0bffc17 	ldw	r2,-16(fp)
  8033a0:	10c02c45 	stb	r3,177(r2)
  if (d->_g68) {
  8033a4:	e0bffc17 	ldw	r2,-16(fp)
  8033a8:	10802c43 	ldbu	r2,177(r2)
  8033ac:	10803fcc 	andi	r2,r2,255
  8033b0:	1080201c 	xori	r2,r2,128
  8033b4:	10bfe004 	addi	r2,r2,-128
  8033b8:	10001226 	beq	r2,zero,803404 <logic+0x29f4>
    d->PVARP_counter += d->deltaT;
  8033bc:	e13ffc17 	ldw	r4,-16(fp)
  8033c0:	20800b17 	ldw	r2,44(r4)
  8033c4:	20c00c17 	ldw	r3,48(r4)
  8033c8:	e1bffc17 	ldw	r6,-16(fp)
  8033cc:	31001417 	ldw	r4,80(r6)
  8033d0:	31401517 	ldw	r5,84(r6)
  8033d4:	200d883a 	mov	r6,r4
  8033d8:	280f883a 	mov	r7,r5
  8033dc:	1009883a 	mov	r4,r2
  8033e0:	180b883a 	mov	r5,r3
  8033e4:	0805ca80 	call	805ca8 <__adddf3>
  8033e8:	1009883a 	mov	r4,r2
  8033ec:	180b883a 	mov	r5,r3
  8033f0:	2005883a 	mov	r2,r4
  8033f4:	2807883a 	mov	r3,r5
  8033f8:	e13ffc17 	ldw	r4,-16(fp)
  8033fc:	20800b15 	stw	r2,44(r4)
  803400:	20c00c15 	stw	r3,48(r4)
  }
  d->_g69 = d->_g48 && !d->AS;
  803404:	e0bffc17 	ldw	r2,-16(fp)
  803408:	10802803 	ldbu	r2,160(r2)
  80340c:	10803fcc 	andi	r2,r2,255
  803410:	1080201c 	xori	r2,r2,128
  803414:	10bfe004 	addi	r2,r2,-128
  803418:	10000826 	beq	r2,zero,80343c <logic+0x2a2c>
  80341c:	e0bffc17 	ldw	r2,-16(fp)
  803420:	10800603 	ldbu	r2,24(r2)
  803424:	10803fcc 	andi	r2,r2,255
  803428:	1080201c 	xori	r2,r2,128
  80342c:	10bfe004 	addi	r2,r2,-128
  803430:	1000021e 	bne	r2,zero,80343c <logic+0x2a2c>
  803434:	00800044 	movi	r2,1
  803438:	00000106 	br	803440 <logic+0x2a30>
  80343c:	0005883a 	mov	r2,zero
  803440:	1007883a 	mov	r3,r2
  803444:	e0bffc17 	ldw	r2,-16(fp)
  803448:	10c02c85 	stb	r3,178(r2)
  d->_cg92 = d->PVARP_counter >= d->PVARP_DEADLINE;
  80344c:	e0bffc17 	ldw	r2,-16(fp)
  803450:	14000b17 	ldw	r16,44(r2)
  803454:	14400c17 	ldw	r17,48(r2)
  803458:	e0bffc17 	ldw	r2,-16(fp)
  80345c:	10800417 	ldw	r2,16(r2)
  803460:	1009883a 	mov	r4,r2
  803464:	08077380 	call	807738 <__floatsidf>
  803468:	1009883a 	mov	r4,r2
  80346c:	180b883a 	mov	r5,r3
  803470:	04800044 	movi	r18,1
  803474:	200d883a 	mov	r6,r4
  803478:	280f883a 	mov	r7,r5
  80347c:	8009883a 	mov	r4,r16
  803480:	880b883a 	mov	r5,r17
  803484:	08065540 	call	806554 <__gedf2>
  803488:	1000010e 	bge	r2,zero,803490 <logic+0x2a80>
  80348c:	0025883a 	mov	r18,zero
  803490:	9007883a 	mov	r3,r18
  803494:	e0bffc17 	ldw	r2,-16(fp)
  803498:	10c046c5 	stb	r3,283(r2)
  d->_g93 = d->_g69 && d->_cg92;
  80349c:	e0bffc17 	ldw	r2,-16(fp)
  8034a0:	10802c83 	ldbu	r2,178(r2)
  8034a4:	10803fcc 	andi	r2,r2,255
  8034a8:	1080201c 	xori	r2,r2,128
  8034ac:	10bfe004 	addi	r2,r2,-128
  8034b0:	10000826 	beq	r2,zero,8034d4 <logic+0x2ac4>
  8034b4:	e0bffc17 	ldw	r2,-16(fp)
  8034b8:	108046c3 	ldbu	r2,283(r2)
  8034bc:	10803fcc 	andi	r2,r2,255
  8034c0:	1080201c 	xori	r2,r2,128
  8034c4:	10bfe004 	addi	r2,r2,-128
  8034c8:	10000226 	beq	r2,zero,8034d4 <logic+0x2ac4>
  8034cc:	00800044 	movi	r2,1
  8034d0:	00000106 	br	8034d8 <logic+0x2ac8>
  8034d4:	0005883a 	mov	r2,zero
  8034d8:	1007883a 	mov	r3,r2
  8034dc:	e0bffc17 	ldw	r2,-16(fp)
  8034e0:	10c03085 	stb	r3,194(r2)
  if (d->_g93) {
  8034e4:	e0bffc17 	ldw	r2,-16(fp)
  8034e8:	10803083 	ldbu	r2,194(r2)
  8034ec:	10803fcc 	andi	r2,r2,255
  8034f0:	1080201c 	xori	r2,r2,128
  8034f4:	10bfe004 	addi	r2,r2,-128
  8034f8:	10000326 	beq	r2,zero,803508 <logic+0x2af8>
    d->_DDDpacemake2_local__Atrig6 = 1;
  8034fc:	e0bffc17 	ldw	r2,-16(fp)
  803500:	00c00044 	movi	r3,1
  803504:	10c01d85 	stb	r3,118(r2)
  }
  d->_g85 = d->_g64_e2 || d->_g54;
  803508:	e0bffc17 	ldw	r2,-16(fp)
  80350c:	10804e03 	ldbu	r2,312(r2)
  803510:	10803fcc 	andi	r2,r2,255
  803514:	1080201c 	xori	r2,r2,128
  803518:	10bfe004 	addi	r2,r2,-128
  80351c:	1000061e 	bne	r2,zero,803538 <logic+0x2b28>
  803520:	e0bffc17 	ldw	r2,-16(fp)
  803524:	10802943 	ldbu	r2,165(r2)
  803528:	10803fcc 	andi	r2,r2,255
  80352c:	1080201c 	xori	r2,r2,128
  803530:	10bfe004 	addi	r2,r2,-128
  803534:	10000226 	beq	r2,zero,803540 <logic+0x2b30>
  803538:	00800044 	movi	r2,1
  80353c:	00000106 	br	803544 <logic+0x2b34>
  803540:	0005883a 	mov	r2,zero
  803544:	1007883a 	mov	r3,r2
  803548:	e0bffc17 	ldw	r2,-16(fp)
  80354c:	10c02f05 	stb	r3,188(r2)
  d->_cg80 = d->PVARP_counter < d->PVARP_DEADLINE;
  803550:	e0bffc17 	ldw	r2,-16(fp)
  803554:	14000b17 	ldw	r16,44(r2)
  803558:	14400c17 	ldw	r17,48(r2)
  80355c:	e0bffc17 	ldw	r2,-16(fp)
  803560:	10800417 	ldw	r2,16(r2)
  803564:	1009883a 	mov	r4,r2
  803568:	08077380 	call	807738 <__floatsidf>
  80356c:	1009883a 	mov	r4,r2
  803570:	180b883a 	mov	r5,r3
  803574:	04800044 	movi	r18,1
  803578:	200d883a 	mov	r6,r4
  80357c:	280f883a 	mov	r7,r5
  803580:	8009883a 	mov	r4,r16
  803584:	880b883a 	mov	r5,r17
  803588:	08066300 	call	806630 <__ledf2>
  80358c:	10000116 	blt	r2,zero,803594 <logic+0x2b84>
  803590:	0025883a 	mov	r18,zero
  803594:	9007883a 	mov	r3,r18
  803598:	e0bffc17 	ldw	r2,-16(fp)
  80359c:	10c04605 	stb	r3,280(r2)
  d->_g79 = d->_g85 && d->_cg80;
  8035a0:	e0bffc17 	ldw	r2,-16(fp)
  8035a4:	10802f03 	ldbu	r2,188(r2)
  8035a8:	10803fcc 	andi	r2,r2,255
  8035ac:	1080201c 	xori	r2,r2,128
  8035b0:	10bfe004 	addi	r2,r2,-128
  8035b4:	10000826 	beq	r2,zero,8035d8 <logic+0x2bc8>
  8035b8:	e0bffc17 	ldw	r2,-16(fp)
  8035bc:	10804603 	ldbu	r2,280(r2)
  8035c0:	10803fcc 	andi	r2,r2,255
  8035c4:	1080201c 	xori	r2,r2,128
  8035c8:	10bfe004 	addi	r2,r2,-128
  8035cc:	10000226 	beq	r2,zero,8035d8 <logic+0x2bc8>
  8035d0:	00800044 	movi	r2,1
  8035d4:	00000106 	br	8035dc <logic+0x2bcc>
  8035d8:	0005883a 	mov	r2,zero
  8035dc:	1007883a 	mov	r3,r2
  8035e0:	e0bffc17 	ldw	r2,-16(fp)
  8035e4:	10c02dc5 	stb	r3,183(r2)
  if (d->_g79) {
  8035e8:	e0bffc17 	ldw	r2,-16(fp)
  8035ec:	10802dc3 	ldbu	r2,183(r2)
  8035f0:	10803fcc 	andi	r2,r2,255
  8035f4:	1080201c 	xori	r2,r2,128
  8035f8:	10bfe004 	addi	r2,r2,-128
  8035fc:	10003426 	beq	r2,zero,8036d0 <logic+0x2cc0>
    d->sleepT = (d->sleepT < (d->PVARP_DEADLINE - d->PVARP_counter)) ? d->sleepT : (d->PVARP_DEADLINE - d->PVARP_counter);
  803600:	e0bffc17 	ldw	r2,-16(fp)
  803604:	14001617 	ldw	r16,88(r2)
  803608:	14401717 	ldw	r17,92(r2)
  80360c:	e0bffc17 	ldw	r2,-16(fp)
  803610:	10800417 	ldw	r2,16(r2)
  803614:	1009883a 	mov	r4,r2
  803618:	08077380 	call	807738 <__floatsidf>
  80361c:	1011883a 	mov	r8,r2
  803620:	1813883a 	mov	r9,r3
  803624:	e13ffc17 	ldw	r4,-16(fp)
  803628:	20800b17 	ldw	r2,44(r4)
  80362c:	20c00c17 	ldw	r3,48(r4)
  803630:	100d883a 	mov	r6,r2
  803634:	180f883a 	mov	r7,r3
  803638:	4009883a 	mov	r4,r8
  80363c:	480b883a 	mov	r5,r9
  803640:	0806e3c0 	call	806e3c <__subdf3>
  803644:	1009883a 	mov	r4,r2
  803648:	180b883a 	mov	r5,r3
  80364c:	2005883a 	mov	r2,r4
  803650:	2807883a 	mov	r3,r5
  803654:	100d883a 	mov	r6,r2
  803658:	180f883a 	mov	r7,r3
  80365c:	8009883a 	mov	r4,r16
  803660:	880b883a 	mov	r5,r17
  803664:	08066300 	call	806630 <__ledf2>
  803668:	1000040e 	bge	r2,zero,80367c <logic+0x2c6c>
  80366c:	e13ffc17 	ldw	r4,-16(fp)
  803670:	20801617 	ldw	r2,88(r4)
  803674:	20c01717 	ldw	r3,92(r4)
  803678:	00001206 	br	8036c4 <logic+0x2cb4>
  80367c:	e0bffc17 	ldw	r2,-16(fp)
  803680:	10800417 	ldw	r2,16(r2)
  803684:	1009883a 	mov	r4,r2
  803688:	08077380 	call	807738 <__floatsidf>
  80368c:	1011883a 	mov	r8,r2
  803690:	1813883a 	mov	r9,r3
  803694:	e13ffc17 	ldw	r4,-16(fp)
  803698:	20800b17 	ldw	r2,44(r4)
  80369c:	20c00c17 	ldw	r3,48(r4)
  8036a0:	100d883a 	mov	r6,r2
  8036a4:	180f883a 	mov	r7,r3
  8036a8:	4009883a 	mov	r4,r8
  8036ac:	480b883a 	mov	r5,r9
  8036b0:	0806e3c0 	call	806e3c <__subdf3>
  8036b4:	1009883a 	mov	r4,r2
  8036b8:	180b883a 	mov	r5,r3
  8036bc:	2005883a 	mov	r2,r4
  8036c0:	2807883a 	mov	r3,r5
  8036c4:	e13ffc17 	ldw	r4,-16(fp)
  8036c8:	20801615 	stw	r2,88(r4)
  8036cc:	20c01715 	stw	r3,92(r4)
  }
  d->_cg81 = d->_DDDpacemake2_local__Atrig5 || d->_DDDpacemake2_local__Atrig6;
  8036d0:	e0bffc17 	ldw	r2,-16(fp)
  8036d4:	10801d43 	ldbu	r2,117(r2)
  8036d8:	10803fcc 	andi	r2,r2,255
  8036dc:	1080201c 	xori	r2,r2,128
  8036e0:	10bfe004 	addi	r2,r2,-128
  8036e4:	1000061e 	bne	r2,zero,803700 <logic+0x2cf0>
  8036e8:	e0bffc17 	ldw	r2,-16(fp)
  8036ec:	10801d83 	ldbu	r2,118(r2)
  8036f0:	10803fcc 	andi	r2,r2,255
  8036f4:	1080201c 	xori	r2,r2,128
  8036f8:	10bfe004 	addi	r2,r2,-128
  8036fc:	10000226 	beq	r2,zero,803708 <logic+0x2cf8>
  803700:	00800044 	movi	r2,1
  803704:	00000106 	br	80370c <logic+0x2cfc>
  803708:	0005883a 	mov	r2,zero
  80370c:	1007883a 	mov	r3,r2
  803710:	e0bffc17 	ldw	r2,-16(fp)
  803714:	10c045c5 	stb	r3,279(r2)
  d->_g80 = d->_g85 && !d->_cg80;
  803718:	e0bffc17 	ldw	r2,-16(fp)
  80371c:	10802f03 	ldbu	r2,188(r2)
  803720:	10803fcc 	andi	r2,r2,255
  803724:	1080201c 	xori	r2,r2,128
  803728:	10bfe004 	addi	r2,r2,-128
  80372c:	10000826 	beq	r2,zero,803750 <logic+0x2d40>
  803730:	e0bffc17 	ldw	r2,-16(fp)
  803734:	10804603 	ldbu	r2,280(r2)
  803738:	10803fcc 	andi	r2,r2,255
  80373c:	1080201c 	xori	r2,r2,128
  803740:	10bfe004 	addi	r2,r2,-128
  803744:	1000021e 	bne	r2,zero,803750 <logic+0x2d40>
  803748:	00800044 	movi	r2,1
  80374c:	00000106 	br	803754 <logic+0x2d44>
  803750:	0005883a 	mov	r2,zero
  803754:	1007883a 	mov	r3,r2
  803758:	e0bffc17 	ldw	r2,-16(fp)
  80375c:	10c02e05 	stb	r3,184(r2)
  d->_cg83 = d->_DDDpacemake2_local__Atrig5 || d->_DDDpacemake2_local__Atrig6;
  803760:	e0bffc17 	ldw	r2,-16(fp)
  803764:	10801d43 	ldbu	r2,117(r2)
  803768:	10803fcc 	andi	r2,r2,255
  80376c:	1080201c 	xori	r2,r2,128
  803770:	10bfe004 	addi	r2,r2,-128
  803774:	1000061e 	bne	r2,zero,803790 <logic+0x2d80>
  803778:	e0bffc17 	ldw	r2,-16(fp)
  80377c:	10801d83 	ldbu	r2,118(r2)
  803780:	10803fcc 	andi	r2,r2,255
  803784:	1080201c 	xori	r2,r2,128
  803788:	10bfe004 	addi	r2,r2,-128
  80378c:	10000226 	beq	r2,zero,803798 <logic+0x2d88>
  803790:	00800044 	movi	r2,1
  803794:	00000106 	br	80379c <logic+0x2d8c>
  803798:	0005883a 	mov	r2,zero
  80379c:	1007883a 	mov	r3,r2
  8037a0:	e0bffc17 	ldw	r2,-16(fp)
  8037a4:	10c04645 	stb	r3,281(r2)
  d->_g82 = d->_g79 && d->_cg81 || d->_g80 && d->_cg83;
  8037a8:	e0bffc17 	ldw	r2,-16(fp)
  8037ac:	10802dc3 	ldbu	r2,183(r2)
  8037b0:	10803fcc 	andi	r2,r2,255
  8037b4:	1080201c 	xori	r2,r2,128
  8037b8:	10bfe004 	addi	r2,r2,-128
  8037bc:	10000626 	beq	r2,zero,8037d8 <logic+0x2dc8>
  8037c0:	e0bffc17 	ldw	r2,-16(fp)
  8037c4:	108045c3 	ldbu	r2,279(r2)
  8037c8:	10803fcc 	andi	r2,r2,255
  8037cc:	1080201c 	xori	r2,r2,128
  8037d0:	10bfe004 	addi	r2,r2,-128
  8037d4:	10000c1e 	bne	r2,zero,803808 <logic+0x2df8>
  8037d8:	e0bffc17 	ldw	r2,-16(fp)
  8037dc:	10802e03 	ldbu	r2,184(r2)
  8037e0:	10803fcc 	andi	r2,r2,255
  8037e4:	1080201c 	xori	r2,r2,128
  8037e8:	10bfe004 	addi	r2,r2,-128
  8037ec:	10000826 	beq	r2,zero,803810 <logic+0x2e00>
  8037f0:	e0bffc17 	ldw	r2,-16(fp)
  8037f4:	10804643 	ldbu	r2,281(r2)
  8037f8:	10803fcc 	andi	r2,r2,255
  8037fc:	1080201c 	xori	r2,r2,128
  803800:	10bfe004 	addi	r2,r2,-128
  803804:	10000226 	beq	r2,zero,803810 <logic+0x2e00>
  803808:	00800044 	movi	r2,1
  80380c:	00000106 	br	803814 <logic+0x2e04>
  803810:	0005883a 	mov	r2,zero
  803814:	1007883a 	mov	r3,r2
  803818:	e0bffc17 	ldw	r2,-16(fp)
  80381c:	10c02e85 	stb	r3,186(r2)
  d->_g89 = !d->_g48;
  803820:	e0bffc17 	ldw	r2,-16(fp)
  803824:	10802803 	ldbu	r2,160(r2)
  803828:	10803fcc 	andi	r2,r2,255
  80382c:	1080201c 	xori	r2,r2,128
  803830:	10bfe004 	addi	r2,r2,-128
  803834:	1005003a 	cmpeq	r2,r2,zero
  803838:	1007883a 	mov	r3,r2
  80383c:	e0bffc17 	ldw	r2,-16(fp)
  803840:	10c02f85 	stb	r3,190(r2)
  d->_g93 = d->_g49 || d->_g93;
  803844:	e0bffc17 	ldw	r2,-16(fp)
  803848:	10802843 	ldbu	r2,161(r2)
  80384c:	10803fcc 	andi	r2,r2,255
  803850:	1080201c 	xori	r2,r2,128
  803854:	10bfe004 	addi	r2,r2,-128
  803858:	1000061e 	bne	r2,zero,803874 <logic+0x2e64>
  80385c:	e0bffc17 	ldw	r2,-16(fp)
  803860:	10803083 	ldbu	r2,194(r2)
  803864:	10803fcc 	andi	r2,r2,255
  803868:	1080201c 	xori	r2,r2,128
  80386c:	10bfe004 	addi	r2,r2,-128
  803870:	10000226 	beq	r2,zero,80387c <logic+0x2e6c>
  803874:	00800044 	movi	r2,1
  803878:	00000106 	br	803880 <logic+0x2e70>
  80387c:	0005883a 	mov	r2,zero
  803880:	1007883a 	mov	r3,r2
  803884:	e0bffc17 	ldw	r2,-16(fp)
  803888:	10c03085 	stb	r3,194(r2)
  d->_g90 = (d->_g67 || d->_g82) && (d->_g89 || d->_g93) && (d->_g82 || d->_g93);
  80388c:	e0bffc17 	ldw	r2,-16(fp)
  803890:	10802c03 	ldbu	r2,176(r2)
  803894:	10803fcc 	andi	r2,r2,255
  803898:	1080201c 	xori	r2,r2,128
  80389c:	10bfe004 	addi	r2,r2,-128
  8038a0:	1000061e 	bne	r2,zero,8038bc <logic+0x2eac>
  8038a4:	e0bffc17 	ldw	r2,-16(fp)
  8038a8:	10802e83 	ldbu	r2,186(r2)
  8038ac:	10803fcc 	andi	r2,r2,255
  8038b0:	1080201c 	xori	r2,r2,128
  8038b4:	10bfe004 	addi	r2,r2,-128
  8038b8:	10001a26 	beq	r2,zero,803924 <logic+0x2f14>
  8038bc:	e0bffc17 	ldw	r2,-16(fp)
  8038c0:	10802f83 	ldbu	r2,190(r2)
  8038c4:	10803fcc 	andi	r2,r2,255
  8038c8:	1080201c 	xori	r2,r2,128
  8038cc:	10bfe004 	addi	r2,r2,-128
  8038d0:	1000061e 	bne	r2,zero,8038ec <logic+0x2edc>
  8038d4:	e0bffc17 	ldw	r2,-16(fp)
  8038d8:	10803083 	ldbu	r2,194(r2)
  8038dc:	10803fcc 	andi	r2,r2,255
  8038e0:	1080201c 	xori	r2,r2,128
  8038e4:	10bfe004 	addi	r2,r2,-128
  8038e8:	10000e26 	beq	r2,zero,803924 <logic+0x2f14>
  8038ec:	e0bffc17 	ldw	r2,-16(fp)
  8038f0:	10802e83 	ldbu	r2,186(r2)
  8038f4:	10803fcc 	andi	r2,r2,255
  8038f8:	1080201c 	xori	r2,r2,128
  8038fc:	10bfe004 	addi	r2,r2,-128
  803900:	1000061e 	bne	r2,zero,80391c <logic+0x2f0c>
  803904:	e0bffc17 	ldw	r2,-16(fp)
  803908:	10803083 	ldbu	r2,194(r2)
  80390c:	10803fcc 	andi	r2,r2,255
  803910:	1080201c 	xori	r2,r2,128
  803914:	10bfe004 	addi	r2,r2,-128
  803918:	10000226 	beq	r2,zero,803924 <logic+0x2f14>
  80391c:	00800044 	movi	r2,1
  803920:	00000106 	br	803928 <logic+0x2f18>
  803924:	0005883a 	mov	r2,zero
  803928:	1007883a 	mov	r3,r2
  80392c:	e0bffc17 	ldw	r2,-16(fp)
  803930:	10c02fc5 	stb	r3,191(r2)
  d->_cg94 = d->_DDDpacemake2_local__Atrig5;
  803934:	e0bffc17 	ldw	r2,-16(fp)
  803938:	10c01d43 	ldbu	r3,117(r2)
  80393c:	e0bffc17 	ldw	r2,-16(fp)
  803940:	10c04745 	stb	r3,285(r2)
  d->_g82_e1 = d->_g90 && !d->_cg94;
  803944:	e0bffc17 	ldw	r2,-16(fp)
  803948:	10802fc3 	ldbu	r2,191(r2)
  80394c:	10803fcc 	andi	r2,r2,255
  803950:	1080201c 	xori	r2,r2,128
  803954:	10bfe004 	addi	r2,r2,-128
  803958:	10000826 	beq	r2,zero,80397c <logic+0x2f6c>
  80395c:	e0bffc17 	ldw	r2,-16(fp)
  803960:	10804743 	ldbu	r2,285(r2)
  803964:	10803fcc 	andi	r2,r2,255
  803968:	1080201c 	xori	r2,r2,128
  80396c:	10bfe004 	addi	r2,r2,-128
  803970:	1000021e 	bne	r2,zero,80397c <logic+0x2f6c>
  803974:	00800044 	movi	r2,1
  803978:	00000106 	br	803980 <logic+0x2f70>
  80397c:	0005883a 	mov	r2,zero
  803980:	1007883a 	mov	r3,r2
  803984:	e0bffc17 	ldw	r2,-16(fp)
  803988:	10c04e45 	stb	r3,313(r2)
  if (d->_g82_e1) {
  80398c:	e0bffc17 	ldw	r2,-16(fp)
  803990:	10804e43 	ldbu	r2,313(r2)
  803994:	10803fcc 	andi	r2,r2,255
  803998:	1080201c 	xori	r2,r2,128
  80399c:	10bfe004 	addi	r2,r2,-128
  8039a0:	10000426 	beq	r2,zero,8039b4 <logic+0x2fa4>
    d->_DDDpacemake2_local_PVARP_state = 0;
  8039a4:	e0bffc17 	ldw	r2,-16(fp)
  8039a8:	100018c5 	stb	zero,99(r2)
    d->_DDDpacemake2_local_AR = 0;
  8039ac:	e0bffc17 	ldw	r2,-16(fp)
  8039b0:	10001985 	stb	zero,102(r2)
  }
  d->_g91_e2 = d->_GO || d->_g82_e1 || d->_g98 || d->_g97 && !d->AS;
  8039b4:	e0bffc17 	ldw	r2,-16(fp)
  8039b8:	10803ec3 	ldbu	r2,251(r2)
  8039bc:	10803fcc 	andi	r2,r2,255
  8039c0:	1080201c 	xori	r2,r2,128
  8039c4:	10bfe004 	addi	r2,r2,-128
  8039c8:	1000181e 	bne	r2,zero,803a2c <logic+0x301c>
  8039cc:	e0bffc17 	ldw	r2,-16(fp)
  8039d0:	10804e43 	ldbu	r2,313(r2)
  8039d4:	10803fcc 	andi	r2,r2,255
  8039d8:	1080201c 	xori	r2,r2,128
  8039dc:	10bfe004 	addi	r2,r2,-128
  8039e0:	1000121e 	bne	r2,zero,803a2c <logic+0x301c>
  8039e4:	e0bffc17 	ldw	r2,-16(fp)
  8039e8:	108031c3 	ldbu	r2,199(r2)
  8039ec:	10803fcc 	andi	r2,r2,255
  8039f0:	1080201c 	xori	r2,r2,128
  8039f4:	10bfe004 	addi	r2,r2,-128
  8039f8:	10000c1e 	bne	r2,zero,803a2c <logic+0x301c>
  8039fc:	e0bffc17 	ldw	r2,-16(fp)
  803a00:	10803183 	ldbu	r2,198(r2)
  803a04:	10803fcc 	andi	r2,r2,255
  803a08:	1080201c 	xori	r2,r2,128
  803a0c:	10bfe004 	addi	r2,r2,-128
  803a10:	10000826 	beq	r2,zero,803a34 <logic+0x3024>
  803a14:	e0bffc17 	ldw	r2,-16(fp)
  803a18:	10800603 	ldbu	r2,24(r2)
  803a1c:	10803fcc 	andi	r2,r2,255
  803a20:	1080201c 	xori	r2,r2,128
  803a24:	10bfe004 	addi	r2,r2,-128
  803a28:	1000021e 	bne	r2,zero,803a34 <logic+0x3024>
  803a2c:	00800044 	movi	r2,1
  803a30:	00000106 	br	803a38 <logic+0x3028>
  803a34:	0005883a 	mov	r2,zero
  803a38:	1007883a 	mov	r3,r2
  803a3c:	e0bffc17 	ldw	r2,-16(fp)
  803a40:	10c04e85 	stb	r3,314(r2)
  d->_g91 = d->_g73 && d->_cg73;
  803a44:	e0bffc17 	ldw	r2,-16(fp)
  803a48:	10802cc3 	ldbu	r2,179(r2)
  803a4c:	10803fcc 	andi	r2,r2,255
  803a50:	1080201c 	xori	r2,r2,128
  803a54:	10bfe004 	addi	r2,r2,-128
  803a58:	10000826 	beq	r2,zero,803a7c <logic+0x306c>
  803a5c:	e0bffc17 	ldw	r2,-16(fp)
  803a60:	10804503 	ldbu	r2,276(r2)
  803a64:	10803fcc 	andi	r2,r2,255
  803a68:	1080201c 	xori	r2,r2,128
  803a6c:	10bfe004 	addi	r2,r2,-128
  803a70:	10000226 	beq	r2,zero,803a7c <logic+0x306c>
  803a74:	00800044 	movi	r2,1
  803a78:	00000106 	br	803a80 <logic+0x3070>
  803a7c:	0005883a 	mov	r2,zero
  803a80:	1007883a 	mov	r3,r2
  803a84:	e0bffc17 	ldw	r2,-16(fp)
  803a88:	10c03005 	stb	r3,192(r2)
  if (d->_g91) {
  803a8c:	e0bffc17 	ldw	r2,-16(fp)
  803a90:	10803003 	ldbu	r2,192(r2)
  803a94:	10803fcc 	andi	r2,r2,255
  803a98:	1080201c 	xori	r2,r2,128
  803a9c:	10bfe004 	addi	r2,r2,-128
  803aa0:	10000626 	beq	r2,zero,803abc <logic+0x30ac>
    d->_DDDpacemake2_local_PVARP_state = 1;
  803aa4:	e0bffc17 	ldw	r2,-16(fp)
  803aa8:	00c00044 	movi	r3,1
  803aac:	10c018c5 	stb	r3,99(r2)
    d->PVARP_counter = 0;
  803ab0:	e0bffc17 	ldw	r2,-16(fp)
  803ab4:	10000b15 	stw	zero,44(r2)
  803ab8:	10000c15 	stw	zero,48(r2)
  }
  d->_g82 = d->_g90 && d->_cg94;
  803abc:	e0bffc17 	ldw	r2,-16(fp)
  803ac0:	10802fc3 	ldbu	r2,191(r2)
  803ac4:	10803fcc 	andi	r2,r2,255
  803ac8:	1080201c 	xori	r2,r2,128
  803acc:	10bfe004 	addi	r2,r2,-128
  803ad0:	10000826 	beq	r2,zero,803af4 <logic+0x30e4>
  803ad4:	e0bffc17 	ldw	r2,-16(fp)
  803ad8:	10804743 	ldbu	r2,285(r2)
  803adc:	10803fcc 	andi	r2,r2,255
  803ae0:	1080201c 	xori	r2,r2,128
  803ae4:	10bfe004 	addi	r2,r2,-128
  803ae8:	10000226 	beq	r2,zero,803af4 <logic+0x30e4>
  803aec:	00800044 	movi	r2,1
  803af0:	00000106 	br	803af8 <logic+0x30e8>
  803af4:	0005883a 	mov	r2,zero
  803af8:	1007883a 	mov	r3,r2
  803afc:	e0bffc17 	ldw	r2,-16(fp)
  803b00:	10c02e85 	stb	r3,186(r2)
  if (d->_g82) {
  803b04:	e0bffc17 	ldw	r2,-16(fp)
  803b08:	10802e83 	ldbu	r2,186(r2)
  803b0c:	10803fcc 	andi	r2,r2,255
  803b10:	1080201c 	xori	r2,r2,128
  803b14:	10bfe004 	addi	r2,r2,-128
  803b18:	10000326 	beq	r2,zero,803b28 <logic+0x3118>
    d->_DDDpacemake2_local_AR = 1;
  803b1c:	e0bffc17 	ldw	r2,-16(fp)
  803b20:	00c00044 	movi	r3,1
  803b24:	10c01985 	stb	r3,102(r2)
  }
  d->_g96 = d->_g91 || d->_g82;
  803b28:	e0bffc17 	ldw	r2,-16(fp)
  803b2c:	10803003 	ldbu	r2,192(r2)
  803b30:	10803fcc 	andi	r2,r2,255
  803b34:	1080201c 	xori	r2,r2,128
  803b38:	10bfe004 	addi	r2,r2,-128
  803b3c:	1000061e 	bne	r2,zero,803b58 <logic+0x3148>
  803b40:	e0bffc17 	ldw	r2,-16(fp)
  803b44:	10802e83 	ldbu	r2,186(r2)
  803b48:	10803fcc 	andi	r2,r2,255
  803b4c:	1080201c 	xori	r2,r2,128
  803b50:	10bfe004 	addi	r2,r2,-128
  803b54:	10000226 	beq	r2,zero,803b60 <logic+0x3150>
  803b58:	00800044 	movi	r2,1
  803b5c:	00000106 	br	803b64 <logic+0x3154>
  803b60:	0005883a 	mov	r2,zero
  803b64:	1007883a 	mov	r3,r2
  803b68:	e0bffc17 	ldw	r2,-16(fp)
  803b6c:	10c03145 	stb	r3,197(r2)
  if (d->_g96) {
  803b70:	e0bffc17 	ldw	r2,-16(fp)
  803b74:	10803143 	ldbu	r2,197(r2)
  803b78:	10803fcc 	andi	r2,r2,255
  803b7c:	1080201c 	xori	r2,r2,128
  803b80:	10bfe004 	addi	r2,r2,-128
  803b84:	10000426 	beq	r2,zero,803b98 <logic+0x3188>
    d->_DDDpacemake2_local__Atrig5 = 0;
  803b88:	e0bffc17 	ldw	r2,-16(fp)
  803b8c:	10001d45 	stb	zero,117(r2)
    d->_DDDpacemake2_local__Atrig6 = 0;
  803b90:	e0bffc17 	ldw	r2,-16(fp)
  803b94:	10001d85 	stb	zero,118(r2)
  }
  d->_cg76 = d->PVARP_counter < d->PVARP_DEADLINE;
  803b98:	e0bffc17 	ldw	r2,-16(fp)
  803b9c:	14000b17 	ldw	r16,44(r2)
  803ba0:	14400c17 	ldw	r17,48(r2)
  803ba4:	e0bffc17 	ldw	r2,-16(fp)
  803ba8:	10800417 	ldw	r2,16(r2)
  803bac:	1009883a 	mov	r4,r2
  803bb0:	08077380 	call	807738 <__floatsidf>
  803bb4:	1009883a 	mov	r4,r2
  803bb8:	180b883a 	mov	r5,r3
  803bbc:	04800044 	movi	r18,1
  803bc0:	200d883a 	mov	r6,r4
  803bc4:	280f883a 	mov	r7,r5
  803bc8:	8009883a 	mov	r4,r16
  803bcc:	880b883a 	mov	r5,r17
  803bd0:	08066300 	call	806630 <__ledf2>
  803bd4:	10000116 	blt	r2,zero,803bdc <logic+0x31cc>
  803bd8:	0025883a 	mov	r18,zero
  803bdc:	9007883a 	mov	r3,r18
  803be0:	e0bffc17 	ldw	r2,-16(fp)
  803be4:	10c04545 	stb	r3,277(r2)
  d->_g97 = d->_g96 && d->_cg76;
  803be8:	e0bffc17 	ldw	r2,-16(fp)
  803bec:	10803143 	ldbu	r2,197(r2)
  803bf0:	10803fcc 	andi	r2,r2,255
  803bf4:	1080201c 	xori	r2,r2,128
  803bf8:	10bfe004 	addi	r2,r2,-128
  803bfc:	10000826 	beq	r2,zero,803c20 <logic+0x3210>
  803c00:	e0bffc17 	ldw	r2,-16(fp)
  803c04:	10804543 	ldbu	r2,277(r2)
  803c08:	10803fcc 	andi	r2,r2,255
  803c0c:	1080201c 	xori	r2,r2,128
  803c10:	10bfe004 	addi	r2,r2,-128
  803c14:	10000226 	beq	r2,zero,803c20 <logic+0x3210>
  803c18:	00800044 	movi	r2,1
  803c1c:	00000106 	br	803c24 <logic+0x3214>
  803c20:	0005883a 	mov	r2,zero
  803c24:	1007883a 	mov	r3,r2
  803c28:	e0bffc17 	ldw	r2,-16(fp)
  803c2c:	10c03185 	stb	r3,198(r2)
  if (d->_g97) {
  803c30:	e0bffc17 	ldw	r2,-16(fp)
  803c34:	10803183 	ldbu	r2,198(r2)
  803c38:	10803fcc 	andi	r2,r2,255
  803c3c:	1080201c 	xori	r2,r2,128
  803c40:	10bfe004 	addi	r2,r2,-128
  803c44:	10003426 	beq	r2,zero,803d18 <logic+0x3308>
    d->sleepT = (d->sleepT < (d->PVARP_DEADLINE - d->PVARP_counter)) ? d->sleepT : (d->PVARP_DEADLINE - d->PVARP_counter);
  803c48:	e0bffc17 	ldw	r2,-16(fp)
  803c4c:	14001617 	ldw	r16,88(r2)
  803c50:	14401717 	ldw	r17,92(r2)
  803c54:	e0bffc17 	ldw	r2,-16(fp)
  803c58:	10800417 	ldw	r2,16(r2)
  803c5c:	1009883a 	mov	r4,r2
  803c60:	08077380 	call	807738 <__floatsidf>
  803c64:	1011883a 	mov	r8,r2
  803c68:	1813883a 	mov	r9,r3
  803c6c:	e13ffc17 	ldw	r4,-16(fp)
  803c70:	20800b17 	ldw	r2,44(r4)
  803c74:	20c00c17 	ldw	r3,48(r4)
  803c78:	100d883a 	mov	r6,r2
  803c7c:	180f883a 	mov	r7,r3
  803c80:	4009883a 	mov	r4,r8
  803c84:	480b883a 	mov	r5,r9
  803c88:	0806e3c0 	call	806e3c <__subdf3>
  803c8c:	1009883a 	mov	r4,r2
  803c90:	180b883a 	mov	r5,r3
  803c94:	2005883a 	mov	r2,r4
  803c98:	2807883a 	mov	r3,r5
  803c9c:	100d883a 	mov	r6,r2
  803ca0:	180f883a 	mov	r7,r3
  803ca4:	8009883a 	mov	r4,r16
  803ca8:	880b883a 	mov	r5,r17
  803cac:	08066300 	call	806630 <__ledf2>
  803cb0:	1000040e 	bge	r2,zero,803cc4 <logic+0x32b4>
  803cb4:	e13ffc17 	ldw	r4,-16(fp)
  803cb8:	20801617 	ldw	r2,88(r4)
  803cbc:	20c01717 	ldw	r3,92(r4)
  803cc0:	00001206 	br	803d0c <logic+0x32fc>
  803cc4:	e0bffc17 	ldw	r2,-16(fp)
  803cc8:	10800417 	ldw	r2,16(r2)
  803ccc:	1009883a 	mov	r4,r2
  803cd0:	08077380 	call	807738 <__floatsidf>
  803cd4:	1011883a 	mov	r8,r2
  803cd8:	1813883a 	mov	r9,r3
  803cdc:	e13ffc17 	ldw	r4,-16(fp)
  803ce0:	20800b17 	ldw	r2,44(r4)
  803ce4:	20c00c17 	ldw	r3,48(r4)
  803ce8:	100d883a 	mov	r6,r2
  803cec:	180f883a 	mov	r7,r3
  803cf0:	4009883a 	mov	r4,r8
  803cf4:	480b883a 	mov	r5,r9
  803cf8:	0806e3c0 	call	806e3c <__subdf3>
  803cfc:	1009883a 	mov	r4,r2
  803d00:	180b883a 	mov	r5,r3
  803d04:	2005883a 	mov	r2,r4
  803d08:	2807883a 	mov	r3,r5
  803d0c:	e13ffc17 	ldw	r4,-16(fp)
  803d10:	20801615 	stw	r2,88(r4)
  803d14:	20c01715 	stw	r3,92(r4)
  }
  d->_cg77 = d->_DDDpacemake2_local__Atrig5 || d->_DDDpacemake2_local__Atrig6;
  803d18:	e0bffc17 	ldw	r2,-16(fp)
  803d1c:	10801d43 	ldbu	r2,117(r2)
  803d20:	10803fcc 	andi	r2,r2,255
  803d24:	1080201c 	xori	r2,r2,128
  803d28:	10bfe004 	addi	r2,r2,-128
  803d2c:	1000061e 	bne	r2,zero,803d48 <logic+0x3338>
  803d30:	e0bffc17 	ldw	r2,-16(fp)
  803d34:	10801d83 	ldbu	r2,118(r2)
  803d38:	10803fcc 	andi	r2,r2,255
  803d3c:	1080201c 	xori	r2,r2,128
  803d40:	10bfe004 	addi	r2,r2,-128
  803d44:	10000226 	beq	r2,zero,803d50 <logic+0x3340>
  803d48:	00800044 	movi	r2,1
  803d4c:	00000106 	br	803d54 <logic+0x3344>
  803d50:	0005883a 	mov	r2,zero
  803d54:	1007883a 	mov	r3,r2
  803d58:	e0bffc17 	ldw	r2,-16(fp)
  803d5c:	10c04585 	stb	r3,278(r2)
  d->_g98 = d->_g97 && !d->_cg77 || d->_g79 && !d->_cg81;
  803d60:	e0bffc17 	ldw	r2,-16(fp)
  803d64:	10803183 	ldbu	r2,198(r2)
  803d68:	10803fcc 	andi	r2,r2,255
  803d6c:	1080201c 	xori	r2,r2,128
  803d70:	10bfe004 	addi	r2,r2,-128
  803d74:	10000626 	beq	r2,zero,803d90 <logic+0x3380>
  803d78:	e0bffc17 	ldw	r2,-16(fp)
  803d7c:	10804583 	ldbu	r2,278(r2)
  803d80:	10803fcc 	andi	r2,r2,255
  803d84:	1080201c 	xori	r2,r2,128
  803d88:	10bfe004 	addi	r2,r2,-128
  803d8c:	10000c26 	beq	r2,zero,803dc0 <logic+0x33b0>
  803d90:	e0bffc17 	ldw	r2,-16(fp)
  803d94:	10802dc3 	ldbu	r2,183(r2)
  803d98:	10803fcc 	andi	r2,r2,255
  803d9c:	1080201c 	xori	r2,r2,128
  803da0:	10bfe004 	addi	r2,r2,-128
  803da4:	10000826 	beq	r2,zero,803dc8 <logic+0x33b8>
  803da8:	e0bffc17 	ldw	r2,-16(fp)
  803dac:	108045c3 	ldbu	r2,279(r2)
  803db0:	10803fcc 	andi	r2,r2,255
  803db4:	1080201c 	xori	r2,r2,128
  803db8:	10bfe004 	addi	r2,r2,-128
  803dbc:	1000021e 	bne	r2,zero,803dc8 <logic+0x33b8>
  803dc0:	00800044 	movi	r2,1
  803dc4:	00000106 	br	803dcc <logic+0x33bc>
  803dc8:	0005883a 	mov	r2,zero
  803dcc:	1007883a 	mov	r3,r2
  803dd0:	e0bffc17 	ldw	r2,-16(fp)
  803dd4:	10c031c5 	stb	r3,199(r2)
  d->_g73 = d->_g96 && !d->_cg76;
  803dd8:	e0bffc17 	ldw	r2,-16(fp)
  803ddc:	10803143 	ldbu	r2,197(r2)
  803de0:	10803fcc 	andi	r2,r2,255
  803de4:	1080201c 	xori	r2,r2,128
  803de8:	10bfe004 	addi	r2,r2,-128
  803dec:	10000826 	beq	r2,zero,803e10 <logic+0x3400>
  803df0:	e0bffc17 	ldw	r2,-16(fp)
  803df4:	10804543 	ldbu	r2,277(r2)
  803df8:	10803fcc 	andi	r2,r2,255
  803dfc:	1080201c 	xori	r2,r2,128
  803e00:	10bfe004 	addi	r2,r2,-128
  803e04:	1000021e 	bne	r2,zero,803e10 <logic+0x3400>
  803e08:	00800044 	movi	r2,1
  803e0c:	00000106 	br	803e14 <logic+0x3404>
  803e10:	0005883a 	mov	r2,zero
  803e14:	1007883a 	mov	r3,r2
  803e18:	e0bffc17 	ldw	r2,-16(fp)
  803e1c:	10c02cc5 	stb	r3,179(r2)
  d->_cg86 = d->_DDDpacemake2_local__Atrig5 || d->_DDDpacemake2_local__Atrig6;
  803e20:	e0bffc17 	ldw	r2,-16(fp)
  803e24:	10801d43 	ldbu	r2,117(r2)
  803e28:	10803fcc 	andi	r2,r2,255
  803e2c:	1080201c 	xori	r2,r2,128
  803e30:	10bfe004 	addi	r2,r2,-128
  803e34:	1000061e 	bne	r2,zero,803e50 <logic+0x3440>
  803e38:	e0bffc17 	ldw	r2,-16(fp)
  803e3c:	10801d83 	ldbu	r2,118(r2)
  803e40:	10803fcc 	andi	r2,r2,255
  803e44:	1080201c 	xori	r2,r2,128
  803e48:	10bfe004 	addi	r2,r2,-128
  803e4c:	10000226 	beq	r2,zero,803e58 <logic+0x3448>
  803e50:	00800044 	movi	r2,1
  803e54:	00000106 	br	803e5c <logic+0x344c>
  803e58:	0005883a 	mov	r2,zero
  803e5c:	1007883a 	mov	r3,r2
  803e60:	e0bffc17 	ldw	r2,-16(fp)
  803e64:	10c04685 	stb	r3,282(r2)
  d->_g94 = d->_g80 && !d->_cg83 || d->_g73 && !d->_cg86;
  803e68:	e0bffc17 	ldw	r2,-16(fp)
  803e6c:	10802e03 	ldbu	r2,184(r2)
  803e70:	10803fcc 	andi	r2,r2,255
  803e74:	1080201c 	xori	r2,r2,128
  803e78:	10bfe004 	addi	r2,r2,-128
  803e7c:	10000626 	beq	r2,zero,803e98 <logic+0x3488>
  803e80:	e0bffc17 	ldw	r2,-16(fp)
  803e84:	10804643 	ldbu	r2,281(r2)
  803e88:	10803fcc 	andi	r2,r2,255
  803e8c:	1080201c 	xori	r2,r2,128
  803e90:	10bfe004 	addi	r2,r2,-128
  803e94:	10000c26 	beq	r2,zero,803ec8 <logic+0x34b8>
  803e98:	e0bffc17 	ldw	r2,-16(fp)
  803e9c:	10802cc3 	ldbu	r2,179(r2)
  803ea0:	10803fcc 	andi	r2,r2,255
  803ea4:	1080201c 	xori	r2,r2,128
  803ea8:	10bfe004 	addi	r2,r2,-128
  803eac:	10000826 	beq	r2,zero,803ed0 <logic+0x34c0>
  803eb0:	e0bffc17 	ldw	r2,-16(fp)
  803eb4:	10804683 	ldbu	r2,282(r2)
  803eb8:	10803fcc 	andi	r2,r2,255
  803ebc:	1080201c 	xori	r2,r2,128
  803ec0:	10bfe004 	addi	r2,r2,-128
  803ec4:	1000021e 	bne	r2,zero,803ed0 <logic+0x34c0>
  803ec8:	00800044 	movi	r2,1
  803ecc:	00000106 	br	803ed4 <logic+0x34c4>
  803ed0:	0005883a 	mov	r2,zero
  803ed4:	1007883a 	mov	r3,r2
  803ed8:	e0bffc17 	ldw	r2,-16(fp)
  803edc:	10c030c5 	stb	r3,195(r2)
  d->_g95 = d->_g96 || d->_g69 && !d->_cg92;
  803ee0:	e0bffc17 	ldw	r2,-16(fp)
  803ee4:	10803143 	ldbu	r2,197(r2)
  803ee8:	10803fcc 	andi	r2,r2,255
  803eec:	1080201c 	xori	r2,r2,128
  803ef0:	10bfe004 	addi	r2,r2,-128
  803ef4:	10000c1e 	bne	r2,zero,803f28 <logic+0x3518>
  803ef8:	e0bffc17 	ldw	r2,-16(fp)
  803efc:	10802c83 	ldbu	r2,178(r2)
  803f00:	10803fcc 	andi	r2,r2,255
  803f04:	1080201c 	xori	r2,r2,128
  803f08:	10bfe004 	addi	r2,r2,-128
  803f0c:	10000826 	beq	r2,zero,803f30 <logic+0x3520>
  803f10:	e0bffc17 	ldw	r2,-16(fp)
  803f14:	108046c3 	ldbu	r2,283(r2)
  803f18:	10803fcc 	andi	r2,r2,255
  803f1c:	1080201c 	xori	r2,r2,128
  803f20:	10bfe004 	addi	r2,r2,-128
  803f24:	1000021e 	bne	r2,zero,803f30 <logic+0x3520>
  803f28:	00800044 	movi	r2,1
  803f2c:	00000106 	br	803f34 <logic+0x3524>
  803f30:	0005883a 	mov	r2,zero
  803f34:	1007883a 	mov	r3,r2
  803f38:	e0bffc17 	ldw	r2,-16(fp)
  803f3c:	10c03105 	stb	r3,196(r2)
  d->_g74 = d->_pg124;
  803f40:	e0bffc17 	ldw	r2,-16(fp)
  803f44:	10c05683 	ldbu	r3,346(r2)
  803f48:	e0bffc17 	ldw	r2,-16(fp)
  803f4c:	10c02d05 	stb	r3,180(r2)
  d->_g77 = d->_pg125;
  803f50:	e0bffc17 	ldw	r2,-16(fp)
  803f54:	10c056c3 	ldbu	r3,347(r2)
  803f58:	e0bffc17 	ldw	r2,-16(fp)
  803f5c:	10c02d85 	stb	r3,182(r2)
  d->_g81 = !(d->_g74 || d->_g77);
  803f60:	e0bffc17 	ldw	r2,-16(fp)
  803f64:	10802d03 	ldbu	r2,180(r2)
  803f68:	10803fcc 	andi	r2,r2,255
  803f6c:	1080201c 	xori	r2,r2,128
  803f70:	10bfe004 	addi	r2,r2,-128
  803f74:	1000081e 	bne	r2,zero,803f98 <logic+0x3588>
  803f78:	e0bffc17 	ldw	r2,-16(fp)
  803f7c:	10802d83 	ldbu	r2,182(r2)
  803f80:	10803fcc 	andi	r2,r2,255
  803f84:	1080201c 	xori	r2,r2,128
  803f88:	10bfe004 	addi	r2,r2,-128
  803f8c:	1000021e 	bne	r2,zero,803f98 <logic+0x3588>
  803f90:	00800044 	movi	r2,1
  803f94:	00000106 	br	803f9c <logic+0x358c>
  803f98:	0005883a 	mov	r2,zero
  803f9c:	1007883a 	mov	r3,r2
  803fa0:	e0bffc17 	ldw	r2,-16(fp)
  803fa4:	10c02e45 	stb	r3,185(r2)
  d->_g86 = d->_pg103;
  803fa8:	e0bffc17 	ldw	r2,-16(fp)
  803fac:	10c05703 	ldbu	r3,348(r2)
  803fb0:	e0bffc17 	ldw	r2,-16(fp)
  803fb4:	10c02f45 	stb	r3,189(r2)
  d->_g83 = d->_g86 && d->VS;
  803fb8:	e0bffc17 	ldw	r2,-16(fp)
  803fbc:	10802f43 	ldbu	r2,189(r2)
  803fc0:	10803fcc 	andi	r2,r2,255
  803fc4:	1080201c 	xori	r2,r2,128
  803fc8:	10bfe004 	addi	r2,r2,-128
  803fcc:	10000826 	beq	r2,zero,803ff0 <logic+0x35e0>
  803fd0:	e0bffc17 	ldw	r2,-16(fp)
  803fd4:	10800643 	ldbu	r2,25(r2)
  803fd8:	10803fcc 	andi	r2,r2,255
  803fdc:	1080201c 	xori	r2,r2,128
  803fe0:	10bfe004 	addi	r2,r2,-128
  803fe4:	10000226 	beq	r2,zero,803ff0 <logic+0x35e0>
  803fe8:	00800044 	movi	r2,1
  803fec:	00000106 	br	803ff4 <logic+0x35e4>
  803ff0:	0005883a 	mov	r2,zero
  803ff4:	1007883a 	mov	r3,r2
  803ff8:	e0bffc17 	ldw	r2,-16(fp)
  803ffc:	10c02ec5 	stb	r3,187(r2)
  if (d->_g83) {
  804000:	e0bffc17 	ldw	r2,-16(fp)
  804004:	10802ec3 	ldbu	r2,187(r2)
  804008:	10803fcc 	andi	r2,r2,255
  80400c:	1080201c 	xori	r2,r2,128
  804010:	10bfe004 	addi	r2,r2,-128
  804014:	10000326 	beq	r2,zero,804024 <logic+0x3614>
    d->_DDDpacemake2_local__Atrig7 = 1;
  804018:	e0bffc17 	ldw	r2,-16(fp)
  80401c:	00c00044 	movi	r3,1
  804020:	10c01dc5 	stb	r3,119(r2)
  }
  d->_g92 = d->_pg129;
  804024:	e0bffc17 	ldw	r2,-16(fp)
  804028:	10c05743 	ldbu	r3,349(r2)
  80402c:	e0bffc17 	ldw	r2,-16(fp)
  804030:	10c03045 	stb	r3,193(r2)
  if (d->_g92) {
  804034:	e0bffc17 	ldw	r2,-16(fp)
  804038:	10803043 	ldbu	r2,193(r2)
  80403c:	10803fcc 	andi	r2,r2,255
  804040:	1080201c 	xori	r2,r2,128
  804044:	10bfe004 	addi	r2,r2,-128
  804048:	10001226 	beq	r2,zero,804094 <logic+0x3684>
    d->VRP_counter += d->deltaT;
  80404c:	e13ffc17 	ldw	r4,-16(fp)
  804050:	20800d17 	ldw	r2,52(r4)
  804054:	20c00e17 	ldw	r3,56(r4)
  804058:	e1bffc17 	ldw	r6,-16(fp)
  80405c:	31001417 	ldw	r4,80(r6)
  804060:	31401517 	ldw	r5,84(r6)
  804064:	200d883a 	mov	r6,r4
  804068:	280f883a 	mov	r7,r5
  80406c:	1009883a 	mov	r4,r2
  804070:	180b883a 	mov	r5,r3
  804074:	0805ca80 	call	805ca8 <__adddf3>
  804078:	1009883a 	mov	r4,r2
  80407c:	180b883a 	mov	r5,r3
  804080:	2005883a 	mov	r2,r4
  804084:	2807883a 	mov	r3,r5
  804088:	e13ffc17 	ldw	r4,-16(fp)
  80408c:	20800d15 	stw	r2,52(r4)
  804090:	20c00e15 	stw	r3,56(r4)
  }
  d->_g75 = d->_g86 && !d->VS;
  804094:	e0bffc17 	ldw	r2,-16(fp)
  804098:	10802f43 	ldbu	r2,189(r2)
  80409c:	10803fcc 	andi	r2,r2,255
  8040a0:	1080201c 	xori	r2,r2,128
  8040a4:	10bfe004 	addi	r2,r2,-128
  8040a8:	10000826 	beq	r2,zero,8040cc <logic+0x36bc>
  8040ac:	e0bffc17 	ldw	r2,-16(fp)
  8040b0:	10800643 	ldbu	r2,25(r2)
  8040b4:	10803fcc 	andi	r2,r2,255
  8040b8:	1080201c 	xori	r2,r2,128
  8040bc:	10bfe004 	addi	r2,r2,-128
  8040c0:	1000021e 	bne	r2,zero,8040cc <logic+0x36bc>
  8040c4:	00800044 	movi	r2,1
  8040c8:	00000106 	br	8040d0 <logic+0x36c0>
  8040cc:	0005883a 	mov	r2,zero
  8040d0:	1007883a 	mov	r3,r2
  8040d4:	e0bffc17 	ldw	r2,-16(fp)
  8040d8:	10c02d45 	stb	r3,181(r2)
  d->_cg121 = d->VRP_counter >= d->VRP_DEADLINE;
  8040dc:	e0bffc17 	ldw	r2,-16(fp)
  8040e0:	14000d17 	ldw	r16,52(r2)
  8040e4:	14400e17 	ldw	r17,56(r2)
  8040e8:	e0bffc17 	ldw	r2,-16(fp)
  8040ec:	10800517 	ldw	r2,20(r2)
  8040f0:	1009883a 	mov	r4,r2
  8040f4:	08077380 	call	807738 <__floatsidf>
  8040f8:	1009883a 	mov	r4,r2
  8040fc:	180b883a 	mov	r5,r3
  804100:	04800044 	movi	r18,1
  804104:	200d883a 	mov	r6,r4
  804108:	280f883a 	mov	r7,r5
  80410c:	8009883a 	mov	r4,r16
  804110:	880b883a 	mov	r5,r17
  804114:	08065540 	call	806554 <__gedf2>
  804118:	1000010e 	bge	r2,zero,804120 <logic+0x3710>
  80411c:	0025883a 	mov	r18,zero
  804120:	9007883a 	mov	r3,r18
  804124:	e0bffc17 	ldw	r2,-16(fp)
  804128:	10c04945 	stb	r3,293(r2)
  d->_g122 = d->_g75 && d->_cg121;
  80412c:	e0bffc17 	ldw	r2,-16(fp)
  804130:	10802d43 	ldbu	r2,181(r2)
  804134:	10803fcc 	andi	r2,r2,255
  804138:	1080201c 	xori	r2,r2,128
  80413c:	10bfe004 	addi	r2,r2,-128
  804140:	10000826 	beq	r2,zero,804164 <logic+0x3754>
  804144:	e0bffc17 	ldw	r2,-16(fp)
  804148:	10804943 	ldbu	r2,293(r2)
  80414c:	10803fcc 	andi	r2,r2,255
  804150:	1080201c 	xori	r2,r2,128
  804154:	10bfe004 	addi	r2,r2,-128
  804158:	10000226 	beq	r2,zero,804164 <logic+0x3754>
  80415c:	00800044 	movi	r2,1
  804160:	00000106 	br	804168 <logic+0x3758>
  804164:	0005883a 	mov	r2,zero
  804168:	1007883a 	mov	r3,r2
  80416c:	e0bffc17 	ldw	r2,-16(fp)
  804170:	10c035c5 	stb	r3,215(r2)
  if (d->_g122) {
  804174:	e0bffc17 	ldw	r2,-16(fp)
  804178:	108035c3 	ldbu	r2,215(r2)
  80417c:	10803fcc 	andi	r2,r2,255
  804180:	1080201c 	xori	r2,r2,128
  804184:	10bfe004 	addi	r2,r2,-128
  804188:	10000326 	beq	r2,zero,804198 <logic+0x3788>
    d->_DDDpacemake2_local__Atrig8 = 1;
  80418c:	e0bffc17 	ldw	r2,-16(fp)
  804190:	00c00044 	movi	r3,1
  804194:	10c01e05 	stb	r3,120(r2)
  }
  d->_g114 = d->_g77 || d->_g74;
  804198:	e0bffc17 	ldw	r2,-16(fp)
  80419c:	10802d83 	ldbu	r2,182(r2)
  8041a0:	10803fcc 	andi	r2,r2,255
  8041a4:	1080201c 	xori	r2,r2,128
  8041a8:	10bfe004 	addi	r2,r2,-128
  8041ac:	1000061e 	bne	r2,zero,8041c8 <logic+0x37b8>
  8041b0:	e0bffc17 	ldw	r2,-16(fp)
  8041b4:	10802d03 	ldbu	r2,180(r2)
  8041b8:	10803fcc 	andi	r2,r2,255
  8041bc:	1080201c 	xori	r2,r2,128
  8041c0:	10bfe004 	addi	r2,r2,-128
  8041c4:	10000226 	beq	r2,zero,8041d0 <logic+0x37c0>
  8041c8:	00800044 	movi	r2,1
  8041cc:	00000106 	br	8041d4 <logic+0x37c4>
  8041d0:	0005883a 	mov	r2,zero
  8041d4:	1007883a 	mov	r3,r2
  8041d8:	e0bffc17 	ldw	r2,-16(fp)
  8041dc:	10c03445 	stb	r3,209(r2)
  d->_cg109 = d->VRP_counter < d->VRP_DEADLINE;
  8041e0:	e0bffc17 	ldw	r2,-16(fp)
  8041e4:	14000d17 	ldw	r16,52(r2)
  8041e8:	14400e17 	ldw	r17,56(r2)
  8041ec:	e0bffc17 	ldw	r2,-16(fp)
  8041f0:	10800517 	ldw	r2,20(r2)
  8041f4:	1009883a 	mov	r4,r2
  8041f8:	08077380 	call	807738 <__floatsidf>
  8041fc:	1009883a 	mov	r4,r2
  804200:	180b883a 	mov	r5,r3
  804204:	04800044 	movi	r18,1
  804208:	200d883a 	mov	r6,r4
  80420c:	280f883a 	mov	r7,r5
  804210:	8009883a 	mov	r4,r16
  804214:	880b883a 	mov	r5,r17
  804218:	08066300 	call	806630 <__ledf2>
  80421c:	10000116 	blt	r2,zero,804224 <logic+0x3814>
  804220:	0025883a 	mov	r18,zero
  804224:	9007883a 	mov	r3,r18
  804228:	e0bffc17 	ldw	r2,-16(fp)
  80422c:	10c04885 	stb	r3,290(r2)
  d->_g108 = d->_g114 && d->_cg109;
  804230:	e0bffc17 	ldw	r2,-16(fp)
  804234:	10803443 	ldbu	r2,209(r2)
  804238:	10803fcc 	andi	r2,r2,255
  80423c:	1080201c 	xori	r2,r2,128
  804240:	10bfe004 	addi	r2,r2,-128
  804244:	10000826 	beq	r2,zero,804268 <logic+0x3858>
  804248:	e0bffc17 	ldw	r2,-16(fp)
  80424c:	10804883 	ldbu	r2,290(r2)
  804250:	10803fcc 	andi	r2,r2,255
  804254:	1080201c 	xori	r2,r2,128
  804258:	10bfe004 	addi	r2,r2,-128
  80425c:	10000226 	beq	r2,zero,804268 <logic+0x3858>
  804260:	00800044 	movi	r2,1
  804264:	00000106 	br	80426c <logic+0x385c>
  804268:	0005883a 	mov	r2,zero
  80426c:	1007883a 	mov	r3,r2
  804270:	e0bffc17 	ldw	r2,-16(fp)
  804274:	10c03305 	stb	r3,204(r2)
  if (d->_g108) {
  804278:	e0bffc17 	ldw	r2,-16(fp)
  80427c:	10803303 	ldbu	r2,204(r2)
  804280:	10803fcc 	andi	r2,r2,255
  804284:	1080201c 	xori	r2,r2,128
  804288:	10bfe004 	addi	r2,r2,-128
  80428c:	10003426 	beq	r2,zero,804360 <logic+0x3950>
    d->sleepT = (d->sleepT < (d->VRP_DEADLINE - d->VRP_counter)) ? d->sleepT : (d->VRP_DEADLINE - d->VRP_counter);
  804290:	e0bffc17 	ldw	r2,-16(fp)
  804294:	14001617 	ldw	r16,88(r2)
  804298:	14401717 	ldw	r17,92(r2)
  80429c:	e0bffc17 	ldw	r2,-16(fp)
  8042a0:	10800517 	ldw	r2,20(r2)
  8042a4:	1009883a 	mov	r4,r2
  8042a8:	08077380 	call	807738 <__floatsidf>
  8042ac:	1011883a 	mov	r8,r2
  8042b0:	1813883a 	mov	r9,r3
  8042b4:	e13ffc17 	ldw	r4,-16(fp)
  8042b8:	20800d17 	ldw	r2,52(r4)
  8042bc:	20c00e17 	ldw	r3,56(r4)
  8042c0:	100d883a 	mov	r6,r2
  8042c4:	180f883a 	mov	r7,r3
  8042c8:	4009883a 	mov	r4,r8
  8042cc:	480b883a 	mov	r5,r9
  8042d0:	0806e3c0 	call	806e3c <__subdf3>
  8042d4:	1009883a 	mov	r4,r2
  8042d8:	180b883a 	mov	r5,r3
  8042dc:	2005883a 	mov	r2,r4
  8042e0:	2807883a 	mov	r3,r5
  8042e4:	100d883a 	mov	r6,r2
  8042e8:	180f883a 	mov	r7,r3
  8042ec:	8009883a 	mov	r4,r16
  8042f0:	880b883a 	mov	r5,r17
  8042f4:	08066300 	call	806630 <__ledf2>
  8042f8:	1000040e 	bge	r2,zero,80430c <logic+0x38fc>
  8042fc:	e13ffc17 	ldw	r4,-16(fp)
  804300:	20801617 	ldw	r2,88(r4)
  804304:	20c01717 	ldw	r3,92(r4)
  804308:	00001206 	br	804354 <logic+0x3944>
  80430c:	e0bffc17 	ldw	r2,-16(fp)
  804310:	10800517 	ldw	r2,20(r2)
  804314:	1009883a 	mov	r4,r2
  804318:	08077380 	call	807738 <__floatsidf>
  80431c:	1011883a 	mov	r8,r2
  804320:	1813883a 	mov	r9,r3
  804324:	e13ffc17 	ldw	r4,-16(fp)
  804328:	20800d17 	ldw	r2,52(r4)
  80432c:	20c00e17 	ldw	r3,56(r4)
  804330:	100d883a 	mov	r6,r2
  804334:	180f883a 	mov	r7,r3
  804338:	4009883a 	mov	r4,r8
  80433c:	480b883a 	mov	r5,r9
  804340:	0806e3c0 	call	806e3c <__subdf3>
  804344:	1009883a 	mov	r4,r2
  804348:	180b883a 	mov	r5,r3
  80434c:	2005883a 	mov	r2,r4
  804350:	2807883a 	mov	r3,r5
  804354:	e13ffc17 	ldw	r4,-16(fp)
  804358:	20801615 	stw	r2,88(r4)
  80435c:	20c01715 	stw	r3,92(r4)
  }
  d->_cg110 = d->_DDDpacemake2_local__Atrig7 || d->_DDDpacemake2_local__Atrig8;
  804360:	e0bffc17 	ldw	r2,-16(fp)
  804364:	10801dc3 	ldbu	r2,119(r2)
  804368:	10803fcc 	andi	r2,r2,255
  80436c:	1080201c 	xori	r2,r2,128
  804370:	10bfe004 	addi	r2,r2,-128
  804374:	1000061e 	bne	r2,zero,804390 <logic+0x3980>
  804378:	e0bffc17 	ldw	r2,-16(fp)
  80437c:	10801e03 	ldbu	r2,120(r2)
  804380:	10803fcc 	andi	r2,r2,255
  804384:	1080201c 	xori	r2,r2,128
  804388:	10bfe004 	addi	r2,r2,-128
  80438c:	10000226 	beq	r2,zero,804398 <logic+0x3988>
  804390:	00800044 	movi	r2,1
  804394:	00000106 	br	80439c <logic+0x398c>
  804398:	0005883a 	mov	r2,zero
  80439c:	1007883a 	mov	r3,r2
  8043a0:	e0bffc17 	ldw	r2,-16(fp)
  8043a4:	10c04845 	stb	r3,289(r2)
  d->_g109 = d->_g114 && !d->_cg109;
  8043a8:	e0bffc17 	ldw	r2,-16(fp)
  8043ac:	10803443 	ldbu	r2,209(r2)
  8043b0:	10803fcc 	andi	r2,r2,255
  8043b4:	1080201c 	xori	r2,r2,128
  8043b8:	10bfe004 	addi	r2,r2,-128
  8043bc:	10000826 	beq	r2,zero,8043e0 <logic+0x39d0>
  8043c0:	e0bffc17 	ldw	r2,-16(fp)
  8043c4:	10804883 	ldbu	r2,290(r2)
  8043c8:	10803fcc 	andi	r2,r2,255
  8043cc:	1080201c 	xori	r2,r2,128
  8043d0:	10bfe004 	addi	r2,r2,-128
  8043d4:	1000021e 	bne	r2,zero,8043e0 <logic+0x39d0>
  8043d8:	00800044 	movi	r2,1
  8043dc:	00000106 	br	8043e4 <logic+0x39d4>
  8043e0:	0005883a 	mov	r2,zero
  8043e4:	1007883a 	mov	r3,r2
  8043e8:	e0bffc17 	ldw	r2,-16(fp)
  8043ec:	10c03345 	stb	r3,205(r2)
  d->_cg112 = d->_DDDpacemake2_local__Atrig7 || d->_DDDpacemake2_local__Atrig8;
  8043f0:	e0bffc17 	ldw	r2,-16(fp)
  8043f4:	10801dc3 	ldbu	r2,119(r2)
  8043f8:	10803fcc 	andi	r2,r2,255
  8043fc:	1080201c 	xori	r2,r2,128
  804400:	10bfe004 	addi	r2,r2,-128
  804404:	1000061e 	bne	r2,zero,804420 <logic+0x3a10>
  804408:	e0bffc17 	ldw	r2,-16(fp)
  80440c:	10801e03 	ldbu	r2,120(r2)
  804410:	10803fcc 	andi	r2,r2,255
  804414:	1080201c 	xori	r2,r2,128
  804418:	10bfe004 	addi	r2,r2,-128
  80441c:	10000226 	beq	r2,zero,804428 <logic+0x3a18>
  804420:	00800044 	movi	r2,1
  804424:	00000106 	br	80442c <logic+0x3a1c>
  804428:	0005883a 	mov	r2,zero
  80442c:	1007883a 	mov	r3,r2
  804430:	e0bffc17 	ldw	r2,-16(fp)
  804434:	10c048c5 	stb	r3,291(r2)
  d->_g111 = d->_g108 && d->_cg110 || d->_g109 && d->_cg112;
  804438:	e0bffc17 	ldw	r2,-16(fp)
  80443c:	10803303 	ldbu	r2,204(r2)
  804440:	10803fcc 	andi	r2,r2,255
  804444:	1080201c 	xori	r2,r2,128
  804448:	10bfe004 	addi	r2,r2,-128
  80444c:	10000626 	beq	r2,zero,804468 <logic+0x3a58>
  804450:	e0bffc17 	ldw	r2,-16(fp)
  804454:	10804843 	ldbu	r2,289(r2)
  804458:	10803fcc 	andi	r2,r2,255
  80445c:	1080201c 	xori	r2,r2,128
  804460:	10bfe004 	addi	r2,r2,-128
  804464:	10000c1e 	bne	r2,zero,804498 <logic+0x3a88>
  804468:	e0bffc17 	ldw	r2,-16(fp)
  80446c:	10803343 	ldbu	r2,205(r2)
  804470:	10803fcc 	andi	r2,r2,255
  804474:	1080201c 	xori	r2,r2,128
  804478:	10bfe004 	addi	r2,r2,-128
  80447c:	10000826 	beq	r2,zero,8044a0 <logic+0x3a90>
  804480:	e0bffc17 	ldw	r2,-16(fp)
  804484:	108048c3 	ldbu	r2,291(r2)
  804488:	10803fcc 	andi	r2,r2,255
  80448c:	1080201c 	xori	r2,r2,128
  804490:	10bfe004 	addi	r2,r2,-128
  804494:	10000226 	beq	r2,zero,8044a0 <logic+0x3a90>
  804498:	00800044 	movi	r2,1
  80449c:	00000106 	br	8044a4 <logic+0x3a94>
  8044a0:	0005883a 	mov	r2,zero
  8044a4:	1007883a 	mov	r3,r2
  8044a8:	e0bffc17 	ldw	r2,-16(fp)
  8044ac:	10c033c5 	stb	r3,207(r2)
  d->_g118 = !d->_g86;
  8044b0:	e0bffc17 	ldw	r2,-16(fp)
  8044b4:	10802f43 	ldbu	r2,189(r2)
  8044b8:	10803fcc 	andi	r2,r2,255
  8044bc:	1080201c 	xori	r2,r2,128
  8044c0:	10bfe004 	addi	r2,r2,-128
  8044c4:	1005003a 	cmpeq	r2,r2,zero
  8044c8:	1007883a 	mov	r3,r2
  8044cc:	e0bffc17 	ldw	r2,-16(fp)
  8044d0:	10c034c5 	stb	r3,211(r2)
  d->_g122 = d->_g83 || d->_g122;
  8044d4:	e0bffc17 	ldw	r2,-16(fp)
  8044d8:	10802ec3 	ldbu	r2,187(r2)
  8044dc:	10803fcc 	andi	r2,r2,255
  8044e0:	1080201c 	xori	r2,r2,128
  8044e4:	10bfe004 	addi	r2,r2,-128
  8044e8:	1000061e 	bne	r2,zero,804504 <logic+0x3af4>
  8044ec:	e0bffc17 	ldw	r2,-16(fp)
  8044f0:	108035c3 	ldbu	r2,215(r2)
  8044f4:	10803fcc 	andi	r2,r2,255
  8044f8:	1080201c 	xori	r2,r2,128
  8044fc:	10bfe004 	addi	r2,r2,-128
  804500:	10000226 	beq	r2,zero,80450c <logic+0x3afc>
  804504:	00800044 	movi	r2,1
  804508:	00000106 	br	804510 <logic+0x3b00>
  80450c:	0005883a 	mov	r2,zero
  804510:	1007883a 	mov	r3,r2
  804514:	e0bffc17 	ldw	r2,-16(fp)
  804518:	10c035c5 	stb	r3,215(r2)
  d->_g119 = (d->_g81 || d->_g111) && (d->_g118 || d->_g122) && (d->_g111 || d->_g122);
  80451c:	e0bffc17 	ldw	r2,-16(fp)
  804520:	10802e43 	ldbu	r2,185(r2)
  804524:	10803fcc 	andi	r2,r2,255
  804528:	1080201c 	xori	r2,r2,128
  80452c:	10bfe004 	addi	r2,r2,-128
  804530:	1000061e 	bne	r2,zero,80454c <logic+0x3b3c>
  804534:	e0bffc17 	ldw	r2,-16(fp)
  804538:	108033c3 	ldbu	r2,207(r2)
  80453c:	10803fcc 	andi	r2,r2,255
  804540:	1080201c 	xori	r2,r2,128
  804544:	10bfe004 	addi	r2,r2,-128
  804548:	10001a26 	beq	r2,zero,8045b4 <logic+0x3ba4>
  80454c:	e0bffc17 	ldw	r2,-16(fp)
  804550:	108034c3 	ldbu	r2,211(r2)
  804554:	10803fcc 	andi	r2,r2,255
  804558:	1080201c 	xori	r2,r2,128
  80455c:	10bfe004 	addi	r2,r2,-128
  804560:	1000061e 	bne	r2,zero,80457c <logic+0x3b6c>
  804564:	e0bffc17 	ldw	r2,-16(fp)
  804568:	108035c3 	ldbu	r2,215(r2)
  80456c:	10803fcc 	andi	r2,r2,255
  804570:	1080201c 	xori	r2,r2,128
  804574:	10bfe004 	addi	r2,r2,-128
  804578:	10000e26 	beq	r2,zero,8045b4 <logic+0x3ba4>
  80457c:	e0bffc17 	ldw	r2,-16(fp)
  804580:	108033c3 	ldbu	r2,207(r2)
  804584:	10803fcc 	andi	r2,r2,255
  804588:	1080201c 	xori	r2,r2,128
  80458c:	10bfe004 	addi	r2,r2,-128
  804590:	1000061e 	bne	r2,zero,8045ac <logic+0x3b9c>
  804594:	e0bffc17 	ldw	r2,-16(fp)
  804598:	108035c3 	ldbu	r2,215(r2)
  80459c:	10803fcc 	andi	r2,r2,255
  8045a0:	1080201c 	xori	r2,r2,128
  8045a4:	10bfe004 	addi	r2,r2,-128
  8045a8:	10000226 	beq	r2,zero,8045b4 <logic+0x3ba4>
  8045ac:	00800044 	movi	r2,1
  8045b0:	00000106 	br	8045b8 <logic+0x3ba8>
  8045b4:	0005883a 	mov	r2,zero
  8045b8:	1007883a 	mov	r3,r2
  8045bc:	e0bffc17 	ldw	r2,-16(fp)
  8045c0:	10c03505 	stb	r3,212(r2)
  d->_cg123 = d->_DDDpacemake2_local__Atrig7;
  8045c4:	e0bffc17 	ldw	r2,-16(fp)
  8045c8:	10c01dc3 	ldbu	r3,119(r2)
  8045cc:	e0bffc17 	ldw	r2,-16(fp)
  8045d0:	10c049c5 	stb	r3,295(r2)
  d->_g111 = d->_g119 && !d->_cg123;
  8045d4:	e0bffc17 	ldw	r2,-16(fp)
  8045d8:	10803503 	ldbu	r2,212(r2)
  8045dc:	10803fcc 	andi	r2,r2,255
  8045e0:	1080201c 	xori	r2,r2,128
  8045e4:	10bfe004 	addi	r2,r2,-128
  8045e8:	10000826 	beq	r2,zero,80460c <logic+0x3bfc>
  8045ec:	e0bffc17 	ldw	r2,-16(fp)
  8045f0:	108049c3 	ldbu	r2,295(r2)
  8045f4:	10803fcc 	andi	r2,r2,255
  8045f8:	1080201c 	xori	r2,r2,128
  8045fc:	10bfe004 	addi	r2,r2,-128
  804600:	1000021e 	bne	r2,zero,80460c <logic+0x3bfc>
  804604:	00800044 	movi	r2,1
  804608:	00000106 	br	804610 <logic+0x3c00>
  80460c:	0005883a 	mov	r2,zero
  804610:	1007883a 	mov	r3,r2
  804614:	e0bffc17 	ldw	r2,-16(fp)
  804618:	10c033c5 	stb	r3,207(r2)
  if (d->_g111) {
  80461c:	e0bffc17 	ldw	r2,-16(fp)
  804620:	108033c3 	ldbu	r2,207(r2)
  804624:	10803fcc 	andi	r2,r2,255
  804628:	1080201c 	xori	r2,r2,128
  80462c:	10bfe004 	addi	r2,r2,-128
  804630:	10000426 	beq	r2,zero,804644 <logic+0x3c34>
    d->_DDDpacemake2_local_VR = 0;
  804634:	e0bffc17 	ldw	r2,-16(fp)
  804638:	100019c5 	stb	zero,103(r2)
    d->_DDDpacemake2_local_VRP_state = 0;
  80463c:	e0bffc17 	ldw	r2,-16(fp)
  804640:	10001905 	stb	zero,100(r2)
  }
  d->_g120_e2 = d->_GO || d->_g111 || d->_g102 && !d->_cg102;
  804644:	e0bffc17 	ldw	r2,-16(fp)
  804648:	10803ec3 	ldbu	r2,251(r2)
  80464c:	10803fcc 	andi	r2,r2,255
  804650:	1080201c 	xori	r2,r2,128
  804654:	10bfe004 	addi	r2,r2,-128
  804658:	1000121e 	bne	r2,zero,8046a4 <logic+0x3c94>
  80465c:	e0bffc17 	ldw	r2,-16(fp)
  804660:	108033c3 	ldbu	r2,207(r2)
  804664:	10803fcc 	andi	r2,r2,255
  804668:	1080201c 	xori	r2,r2,128
  80466c:	10bfe004 	addi	r2,r2,-128
  804670:	10000c1e 	bne	r2,zero,8046a4 <logic+0x3c94>
  804674:	e0bffc17 	ldw	r2,-16(fp)
  804678:	10803203 	ldbu	r2,200(r2)
  80467c:	10803fcc 	andi	r2,r2,255
  804680:	1080201c 	xori	r2,r2,128
  804684:	10bfe004 	addi	r2,r2,-128
  804688:	10000826 	beq	r2,zero,8046ac <logic+0x3c9c>
  80468c:	e0bffc17 	ldw	r2,-16(fp)
  804690:	10804783 	ldbu	r2,286(r2)
  804694:	10803fcc 	andi	r2,r2,255
  804698:	1080201c 	xori	r2,r2,128
  80469c:	10bfe004 	addi	r2,r2,-128
  8046a0:	1000021e 	bne	r2,zero,8046ac <logic+0x3c9c>
  8046a4:	00800044 	movi	r2,1
  8046a8:	00000106 	br	8046b0 <logic+0x3ca0>
  8046ac:	0005883a 	mov	r2,zero
  8046b0:	1007883a 	mov	r3,r2
  8046b4:	e0bffc17 	ldw	r2,-16(fp)
  8046b8:	10c04f05 	stb	r3,316(r2)
  if (d->_g103) {
  8046bc:	e0bffc17 	ldw	r2,-16(fp)
  8046c0:	10803243 	ldbu	r2,201(r2)
  8046c4:	10803fcc 	andi	r2,r2,255
  8046c8:	1080201c 	xori	r2,r2,128
  8046cc:	10bfe004 	addi	r2,r2,-128
  8046d0:	10000326 	beq	r2,zero,8046e0 <logic+0x3cd0>
    d->VRP_counter = 0;
  8046d4:	e0bffc17 	ldw	r2,-16(fp)
  8046d8:	10000d15 	stw	zero,52(r2)
  8046dc:	10000e15 	stw	zero,56(r2)
  }
  d->_g111_e1 = d->_g119 && d->_cg123;
  8046e0:	e0bffc17 	ldw	r2,-16(fp)
  8046e4:	10803503 	ldbu	r2,212(r2)
  8046e8:	10803fcc 	andi	r2,r2,255
  8046ec:	1080201c 	xori	r2,r2,128
  8046f0:	10bfe004 	addi	r2,r2,-128
  8046f4:	10000826 	beq	r2,zero,804718 <logic+0x3d08>
  8046f8:	e0bffc17 	ldw	r2,-16(fp)
  8046fc:	108049c3 	ldbu	r2,295(r2)
  804700:	10803fcc 	andi	r2,r2,255
  804704:	1080201c 	xori	r2,r2,128
  804708:	10bfe004 	addi	r2,r2,-128
  80470c:	10000226 	beq	r2,zero,804718 <logic+0x3d08>
  804710:	00800044 	movi	r2,1
  804714:	00000106 	br	80471c <logic+0x3d0c>
  804718:	0005883a 	mov	r2,zero
  80471c:	1007883a 	mov	r3,r2
  804720:	e0bffc17 	ldw	r2,-16(fp)
  804724:	10c04ec5 	stb	r3,315(r2)
  if (d->_g111_e1) {
  804728:	e0bffc17 	ldw	r2,-16(fp)
  80472c:	10804ec3 	ldbu	r2,315(r2)
  804730:	10803fcc 	andi	r2,r2,255
  804734:	1080201c 	xori	r2,r2,128
  804738:	10bfe004 	addi	r2,r2,-128
  80473c:	10000326 	beq	r2,zero,80474c <logic+0x3d3c>
    d->_DDDpacemake2_local_VR = 1;
  804740:	e0bffc17 	ldw	r2,-16(fp)
  804744:	00c00044 	movi	r3,1
  804748:	10c019c5 	stb	r3,103(r2)
  }
  d->_g120 = d->_g103 || d->_g111_e1;
  80474c:	e0bffc17 	ldw	r2,-16(fp)
  804750:	10803243 	ldbu	r2,201(r2)
  804754:	10803fcc 	andi	r2,r2,255
  804758:	1080201c 	xori	r2,r2,128
  80475c:	10bfe004 	addi	r2,r2,-128
  804760:	1000061e 	bne	r2,zero,80477c <logic+0x3d6c>
  804764:	e0bffc17 	ldw	r2,-16(fp)
  804768:	10804ec3 	ldbu	r2,315(r2)
  80476c:	10803fcc 	andi	r2,r2,255
  804770:	1080201c 	xori	r2,r2,128
  804774:	10bfe004 	addi	r2,r2,-128
  804778:	10000226 	beq	r2,zero,804784 <logic+0x3d74>
  80477c:	00800044 	movi	r2,1
  804780:	00000106 	br	804788 <logic+0x3d78>
  804784:	0005883a 	mov	r2,zero
  804788:	1007883a 	mov	r3,r2
  80478c:	e0bffc17 	ldw	r2,-16(fp)
  804790:	10c03545 	stb	r3,213(r2)
  if (d->_g120) {
  804794:	e0bffc17 	ldw	r2,-16(fp)
  804798:	10803543 	ldbu	r2,213(r2)
  80479c:	10803fcc 	andi	r2,r2,255
  8047a0:	1080201c 	xori	r2,r2,128
  8047a4:	10bfe004 	addi	r2,r2,-128
  8047a8:	10000426 	beq	r2,zero,8047bc <logic+0x3dac>
    d->_DDDpacemake2_local__Atrig7 = 0;
  8047ac:	e0bffc17 	ldw	r2,-16(fp)
  8047b0:	10001dc5 	stb	zero,119(r2)
    d->_DDDpacemake2_local__Atrig8 = 0;
  8047b4:	e0bffc17 	ldw	r2,-16(fp)
  8047b8:	10001e05 	stb	zero,120(r2)
  }
  d->_cg105 = d->VRP_counter < d->VRP_DEADLINE;
  8047bc:	e0bffc17 	ldw	r2,-16(fp)
  8047c0:	14000d17 	ldw	r16,52(r2)
  8047c4:	14400e17 	ldw	r17,56(r2)
  8047c8:	e0bffc17 	ldw	r2,-16(fp)
  8047cc:	10800517 	ldw	r2,20(r2)
  8047d0:	1009883a 	mov	r4,r2
  8047d4:	08077380 	call	807738 <__floatsidf>
  8047d8:	1009883a 	mov	r4,r2
  8047dc:	180b883a 	mov	r5,r3
  8047e0:	04800044 	movi	r18,1
  8047e4:	200d883a 	mov	r6,r4
  8047e8:	280f883a 	mov	r7,r5
  8047ec:	8009883a 	mov	r4,r16
  8047f0:	880b883a 	mov	r5,r17
  8047f4:	08066300 	call	806630 <__ledf2>
  8047f8:	10000116 	blt	r2,zero,804800 <logic+0x3df0>
  8047fc:	0025883a 	mov	r18,zero
  804800:	9007883a 	mov	r3,r18
  804804:	e0bffc17 	ldw	r2,-16(fp)
  804808:	10c047c5 	stb	r3,287(r2)
  d->_g102 = d->_g120 && d->_cg105;
  80480c:	e0bffc17 	ldw	r2,-16(fp)
  804810:	10803543 	ldbu	r2,213(r2)
  804814:	10803fcc 	andi	r2,r2,255
  804818:	1080201c 	xori	r2,r2,128
  80481c:	10bfe004 	addi	r2,r2,-128
  804820:	10000826 	beq	r2,zero,804844 <logic+0x3e34>
  804824:	e0bffc17 	ldw	r2,-16(fp)
  804828:	108047c3 	ldbu	r2,287(r2)
  80482c:	10803fcc 	andi	r2,r2,255
  804830:	1080201c 	xori	r2,r2,128
  804834:	10bfe004 	addi	r2,r2,-128
  804838:	10000226 	beq	r2,zero,804844 <logic+0x3e34>
  80483c:	00800044 	movi	r2,1
  804840:	00000106 	br	804848 <logic+0x3e38>
  804844:	0005883a 	mov	r2,zero
  804848:	1007883a 	mov	r3,r2
  80484c:	e0bffc17 	ldw	r2,-16(fp)
  804850:	10c03205 	stb	r3,200(r2)
  if (d->_g102) {
  804854:	e0bffc17 	ldw	r2,-16(fp)
  804858:	10803203 	ldbu	r2,200(r2)
  80485c:	10803fcc 	andi	r2,r2,255
  804860:	1080201c 	xori	r2,r2,128
  804864:	10bfe004 	addi	r2,r2,-128
  804868:	10003426 	beq	r2,zero,80493c <logic+0x3f2c>
    d->sleepT = (d->sleepT < (d->VRP_DEADLINE - d->VRP_counter)) ? d->sleepT : (d->VRP_DEADLINE - d->VRP_counter);
  80486c:	e0bffc17 	ldw	r2,-16(fp)
  804870:	14001617 	ldw	r16,88(r2)
  804874:	14401717 	ldw	r17,92(r2)
  804878:	e0bffc17 	ldw	r2,-16(fp)
  80487c:	10800517 	ldw	r2,20(r2)
  804880:	1009883a 	mov	r4,r2
  804884:	08077380 	call	807738 <__floatsidf>
  804888:	1011883a 	mov	r8,r2
  80488c:	1813883a 	mov	r9,r3
  804890:	e13ffc17 	ldw	r4,-16(fp)
  804894:	20800d17 	ldw	r2,52(r4)
  804898:	20c00e17 	ldw	r3,56(r4)
  80489c:	100d883a 	mov	r6,r2
  8048a0:	180f883a 	mov	r7,r3
  8048a4:	4009883a 	mov	r4,r8
  8048a8:	480b883a 	mov	r5,r9
  8048ac:	0806e3c0 	call	806e3c <__subdf3>
  8048b0:	1009883a 	mov	r4,r2
  8048b4:	180b883a 	mov	r5,r3
  8048b8:	2005883a 	mov	r2,r4
  8048bc:	2807883a 	mov	r3,r5
  8048c0:	100d883a 	mov	r6,r2
  8048c4:	180f883a 	mov	r7,r3
  8048c8:	8009883a 	mov	r4,r16
  8048cc:	880b883a 	mov	r5,r17
  8048d0:	08066300 	call	806630 <__ledf2>
  8048d4:	1000040e 	bge	r2,zero,8048e8 <logic+0x3ed8>
  8048d8:	e13ffc17 	ldw	r4,-16(fp)
  8048dc:	20801617 	ldw	r2,88(r4)
  8048e0:	20c01717 	ldw	r3,92(r4)
  8048e4:	00001206 	br	804930 <logic+0x3f20>
  8048e8:	e0bffc17 	ldw	r2,-16(fp)
  8048ec:	10800517 	ldw	r2,20(r2)
  8048f0:	1009883a 	mov	r4,r2
  8048f4:	08077380 	call	807738 <__floatsidf>
  8048f8:	1011883a 	mov	r8,r2
  8048fc:	1813883a 	mov	r9,r3
  804900:	e13ffc17 	ldw	r4,-16(fp)
  804904:	20800d17 	ldw	r2,52(r4)
  804908:	20c00e17 	ldw	r3,56(r4)
  80490c:	100d883a 	mov	r6,r2
  804910:	180f883a 	mov	r7,r3
  804914:	4009883a 	mov	r4,r8
  804918:	480b883a 	mov	r5,r9
  80491c:	0806e3c0 	call	806e3c <__subdf3>
  804920:	1009883a 	mov	r4,r2
  804924:	180b883a 	mov	r5,r3
  804928:	2005883a 	mov	r2,r4
  80492c:	2807883a 	mov	r3,r5
  804930:	e13ffc17 	ldw	r4,-16(fp)
  804934:	20801615 	stw	r2,88(r4)
  804938:	20c01715 	stw	r3,92(r4)
  }
  d->_cg106 = d->_DDDpacemake2_local__Atrig7 || d->_DDDpacemake2_local__Atrig8;
  80493c:	e0bffc17 	ldw	r2,-16(fp)
  804940:	10801dc3 	ldbu	r2,119(r2)
  804944:	10803fcc 	andi	r2,r2,255
  804948:	1080201c 	xori	r2,r2,128
  80494c:	10bfe004 	addi	r2,r2,-128
  804950:	1000061e 	bne	r2,zero,80496c <logic+0x3f5c>
  804954:	e0bffc17 	ldw	r2,-16(fp)
  804958:	10801e03 	ldbu	r2,120(r2)
  80495c:	10803fcc 	andi	r2,r2,255
  804960:	1080201c 	xori	r2,r2,128
  804964:	10bfe004 	addi	r2,r2,-128
  804968:	10000226 	beq	r2,zero,804974 <logic+0x3f64>
  80496c:	00800044 	movi	r2,1
  804970:	00000106 	br	804978 <logic+0x3f68>
  804974:	0005883a 	mov	r2,zero
  804978:	1007883a 	mov	r3,r2
  80497c:	e0bffc17 	ldw	r2,-16(fp)
  804980:	10c04805 	stb	r3,288(r2)
  d->_g125 = d->_g102 && !d->_cg106 || d->_g108 && !d->_cg110;
  804984:	e0bffc17 	ldw	r2,-16(fp)
  804988:	10803203 	ldbu	r2,200(r2)
  80498c:	10803fcc 	andi	r2,r2,255
  804990:	1080201c 	xori	r2,r2,128
  804994:	10bfe004 	addi	r2,r2,-128
  804998:	10000626 	beq	r2,zero,8049b4 <logic+0x3fa4>
  80499c:	e0bffc17 	ldw	r2,-16(fp)
  8049a0:	10804803 	ldbu	r2,288(r2)
  8049a4:	10803fcc 	andi	r2,r2,255
  8049a8:	1080201c 	xori	r2,r2,128
  8049ac:	10bfe004 	addi	r2,r2,-128
  8049b0:	10000c26 	beq	r2,zero,8049e4 <logic+0x3fd4>
  8049b4:	e0bffc17 	ldw	r2,-16(fp)
  8049b8:	10803303 	ldbu	r2,204(r2)
  8049bc:	10803fcc 	andi	r2,r2,255
  8049c0:	1080201c 	xori	r2,r2,128
  8049c4:	10bfe004 	addi	r2,r2,-128
  8049c8:	10000826 	beq	r2,zero,8049ec <logic+0x3fdc>
  8049cc:	e0bffc17 	ldw	r2,-16(fp)
  8049d0:	10804843 	ldbu	r2,289(r2)
  8049d4:	10803fcc 	andi	r2,r2,255
  8049d8:	1080201c 	xori	r2,r2,128
  8049dc:	10bfe004 	addi	r2,r2,-128
  8049e0:	1000021e 	bne	r2,zero,8049ec <logic+0x3fdc>
  8049e4:	00800044 	movi	r2,1
  8049e8:	00000106 	br	8049f0 <logic+0x3fe0>
  8049ec:	0005883a 	mov	r2,zero
  8049f0:	1007883a 	mov	r3,r2
  8049f4:	e0bffc17 	ldw	r2,-16(fp)
  8049f8:	10c03685 	stb	r3,218(r2)
  d->_g123 = d->_g120 && !d->_cg105;
  8049fc:	e0bffc17 	ldw	r2,-16(fp)
  804a00:	10803543 	ldbu	r2,213(r2)
  804a04:	10803fcc 	andi	r2,r2,255
  804a08:	1080201c 	xori	r2,r2,128
  804a0c:	10bfe004 	addi	r2,r2,-128
  804a10:	10000826 	beq	r2,zero,804a34 <logic+0x4024>
  804a14:	e0bffc17 	ldw	r2,-16(fp)
  804a18:	108047c3 	ldbu	r2,287(r2)
  804a1c:	10803fcc 	andi	r2,r2,255
  804a20:	1080201c 	xori	r2,r2,128
  804a24:	10bfe004 	addi	r2,r2,-128
  804a28:	1000021e 	bne	r2,zero,804a34 <logic+0x4024>
  804a2c:	00800044 	movi	r2,1
  804a30:	00000106 	br	804a38 <logic+0x4028>
  804a34:	0005883a 	mov	r2,zero
  804a38:	1007883a 	mov	r3,r2
  804a3c:	e0bffc17 	ldw	r2,-16(fp)
  804a40:	10c03605 	stb	r3,216(r2)
  d->_cg115 = d->_DDDpacemake2_local__Atrig7 || d->_DDDpacemake2_local__Atrig8;
  804a44:	e0bffc17 	ldw	r2,-16(fp)
  804a48:	10801dc3 	ldbu	r2,119(r2)
  804a4c:	10803fcc 	andi	r2,r2,255
  804a50:	1080201c 	xori	r2,r2,128
  804a54:	10bfe004 	addi	r2,r2,-128
  804a58:	1000061e 	bne	r2,zero,804a74 <logic+0x4064>
  804a5c:	e0bffc17 	ldw	r2,-16(fp)
  804a60:	10801e03 	ldbu	r2,120(r2)
  804a64:	10803fcc 	andi	r2,r2,255
  804a68:	1080201c 	xori	r2,r2,128
  804a6c:	10bfe004 	addi	r2,r2,-128
  804a70:	10000226 	beq	r2,zero,804a7c <logic+0x406c>
  804a74:	00800044 	movi	r2,1
  804a78:	00000106 	br	804a80 <logic+0x4070>
  804a7c:	0005883a 	mov	r2,zero
  804a80:	1007883a 	mov	r3,r2
  804a84:	e0bffc17 	ldw	r2,-16(fp)
  804a88:	10c04905 	stb	r3,292(r2)
  d->_g124 = d->_g109 && !d->_cg112 || d->_g123 && !d->_cg115;
  804a8c:	e0bffc17 	ldw	r2,-16(fp)
  804a90:	10803343 	ldbu	r2,205(r2)
  804a94:	10803fcc 	andi	r2,r2,255
  804a98:	1080201c 	xori	r2,r2,128
  804a9c:	10bfe004 	addi	r2,r2,-128
  804aa0:	10000626 	beq	r2,zero,804abc <logic+0x40ac>
  804aa4:	e0bffc17 	ldw	r2,-16(fp)
  804aa8:	108048c3 	ldbu	r2,291(r2)
  804aac:	10803fcc 	andi	r2,r2,255
  804ab0:	1080201c 	xori	r2,r2,128
  804ab4:	10bfe004 	addi	r2,r2,-128
  804ab8:	10000c26 	beq	r2,zero,804aec <logic+0x40dc>
  804abc:	e0bffc17 	ldw	r2,-16(fp)
  804ac0:	10803603 	ldbu	r2,216(r2)
  804ac4:	10803fcc 	andi	r2,r2,255
  804ac8:	1080201c 	xori	r2,r2,128
  804acc:	10bfe004 	addi	r2,r2,-128
  804ad0:	10000826 	beq	r2,zero,804af4 <logic+0x40e4>
  804ad4:	e0bffc17 	ldw	r2,-16(fp)
  804ad8:	10804903 	ldbu	r2,292(r2)
  804adc:	10803fcc 	andi	r2,r2,255
  804ae0:	1080201c 	xori	r2,r2,128
  804ae4:	10bfe004 	addi	r2,r2,-128
  804ae8:	1000021e 	bne	r2,zero,804af4 <logic+0x40e4>
  804aec:	00800044 	movi	r2,1
  804af0:	00000106 	br	804af8 <logic+0x40e8>
  804af4:	0005883a 	mov	r2,zero
  804af8:	1007883a 	mov	r3,r2
  804afc:	e0bffc17 	ldw	r2,-16(fp)
  804b00:	10c03645 	stb	r3,217(r2)
  d->_g103 = d->_g120 || d->_g75 && !d->_cg121;
  804b04:	e0bffc17 	ldw	r2,-16(fp)
  804b08:	10803543 	ldbu	r2,213(r2)
  804b0c:	10803fcc 	andi	r2,r2,255
  804b10:	1080201c 	xori	r2,r2,128
  804b14:	10bfe004 	addi	r2,r2,-128
  804b18:	10000c1e 	bne	r2,zero,804b4c <logic+0x413c>
  804b1c:	e0bffc17 	ldw	r2,-16(fp)
  804b20:	10802d43 	ldbu	r2,181(r2)
  804b24:	10803fcc 	andi	r2,r2,255
  804b28:	1080201c 	xori	r2,r2,128
  804b2c:	10bfe004 	addi	r2,r2,-128
  804b30:	10000826 	beq	r2,zero,804b54 <logic+0x4144>
  804b34:	e0bffc17 	ldw	r2,-16(fp)
  804b38:	10804943 	ldbu	r2,293(r2)
  804b3c:	10803fcc 	andi	r2,r2,255
  804b40:	1080201c 	xori	r2,r2,128
  804b44:	10bfe004 	addi	r2,r2,-128
  804b48:	1000021e 	bne	r2,zero,804b54 <logic+0x4144>
  804b4c:	00800044 	movi	r2,1
  804b50:	00000106 	br	804b58 <logic+0x4148>
  804b54:	0005883a 	mov	r2,zero
  804b58:	1007883a 	mov	r3,r2
  804b5c:	e0bffc17 	ldw	r2,-16(fp)
  804b60:	10c03245 	stb	r3,201(r2)
  d->_g106 = d->_pg137;
  804b64:	e0bffc17 	ldw	r2,-16(fp)
  804b68:	10c05783 	ldbu	r3,350(r2)
  804b6c:	e0bffc17 	ldw	r2,-16(fp)
  804b70:	10c032c5 	stb	r3,203(r2)
  d->_cg142 = d->VS || d->_DDDpacemake2_local__pre_VP_temp;
  804b74:	e0bffc17 	ldw	r2,-16(fp)
  804b78:	10800643 	ldbu	r2,25(r2)
  804b7c:	10803fcc 	andi	r2,r2,255
  804b80:	1080201c 	xori	r2,r2,128
  804b84:	10bfe004 	addi	r2,r2,-128
  804b88:	1000061e 	bne	r2,zero,804ba4 <logic+0x4194>
  804b8c:	e0bffc17 	ldw	r2,-16(fp)
  804b90:	10801b43 	ldbu	r2,109(r2)
  804b94:	10803fcc 	andi	r2,r2,255
  804b98:	1080201c 	xori	r2,r2,128
  804b9c:	10bfe004 	addi	r2,r2,-128
  804ba0:	10000226 	beq	r2,zero,804bac <logic+0x419c>
  804ba4:	00800044 	movi	r2,1
  804ba8:	00000106 	br	804bb0 <logic+0x41a0>
  804bac:	0005883a 	mov	r2,zero
  804bb0:	1007883a 	mov	r3,r2
  804bb4:	e0bffc17 	ldw	r2,-16(fp)
  804bb8:	10c04b45 	stb	r3,301(r2)
  d->_g110 = d->_g106 && d->_cg142;
  804bbc:	e0bffc17 	ldw	r2,-16(fp)
  804bc0:	108032c3 	ldbu	r2,203(r2)
  804bc4:	10803fcc 	andi	r2,r2,255
  804bc8:	1080201c 	xori	r2,r2,128
  804bcc:	10bfe004 	addi	r2,r2,-128
  804bd0:	10000826 	beq	r2,zero,804bf4 <logic+0x41e4>
  804bd4:	e0bffc17 	ldw	r2,-16(fp)
  804bd8:	10804b43 	ldbu	r2,301(r2)
  804bdc:	10803fcc 	andi	r2,r2,255
  804be0:	1080201c 	xori	r2,r2,128
  804be4:	10bfe004 	addi	r2,r2,-128
  804be8:	10000226 	beq	r2,zero,804bf4 <logic+0x41e4>
  804bec:	00800044 	movi	r2,1
  804bf0:	00000106 	br	804bf8 <logic+0x41e8>
  804bf4:	0005883a 	mov	r2,zero
  804bf8:	1007883a 	mov	r3,r2
  804bfc:	e0bffc17 	ldw	r2,-16(fp)
  804c00:	10c03385 	stb	r3,206(r2)
  if (d->_g110) {
  804c04:	e0bffc17 	ldw	r2,-16(fp)
  804c08:	10803383 	ldbu	r2,206(r2)
  804c0c:	10803fcc 	andi	r2,r2,255
  804c10:	1080201c 	xori	r2,r2,128
  804c14:	10bfe004 	addi	r2,r2,-128
  804c18:	10000326 	beq	r2,zero,804c28 <logic+0x4218>
    d->_DDDpacemake2_local__Atrig9 = 1;
  804c1c:	e0bffc17 	ldw	r2,-16(fp)
  804c20:	00c00044 	movi	r3,1
  804c24:	10c01e45 	stb	r3,121(r2)
  }
  d->_g112 = d->_pg148;
  804c28:	e0bffc17 	ldw	r2,-16(fp)
  804c2c:	10c057c3 	ldbu	r3,351(r2)
  804c30:	e0bffc17 	ldw	r2,-16(fp)
  804c34:	10c03405 	stb	r3,208(r2)
  if (d->_g112) {
  804c38:	e0bffc17 	ldw	r2,-16(fp)
  804c3c:	10803403 	ldbu	r2,208(r2)
  804c40:	10803fcc 	andi	r2,r2,255
  804c44:	1080201c 	xori	r2,r2,128
  804c48:	10bfe004 	addi	r2,r2,-128
  804c4c:	10001226 	beq	r2,zero,804c98 <logic+0x4288>
    d->LRI_counter += d->deltaT;
  804c50:	e13ffc17 	ldw	r4,-16(fp)
  804c54:	20800f17 	ldw	r2,60(r4)
  804c58:	20c01017 	ldw	r3,64(r4)
  804c5c:	e1bffc17 	ldw	r6,-16(fp)
  804c60:	31001417 	ldw	r4,80(r6)
  804c64:	31401517 	ldw	r5,84(r6)
  804c68:	200d883a 	mov	r6,r4
  804c6c:	280f883a 	mov	r7,r5
  804c70:	1009883a 	mov	r4,r2
  804c74:	180b883a 	mov	r5,r3
  804c78:	0805ca80 	call	805ca8 <__adddf3>
  804c7c:	1009883a 	mov	r4,r2
  804c80:	180b883a 	mov	r5,r3
  804c84:	2005883a 	mov	r2,r4
  804c88:	2807883a 	mov	r3,r5
  804c8c:	e13ffc17 	ldw	r4,-16(fp)
  804c90:	20800f15 	stw	r2,60(r4)
  804c94:	20c01015 	stw	r3,64(r4)
  }
  d->_g115 = d->_g106 && !d->_cg142;
  804c98:	e0bffc17 	ldw	r2,-16(fp)
  804c9c:	108032c3 	ldbu	r2,203(r2)
  804ca0:	10803fcc 	andi	r2,r2,255
  804ca4:	1080201c 	xori	r2,r2,128
  804ca8:	10bfe004 	addi	r2,r2,-128
  804cac:	10000826 	beq	r2,zero,804cd0 <logic+0x42c0>
  804cb0:	e0bffc17 	ldw	r2,-16(fp)
  804cb4:	10804b43 	ldbu	r2,301(r2)
  804cb8:	10803fcc 	andi	r2,r2,255
  804cbc:	1080201c 	xori	r2,r2,128
  804cc0:	10bfe004 	addi	r2,r2,-128
  804cc4:	1000021e 	bne	r2,zero,804cd0 <logic+0x42c0>
  804cc8:	00800044 	movi	r2,1
  804ccc:	00000106 	br	804cd4 <logic+0x42c4>
  804cd0:	0005883a 	mov	r2,zero
  804cd4:	1007883a 	mov	r3,r2
  804cd8:	e0bffc17 	ldw	r2,-16(fp)
  804cdc:	10c03485 	stb	r3,210(r2)
  d->_cg145 = d->LRI_counter >= d->LRI_DEADLINE;
  804ce0:	e0bffc17 	ldw	r2,-16(fp)
  804ce4:	14000f17 	ldw	r16,60(r2)
  804ce8:	14401017 	ldw	r17,64(r2)
  804cec:	e0bffc17 	ldw	r2,-16(fp)
  804cf0:	10800317 	ldw	r2,12(r2)
  804cf4:	1009883a 	mov	r4,r2
  804cf8:	08077380 	call	807738 <__floatsidf>
  804cfc:	1009883a 	mov	r4,r2
  804d00:	180b883a 	mov	r5,r3
  804d04:	04800044 	movi	r18,1
  804d08:	200d883a 	mov	r6,r4
  804d0c:	280f883a 	mov	r7,r5
  804d10:	8009883a 	mov	r4,r16
  804d14:	880b883a 	mov	r5,r17
  804d18:	08065540 	call	806554 <__gedf2>
  804d1c:	1000010e 	bge	r2,zero,804d24 <logic+0x4314>
  804d20:	0025883a 	mov	r18,zero
  804d24:	9007883a 	mov	r3,r18
  804d28:	e0bffc17 	ldw	r2,-16(fp)
  804d2c:	10c04b05 	stb	r3,300(r2)
  d->_g121 = d->_g115 && d->_cg145;
  804d30:	e0bffc17 	ldw	r2,-16(fp)
  804d34:	10803483 	ldbu	r2,210(r2)
  804d38:	10803fcc 	andi	r2,r2,255
  804d3c:	1080201c 	xori	r2,r2,128
  804d40:	10bfe004 	addi	r2,r2,-128
  804d44:	10000826 	beq	r2,zero,804d68 <logic+0x4358>
  804d48:	e0bffc17 	ldw	r2,-16(fp)
  804d4c:	10804b03 	ldbu	r2,300(r2)
  804d50:	10803fcc 	andi	r2,r2,255
  804d54:	1080201c 	xori	r2,r2,128
  804d58:	10bfe004 	addi	r2,r2,-128
  804d5c:	10000226 	beq	r2,zero,804d68 <logic+0x4358>
  804d60:	00800044 	movi	r2,1
  804d64:	00000106 	br	804d6c <logic+0x435c>
  804d68:	0005883a 	mov	r2,zero
  804d6c:	1007883a 	mov	r3,r2
  804d70:	e0bffc17 	ldw	r2,-16(fp)
  804d74:	10c03585 	stb	r3,214(r2)
  if (d->_g121) {
  804d78:	e0bffc17 	ldw	r2,-16(fp)
  804d7c:	10803583 	ldbu	r2,214(r2)
  804d80:	10803fcc 	andi	r2,r2,255
  804d84:	1080201c 	xori	r2,r2,128
  804d88:	10bfe004 	addi	r2,r2,-128
  804d8c:	10000326 	beq	r2,zero,804d9c <logic+0x438c>
    d->_DDDpacemake2_local__Atrig10 = 1;
  804d90:	e0bffc17 	ldw	r2,-16(fp)
  804d94:	00c00044 	movi	r3,1
  804d98:	10c01e85 	stb	r3,122(r2)
  }
  d->_g104 = d->_pg144;
  804d9c:	e0bffc17 	ldw	r2,-16(fp)
  804da0:	10c05803 	ldbu	r3,352(r2)
  804da4:	e0bffc17 	ldw	r2,-16(fp)
  804da8:	10c03285 	stb	r3,202(r2)
  d->_cg129 = d->VS || d->_DDDpacemake2_local__pre_VP_temp;
  804dac:	e0bffc17 	ldw	r2,-16(fp)
  804db0:	10800643 	ldbu	r2,25(r2)
  804db4:	10803fcc 	andi	r2,r2,255
  804db8:	1080201c 	xori	r2,r2,128
  804dbc:	10bfe004 	addi	r2,r2,-128
  804dc0:	1000061e 	bne	r2,zero,804ddc <logic+0x43cc>
  804dc4:	e0bffc17 	ldw	r2,-16(fp)
  804dc8:	10801b43 	ldbu	r2,109(r2)
  804dcc:	10803fcc 	andi	r2,r2,255
  804dd0:	1080201c 	xori	r2,r2,128
  804dd4:	10bfe004 	addi	r2,r2,-128
  804dd8:	10000226 	beq	r2,zero,804de4 <logic+0x43d4>
  804ddc:	00800044 	movi	r2,1
  804de0:	00000106 	br	804de8 <logic+0x43d8>
  804de4:	0005883a 	mov	r2,zero
  804de8:	1007883a 	mov	r3,r2
  804dec:	e0bffc17 	ldw	r2,-16(fp)
  804df0:	10c04a05 	stb	r3,296(r2)
  d->_g142 = d->_g104 && d->_cg129;
  804df4:	e0bffc17 	ldw	r2,-16(fp)
  804df8:	10803283 	ldbu	r2,202(r2)
  804dfc:	10803fcc 	andi	r2,r2,255
  804e00:	1080201c 	xori	r2,r2,128
  804e04:	10bfe004 	addi	r2,r2,-128
  804e08:	10000826 	beq	r2,zero,804e2c <logic+0x441c>
  804e0c:	e0bffc17 	ldw	r2,-16(fp)
  804e10:	10804a03 	ldbu	r2,296(r2)
  804e14:	10803fcc 	andi	r2,r2,255
  804e18:	1080201c 	xori	r2,r2,128
  804e1c:	10bfe004 	addi	r2,r2,-128
  804e20:	10000226 	beq	r2,zero,804e2c <logic+0x441c>
  804e24:	00800044 	movi	r2,1
  804e28:	00000106 	br	804e30 <logic+0x4420>
  804e2c:	0005883a 	mov	r2,zero
  804e30:	1007883a 	mov	r3,r2
  804e34:	e0bffc17 	ldw	r2,-16(fp)
  804e38:	10c03945 	stb	r3,229(r2)
  if (d->_g142) {
  804e3c:	e0bffc17 	ldw	r2,-16(fp)
  804e40:	10803943 	ldbu	r2,229(r2)
  804e44:	10803fcc 	andi	r2,r2,255
  804e48:	1080201c 	xori	r2,r2,128
  804e4c:	10bfe004 	addi	r2,r2,-128
  804e50:	10000a26 	beq	r2,zero,804e7c <logic+0x446c>
    d->_DDDpacemake2_local_LRI_state = 1;
  804e54:	e0bffc17 	ldw	r2,-16(fp)
  804e58:	00c00044 	movi	r3,1
  804e5c:	10c01885 	stb	r3,98(r2)
    d->LRI_counter = 0;
  804e60:	e0bffc17 	ldw	r2,-16(fp)
  804e64:	10000f15 	stw	zero,60(r2)
  804e68:	10001015 	stw	zero,64(r2)
    d->_DDDpacemake2_local__Atrig9 = 0;
  804e6c:	e0bffc17 	ldw	r2,-16(fp)
  804e70:	10001e45 	stb	zero,121(r2)
    d->_DDDpacemake2_local__Atrig10 = 0;
  804e74:	e0bffc17 	ldw	r2,-16(fp)
  804e78:	10001e85 	stb	zero,122(r2)
  }
  d->_g136 = d->_pg135;
  804e7c:	e0bffc17 	ldw	r2,-16(fp)
  804e80:	10c05843 	ldbu	r3,353(r2)
  804e84:	e0bffc17 	ldw	r2,-16(fp)
  804e88:	10c03845 	stb	r3,225(r2)
  d->_g139 = d->_pg138;
  804e8c:	e0bffc17 	ldw	r2,-16(fp)
  804e90:	10c05883 	ldbu	r3,354(r2)
  804e94:	e0bffc17 	ldw	r2,-16(fp)
  804e98:	10c03905 	stb	r3,228(r2)
  d->_g139 = d->_g142 || d->_g136 || d->_g139;
  804e9c:	e0bffc17 	ldw	r2,-16(fp)
  804ea0:	10803943 	ldbu	r2,229(r2)
  804ea4:	10803fcc 	andi	r2,r2,255
  804ea8:	1080201c 	xori	r2,r2,128
  804eac:	10bfe004 	addi	r2,r2,-128
  804eb0:	10000c1e 	bne	r2,zero,804ee4 <logic+0x44d4>
  804eb4:	e0bffc17 	ldw	r2,-16(fp)
  804eb8:	10803843 	ldbu	r2,225(r2)
  804ebc:	10803fcc 	andi	r2,r2,255
  804ec0:	1080201c 	xori	r2,r2,128
  804ec4:	10bfe004 	addi	r2,r2,-128
  804ec8:	1000061e 	bne	r2,zero,804ee4 <logic+0x44d4>
  804ecc:	e0bffc17 	ldw	r2,-16(fp)
  804ed0:	10803903 	ldbu	r2,228(r2)
  804ed4:	10803fcc 	andi	r2,r2,255
  804ed8:	1080201c 	xori	r2,r2,128
  804edc:	10bfe004 	addi	r2,r2,-128
  804ee0:	10000226 	beq	r2,zero,804eec <logic+0x44dc>
  804ee4:	00800044 	movi	r2,1
  804ee8:	00000106 	br	804ef0 <logic+0x44e0>
  804eec:	0005883a 	mov	r2,zero
  804ef0:	1007883a 	mov	r3,r2
  804ef4:	e0bffc17 	ldw	r2,-16(fp)
  804ef8:	10c03905 	stb	r3,228(r2)
  d->_cg132 = d->LRI_counter < d->LRI_DEADLINE;
  804efc:	e0bffc17 	ldw	r2,-16(fp)
  804f00:	14000f17 	ldw	r16,60(r2)
  804f04:	14401017 	ldw	r17,64(r2)
  804f08:	e0bffc17 	ldw	r2,-16(fp)
  804f0c:	10800317 	ldw	r2,12(r2)
  804f10:	1009883a 	mov	r4,r2
  804f14:	08077380 	call	807738 <__floatsidf>
  804f18:	1009883a 	mov	r4,r2
  804f1c:	180b883a 	mov	r5,r3
  804f20:	04800044 	movi	r18,1
  804f24:	200d883a 	mov	r6,r4
  804f28:	280f883a 	mov	r7,r5
  804f2c:	8009883a 	mov	r4,r16
  804f30:	880b883a 	mov	r5,r17
  804f34:	08066300 	call	806630 <__ledf2>
  804f38:	10000116 	blt	r2,zero,804f40 <logic+0x4530>
  804f3c:	0025883a 	mov	r18,zero
  804f40:	9007883a 	mov	r3,r18
  804f44:	e0bffc17 	ldw	r2,-16(fp)
  804f48:	10c04a45 	stb	r3,297(r2)
  d->_g136 = d->_g139 && !d->_cg132;
  804f4c:	e0bffc17 	ldw	r2,-16(fp)
  804f50:	10803903 	ldbu	r2,228(r2)
  804f54:	10803fcc 	andi	r2,r2,255
  804f58:	1080201c 	xori	r2,r2,128
  804f5c:	10bfe004 	addi	r2,r2,-128
  804f60:	10000826 	beq	r2,zero,804f84 <logic+0x4574>
  804f64:	e0bffc17 	ldw	r2,-16(fp)
  804f68:	10804a43 	ldbu	r2,297(r2)
  804f6c:	10803fcc 	andi	r2,r2,255
  804f70:	1080201c 	xori	r2,r2,128
  804f74:	10bfe004 	addi	r2,r2,-128
  804f78:	1000021e 	bne	r2,zero,804f84 <logic+0x4574>
  804f7c:	00800044 	movi	r2,1
  804f80:	00000106 	br	804f88 <logic+0x4578>
  804f84:	0005883a 	mov	r2,zero
  804f88:	1007883a 	mov	r3,r2
  804f8c:	e0bffc17 	ldw	r2,-16(fp)
  804f90:	10c03845 	stb	r3,225(r2)
  d->_cg137 = d->_DDDpacemake2_local__Atrig9 || d->_DDDpacemake2_local__Atrig10;
  804f94:	e0bffc17 	ldw	r2,-16(fp)
  804f98:	10801e43 	ldbu	r2,121(r2)
  804f9c:	10803fcc 	andi	r2,r2,255
  804fa0:	1080201c 	xori	r2,r2,128
  804fa4:	10bfe004 	addi	r2,r2,-128
  804fa8:	1000061e 	bne	r2,zero,804fc4 <logic+0x45b4>
  804fac:	e0bffc17 	ldw	r2,-16(fp)
  804fb0:	10801e83 	ldbu	r2,122(r2)
  804fb4:	10803fcc 	andi	r2,r2,255
  804fb8:	1080201c 	xori	r2,r2,128
  804fbc:	10bfe004 	addi	r2,r2,-128
  804fc0:	10000226 	beq	r2,zero,804fcc <logic+0x45bc>
  804fc4:	00800044 	movi	r2,1
  804fc8:	00000106 	br	804fd0 <logic+0x45c0>
  804fcc:	0005883a 	mov	r2,zero
  804fd0:	1007883a 	mov	r3,r2
  804fd4:	e0bffc17 	ldw	r2,-16(fp)
  804fd8:	10c04ac5 	stb	r3,299(r2)
  d->_g138 = d->_g136 && !d->_cg137;
  804fdc:	e0bffc17 	ldw	r2,-16(fp)
  804fe0:	10803843 	ldbu	r2,225(r2)
  804fe4:	10803fcc 	andi	r2,r2,255
  804fe8:	1080201c 	xori	r2,r2,128
  804fec:	10bfe004 	addi	r2,r2,-128
  804ff0:	10000826 	beq	r2,zero,805014 <logic+0x4604>
  804ff4:	e0bffc17 	ldw	r2,-16(fp)
  804ff8:	10804ac3 	ldbu	r2,299(r2)
  804ffc:	10803fcc 	andi	r2,r2,255
  805000:	1080201c 	xori	r2,r2,128
  805004:	10bfe004 	addi	r2,r2,-128
  805008:	1000021e 	bne	r2,zero,805014 <logic+0x4604>
  80500c:	00800044 	movi	r2,1
  805010:	00000106 	br	805018 <logic+0x4608>
  805014:	0005883a 	mov	r2,zero
  805018:	1007883a 	mov	r3,r2
  80501c:	e0bffc17 	ldw	r2,-16(fp)
  805020:	10c038c5 	stb	r3,227(r2)
  d->_g132 = d->_g139 && d->_cg132;
  805024:	e0bffc17 	ldw	r2,-16(fp)
  805028:	10803903 	ldbu	r2,228(r2)
  80502c:	10803fcc 	andi	r2,r2,255
  805030:	1080201c 	xori	r2,r2,128
  805034:	10bfe004 	addi	r2,r2,-128
  805038:	10000826 	beq	r2,zero,80505c <logic+0x464c>
  80503c:	e0bffc17 	ldw	r2,-16(fp)
  805040:	10804a43 	ldbu	r2,297(r2)
  805044:	10803fcc 	andi	r2,r2,255
  805048:	1080201c 	xori	r2,r2,128
  80504c:	10bfe004 	addi	r2,r2,-128
  805050:	10000226 	beq	r2,zero,80505c <logic+0x464c>
  805054:	00800044 	movi	r2,1
  805058:	00000106 	br	805060 <logic+0x4650>
  80505c:	0005883a 	mov	r2,zero
  805060:	1007883a 	mov	r3,r2
  805064:	e0bffc17 	ldw	r2,-16(fp)
  805068:	10c03745 	stb	r3,221(r2)
  if (d->_g132) {
  80506c:	e0bffc17 	ldw	r2,-16(fp)
  805070:	10803743 	ldbu	r2,221(r2)
  805074:	10803fcc 	andi	r2,r2,255
  805078:	1080201c 	xori	r2,r2,128
  80507c:	10bfe004 	addi	r2,r2,-128
  805080:	10003426 	beq	r2,zero,805154 <logic+0x4744>
    d->sleepT = (d->sleepT < (d->LRI_DEADLINE - d->LRI_counter)) ? d->sleepT : (d->LRI_DEADLINE - d->LRI_counter);
  805084:	e0bffc17 	ldw	r2,-16(fp)
  805088:	14001617 	ldw	r16,88(r2)
  80508c:	14401717 	ldw	r17,92(r2)
  805090:	e0bffc17 	ldw	r2,-16(fp)
  805094:	10800317 	ldw	r2,12(r2)
  805098:	1009883a 	mov	r4,r2
  80509c:	08077380 	call	807738 <__floatsidf>
  8050a0:	1011883a 	mov	r8,r2
  8050a4:	1813883a 	mov	r9,r3
  8050a8:	e13ffc17 	ldw	r4,-16(fp)
  8050ac:	20800f17 	ldw	r2,60(r4)
  8050b0:	20c01017 	ldw	r3,64(r4)
  8050b4:	100d883a 	mov	r6,r2
  8050b8:	180f883a 	mov	r7,r3
  8050bc:	4009883a 	mov	r4,r8
  8050c0:	480b883a 	mov	r5,r9
  8050c4:	0806e3c0 	call	806e3c <__subdf3>
  8050c8:	1009883a 	mov	r4,r2
  8050cc:	180b883a 	mov	r5,r3
  8050d0:	2005883a 	mov	r2,r4
  8050d4:	2807883a 	mov	r3,r5
  8050d8:	100d883a 	mov	r6,r2
  8050dc:	180f883a 	mov	r7,r3
  8050e0:	8009883a 	mov	r4,r16
  8050e4:	880b883a 	mov	r5,r17
  8050e8:	08066300 	call	806630 <__ledf2>
  8050ec:	1000040e 	bge	r2,zero,805100 <logic+0x46f0>
  8050f0:	e13ffc17 	ldw	r4,-16(fp)
  8050f4:	20801617 	ldw	r2,88(r4)
  8050f8:	20c01717 	ldw	r3,92(r4)
  8050fc:	00001206 	br	805148 <logic+0x4738>
  805100:	e0bffc17 	ldw	r2,-16(fp)
  805104:	10800317 	ldw	r2,12(r2)
  805108:	1009883a 	mov	r4,r2
  80510c:	08077380 	call	807738 <__floatsidf>
  805110:	1011883a 	mov	r8,r2
  805114:	1813883a 	mov	r9,r3
  805118:	e13ffc17 	ldw	r4,-16(fp)
  80511c:	20800f17 	ldw	r2,60(r4)
  805120:	20c01017 	ldw	r3,64(r4)
  805124:	100d883a 	mov	r6,r2
  805128:	180f883a 	mov	r7,r3
  80512c:	4009883a 	mov	r4,r8
  805130:	480b883a 	mov	r5,r9
  805134:	0806e3c0 	call	806e3c <__subdf3>
  805138:	1009883a 	mov	r4,r2
  80513c:	180b883a 	mov	r5,r3
  805140:	2005883a 	mov	r2,r4
  805144:	2807883a 	mov	r3,r5
  805148:	e13ffc17 	ldw	r4,-16(fp)
  80514c:	20801615 	stw	r2,88(r4)
  805150:	20c01715 	stw	r3,92(r4)
  }
  d->_cg133 = d->_DDDpacemake2_local__Atrig9 || d->_DDDpacemake2_local__Atrig10;
  805154:	e0bffc17 	ldw	r2,-16(fp)
  805158:	10801e43 	ldbu	r2,121(r2)
  80515c:	10803fcc 	andi	r2,r2,255
  805160:	1080201c 	xori	r2,r2,128
  805164:	10bfe004 	addi	r2,r2,-128
  805168:	1000061e 	bne	r2,zero,805184 <logic+0x4774>
  80516c:	e0bffc17 	ldw	r2,-16(fp)
  805170:	10801e83 	ldbu	r2,122(r2)
  805174:	10803fcc 	andi	r2,r2,255
  805178:	1080201c 	xori	r2,r2,128
  80517c:	10bfe004 	addi	r2,r2,-128
  805180:	10000226 	beq	r2,zero,80518c <logic+0x477c>
  805184:	00800044 	movi	r2,1
  805188:	00000106 	br	805190 <logic+0x4780>
  80518c:	0005883a 	mov	r2,zero
  805190:	1007883a 	mov	r3,r2
  805194:	e0bffc17 	ldw	r2,-16(fp)
  805198:	10c04a85 	stb	r3,298(r2)
  d->_g135 = d->_g132 && !d->_cg133;
  80519c:	e0bffc17 	ldw	r2,-16(fp)
  8051a0:	10803743 	ldbu	r2,221(r2)
  8051a4:	10803fcc 	andi	r2,r2,255
  8051a8:	1080201c 	xori	r2,r2,128
  8051ac:	10bfe004 	addi	r2,r2,-128
  8051b0:	10000826 	beq	r2,zero,8051d4 <logic+0x47c4>
  8051b4:	e0bffc17 	ldw	r2,-16(fp)
  8051b8:	10804a83 	ldbu	r2,298(r2)
  8051bc:	10803fcc 	andi	r2,r2,255
  8051c0:	1080201c 	xori	r2,r2,128
  8051c4:	10bfe004 	addi	r2,r2,-128
  8051c8:	1000021e 	bne	r2,zero,8051d4 <logic+0x47c4>
  8051cc:	00800044 	movi	r2,1
  8051d0:	00000106 	br	8051d8 <logic+0x47c8>
  8051d4:	0005883a 	mov	r2,zero
  8051d8:	1007883a 	mov	r3,r2
  8051dc:	e0bffc17 	ldw	r2,-16(fp)
  8051e0:	10c03805 	stb	r3,224(r2)
  d->_g134_e1 = !(d->_g138 || d->_g135);
  8051e4:	e0bffc17 	ldw	r2,-16(fp)
  8051e8:	108038c3 	ldbu	r2,227(r2)
  8051ec:	10803fcc 	andi	r2,r2,255
  8051f0:	1080201c 	xori	r2,r2,128
  8051f4:	10bfe004 	addi	r2,r2,-128
  8051f8:	1000081e 	bne	r2,zero,80521c <logic+0x480c>
  8051fc:	e0bffc17 	ldw	r2,-16(fp)
  805200:	10803803 	ldbu	r2,224(r2)
  805204:	10803fcc 	andi	r2,r2,255
  805208:	1080201c 	xori	r2,r2,128
  80520c:	10bfe004 	addi	r2,r2,-128
  805210:	1000021e 	bne	r2,zero,80521c <logic+0x480c>
  805214:	00800044 	movi	r2,1
  805218:	00000106 	br	805220 <logic+0x4810>
  80521c:	0005883a 	mov	r2,zero
  805220:	1007883a 	mov	r3,r2
  805224:	e0bffc17 	ldw	r2,-16(fp)
  805228:	10c04f45 	stb	r3,317(r2)
  d->_g133 = d->_g132 && d->_cg133 || d->_g136 && d->_cg137;
  80522c:	e0bffc17 	ldw	r2,-16(fp)
  805230:	10803743 	ldbu	r2,221(r2)
  805234:	10803fcc 	andi	r2,r2,255
  805238:	1080201c 	xori	r2,r2,128
  80523c:	10bfe004 	addi	r2,r2,-128
  805240:	10000626 	beq	r2,zero,80525c <logic+0x484c>
  805244:	e0bffc17 	ldw	r2,-16(fp)
  805248:	10804a83 	ldbu	r2,298(r2)
  80524c:	10803fcc 	andi	r2,r2,255
  805250:	1080201c 	xori	r2,r2,128
  805254:	10bfe004 	addi	r2,r2,-128
  805258:	10000c1e 	bne	r2,zero,80528c <logic+0x487c>
  80525c:	e0bffc17 	ldw	r2,-16(fp)
  805260:	10803843 	ldbu	r2,225(r2)
  805264:	10803fcc 	andi	r2,r2,255
  805268:	1080201c 	xori	r2,r2,128
  80526c:	10bfe004 	addi	r2,r2,-128
  805270:	10000826 	beq	r2,zero,805294 <logic+0x4884>
  805274:	e0bffc17 	ldw	r2,-16(fp)
  805278:	10804ac3 	ldbu	r2,299(r2)
  80527c:	10803fcc 	andi	r2,r2,255
  805280:	1080201c 	xori	r2,r2,128
  805284:	10bfe004 	addi	r2,r2,-128
  805288:	10000226 	beq	r2,zero,805294 <logic+0x4884>
  80528c:	00800044 	movi	r2,1
  805290:	00000106 	br	805298 <logic+0x4888>
  805294:	0005883a 	mov	r2,zero
  805298:	1007883a 	mov	r3,r2
  80529c:	e0bffc17 	ldw	r2,-16(fp)
  8052a0:	10c03785 	stb	r3,222(r2)
  d->_g137 = d->_g142 || d->_g115 && !d->_cg145;
  8052a4:	e0bffc17 	ldw	r2,-16(fp)
  8052a8:	10803943 	ldbu	r2,229(r2)
  8052ac:	10803fcc 	andi	r2,r2,255
  8052b0:	1080201c 	xori	r2,r2,128
  8052b4:	10bfe004 	addi	r2,r2,-128
  8052b8:	10000c1e 	bne	r2,zero,8052ec <logic+0x48dc>
  8052bc:	e0bffc17 	ldw	r2,-16(fp)
  8052c0:	10803483 	ldbu	r2,210(r2)
  8052c4:	10803fcc 	andi	r2,r2,255
  8052c8:	1080201c 	xori	r2,r2,128
  8052cc:	10bfe004 	addi	r2,r2,-128
  8052d0:	10000826 	beq	r2,zero,8052f4 <logic+0x48e4>
  8052d4:	e0bffc17 	ldw	r2,-16(fp)
  8052d8:	10804b03 	ldbu	r2,300(r2)
  8052dc:	10803fcc 	andi	r2,r2,255
  8052e0:	1080201c 	xori	r2,r2,128
  8052e4:	10bfe004 	addi	r2,r2,-128
  8052e8:	1000021e 	bne	r2,zero,8052f4 <logic+0x48e4>
  8052ec:	00800044 	movi	r2,1
  8052f0:	00000106 	br	8052f8 <logic+0x48e8>
  8052f4:	0005883a 	mov	r2,zero
  8052f8:	1007883a 	mov	r3,r2
  8052fc:	e0bffc17 	ldw	r2,-16(fp)
  805300:	10c03885 	stb	r3,226(r2)
  d->_g130 = !d->_g137;
  805304:	e0bffc17 	ldw	r2,-16(fp)
  805308:	10803883 	ldbu	r2,226(r2)
  80530c:	10803fcc 	andi	r2,r2,255
  805310:	1080201c 	xori	r2,r2,128
  805314:	10bfe004 	addi	r2,r2,-128
  805318:	1005003a 	cmpeq	r2,r2,zero
  80531c:	1007883a 	mov	r3,r2
  805320:	e0bffc17 	ldw	r2,-16(fp)
  805324:	10c03705 	stb	r3,220(r2)
  d->_g145 = d->_g110 || d->_g121;
  805328:	e0bffc17 	ldw	r2,-16(fp)
  80532c:	10803383 	ldbu	r2,206(r2)
  805330:	10803fcc 	andi	r2,r2,255
  805334:	1080201c 	xori	r2,r2,128
  805338:	10bfe004 	addi	r2,r2,-128
  80533c:	1000061e 	bne	r2,zero,805358 <logic+0x4948>
  805340:	e0bffc17 	ldw	r2,-16(fp)
  805344:	10803583 	ldbu	r2,214(r2)
  805348:	10803fcc 	andi	r2,r2,255
  80534c:	1080201c 	xori	r2,r2,128
  805350:	10bfe004 	addi	r2,r2,-128
  805354:	10000226 	beq	r2,zero,805360 <logic+0x4950>
  805358:	00800044 	movi	r2,1
  80535c:	00000106 	br	805364 <logic+0x4954>
  805360:	0005883a 	mov	r2,zero
  805364:	1007883a 	mov	r3,r2
  805368:	e0bffc17 	ldw	r2,-16(fp)
  80536c:	10c03a05 	stb	r3,232(r2)
  d->_g146 = (d->_g134_e1 || d->_g133) && (d->_g130 || d->_g145) && (d->_g133 || d->_g145);
  805370:	e0bffc17 	ldw	r2,-16(fp)
  805374:	10804f43 	ldbu	r2,317(r2)
  805378:	10803fcc 	andi	r2,r2,255
  80537c:	1080201c 	xori	r2,r2,128
  805380:	10bfe004 	addi	r2,r2,-128
  805384:	1000061e 	bne	r2,zero,8053a0 <logic+0x4990>
  805388:	e0bffc17 	ldw	r2,-16(fp)
  80538c:	10803783 	ldbu	r2,222(r2)
  805390:	10803fcc 	andi	r2,r2,255
  805394:	1080201c 	xori	r2,r2,128
  805398:	10bfe004 	addi	r2,r2,-128
  80539c:	10001a26 	beq	r2,zero,805408 <logic+0x49f8>
  8053a0:	e0bffc17 	ldw	r2,-16(fp)
  8053a4:	10803703 	ldbu	r2,220(r2)
  8053a8:	10803fcc 	andi	r2,r2,255
  8053ac:	1080201c 	xori	r2,r2,128
  8053b0:	10bfe004 	addi	r2,r2,-128
  8053b4:	1000061e 	bne	r2,zero,8053d0 <logic+0x49c0>
  8053b8:	e0bffc17 	ldw	r2,-16(fp)
  8053bc:	10803a03 	ldbu	r2,232(r2)
  8053c0:	10803fcc 	andi	r2,r2,255
  8053c4:	1080201c 	xori	r2,r2,128
  8053c8:	10bfe004 	addi	r2,r2,-128
  8053cc:	10000e26 	beq	r2,zero,805408 <logic+0x49f8>
  8053d0:	e0bffc17 	ldw	r2,-16(fp)
  8053d4:	10803783 	ldbu	r2,222(r2)
  8053d8:	10803fcc 	andi	r2,r2,255
  8053dc:	1080201c 	xori	r2,r2,128
  8053e0:	10bfe004 	addi	r2,r2,-128
  8053e4:	1000061e 	bne	r2,zero,805400 <logic+0x49f0>
  8053e8:	e0bffc17 	ldw	r2,-16(fp)
  8053ec:	10803a03 	ldbu	r2,232(r2)
  8053f0:	10803fcc 	andi	r2,r2,255
  8053f4:	1080201c 	xori	r2,r2,128
  8053f8:	10bfe004 	addi	r2,r2,-128
  8053fc:	10000226 	beq	r2,zero,805408 <logic+0x49f8>
  805400:	00800044 	movi	r2,1
  805404:	00000106 	br	80540c <logic+0x49fc>
  805408:	0005883a 	mov	r2,zero
  80540c:	1007883a 	mov	r3,r2
  805410:	e0bffc17 	ldw	r2,-16(fp)
  805414:	10c03a45 	stb	r3,233(r2)
  d->_cg147 = d->_DDDpacemake2_local__Atrig9;
  805418:	e0bffc17 	ldw	r2,-16(fp)
  80541c:	10c01e43 	ldbu	r3,121(r2)
  805420:	e0bffc17 	ldw	r2,-16(fp)
  805424:	10c04b85 	stb	r3,302(r2)
  d->_g143 = d->_g146 && d->_cg147;
  805428:	e0bffc17 	ldw	r2,-16(fp)
  80542c:	10803a43 	ldbu	r2,233(r2)
  805430:	10803fcc 	andi	r2,r2,255
  805434:	1080201c 	xori	r2,r2,128
  805438:	10bfe004 	addi	r2,r2,-128
  80543c:	10000826 	beq	r2,zero,805460 <logic+0x4a50>
  805440:	e0bffc17 	ldw	r2,-16(fp)
  805444:	10804b83 	ldbu	r2,302(r2)
  805448:	10803fcc 	andi	r2,r2,255
  80544c:	1080201c 	xori	r2,r2,128
  805450:	10bfe004 	addi	r2,r2,-128
  805454:	10000226 	beq	r2,zero,805460 <logic+0x4a50>
  805458:	00800044 	movi	r2,1
  80545c:	00000106 	br	805464 <logic+0x4a54>
  805460:	0005883a 	mov	r2,zero
  805464:	1007883a 	mov	r3,r2
  805468:	e0bffc17 	ldw	r2,-16(fp)
  80546c:	10c03985 	stb	r3,230(r2)
  if (d->_g143) {
  805470:	e0bffc17 	ldw	r2,-16(fp)
  805474:	10803983 	ldbu	r2,230(r2)
  805478:	10803fcc 	andi	r2,r2,255
  80547c:	1080201c 	xori	r2,r2,128
  805480:	10bfe004 	addi	r2,r2,-128
  805484:	10000226 	beq	r2,zero,805490 <logic+0x4a80>
    d->_DDDpacemake2_local_LRI_state = 0;
  805488:	e0bffc17 	ldw	r2,-16(fp)
  80548c:	10001885 	stb	zero,98(r2)
  }
  d->_g134 = d->_g146 && !d->_cg147;
  805490:	e0bffc17 	ldw	r2,-16(fp)
  805494:	10803a43 	ldbu	r2,233(r2)
  805498:	10803fcc 	andi	r2,r2,255
  80549c:	1080201c 	xori	r2,r2,128
  8054a0:	10bfe004 	addi	r2,r2,-128
  8054a4:	10000826 	beq	r2,zero,8054c8 <logic+0x4ab8>
  8054a8:	e0bffc17 	ldw	r2,-16(fp)
  8054ac:	10804b83 	ldbu	r2,302(r2)
  8054b0:	10803fcc 	andi	r2,r2,255
  8054b4:	1080201c 	xori	r2,r2,128
  8054b8:	10bfe004 	addi	r2,r2,-128
  8054bc:	1000021e 	bne	r2,zero,8054c8 <logic+0x4ab8>
  8054c0:	00800044 	movi	r2,1
  8054c4:	00000106 	br	8054cc <logic+0x4abc>
  8054c8:	0005883a 	mov	r2,zero
  8054cc:	1007883a 	mov	r3,r2
  8054d0:	e0bffc17 	ldw	r2,-16(fp)
  8054d4:	10c037c5 	stb	r3,223(r2)
  if (d->_g134) {
  8054d8:	e0bffc17 	ldw	r2,-16(fp)
  8054dc:	108037c3 	ldbu	r2,223(r2)
  8054e0:	10803fcc 	andi	r2,r2,255
  8054e4:	1080201c 	xori	r2,r2,128
  8054e8:	10bfe004 	addi	r2,r2,-128
  8054ec:	10000226 	beq	r2,zero,8054f8 <logic+0x4ae8>
    d->_DDDpacemake2_local_LRI_state = 0;
  8054f0:	e0bffc17 	ldw	r2,-16(fp)
  8054f4:	10001885 	stb	zero,98(r2)
  }
  d->_g144 = d->_GO || d->_g143 || d->_g134 || d->_g104 && !d->_cg129;
  8054f8:	e0bffc17 	ldw	r2,-16(fp)
  8054fc:	10803ec3 	ldbu	r2,251(r2)
  805500:	10803fcc 	andi	r2,r2,255
  805504:	1080201c 	xori	r2,r2,128
  805508:	10bfe004 	addi	r2,r2,-128
  80550c:	1000181e 	bne	r2,zero,805570 <logic+0x4b60>
  805510:	e0bffc17 	ldw	r2,-16(fp)
  805514:	10803983 	ldbu	r2,230(r2)
  805518:	10803fcc 	andi	r2,r2,255
  80551c:	1080201c 	xori	r2,r2,128
  805520:	10bfe004 	addi	r2,r2,-128
  805524:	1000121e 	bne	r2,zero,805570 <logic+0x4b60>
  805528:	e0bffc17 	ldw	r2,-16(fp)
  80552c:	108037c3 	ldbu	r2,223(r2)
  805530:	10803fcc 	andi	r2,r2,255
  805534:	1080201c 	xori	r2,r2,128
  805538:	10bfe004 	addi	r2,r2,-128
  80553c:	10000c1e 	bne	r2,zero,805570 <logic+0x4b60>
  805540:	e0bffc17 	ldw	r2,-16(fp)
  805544:	10803283 	ldbu	r2,202(r2)
  805548:	10803fcc 	andi	r2,r2,255
  80554c:	1080201c 	xori	r2,r2,128
  805550:	10bfe004 	addi	r2,r2,-128
  805554:	10000826 	beq	r2,zero,805578 <logic+0x4b68>
  805558:	e0bffc17 	ldw	r2,-16(fp)
  80555c:	10804a03 	ldbu	r2,296(r2)
  805560:	10803fcc 	andi	r2,r2,255
  805564:	1080201c 	xori	r2,r2,128
  805568:	10bfe004 	addi	r2,r2,-128
  80556c:	1000021e 	bne	r2,zero,805578 <logic+0x4b68>
  805570:	00800044 	movi	r2,1
  805574:	00000106 	br	80557c <logic+0x4b6c>
  805578:	0005883a 	mov	r2,zero
  80557c:	1007883a 	mov	r3,r2
  805580:	e0bffc17 	ldw	r2,-16(fp)
  805584:	10c039c5 	stb	r3,231(r2)
  d->_g144_e2 = d->_GO || d->_g166 || d->_g153 && !d->_cg153;
  805588:	e0bffc17 	ldw	r2,-16(fp)
  80558c:	10803ec3 	ldbu	r2,251(r2)
  805590:	10803fcc 	andi	r2,r2,255
  805594:	1080201c 	xori	r2,r2,128
  805598:	10bfe004 	addi	r2,r2,-128
  80559c:	1000121e 	bne	r2,zero,8055e8 <logic+0x4bd8>
  8055a0:	e0bffc17 	ldw	r2,-16(fp)
  8055a4:	10803dc3 	ldbu	r2,247(r2)
  8055a8:	10803fcc 	andi	r2,r2,255
  8055ac:	1080201c 	xori	r2,r2,128
  8055b0:	10bfe004 	addi	r2,r2,-128
  8055b4:	10000c1e 	bne	r2,zero,8055e8 <logic+0x4bd8>
  8055b8:	e0bffc17 	ldw	r2,-16(fp)
  8055bc:	10803b43 	ldbu	r2,237(r2)
  8055c0:	10803fcc 	andi	r2,r2,255
  8055c4:	1080201c 	xori	r2,r2,128
  8055c8:	10bfe004 	addi	r2,r2,-128
  8055cc:	10000826 	beq	r2,zero,8055f0 <logic+0x4be0>
  8055d0:	e0bffc17 	ldw	r2,-16(fp)
  8055d4:	10804bc3 	ldbu	r2,303(r2)
  8055d8:	10803fcc 	andi	r2,r2,255
  8055dc:	1080201c 	xori	r2,r2,128
  8055e0:	10bfe004 	addi	r2,r2,-128
  8055e4:	1000021e 	bne	r2,zero,8055f0 <logic+0x4be0>
  8055e8:	00800044 	movi	r2,1
  8055ec:	00000106 	br	8055f4 <logic+0x4be4>
  8055f0:	0005883a 	mov	r2,zero
  8055f4:	1007883a 	mov	r3,r2
  8055f8:	e0bffc17 	ldw	r2,-16(fp)
  8055fc:	10c04f85 	stb	r3,318(r2)
  d->_DDDpacemake2_local__reg_VP_temp = d->_DDDpacemake2_local_VP_temp;
  805600:	e0bffc17 	ldw	r2,-16(fp)
  805604:	10c01a43 	ldbu	r3,105(r2)
  805608:	e0bffc17 	ldw	r2,-16(fp)
  80560c:	10c01b05 	stb	r3,108(r2)
  d->_DDDpacemake2_local__reg_AP_temp = d->_DDDpacemake2_local_AP_temp;
  805610:	e0bffc17 	ldw	r2,-16(fp)
  805614:	10c01a03 	ldbu	r3,104(r2)
  805618:	e0bffc17 	ldw	r2,-16(fp)
  80561c:	10c01b85 	stb	r3,110(r2)
  d->_g134_e1 = d->_GO || d->_g167;
  805620:	e0bffc17 	ldw	r2,-16(fp)
  805624:	10803ec3 	ldbu	r2,251(r2)
  805628:	10803fcc 	andi	r2,r2,255
  80562c:	1080201c 	xori	r2,r2,128
  805630:	10bfe004 	addi	r2,r2,-128
  805634:	1000061e 	bne	r2,zero,805650 <logic+0x4c40>
  805638:	e0bffc17 	ldw	r2,-16(fp)
  80563c:	10803e03 	ldbu	r2,248(r2)
  805640:	10803fcc 	andi	r2,r2,255
  805644:	1080201c 	xori	r2,r2,128
  805648:	10bfe004 	addi	r2,r2,-128
  80564c:	10000226 	beq	r2,zero,805658 <logic+0x4c48>
  805650:	00800044 	movi	r2,1
  805654:	00000106 	br	80565c <logic+0x4c4c>
  805658:	0005883a 	mov	r2,zero
  80565c:	1007883a 	mov	r3,r2
  805660:	e0bffc17 	ldw	r2,-16(fp)
  805664:	10c04f45 	stb	r3,317(r2)
  d->_g147 = d->_GO || d->_g5;
  805668:	e0bffc17 	ldw	r2,-16(fp)
  80566c:	10803ec3 	ldbu	r2,251(r2)
  805670:	10803fcc 	andi	r2,r2,255
  805674:	1080201c 	xori	r2,r2,128
  805678:	10bfe004 	addi	r2,r2,-128
  80567c:	1000061e 	bne	r2,zero,805698 <logic+0x4c88>
  805680:	e0bffc17 	ldw	r2,-16(fp)
  805684:	10801f43 	ldbu	r2,125(r2)
  805688:	10803fcc 	andi	r2,r2,255
  80568c:	1080201c 	xori	r2,r2,128
  805690:	10bfe004 	addi	r2,r2,-128
  805694:	10000226 	beq	r2,zero,8056a0 <logic+0x4c90>
  805698:	00800044 	movi	r2,1
  80569c:	00000106 	br	8056a4 <logic+0x4c94>
  8056a0:	0005883a 	mov	r2,zero
  8056a4:	1007883a 	mov	r3,r2
  8056a8:	e0bffc17 	ldw	r2,-16(fp)
  8056ac:	10c03a85 	stb	r3,234(r2)
  d->_g149 = d->_GO || d->_g68;
  8056b0:	e0bffc17 	ldw	r2,-16(fp)
  8056b4:	10803ec3 	ldbu	r2,251(r2)
  8056b8:	10803fcc 	andi	r2,r2,255
  8056bc:	1080201c 	xori	r2,r2,128
  8056c0:	10bfe004 	addi	r2,r2,-128
  8056c4:	1000061e 	bne	r2,zero,8056e0 <logic+0x4cd0>
  8056c8:	e0bffc17 	ldw	r2,-16(fp)
  8056cc:	10802c43 	ldbu	r2,177(r2)
  8056d0:	10803fcc 	andi	r2,r2,255
  8056d4:	1080201c 	xori	r2,r2,128
  8056d8:	10bfe004 	addi	r2,r2,-128
  8056dc:	10000226 	beq	r2,zero,8056e8 <logic+0x4cd8>
  8056e0:	00800044 	movi	r2,1
  8056e4:	00000106 	br	8056ec <logic+0x4cdc>
  8056e8:	0005883a 	mov	r2,zero
  8056ec:	1007883a 	mov	r3,r2
  8056f0:	e0bffc17 	ldw	r2,-16(fp)
  8056f4:	10c03b05 	stb	r3,236(r2)
  d->_g129 = d->_GO || d->_g92;
  8056f8:	e0bffc17 	ldw	r2,-16(fp)
  8056fc:	10803ec3 	ldbu	r2,251(r2)
  805700:	10803fcc 	andi	r2,r2,255
  805704:	1080201c 	xori	r2,r2,128
  805708:	10bfe004 	addi	r2,r2,-128
  80570c:	1000061e 	bne	r2,zero,805728 <logic+0x4d18>
  805710:	e0bffc17 	ldw	r2,-16(fp)
  805714:	10803043 	ldbu	r2,193(r2)
  805718:	10803fcc 	andi	r2,r2,255
  80571c:	1080201c 	xori	r2,r2,128
  805720:	10bfe004 	addi	r2,r2,-128
  805724:	10000226 	beq	r2,zero,805730 <logic+0x4d20>
  805728:	00800044 	movi	r2,1
  80572c:	00000106 	br	805734 <logic+0x4d24>
  805730:	0005883a 	mov	r2,zero
  805734:	1007883a 	mov	r3,r2
  805738:	e0bffc17 	ldw	r2,-16(fp)
  80573c:	10c036c5 	stb	r3,219(r2)
  d->_g148 = d->_GO || d->_g112;
  805740:	e0bffc17 	ldw	r2,-16(fp)
  805744:	10803ec3 	ldbu	r2,251(r2)
  805748:	10803fcc 	andi	r2,r2,255
  80574c:	1080201c 	xori	r2,r2,128
  805750:	10bfe004 	addi	r2,r2,-128
  805754:	1000061e 	bne	r2,zero,805770 <logic+0x4d60>
  805758:	e0bffc17 	ldw	r2,-16(fp)
  80575c:	10803403 	ldbu	r2,208(r2)
  805760:	10803fcc 	andi	r2,r2,255
  805764:	1080201c 	xori	r2,r2,128
  805768:	10bfe004 	addi	r2,r2,-128
  80576c:	10000226 	beq	r2,zero,805778 <logic+0x4d68>
  805770:	00800044 	movi	r2,1
  805774:	00000106 	br	80577c <logic+0x4d6c>
  805778:	0005883a 	mov	r2,zero
  80577c:	1007883a 	mov	r3,r2
  805780:	e0bffc17 	ldw	r2,-16(fp)
  805784:	10c03ac5 	stb	r3,235(r2)
  d->_g168 = d->_GO || d->_g212;
  805788:	e0bffc17 	ldw	r2,-16(fp)
  80578c:	10803ec3 	ldbu	r2,251(r2)
  805790:	10803fcc 	andi	r2,r2,255
  805794:	1080201c 	xori	r2,r2,128
  805798:	10bfe004 	addi	r2,r2,-128
  80579c:	1000061e 	bne	r2,zero,8057b8 <logic+0x4da8>
  8057a0:	e0bffc17 	ldw	r2,-16(fp)
  8057a4:	10803e83 	ldbu	r2,250(r2)
  8057a8:	10803fcc 	andi	r2,r2,255
  8057ac:	1080201c 	xori	r2,r2,128
  8057b0:	10bfe004 	addi	r2,r2,-128
  8057b4:	10000226 	beq	r2,zero,8057c0 <logic+0x4db0>
  8057b8:	00800044 	movi	r2,1
  8057bc:	00000106 	br	8057c4 <logic+0x4db4>
  8057c0:	0005883a 	mov	r2,zero
  8057c4:	1007883a 	mov	r3,r2
  8057c8:	e0bffc17 	ldw	r2,-16(fp)
  8057cc:	10c03e45 	stb	r3,249(r2)
}
  8057d0:	0001883a 	nop
  8057d4:	e6fffd04 	addi	sp,fp,-12
  8057d8:	dfc00417 	ldw	ra,16(sp)
  8057dc:	df000317 	ldw	fp,12(sp)
  8057e0:	dc800217 	ldw	r18,8(sp)
  8057e4:	dc400117 	ldw	r17,4(sp)
  8057e8:	dc000017 	ldw	r16,0(sp)
  8057ec:	dec00504 	addi	sp,sp,20
  8057f0:	f800283a 	ret

008057f4 <reset>:

void reset(TickData* d) {
  8057f4:	defffe04 	addi	sp,sp,-8
  8057f8:	df000115 	stw	fp,4(sp)
  8057fc:	df000104 	addi	fp,sp,4
  805800:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  805804:	e0bfff17 	ldw	r2,-4(fp)
  805808:	00c00044 	movi	r3,1
  80580c:	10c03ec5 	stb	r3,251(r2)
  d->_TERM = 0;
  805810:	e0bfff17 	ldw	r2,-4(fp)
  805814:	10005045 	stb	zero,321(r2)
  d->AVI_DEADLINE = AVI_VALUE;
  805818:	e0bfff17 	ldw	r2,-4(fp)
  80581c:	00c04b04 	movi	r3,300
  805820:	10c00015 	stw	r3,0(r2)
  d->URI_DEADLINE = URI_VALUE;
  805824:	e0bfff17 	ldw	r2,-4(fp)
  805828:	00c0e104 	movi	r3,900
  80582c:	10c00115 	stw	r3,4(r2)
  d->AEI_DEADLINE = AEI_VALUE;
  805830:	e0bfff17 	ldw	r2,-4(fp)
  805834:	00c0c804 	movi	r3,800
  805838:	10c00215 	stw	r3,8(r2)
  d->LRI_DEADLINE = LRI_VALUE;
  80583c:	e0bfff17 	ldw	r2,-4(fp)
  805840:	00c0ed84 	movi	r3,950
  805844:	10c00315 	stw	r3,12(r2)
  d->PVARP_DEADLINE = PVARP_VALUE;
  805848:	e0bfff17 	ldw	r2,-4(fp)
  80584c:	00c00c84 	movi	r3,50
  805850:	10c00415 	stw	r3,16(r2)
  d->VRP_DEADLINE = VRP_VALUE;
  805854:	e0bfff17 	ldw	r2,-4(fp)
  805858:	00c02584 	movi	r3,150
  80585c:	10c00515 	stw	r3,20(r2)
  d->AVI_counter = 0.0;
  805860:	e0bfff17 	ldw	r2,-4(fp)
  805864:	10000715 	stw	zero,28(r2)
  805868:	10000815 	stw	zero,32(r2)
  d->AEI_counter = 0.0;
  80586c:	e0bfff17 	ldw	r2,-4(fp)
  805870:	10000915 	stw	zero,36(r2)
  805874:	10000a15 	stw	zero,40(r2)
  d->PVARP_counter = 0.0;
  805878:	e0bfff17 	ldw	r2,-4(fp)
  80587c:	10000b15 	stw	zero,44(r2)
  805880:	10000c15 	stw	zero,48(r2)
  d->VRP_counter = 0.0;
  805884:	e0bfff17 	ldw	r2,-4(fp)
  805888:	10000d15 	stw	zero,52(r2)
  80588c:	10000e15 	stw	zero,56(r2)
  d->LRI_counter = 0.0;
  805890:	e0bfff17 	ldw	r2,-4(fp)
  805894:	10000f15 	stw	zero,60(r2)
  805898:	10001015 	stw	zero,64(r2)
  d->URI_counter = 0.0;
  80589c:	e0bfff17 	ldw	r2,-4(fp)
  8058a0:	10001115 	stw	zero,68(r2)
  8058a4:	10001215 	stw	zero,72(r2)
  d->deltaT = 0.0;
  8058a8:	e0bfff17 	ldw	r2,-4(fp)
  8058ac:	10001415 	stw	zero,80(r2)
  8058b0:	10001515 	stw	zero,84(r2)
  d->sleepT = 0.0;
  8058b4:	e0bfff17 	ldw	r2,-4(fp)
  8058b8:	10001615 	stw	zero,88(r2)
  8058bc:	10001715 	stw	zero,92(r2)
  d->_DDDpacemake2_local__reg_VP_temp = 0;
  8058c0:	e0bfff17 	ldw	r2,-4(fp)
  8058c4:	10001b05 	stb	zero,108(r2)
  d->_DDDpacemake2_local__reg_AP_temp = 0;
  8058c8:	e0bfff17 	ldw	r2,-4(fp)
  8058cc:	10001b85 	stb	zero,110(r2)
  d->_pg91_e2 = 0;
  8058d0:	e0bfff17 	ldw	r2,-4(fp)
  8058d4:	10005085 	stb	zero,322(r2)
  d->_pg11_e1 = 0;
  8058d8:	e0bfff17 	ldw	r2,-4(fp)
  8058dc:	100050c5 	stb	zero,323(r2)
  d->_pg120_e2 = 0;
  8058e0:	e0bfff17 	ldw	r2,-4(fp)
  8058e4:	10005105 	stb	zero,324(r2)
  d->_pg23 = 0;
  8058e8:	e0bfff17 	ldw	r2,-4(fp)
  8058ec:	10005145 	stb	zero,325(r2)
  d->_pg144_e2 = 0;
  8058f0:	e0bfff17 	ldw	r2,-4(fp)
  8058f4:	10005185 	stb	zero,326(r2)
  d->_pg168 = 0;
  8058f8:	e0bfff17 	ldw	r2,-4(fp)
  8058fc:	100051c5 	stb	zero,327(r2)
  d->_pg161 = 0;
  805900:	e0bfff17 	ldw	r2,-4(fp)
  805904:	10005205 	stb	zero,328(r2)
  d->_pg159 = 0;
  805908:	e0bfff17 	ldw	r2,-4(fp)
  80590c:	10005245 	stb	zero,329(r2)
  d->_pg162 = 0;
  805910:	e0bfff17 	ldw	r2,-4(fp)
  805914:	10005285 	stb	zero,330(r2)
  d->_pg134_e1 = 0;
  805918:	e0bfff17 	ldw	r2,-4(fp)
  80591c:	100052c5 	stb	zero,331(r2)
  d->_pg12 = 0;
  805920:	e0bfff17 	ldw	r2,-4(fp)
  805924:	10005305 	stb	zero,332(r2)
  d->_pg15 = 0;
  805928:	e0bfff17 	ldw	r2,-4(fp)
  80592c:	10005345 	stb	zero,333(r2)
  d->_pg21 = 0;
  805930:	e0bfff17 	ldw	r2,-4(fp)
  805934:	10005385 	stb	zero,334(r2)
  d->_pg24 = 0;
  805938:	e0bfff17 	ldw	r2,-4(fp)
  80593c:	100053c5 	stb	zero,335(r2)
  d->_pg39 = 0;
  805940:	e0bfff17 	ldw	r2,-4(fp)
  805944:	10005405 	stb	zero,336(r2)
  d->_pg54_e1 = 0;
  805948:	e0bfff17 	ldw	r2,-4(fp)
  80594c:	10005445 	stb	zero,337(r2)
  d->_pg53 = 0;
  805950:	e0bfff17 	ldw	r2,-4(fp)
  805954:	10005485 	stb	zero,338(r2)
  d->_pg147 = 0;
  805958:	e0bfff17 	ldw	r2,-4(fp)
  80595c:	100054c5 	stb	zero,339(r2)
  d->_pg55 = 0;
  805960:	e0bfff17 	ldw	r2,-4(fp)
  805964:	10005505 	stb	zero,340(r2)
  d->_pg58 = 0;
  805968:	e0bfff17 	ldw	r2,-4(fp)
  80596c:	10005545 	stb	zero,341(r2)
  d->_pg94 = 0;
  805970:	e0bfff17 	ldw	r2,-4(fp)
  805974:	10005585 	stb	zero,342(r2)
  d->_pg98 = 0;
  805978:	e0bfff17 	ldw	r2,-4(fp)
  80597c:	100055c5 	stb	zero,343(r2)
  d->_pg95 = 0;
  805980:	e0bfff17 	ldw	r2,-4(fp)
  805984:	10005605 	stb	zero,344(r2)
  d->_pg149 = 0;
  805988:	e0bfff17 	ldw	r2,-4(fp)
  80598c:	10005645 	stb	zero,345(r2)
  d->_pg124 = 0;
  805990:	e0bfff17 	ldw	r2,-4(fp)
  805994:	10005685 	stb	zero,346(r2)
  d->_pg125 = 0;
  805998:	e0bfff17 	ldw	r2,-4(fp)
  80599c:	100056c5 	stb	zero,347(r2)
  d->_pg103 = 0;
  8059a0:	e0bfff17 	ldw	r2,-4(fp)
  8059a4:	10005705 	stb	zero,348(r2)
  d->_pg129 = 0;
  8059a8:	e0bfff17 	ldw	r2,-4(fp)
  8059ac:	10005745 	stb	zero,349(r2)
  d->_pg137 = 0;
  8059b0:	e0bfff17 	ldw	r2,-4(fp)
  8059b4:	10005785 	stb	zero,350(r2)
  d->_pg148 = 0;
  8059b8:	e0bfff17 	ldw	r2,-4(fp)
  8059bc:	100057c5 	stb	zero,351(r2)
  d->_pg144 = 0;
  8059c0:	e0bfff17 	ldw	r2,-4(fp)
  8059c4:	10005805 	stb	zero,352(r2)
  d->_pg135 = 0;
  8059c8:	e0bfff17 	ldw	r2,-4(fp)
  8059cc:	10005845 	stb	zero,353(r2)
  d->_pg138 = 0;
  8059d0:	e0bfff17 	ldw	r2,-4(fp)
  8059d4:	10005885 	stb	zero,354(r2)
}
  8059d8:	0001883a 	nop
  8059dc:	e037883a 	mov	sp,fp
  8059e0:	df000017 	ldw	fp,0(sp)
  8059e4:	dec00104 	addi	sp,sp,4
  8059e8:	f800283a 	ret

008059ec <tick>:

void tick(TickData* d) {
  8059ec:	defffd04 	addi	sp,sp,-12
  8059f0:	dfc00215 	stw	ra,8(sp)
  8059f4:	df000115 	stw	fp,4(sp)
  8059f8:	df000104 	addi	fp,sp,4
  8059fc:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  805a00:	e13fff17 	ldw	r4,-4(fp)
  805a04:	0800a100 	call	800a10 <logic>

  d->_pg91_e2 = d->_g91_e2;
  805a08:	e0bfff17 	ldw	r2,-4(fp)
  805a0c:	10c04e83 	ldbu	r3,314(r2)
  805a10:	e0bfff17 	ldw	r2,-4(fp)
  805a14:	10c05085 	stb	r3,322(r2)
  d->_pg11_e1 = d->_g11_e1;
  805a18:	e0bfff17 	ldw	r2,-4(fp)
  805a1c:	10c04d03 	ldbu	r3,308(r2)
  805a20:	e0bfff17 	ldw	r2,-4(fp)
  805a24:	10c050c5 	stb	r3,323(r2)
  d->_pg120_e2 = d->_g120_e2;
  805a28:	e0bfff17 	ldw	r2,-4(fp)
  805a2c:	10c04f03 	ldbu	r3,316(r2)
  805a30:	e0bfff17 	ldw	r2,-4(fp)
  805a34:	10c05105 	stb	r3,324(r2)
  d->_pg23 = d->_g23;
  805a38:	e0bfff17 	ldw	r2,-4(fp)
  805a3c:	10c02343 	ldbu	r3,141(r2)
  805a40:	e0bfff17 	ldw	r2,-4(fp)
  805a44:	10c05145 	stb	r3,325(r2)
  d->_pg144_e2 = d->_g144_e2;
  805a48:	e0bfff17 	ldw	r2,-4(fp)
  805a4c:	10c04f83 	ldbu	r3,318(r2)
  805a50:	e0bfff17 	ldw	r2,-4(fp)
  805a54:	10c05185 	stb	r3,326(r2)
  d->_pg168 = d->_g168;
  805a58:	e0bfff17 	ldw	r2,-4(fp)
  805a5c:	10c03e43 	ldbu	r3,249(r2)
  805a60:	e0bfff17 	ldw	r2,-4(fp)
  805a64:	10c051c5 	stb	r3,327(r2)
  d->_pg161 = d->_g161;
  805a68:	e0bfff17 	ldw	r2,-4(fp)
  805a6c:	10c03d03 	ldbu	r3,244(r2)
  805a70:	e0bfff17 	ldw	r2,-4(fp)
  805a74:	10c05205 	stb	r3,328(r2)
  d->_pg159 = d->_g159;
  805a78:	e0bfff17 	ldw	r2,-4(fp)
  805a7c:	10c03c83 	ldbu	r3,242(r2)
  805a80:	e0bfff17 	ldw	r2,-4(fp)
  805a84:	10c05245 	stb	r3,329(r2)
  d->_pg162 = d->_g162;
  805a88:	e0bfff17 	ldw	r2,-4(fp)
  805a8c:	10c03d43 	ldbu	r3,245(r2)
  805a90:	e0bfff17 	ldw	r2,-4(fp)
  805a94:	10c05285 	stb	r3,330(r2)
  d->_pg134_e1 = d->_g134_e1;
  805a98:	e0bfff17 	ldw	r2,-4(fp)
  805a9c:	10c04f43 	ldbu	r3,317(r2)
  805aa0:	e0bfff17 	ldw	r2,-4(fp)
  805aa4:	10c052c5 	stb	r3,331(r2)
  d->_pg12 = d->_g12;
  805aa8:	e0bfff17 	ldw	r2,-4(fp)
  805aac:	10c020c3 	ldbu	r3,131(r2)
  805ab0:	e0bfff17 	ldw	r2,-4(fp)
  805ab4:	10c05305 	stb	r3,332(r2)
  d->_pg15 = d->_g15;
  805ab8:	e0bfff17 	ldw	r2,-4(fp)
  805abc:	10c02183 	ldbu	r3,134(r2)
  805ac0:	e0bfff17 	ldw	r2,-4(fp)
  805ac4:	10c05345 	stb	r3,333(r2)
  d->_pg21 = d->_g21;
  805ac8:	e0bfff17 	ldw	r2,-4(fp)
  805acc:	10c022c3 	ldbu	r3,139(r2)
  805ad0:	e0bfff17 	ldw	r2,-4(fp)
  805ad4:	10c05385 	stb	r3,334(r2)
  d->_pg24 = d->_g24;
  805ad8:	e0bfff17 	ldw	r2,-4(fp)
  805adc:	10c02383 	ldbu	r3,142(r2)
  805ae0:	e0bfff17 	ldw	r2,-4(fp)
  805ae4:	10c053c5 	stb	r3,335(r2)
  d->_pg39 = d->_g39;
  805ae8:	e0bfff17 	ldw	r2,-4(fp)
  805aec:	10c02683 	ldbu	r3,154(r2)
  805af0:	e0bfff17 	ldw	r2,-4(fp)
  805af4:	10c05405 	stb	r3,336(r2)
  d->_pg54_e1 = d->_g54_e1;
  805af8:	e0bfff17 	ldw	r2,-4(fp)
  805afc:	10c04dc3 	ldbu	r3,311(r2)
  805b00:	e0bfff17 	ldw	r2,-4(fp)
  805b04:	10c05445 	stb	r3,337(r2)
  d->_pg53 = d->_g53;
  805b08:	e0bfff17 	ldw	r2,-4(fp)
  805b0c:	10c02903 	ldbu	r3,164(r2)
  805b10:	e0bfff17 	ldw	r2,-4(fp)
  805b14:	10c05485 	stb	r3,338(r2)
  d->_pg147 = d->_g147;
  805b18:	e0bfff17 	ldw	r2,-4(fp)
  805b1c:	10c03a83 	ldbu	r3,234(r2)
  805b20:	e0bfff17 	ldw	r2,-4(fp)
  805b24:	10c054c5 	stb	r3,339(r2)
  d->_pg55 = d->_g55;
  805b28:	e0bfff17 	ldw	r2,-4(fp)
  805b2c:	10c02983 	ldbu	r3,166(r2)
  805b30:	e0bfff17 	ldw	r2,-4(fp)
  805b34:	10c05505 	stb	r3,340(r2)
  d->_pg58 = d->_g58;
  805b38:	e0bfff17 	ldw	r2,-4(fp)
  805b3c:	10c02a43 	ldbu	r3,169(r2)
  805b40:	e0bfff17 	ldw	r2,-4(fp)
  805b44:	10c05545 	stb	r3,341(r2)
  d->_pg94 = d->_g94;
  805b48:	e0bfff17 	ldw	r2,-4(fp)
  805b4c:	10c030c3 	ldbu	r3,195(r2)
  805b50:	e0bfff17 	ldw	r2,-4(fp)
  805b54:	10c05585 	stb	r3,342(r2)
  d->_pg98 = d->_g98;
  805b58:	e0bfff17 	ldw	r2,-4(fp)
  805b5c:	10c031c3 	ldbu	r3,199(r2)
  805b60:	e0bfff17 	ldw	r2,-4(fp)
  805b64:	10c055c5 	stb	r3,343(r2)
  d->_pg95 = d->_g95;
  805b68:	e0bfff17 	ldw	r2,-4(fp)
  805b6c:	10c03103 	ldbu	r3,196(r2)
  805b70:	e0bfff17 	ldw	r2,-4(fp)
  805b74:	10c05605 	stb	r3,344(r2)
  d->_pg149 = d->_g149;
  805b78:	e0bfff17 	ldw	r2,-4(fp)
  805b7c:	10c03b03 	ldbu	r3,236(r2)
  805b80:	e0bfff17 	ldw	r2,-4(fp)
  805b84:	10c05645 	stb	r3,345(r2)
  d->_pg124 = d->_g124;
  805b88:	e0bfff17 	ldw	r2,-4(fp)
  805b8c:	10c03643 	ldbu	r3,217(r2)
  805b90:	e0bfff17 	ldw	r2,-4(fp)
  805b94:	10c05685 	stb	r3,346(r2)
  d->_pg125 = d->_g125;
  805b98:	e0bfff17 	ldw	r2,-4(fp)
  805b9c:	10c03683 	ldbu	r3,218(r2)
  805ba0:	e0bfff17 	ldw	r2,-4(fp)
  805ba4:	10c056c5 	stb	r3,347(r2)
  d->_pg103 = d->_g103;
  805ba8:	e0bfff17 	ldw	r2,-4(fp)
  805bac:	10c03243 	ldbu	r3,201(r2)
  805bb0:	e0bfff17 	ldw	r2,-4(fp)
  805bb4:	10c05705 	stb	r3,348(r2)
  d->_pg129 = d->_g129;
  805bb8:	e0bfff17 	ldw	r2,-4(fp)
  805bbc:	10c036c3 	ldbu	r3,219(r2)
  805bc0:	e0bfff17 	ldw	r2,-4(fp)
  805bc4:	10c05745 	stb	r3,349(r2)
  d->_pg137 = d->_g137;
  805bc8:	e0bfff17 	ldw	r2,-4(fp)
  805bcc:	10c03883 	ldbu	r3,226(r2)
  805bd0:	e0bfff17 	ldw	r2,-4(fp)
  805bd4:	10c05785 	stb	r3,350(r2)
  d->_pg148 = d->_g148;
  805bd8:	e0bfff17 	ldw	r2,-4(fp)
  805bdc:	10c03ac3 	ldbu	r3,235(r2)
  805be0:	e0bfff17 	ldw	r2,-4(fp)
  805be4:	10c057c5 	stb	r3,351(r2)
  d->_pg144 = d->_g144;
  805be8:	e0bfff17 	ldw	r2,-4(fp)
  805bec:	10c039c3 	ldbu	r3,231(r2)
  805bf0:	e0bfff17 	ldw	r2,-4(fp)
  805bf4:	10c05805 	stb	r3,352(r2)
  d->_pg135 = d->_g135;
  805bf8:	e0bfff17 	ldw	r2,-4(fp)
  805bfc:	10c03803 	ldbu	r3,224(r2)
  805c00:	e0bfff17 	ldw	r2,-4(fp)
  805c04:	10c05845 	stb	r3,353(r2)
  d->_pg138 = d->_g138;
  805c08:	e0bfff17 	ldw	r2,-4(fp)
  805c0c:	10c038c3 	ldbu	r3,227(r2)
  805c10:	e0bfff17 	ldw	r2,-4(fp)
  805c14:	10c05885 	stb	r3,354(r2)
  d->_GO = 0;
  805c18:	e0bfff17 	ldw	r2,-4(fp)
  805c1c:	10003ec5 	stb	zero,251(r2)
}
  805c20:	0001883a 	nop
  805c24:	e037883a 	mov	sp,fp
  805c28:	dfc00117 	ldw	ra,4(sp)
  805c2c:	df000017 	ldw	fp,0(sp)
  805c30:	dec00204 	addi	sp,sp,8
  805c34:	f800283a 	ret

00805c38 <__floatundidf>:
  805c38:	defffc04 	addi	sp,sp,-16
  805c3c:	dc800215 	stw	r18,8(sp)
  805c40:	2025883a 	mov	r18,r4
  805c44:	2809883a 	mov	r4,r5
  805c48:	dfc00315 	stw	ra,12(sp)
  805c4c:	dc400115 	stw	r17,4(sp)
  805c50:	dc000015 	stw	r16,0(sp)
  805c54:	08078140 	call	807814 <__floatunsidf>
  805c58:	000d883a 	mov	r6,zero
  805c5c:	01d07c34 	movhi	r7,16880
  805c60:	180b883a 	mov	r5,r3
  805c64:	1009883a 	mov	r4,r2
  805c68:	08067240 	call	806724 <__muldf3>
  805c6c:	9009883a 	mov	r4,r18
  805c70:	1023883a 	mov	r17,r2
  805c74:	1821883a 	mov	r16,r3
  805c78:	08078140 	call	807814 <__floatunsidf>
  805c7c:	880d883a 	mov	r6,r17
  805c80:	800f883a 	mov	r7,r16
  805c84:	1009883a 	mov	r4,r2
  805c88:	180b883a 	mov	r5,r3
  805c8c:	0805ca80 	call	805ca8 <__adddf3>
  805c90:	dfc00317 	ldw	ra,12(sp)
  805c94:	dc800217 	ldw	r18,8(sp)
  805c98:	dc400117 	ldw	r17,4(sp)
  805c9c:	dc000017 	ldw	r16,0(sp)
  805ca0:	dec00404 	addi	sp,sp,16
  805ca4:	f800283a 	ret

00805ca8 <__adddf3>:
  805ca8:	02c00434 	movhi	r11,16
  805cac:	5affffc4 	addi	r11,r11,-1
  805cb0:	2806d7fa 	srli	r3,r5,31
  805cb4:	2ad4703a 	and	r10,r5,r11
  805cb8:	3ad2703a 	and	r9,r7,r11
  805cbc:	3804d53a 	srli	r2,r7,20
  805cc0:	3018d77a 	srli	r12,r6,29
  805cc4:	280ad53a 	srli	r5,r5,20
  805cc8:	501490fa 	slli	r10,r10,3
  805ccc:	2010d77a 	srli	r8,r4,29
  805cd0:	481290fa 	slli	r9,r9,3
  805cd4:	380ed7fa 	srli	r7,r7,31
  805cd8:	defffb04 	addi	sp,sp,-20
  805cdc:	dc800215 	stw	r18,8(sp)
  805ce0:	dc400115 	stw	r17,4(sp)
  805ce4:	dc000015 	stw	r16,0(sp)
  805ce8:	dfc00415 	stw	ra,16(sp)
  805cec:	dcc00315 	stw	r19,12(sp)
  805cf0:	1c803fcc 	andi	r18,r3,255
  805cf4:	2c01ffcc 	andi	r16,r5,2047
  805cf8:	5210b03a 	or	r8,r10,r8
  805cfc:	202290fa 	slli	r17,r4,3
  805d00:	1081ffcc 	andi	r2,r2,2047
  805d04:	4b12b03a 	or	r9,r9,r12
  805d08:	300c90fa 	slli	r6,r6,3
  805d0c:	91c07526 	beq	r18,r7,805ee4 <__adddf3+0x23c>
  805d10:	8087c83a 	sub	r3,r16,r2
  805d14:	00c0ab0e 	bge	zero,r3,805fc4 <__adddf3+0x31c>
  805d18:	10002a1e 	bne	r2,zero,805dc4 <__adddf3+0x11c>
  805d1c:	4984b03a 	or	r2,r9,r6
  805d20:	1000961e 	bne	r2,zero,805f7c <__adddf3+0x2d4>
  805d24:	888001cc 	andi	r2,r17,7
  805d28:	10000726 	beq	r2,zero,805d48 <__adddf3+0xa0>
  805d2c:	888003cc 	andi	r2,r17,15
  805d30:	00c00104 	movi	r3,4
  805d34:	10c00426 	beq	r2,r3,805d48 <__adddf3+0xa0>
  805d38:	88c7883a 	add	r3,r17,r3
  805d3c:	1c63803a 	cmpltu	r17,r3,r17
  805d40:	4451883a 	add	r8,r8,r17
  805d44:	1823883a 	mov	r17,r3
  805d48:	4080202c 	andhi	r2,r8,128
  805d4c:	10005926 	beq	r2,zero,805eb4 <__adddf3+0x20c>
  805d50:	84000044 	addi	r16,r16,1
  805d54:	0081ffc4 	movi	r2,2047
  805d58:	8080ba26 	beq	r16,r2,806044 <__adddf3+0x39c>
  805d5c:	00bfe034 	movhi	r2,65408
  805d60:	10bfffc4 	addi	r2,r2,-1
  805d64:	4090703a 	and	r8,r8,r2
  805d68:	4004977a 	slli	r2,r8,29
  805d6c:	4010927a 	slli	r8,r8,9
  805d70:	8822d0fa 	srli	r17,r17,3
  805d74:	8401ffcc 	andi	r16,r16,2047
  805d78:	4010d33a 	srli	r8,r8,12
  805d7c:	9007883a 	mov	r3,r18
  805d80:	1444b03a 	or	r2,r2,r17
  805d84:	8401ffcc 	andi	r16,r16,2047
  805d88:	8020953a 	slli	r16,r16,20
  805d8c:	18c03fcc 	andi	r3,r3,255
  805d90:	01000434 	movhi	r4,16
  805d94:	213fffc4 	addi	r4,r4,-1
  805d98:	180697fa 	slli	r3,r3,31
  805d9c:	4110703a 	and	r8,r8,r4
  805da0:	4410b03a 	or	r8,r8,r16
  805da4:	40c6b03a 	or	r3,r8,r3
  805da8:	dfc00417 	ldw	ra,16(sp)
  805dac:	dcc00317 	ldw	r19,12(sp)
  805db0:	dc800217 	ldw	r18,8(sp)
  805db4:	dc400117 	ldw	r17,4(sp)
  805db8:	dc000017 	ldw	r16,0(sp)
  805dbc:	dec00504 	addi	sp,sp,20
  805dc0:	f800283a 	ret
  805dc4:	0081ffc4 	movi	r2,2047
  805dc8:	80bfd626 	beq	r16,r2,805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  805dcc:	4a402034 	orhi	r9,r9,128
  805dd0:	00800e04 	movi	r2,56
  805dd4:	10c09f16 	blt	r2,r3,806054 <__adddf3+0x3ac>
  805dd8:	008007c4 	movi	r2,31
  805ddc:	10c0c216 	blt	r2,r3,8060e8 <__adddf3+0x440>
  805de0:	00800804 	movi	r2,32
  805de4:	10c5c83a 	sub	r2,r2,r3
  805de8:	488a983a 	sll	r5,r9,r2
  805dec:	30c8d83a 	srl	r4,r6,r3
  805df0:	3084983a 	sll	r2,r6,r2
  805df4:	48c6d83a 	srl	r3,r9,r3
  805df8:	290cb03a 	or	r6,r5,r4
  805dfc:	1004c03a 	cmpne	r2,r2,zero
  805e00:	308cb03a 	or	r6,r6,r2
  805e04:	898dc83a 	sub	r6,r17,r6
  805e08:	89a3803a 	cmpltu	r17,r17,r6
  805e0c:	40d1c83a 	sub	r8,r8,r3
  805e10:	4451c83a 	sub	r8,r8,r17
  805e14:	3023883a 	mov	r17,r6
  805e18:	4080202c 	andhi	r2,r8,128
  805e1c:	10002326 	beq	r2,zero,805eac <__adddf3+0x204>
  805e20:	04c02034 	movhi	r19,128
  805e24:	9cffffc4 	addi	r19,r19,-1
  805e28:	44e6703a 	and	r19,r8,r19
  805e2c:	98007626 	beq	r19,zero,806008 <__adddf3+0x360>
  805e30:	9809883a 	mov	r4,r19
  805e34:	08078bc0 	call	8078bc <__clzsi2>
  805e38:	10fffe04 	addi	r3,r2,-8
  805e3c:	010007c4 	movi	r4,31
  805e40:	20c07716 	blt	r4,r3,806020 <__adddf3+0x378>
  805e44:	00800804 	movi	r2,32
  805e48:	10c5c83a 	sub	r2,r2,r3
  805e4c:	8884d83a 	srl	r2,r17,r2
  805e50:	98d0983a 	sll	r8,r19,r3
  805e54:	88e2983a 	sll	r17,r17,r3
  805e58:	1204b03a 	or	r2,r2,r8
  805e5c:	1c007416 	blt	r3,r16,806030 <__adddf3+0x388>
  805e60:	1c21c83a 	sub	r16,r3,r16
  805e64:	82000044 	addi	r8,r16,1
  805e68:	00c007c4 	movi	r3,31
  805e6c:	1a009116 	blt	r3,r8,8060b4 <__adddf3+0x40c>
  805e70:	00c00804 	movi	r3,32
  805e74:	1a07c83a 	sub	r3,r3,r8
  805e78:	8a08d83a 	srl	r4,r17,r8
  805e7c:	88e2983a 	sll	r17,r17,r3
  805e80:	10c6983a 	sll	r3,r2,r3
  805e84:	1210d83a 	srl	r8,r2,r8
  805e88:	8804c03a 	cmpne	r2,r17,zero
  805e8c:	1906b03a 	or	r3,r3,r4
  805e90:	18a2b03a 	or	r17,r3,r2
  805e94:	0021883a 	mov	r16,zero
  805e98:	003fa206 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  805e9c:	1890b03a 	or	r8,r3,r2
  805ea0:	40017d26 	beq	r8,zero,806498 <__adddf3+0x7f0>
  805ea4:	1011883a 	mov	r8,r2
  805ea8:	1823883a 	mov	r17,r3
  805eac:	888001cc 	andi	r2,r17,7
  805eb0:	103f9e1e 	bne	r2,zero,805d2c <__alt_mem_onchip_mem+0xff7fdd2c>
  805eb4:	4004977a 	slli	r2,r8,29
  805eb8:	8822d0fa 	srli	r17,r17,3
  805ebc:	4010d0fa 	srli	r8,r8,3
  805ec0:	9007883a 	mov	r3,r18
  805ec4:	1444b03a 	or	r2,r2,r17
  805ec8:	0101ffc4 	movi	r4,2047
  805ecc:	81002426 	beq	r16,r4,805f60 <__adddf3+0x2b8>
  805ed0:	8120703a 	and	r16,r16,r4
  805ed4:	01000434 	movhi	r4,16
  805ed8:	213fffc4 	addi	r4,r4,-1
  805edc:	4110703a 	and	r8,r8,r4
  805ee0:	003fa806 	br	805d84 <__alt_mem_onchip_mem+0xff7fdd84>
  805ee4:	8089c83a 	sub	r4,r16,r2
  805ee8:	01005e0e 	bge	zero,r4,806064 <__adddf3+0x3bc>
  805eec:	10002b26 	beq	r2,zero,805f9c <__adddf3+0x2f4>
  805ef0:	0081ffc4 	movi	r2,2047
  805ef4:	80bf8b26 	beq	r16,r2,805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  805ef8:	4a402034 	orhi	r9,r9,128
  805efc:	00800e04 	movi	r2,56
  805f00:	1100a40e 	bge	r2,r4,806194 <__adddf3+0x4ec>
  805f04:	498cb03a 	or	r6,r9,r6
  805f08:	300ac03a 	cmpne	r5,r6,zero
  805f0c:	0013883a 	mov	r9,zero
  805f10:	2c4b883a 	add	r5,r5,r17
  805f14:	2c63803a 	cmpltu	r17,r5,r17
  805f18:	4a11883a 	add	r8,r9,r8
  805f1c:	8a11883a 	add	r8,r17,r8
  805f20:	2823883a 	mov	r17,r5
  805f24:	4080202c 	andhi	r2,r8,128
  805f28:	103fe026 	beq	r2,zero,805eac <__alt_mem_onchip_mem+0xff7fdeac>
  805f2c:	84000044 	addi	r16,r16,1
  805f30:	0081ffc4 	movi	r2,2047
  805f34:	8080d226 	beq	r16,r2,806280 <__adddf3+0x5d8>
  805f38:	00bfe034 	movhi	r2,65408
  805f3c:	10bfffc4 	addi	r2,r2,-1
  805f40:	4090703a 	and	r8,r8,r2
  805f44:	880ad07a 	srli	r5,r17,1
  805f48:	400897fa 	slli	r4,r8,31
  805f4c:	88c0004c 	andi	r3,r17,1
  805f50:	28e2b03a 	or	r17,r5,r3
  805f54:	4010d07a 	srli	r8,r8,1
  805f58:	2462b03a 	or	r17,r4,r17
  805f5c:	003f7106 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  805f60:	4088b03a 	or	r4,r8,r2
  805f64:	20014526 	beq	r4,zero,80647c <__adddf3+0x7d4>
  805f68:	01000434 	movhi	r4,16
  805f6c:	42000234 	orhi	r8,r8,8
  805f70:	213fffc4 	addi	r4,r4,-1
  805f74:	4110703a 	and	r8,r8,r4
  805f78:	003f8206 	br	805d84 <__alt_mem_onchip_mem+0xff7fdd84>
  805f7c:	18ffffc4 	addi	r3,r3,-1
  805f80:	1800491e 	bne	r3,zero,8060a8 <__adddf3+0x400>
  805f84:	898bc83a 	sub	r5,r17,r6
  805f88:	8963803a 	cmpltu	r17,r17,r5
  805f8c:	4251c83a 	sub	r8,r8,r9
  805f90:	4451c83a 	sub	r8,r8,r17
  805f94:	2823883a 	mov	r17,r5
  805f98:	003f9f06 	br	805e18 <__alt_mem_onchip_mem+0xff7fde18>
  805f9c:	4984b03a 	or	r2,r9,r6
  805fa0:	103f6026 	beq	r2,zero,805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  805fa4:	213fffc4 	addi	r4,r4,-1
  805fa8:	2000931e 	bne	r4,zero,8061f8 <__adddf3+0x550>
  805fac:	898d883a 	add	r6,r17,r6
  805fb0:	3463803a 	cmpltu	r17,r6,r17
  805fb4:	4251883a 	add	r8,r8,r9
  805fb8:	8a11883a 	add	r8,r17,r8
  805fbc:	3023883a 	mov	r17,r6
  805fc0:	003fd806 	br	805f24 <__alt_mem_onchip_mem+0xff7fdf24>
  805fc4:	1800541e 	bne	r3,zero,806118 <__adddf3+0x470>
  805fc8:	80800044 	addi	r2,r16,1
  805fcc:	1081ffcc 	andi	r2,r2,2047
  805fd0:	00c00044 	movi	r3,1
  805fd4:	1880a00e 	bge	r3,r2,806258 <__adddf3+0x5b0>
  805fd8:	8989c83a 	sub	r4,r17,r6
  805fdc:	8905803a 	cmpltu	r2,r17,r4
  805fe0:	4267c83a 	sub	r19,r8,r9
  805fe4:	98a7c83a 	sub	r19,r19,r2
  805fe8:	9880202c 	andhi	r2,r19,128
  805fec:	10006326 	beq	r2,zero,80617c <__adddf3+0x4d4>
  805ff0:	3463c83a 	sub	r17,r6,r17
  805ff4:	4a07c83a 	sub	r3,r9,r8
  805ff8:	344d803a 	cmpltu	r6,r6,r17
  805ffc:	19a7c83a 	sub	r19,r3,r6
  806000:	3825883a 	mov	r18,r7
  806004:	983f8a1e 	bne	r19,zero,805e30 <__alt_mem_onchip_mem+0xff7fde30>
  806008:	8809883a 	mov	r4,r17
  80600c:	08078bc0 	call	8078bc <__clzsi2>
  806010:	10800804 	addi	r2,r2,32
  806014:	10fffe04 	addi	r3,r2,-8
  806018:	010007c4 	movi	r4,31
  80601c:	20ff890e 	bge	r4,r3,805e44 <__alt_mem_onchip_mem+0xff7fde44>
  806020:	10bff604 	addi	r2,r2,-40
  806024:	8884983a 	sll	r2,r17,r2
  806028:	0023883a 	mov	r17,zero
  80602c:	1c3f8c0e 	bge	r3,r16,805e60 <__alt_mem_onchip_mem+0xff7fde60>
  806030:	023fe034 	movhi	r8,65408
  806034:	423fffc4 	addi	r8,r8,-1
  806038:	80e1c83a 	sub	r16,r16,r3
  80603c:	1210703a 	and	r8,r2,r8
  806040:	003f3806 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  806044:	9007883a 	mov	r3,r18
  806048:	0011883a 	mov	r8,zero
  80604c:	0005883a 	mov	r2,zero
  806050:	003f4c06 	br	805d84 <__alt_mem_onchip_mem+0xff7fdd84>
  806054:	498cb03a 	or	r6,r9,r6
  806058:	300cc03a 	cmpne	r6,r6,zero
  80605c:	0007883a 	mov	r3,zero
  806060:	003f6806 	br	805e04 <__alt_mem_onchip_mem+0xff7fde04>
  806064:	20009c1e 	bne	r4,zero,8062d8 <__adddf3+0x630>
  806068:	80800044 	addi	r2,r16,1
  80606c:	1141ffcc 	andi	r5,r2,2047
  806070:	01000044 	movi	r4,1
  806074:	2140670e 	bge	r4,r5,806214 <__adddf3+0x56c>
  806078:	0101ffc4 	movi	r4,2047
  80607c:	11007f26 	beq	r2,r4,80627c <__adddf3+0x5d4>
  806080:	898d883a 	add	r6,r17,r6
  806084:	4247883a 	add	r3,r8,r9
  806088:	3451803a 	cmpltu	r8,r6,r17
  80608c:	40d1883a 	add	r8,r8,r3
  806090:	402297fa 	slli	r17,r8,31
  806094:	300cd07a 	srli	r6,r6,1
  806098:	4010d07a 	srli	r8,r8,1
  80609c:	1021883a 	mov	r16,r2
  8060a0:	89a2b03a 	or	r17,r17,r6
  8060a4:	003f1f06 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  8060a8:	0081ffc4 	movi	r2,2047
  8060ac:	80bf481e 	bne	r16,r2,805dd0 <__alt_mem_onchip_mem+0xff7fddd0>
  8060b0:	003f1c06 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  8060b4:	843ff844 	addi	r16,r16,-31
  8060b8:	01000804 	movi	r4,32
  8060bc:	1406d83a 	srl	r3,r2,r16
  8060c0:	41005026 	beq	r8,r4,806204 <__adddf3+0x55c>
  8060c4:	01001004 	movi	r4,64
  8060c8:	2211c83a 	sub	r8,r4,r8
  8060cc:	1204983a 	sll	r2,r2,r8
  8060d0:	88a2b03a 	or	r17,r17,r2
  8060d4:	8822c03a 	cmpne	r17,r17,zero
  8060d8:	1c62b03a 	or	r17,r3,r17
  8060dc:	0011883a 	mov	r8,zero
  8060e0:	0021883a 	mov	r16,zero
  8060e4:	003f7106 	br	805eac <__alt_mem_onchip_mem+0xff7fdeac>
  8060e8:	193ff804 	addi	r4,r3,-32
  8060ec:	00800804 	movi	r2,32
  8060f0:	4908d83a 	srl	r4,r9,r4
  8060f4:	18804526 	beq	r3,r2,80620c <__adddf3+0x564>
  8060f8:	00801004 	movi	r2,64
  8060fc:	10c5c83a 	sub	r2,r2,r3
  806100:	4886983a 	sll	r3,r9,r2
  806104:	198cb03a 	or	r6,r3,r6
  806108:	300cc03a 	cmpne	r6,r6,zero
  80610c:	218cb03a 	or	r6,r4,r6
  806110:	0007883a 	mov	r3,zero
  806114:	003f3b06 	br	805e04 <__alt_mem_onchip_mem+0xff7fde04>
  806118:	80002a26 	beq	r16,zero,8061c4 <__adddf3+0x51c>
  80611c:	0101ffc4 	movi	r4,2047
  806120:	11006826 	beq	r2,r4,8062c4 <__adddf3+0x61c>
  806124:	00c7c83a 	sub	r3,zero,r3
  806128:	42002034 	orhi	r8,r8,128
  80612c:	01000e04 	movi	r4,56
  806130:	20c07c16 	blt	r4,r3,806324 <__adddf3+0x67c>
  806134:	010007c4 	movi	r4,31
  806138:	20c0da16 	blt	r4,r3,8064a4 <__adddf3+0x7fc>
  80613c:	01000804 	movi	r4,32
  806140:	20c9c83a 	sub	r4,r4,r3
  806144:	4114983a 	sll	r10,r8,r4
  806148:	88cad83a 	srl	r5,r17,r3
  80614c:	8908983a 	sll	r4,r17,r4
  806150:	40c6d83a 	srl	r3,r8,r3
  806154:	5162b03a 	or	r17,r10,r5
  806158:	2008c03a 	cmpne	r4,r4,zero
  80615c:	8922b03a 	or	r17,r17,r4
  806160:	3463c83a 	sub	r17,r6,r17
  806164:	48c7c83a 	sub	r3,r9,r3
  806168:	344d803a 	cmpltu	r6,r6,r17
  80616c:	1991c83a 	sub	r8,r3,r6
  806170:	1021883a 	mov	r16,r2
  806174:	3825883a 	mov	r18,r7
  806178:	003f2706 	br	805e18 <__alt_mem_onchip_mem+0xff7fde18>
  80617c:	24d0b03a 	or	r8,r4,r19
  806180:	40001b1e 	bne	r8,zero,8061f0 <__adddf3+0x548>
  806184:	0005883a 	mov	r2,zero
  806188:	0007883a 	mov	r3,zero
  80618c:	0021883a 	mov	r16,zero
  806190:	003f4d06 	br	805ec8 <__alt_mem_onchip_mem+0xff7fdec8>
  806194:	008007c4 	movi	r2,31
  806198:	11003c16 	blt	r2,r4,80628c <__adddf3+0x5e4>
  80619c:	00800804 	movi	r2,32
  8061a0:	1105c83a 	sub	r2,r2,r4
  8061a4:	488e983a 	sll	r7,r9,r2
  8061a8:	310ad83a 	srl	r5,r6,r4
  8061ac:	3084983a 	sll	r2,r6,r2
  8061b0:	4912d83a 	srl	r9,r9,r4
  8061b4:	394ab03a 	or	r5,r7,r5
  8061b8:	1004c03a 	cmpne	r2,r2,zero
  8061bc:	288ab03a 	or	r5,r5,r2
  8061c0:	003f5306 	br	805f10 <__alt_mem_onchip_mem+0xff7fdf10>
  8061c4:	4448b03a 	or	r4,r8,r17
  8061c8:	20003e26 	beq	r4,zero,8062c4 <__adddf3+0x61c>
  8061cc:	00c6303a 	nor	r3,zero,r3
  8061d0:	18003a1e 	bne	r3,zero,8062bc <__adddf3+0x614>
  8061d4:	3463c83a 	sub	r17,r6,r17
  8061d8:	4a07c83a 	sub	r3,r9,r8
  8061dc:	344d803a 	cmpltu	r6,r6,r17
  8061e0:	1991c83a 	sub	r8,r3,r6
  8061e4:	1021883a 	mov	r16,r2
  8061e8:	3825883a 	mov	r18,r7
  8061ec:	003f0a06 	br	805e18 <__alt_mem_onchip_mem+0xff7fde18>
  8061f0:	2023883a 	mov	r17,r4
  8061f4:	003f0d06 	br	805e2c <__alt_mem_onchip_mem+0xff7fde2c>
  8061f8:	0081ffc4 	movi	r2,2047
  8061fc:	80bf3f1e 	bne	r16,r2,805efc <__alt_mem_onchip_mem+0xff7fdefc>
  806200:	003ec806 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  806204:	0005883a 	mov	r2,zero
  806208:	003fb106 	br	8060d0 <__alt_mem_onchip_mem+0xff7fe0d0>
  80620c:	0007883a 	mov	r3,zero
  806210:	003fbc06 	br	806104 <__alt_mem_onchip_mem+0xff7fe104>
  806214:	4444b03a 	or	r2,r8,r17
  806218:	8000871e 	bne	r16,zero,806438 <__adddf3+0x790>
  80621c:	1000ba26 	beq	r2,zero,806508 <__adddf3+0x860>
  806220:	4984b03a 	or	r2,r9,r6
  806224:	103ebf26 	beq	r2,zero,805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  806228:	8985883a 	add	r2,r17,r6
  80622c:	4247883a 	add	r3,r8,r9
  806230:	1451803a 	cmpltu	r8,r2,r17
  806234:	40d1883a 	add	r8,r8,r3
  806238:	40c0202c 	andhi	r3,r8,128
  80623c:	1023883a 	mov	r17,r2
  806240:	183f1a26 	beq	r3,zero,805eac <__alt_mem_onchip_mem+0xff7fdeac>
  806244:	00bfe034 	movhi	r2,65408
  806248:	10bfffc4 	addi	r2,r2,-1
  80624c:	2021883a 	mov	r16,r4
  806250:	4090703a 	and	r8,r8,r2
  806254:	003eb306 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  806258:	4444b03a 	or	r2,r8,r17
  80625c:	8000291e 	bne	r16,zero,806304 <__adddf3+0x65c>
  806260:	10004b1e 	bne	r2,zero,806390 <__adddf3+0x6e8>
  806264:	4990b03a 	or	r8,r9,r6
  806268:	40008b26 	beq	r8,zero,806498 <__adddf3+0x7f0>
  80626c:	4811883a 	mov	r8,r9
  806270:	3023883a 	mov	r17,r6
  806274:	3825883a 	mov	r18,r7
  806278:	003eaa06 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  80627c:	1021883a 	mov	r16,r2
  806280:	0011883a 	mov	r8,zero
  806284:	0005883a 	mov	r2,zero
  806288:	003f0f06 	br	805ec8 <__alt_mem_onchip_mem+0xff7fdec8>
  80628c:	217ff804 	addi	r5,r4,-32
  806290:	00800804 	movi	r2,32
  806294:	494ad83a 	srl	r5,r9,r5
  806298:	20807d26 	beq	r4,r2,806490 <__adddf3+0x7e8>
  80629c:	00801004 	movi	r2,64
  8062a0:	1109c83a 	sub	r4,r2,r4
  8062a4:	4912983a 	sll	r9,r9,r4
  8062a8:	498cb03a 	or	r6,r9,r6
  8062ac:	300cc03a 	cmpne	r6,r6,zero
  8062b0:	298ab03a 	or	r5,r5,r6
  8062b4:	0013883a 	mov	r9,zero
  8062b8:	003f1506 	br	805f10 <__alt_mem_onchip_mem+0xff7fdf10>
  8062bc:	0101ffc4 	movi	r4,2047
  8062c0:	113f9a1e 	bne	r2,r4,80612c <__alt_mem_onchip_mem+0xff7fe12c>
  8062c4:	4811883a 	mov	r8,r9
  8062c8:	3023883a 	mov	r17,r6
  8062cc:	1021883a 	mov	r16,r2
  8062d0:	3825883a 	mov	r18,r7
  8062d4:	003e9306 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  8062d8:	8000161e 	bne	r16,zero,806334 <__adddf3+0x68c>
  8062dc:	444ab03a 	or	r5,r8,r17
  8062e0:	28005126 	beq	r5,zero,806428 <__adddf3+0x780>
  8062e4:	0108303a 	nor	r4,zero,r4
  8062e8:	20004d1e 	bne	r4,zero,806420 <__adddf3+0x778>
  8062ec:	89a3883a 	add	r17,r17,r6
  8062f0:	4253883a 	add	r9,r8,r9
  8062f4:	898d803a 	cmpltu	r6,r17,r6
  8062f8:	3251883a 	add	r8,r6,r9
  8062fc:	1021883a 	mov	r16,r2
  806300:	003f0806 	br	805f24 <__alt_mem_onchip_mem+0xff7fdf24>
  806304:	1000301e 	bne	r2,zero,8063c8 <__adddf3+0x720>
  806308:	4984b03a 	or	r2,r9,r6
  80630c:	10007126 	beq	r2,zero,8064d4 <__adddf3+0x82c>
  806310:	4811883a 	mov	r8,r9
  806314:	3023883a 	mov	r17,r6
  806318:	3825883a 	mov	r18,r7
  80631c:	0401ffc4 	movi	r16,2047
  806320:	003e8006 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  806324:	4462b03a 	or	r17,r8,r17
  806328:	8822c03a 	cmpne	r17,r17,zero
  80632c:	0007883a 	mov	r3,zero
  806330:	003f8b06 	br	806160 <__alt_mem_onchip_mem+0xff7fe160>
  806334:	0141ffc4 	movi	r5,2047
  806338:	11403b26 	beq	r2,r5,806428 <__adddf3+0x780>
  80633c:	0109c83a 	sub	r4,zero,r4
  806340:	42002034 	orhi	r8,r8,128
  806344:	01400e04 	movi	r5,56
  806348:	29006716 	blt	r5,r4,8064e8 <__adddf3+0x840>
  80634c:	014007c4 	movi	r5,31
  806350:	29007016 	blt	r5,r4,806514 <__adddf3+0x86c>
  806354:	01400804 	movi	r5,32
  806358:	290bc83a 	sub	r5,r5,r4
  80635c:	4154983a 	sll	r10,r8,r5
  806360:	890ed83a 	srl	r7,r17,r4
  806364:	894a983a 	sll	r5,r17,r5
  806368:	4108d83a 	srl	r4,r8,r4
  80636c:	51e2b03a 	or	r17,r10,r7
  806370:	280ac03a 	cmpne	r5,r5,zero
  806374:	8962b03a 	or	r17,r17,r5
  806378:	89a3883a 	add	r17,r17,r6
  80637c:	2253883a 	add	r9,r4,r9
  806380:	898d803a 	cmpltu	r6,r17,r6
  806384:	3251883a 	add	r8,r6,r9
  806388:	1021883a 	mov	r16,r2
  80638c:	003ee506 	br	805f24 <__alt_mem_onchip_mem+0xff7fdf24>
  806390:	4984b03a 	or	r2,r9,r6
  806394:	103e6326 	beq	r2,zero,805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  806398:	8987c83a 	sub	r3,r17,r6
  80639c:	88c9803a 	cmpltu	r4,r17,r3
  8063a0:	4245c83a 	sub	r2,r8,r9
  8063a4:	1105c83a 	sub	r2,r2,r4
  8063a8:	1100202c 	andhi	r4,r2,128
  8063ac:	203ebb26 	beq	r4,zero,805e9c <__alt_mem_onchip_mem+0xff7fde9c>
  8063b0:	3463c83a 	sub	r17,r6,r17
  8063b4:	4a07c83a 	sub	r3,r9,r8
  8063b8:	344d803a 	cmpltu	r6,r6,r17
  8063bc:	1991c83a 	sub	r8,r3,r6
  8063c0:	3825883a 	mov	r18,r7
  8063c4:	003e5706 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  8063c8:	4984b03a 	or	r2,r9,r6
  8063cc:	10002e26 	beq	r2,zero,806488 <__adddf3+0x7e0>
  8063d0:	4004d0fa 	srli	r2,r8,3
  8063d4:	8822d0fa 	srli	r17,r17,3
  8063d8:	4010977a 	slli	r8,r8,29
  8063dc:	10c0022c 	andhi	r3,r2,8
  8063e0:	4462b03a 	or	r17,r8,r17
  8063e4:	18000826 	beq	r3,zero,806408 <__adddf3+0x760>
  8063e8:	4808d0fa 	srli	r4,r9,3
  8063ec:	20c0022c 	andhi	r3,r4,8
  8063f0:	1800051e 	bne	r3,zero,806408 <__adddf3+0x760>
  8063f4:	300cd0fa 	srli	r6,r6,3
  8063f8:	4806977a 	slli	r3,r9,29
  8063fc:	2005883a 	mov	r2,r4
  806400:	3825883a 	mov	r18,r7
  806404:	19a2b03a 	or	r17,r3,r6
  806408:	8810d77a 	srli	r8,r17,29
  80640c:	100490fa 	slli	r2,r2,3
  806410:	882290fa 	slli	r17,r17,3
  806414:	0401ffc4 	movi	r16,2047
  806418:	4090b03a 	or	r8,r8,r2
  80641c:	003e4106 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  806420:	0141ffc4 	movi	r5,2047
  806424:	117fc71e 	bne	r2,r5,806344 <__alt_mem_onchip_mem+0xff7fe344>
  806428:	4811883a 	mov	r8,r9
  80642c:	3023883a 	mov	r17,r6
  806430:	1021883a 	mov	r16,r2
  806434:	003e3b06 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  806438:	10002f26 	beq	r2,zero,8064f8 <__adddf3+0x850>
  80643c:	4984b03a 	or	r2,r9,r6
  806440:	10001126 	beq	r2,zero,806488 <__adddf3+0x7e0>
  806444:	4004d0fa 	srli	r2,r8,3
  806448:	8822d0fa 	srli	r17,r17,3
  80644c:	4010977a 	slli	r8,r8,29
  806450:	10c0022c 	andhi	r3,r2,8
  806454:	4462b03a 	or	r17,r8,r17
  806458:	183feb26 	beq	r3,zero,806408 <__alt_mem_onchip_mem+0xff7fe408>
  80645c:	4808d0fa 	srli	r4,r9,3
  806460:	20c0022c 	andhi	r3,r4,8
  806464:	183fe81e 	bne	r3,zero,806408 <__alt_mem_onchip_mem+0xff7fe408>
  806468:	300cd0fa 	srli	r6,r6,3
  80646c:	4806977a 	slli	r3,r9,29
  806470:	2005883a 	mov	r2,r4
  806474:	19a2b03a 	or	r17,r3,r6
  806478:	003fe306 	br	806408 <__alt_mem_onchip_mem+0xff7fe408>
  80647c:	0011883a 	mov	r8,zero
  806480:	0005883a 	mov	r2,zero
  806484:	003e3f06 	br	805d84 <__alt_mem_onchip_mem+0xff7fdd84>
  806488:	0401ffc4 	movi	r16,2047
  80648c:	003e2506 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  806490:	0013883a 	mov	r9,zero
  806494:	003f8406 	br	8062a8 <__alt_mem_onchip_mem+0xff7fe2a8>
  806498:	0005883a 	mov	r2,zero
  80649c:	0007883a 	mov	r3,zero
  8064a0:	003e8906 	br	805ec8 <__alt_mem_onchip_mem+0xff7fdec8>
  8064a4:	197ff804 	addi	r5,r3,-32
  8064a8:	01000804 	movi	r4,32
  8064ac:	414ad83a 	srl	r5,r8,r5
  8064b0:	19002426 	beq	r3,r4,806544 <__adddf3+0x89c>
  8064b4:	01001004 	movi	r4,64
  8064b8:	20c7c83a 	sub	r3,r4,r3
  8064bc:	40c6983a 	sll	r3,r8,r3
  8064c0:	1c46b03a 	or	r3,r3,r17
  8064c4:	1806c03a 	cmpne	r3,r3,zero
  8064c8:	28e2b03a 	or	r17,r5,r3
  8064cc:	0007883a 	mov	r3,zero
  8064d0:	003f2306 	br	806160 <__alt_mem_onchip_mem+0xff7fe160>
  8064d4:	0007883a 	mov	r3,zero
  8064d8:	5811883a 	mov	r8,r11
  8064dc:	00bfffc4 	movi	r2,-1
  8064e0:	0401ffc4 	movi	r16,2047
  8064e4:	003e7806 	br	805ec8 <__alt_mem_onchip_mem+0xff7fdec8>
  8064e8:	4462b03a 	or	r17,r8,r17
  8064ec:	8822c03a 	cmpne	r17,r17,zero
  8064f0:	0009883a 	mov	r4,zero
  8064f4:	003fa006 	br	806378 <__alt_mem_onchip_mem+0xff7fe378>
  8064f8:	4811883a 	mov	r8,r9
  8064fc:	3023883a 	mov	r17,r6
  806500:	0401ffc4 	movi	r16,2047
  806504:	003e0706 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  806508:	4811883a 	mov	r8,r9
  80650c:	3023883a 	mov	r17,r6
  806510:	003e0406 	br	805d24 <__alt_mem_onchip_mem+0xff7fdd24>
  806514:	21fff804 	addi	r7,r4,-32
  806518:	01400804 	movi	r5,32
  80651c:	41ced83a 	srl	r7,r8,r7
  806520:	21400a26 	beq	r4,r5,80654c <__adddf3+0x8a4>
  806524:	01401004 	movi	r5,64
  806528:	2909c83a 	sub	r4,r5,r4
  80652c:	4108983a 	sll	r4,r8,r4
  806530:	2448b03a 	or	r4,r4,r17
  806534:	2008c03a 	cmpne	r4,r4,zero
  806538:	3922b03a 	or	r17,r7,r4
  80653c:	0009883a 	mov	r4,zero
  806540:	003f8d06 	br	806378 <__alt_mem_onchip_mem+0xff7fe378>
  806544:	0007883a 	mov	r3,zero
  806548:	003fdd06 	br	8064c0 <__alt_mem_onchip_mem+0xff7fe4c0>
  80654c:	0009883a 	mov	r4,zero
  806550:	003ff706 	br	806530 <__alt_mem_onchip_mem+0xff7fe530>

00806554 <__gedf2>:
  806554:	2804d53a 	srli	r2,r5,20
  806558:	3806d53a 	srli	r3,r7,20
  80655c:	02000434 	movhi	r8,16
  806560:	423fffc4 	addi	r8,r8,-1
  806564:	1081ffcc 	andi	r2,r2,2047
  806568:	0241ffc4 	movi	r9,2047
  80656c:	2a14703a 	and	r10,r5,r8
  806570:	18c1ffcc 	andi	r3,r3,2047
  806574:	3a10703a 	and	r8,r7,r8
  806578:	280ad7fa 	srli	r5,r5,31
  80657c:	380ed7fa 	srli	r7,r7,31
  806580:	12401d26 	beq	r2,r9,8065f8 <__gedf2+0xa4>
  806584:	0241ffc4 	movi	r9,2047
  806588:	1a401226 	beq	r3,r9,8065d4 <__gedf2+0x80>
  80658c:	1000081e 	bne	r2,zero,8065b0 <__gedf2+0x5c>
  806590:	2296b03a 	or	r11,r4,r10
  806594:	5813003a 	cmpeq	r9,r11,zero
  806598:	1800091e 	bne	r3,zero,8065c0 <__gedf2+0x6c>
  80659c:	3218b03a 	or	r12,r6,r8
  8065a0:	6000071e 	bne	r12,zero,8065c0 <__gedf2+0x6c>
  8065a4:	0005883a 	mov	r2,zero
  8065a8:	5800101e 	bne	r11,zero,8065ec <__gedf2+0x98>
  8065ac:	f800283a 	ret
  8065b0:	18000c1e 	bne	r3,zero,8065e4 <__gedf2+0x90>
  8065b4:	3212b03a 	or	r9,r6,r8
  8065b8:	48000c26 	beq	r9,zero,8065ec <__gedf2+0x98>
  8065bc:	0013883a 	mov	r9,zero
  8065c0:	39c03fcc 	andi	r7,r7,255
  8065c4:	48000826 	beq	r9,zero,8065e8 <__gedf2+0x94>
  8065c8:	38000926 	beq	r7,zero,8065f0 <__gedf2+0x9c>
  8065cc:	00800044 	movi	r2,1
  8065d0:	f800283a 	ret
  8065d4:	3212b03a 	or	r9,r6,r8
  8065d8:	483fec26 	beq	r9,zero,80658c <__alt_mem_onchip_mem+0xff7fe58c>
  8065dc:	00bfff84 	movi	r2,-2
  8065e0:	f800283a 	ret
  8065e4:	39c03fcc 	andi	r7,r7,255
  8065e8:	29c00626 	beq	r5,r7,806604 <__gedf2+0xb0>
  8065ec:	283ff726 	beq	r5,zero,8065cc <__alt_mem_onchip_mem+0xff7fe5cc>
  8065f0:	00bfffc4 	movi	r2,-1
  8065f4:	f800283a 	ret
  8065f8:	2292b03a 	or	r9,r4,r10
  8065fc:	483fe126 	beq	r9,zero,806584 <__alt_mem_onchip_mem+0xff7fe584>
  806600:	003ff606 	br	8065dc <__alt_mem_onchip_mem+0xff7fe5dc>
  806604:	18bff916 	blt	r3,r2,8065ec <__alt_mem_onchip_mem+0xff7fe5ec>
  806608:	10c00316 	blt	r2,r3,806618 <__gedf2+0xc4>
  80660c:	42bff736 	bltu	r8,r10,8065ec <__alt_mem_onchip_mem+0xff7fe5ec>
  806610:	52000326 	beq	r10,r8,806620 <__gedf2+0xcc>
  806614:	5200042e 	bgeu	r10,r8,806628 <__gedf2+0xd4>
  806618:	283fec1e 	bne	r5,zero,8065cc <__alt_mem_onchip_mem+0xff7fe5cc>
  80661c:	003ff406 	br	8065f0 <__alt_mem_onchip_mem+0xff7fe5f0>
  806620:	313ff236 	bltu	r6,r4,8065ec <__alt_mem_onchip_mem+0xff7fe5ec>
  806624:	21bffc36 	bltu	r4,r6,806618 <__alt_mem_onchip_mem+0xff7fe618>
  806628:	0005883a 	mov	r2,zero
  80662c:	f800283a 	ret

00806630 <__ledf2>:
  806630:	2804d53a 	srli	r2,r5,20
  806634:	3810d53a 	srli	r8,r7,20
  806638:	00c00434 	movhi	r3,16
  80663c:	18ffffc4 	addi	r3,r3,-1
  806640:	1081ffcc 	andi	r2,r2,2047
  806644:	0241ffc4 	movi	r9,2047
  806648:	28d4703a 	and	r10,r5,r3
  80664c:	4201ffcc 	andi	r8,r8,2047
  806650:	38c6703a 	and	r3,r7,r3
  806654:	280ad7fa 	srli	r5,r5,31
  806658:	380ed7fa 	srli	r7,r7,31
  80665c:	12401f26 	beq	r2,r9,8066dc <__ledf2+0xac>
  806660:	0241ffc4 	movi	r9,2047
  806664:	42401426 	beq	r8,r9,8066b8 <__ledf2+0x88>
  806668:	1000091e 	bne	r2,zero,806690 <__ledf2+0x60>
  80666c:	2296b03a 	or	r11,r4,r10
  806670:	5813003a 	cmpeq	r9,r11,zero
  806674:	29403fcc 	andi	r5,r5,255
  806678:	40000a1e 	bne	r8,zero,8066a4 <__ledf2+0x74>
  80667c:	30d8b03a 	or	r12,r6,r3
  806680:	6000081e 	bne	r12,zero,8066a4 <__ledf2+0x74>
  806684:	0005883a 	mov	r2,zero
  806688:	5800111e 	bne	r11,zero,8066d0 <__ledf2+0xa0>
  80668c:	f800283a 	ret
  806690:	29403fcc 	andi	r5,r5,255
  806694:	40000c1e 	bne	r8,zero,8066c8 <__ledf2+0x98>
  806698:	30d2b03a 	or	r9,r6,r3
  80669c:	48000c26 	beq	r9,zero,8066d0 <__ledf2+0xa0>
  8066a0:	0013883a 	mov	r9,zero
  8066a4:	39c03fcc 	andi	r7,r7,255
  8066a8:	48000826 	beq	r9,zero,8066cc <__ledf2+0x9c>
  8066ac:	38001126 	beq	r7,zero,8066f4 <__ledf2+0xc4>
  8066b0:	00800044 	movi	r2,1
  8066b4:	f800283a 	ret
  8066b8:	30d2b03a 	or	r9,r6,r3
  8066bc:	483fea26 	beq	r9,zero,806668 <__alt_mem_onchip_mem+0xff7fe668>
  8066c0:	00800084 	movi	r2,2
  8066c4:	f800283a 	ret
  8066c8:	39c03fcc 	andi	r7,r7,255
  8066cc:	39400726 	beq	r7,r5,8066ec <__ledf2+0xbc>
  8066d0:	2800081e 	bne	r5,zero,8066f4 <__ledf2+0xc4>
  8066d4:	00800044 	movi	r2,1
  8066d8:	f800283a 	ret
  8066dc:	2292b03a 	or	r9,r4,r10
  8066e0:	483fdf26 	beq	r9,zero,806660 <__alt_mem_onchip_mem+0xff7fe660>
  8066e4:	00800084 	movi	r2,2
  8066e8:	f800283a 	ret
  8066ec:	4080030e 	bge	r8,r2,8066fc <__ledf2+0xcc>
  8066f0:	383fef26 	beq	r7,zero,8066b0 <__alt_mem_onchip_mem+0xff7fe6b0>
  8066f4:	00bfffc4 	movi	r2,-1
  8066f8:	f800283a 	ret
  8066fc:	123feb16 	blt	r2,r8,8066ac <__alt_mem_onchip_mem+0xff7fe6ac>
  806700:	1abff336 	bltu	r3,r10,8066d0 <__alt_mem_onchip_mem+0xff7fe6d0>
  806704:	50c00326 	beq	r10,r3,806714 <__ledf2+0xe4>
  806708:	50c0042e 	bgeu	r10,r3,80671c <__ledf2+0xec>
  80670c:	283fe81e 	bne	r5,zero,8066b0 <__alt_mem_onchip_mem+0xff7fe6b0>
  806710:	003ff806 	br	8066f4 <__alt_mem_onchip_mem+0xff7fe6f4>
  806714:	313fee36 	bltu	r6,r4,8066d0 <__alt_mem_onchip_mem+0xff7fe6d0>
  806718:	21bffc36 	bltu	r4,r6,80670c <__alt_mem_onchip_mem+0xff7fe70c>
  80671c:	0005883a 	mov	r2,zero
  806720:	f800283a 	ret

00806724 <__muldf3>:
  806724:	defff304 	addi	sp,sp,-52
  806728:	2804d53a 	srli	r2,r5,20
  80672c:	dd800915 	stw	r22,36(sp)
  806730:	282cd7fa 	srli	r22,r5,31
  806734:	dc000315 	stw	r16,12(sp)
  806738:	04000434 	movhi	r16,16
  80673c:	dd400815 	stw	r21,32(sp)
  806740:	dc800515 	stw	r18,20(sp)
  806744:	843fffc4 	addi	r16,r16,-1
  806748:	dfc00c15 	stw	ra,48(sp)
  80674c:	df000b15 	stw	fp,44(sp)
  806750:	ddc00a15 	stw	r23,40(sp)
  806754:	dd000715 	stw	r20,28(sp)
  806758:	dcc00615 	stw	r19,24(sp)
  80675c:	dc400415 	stw	r17,16(sp)
  806760:	1481ffcc 	andi	r18,r2,2047
  806764:	2c20703a 	and	r16,r5,r16
  806768:	b02b883a 	mov	r21,r22
  80676c:	b2403fcc 	andi	r9,r22,255
  806770:	90006026 	beq	r18,zero,8068f4 <__muldf3+0x1d0>
  806774:	0081ffc4 	movi	r2,2047
  806778:	2029883a 	mov	r20,r4
  80677c:	90803626 	beq	r18,r2,806858 <__muldf3+0x134>
  806780:	80800434 	orhi	r2,r16,16
  806784:	100490fa 	slli	r2,r2,3
  806788:	2020d77a 	srli	r16,r4,29
  80678c:	202890fa 	slli	r20,r4,3
  806790:	94bf0044 	addi	r18,r18,-1023
  806794:	80a0b03a 	or	r16,r16,r2
  806798:	0027883a 	mov	r19,zero
  80679c:	0039883a 	mov	fp,zero
  8067a0:	3804d53a 	srli	r2,r7,20
  8067a4:	382ed7fa 	srli	r23,r7,31
  8067a8:	04400434 	movhi	r17,16
  8067ac:	8c7fffc4 	addi	r17,r17,-1
  8067b0:	1081ffcc 	andi	r2,r2,2047
  8067b4:	3011883a 	mov	r8,r6
  8067b8:	3c62703a 	and	r17,r7,r17
  8067bc:	ba803fcc 	andi	r10,r23,255
  8067c0:	10006d26 	beq	r2,zero,806978 <__muldf3+0x254>
  8067c4:	00c1ffc4 	movi	r3,2047
  8067c8:	10c06526 	beq	r2,r3,806960 <__muldf3+0x23c>
  8067cc:	88c00434 	orhi	r3,r17,16
  8067d0:	180690fa 	slli	r3,r3,3
  8067d4:	3022d77a 	srli	r17,r6,29
  8067d8:	301090fa 	slli	r8,r6,3
  8067dc:	10bf0044 	addi	r2,r2,-1023
  8067e0:	88e2b03a 	or	r17,r17,r3
  8067e4:	000b883a 	mov	r5,zero
  8067e8:	9085883a 	add	r2,r18,r2
  8067ec:	2cc8b03a 	or	r4,r5,r19
  8067f0:	00c003c4 	movi	r3,15
  8067f4:	bdacf03a 	xor	r22,r23,r22
  8067f8:	12c00044 	addi	r11,r2,1
  8067fc:	19009936 	bltu	r3,r4,806a64 <__muldf3+0x340>
  806800:	200890ba 	slli	r4,r4,2
  806804:	00c02034 	movhi	r3,128
  806808:	18da0604 	addi	r3,r3,26648
  80680c:	20c9883a 	add	r4,r4,r3
  806810:	20c00017 	ldw	r3,0(r4)
  806814:	1800683a 	jmp	r3
  806818:	00806a64 	muli	r2,zero,425
  80681c:	00806878 	rdprs	r2,zero,417
  806820:	00806878 	rdprs	r2,zero,417
  806824:	00806874 	movhi	r2,417
  806828:	00806a40 	call	806a4 <__alt_mem_sdram-0x77f95c>
  80682c:	00806a40 	call	806a4 <__alt_mem_sdram-0x77f95c>
  806830:	00806a28 	cmpgeui	r2,zero,424
  806834:	00806874 	movhi	r2,417
  806838:	00806a40 	call	806a4 <__alt_mem_sdram-0x77f95c>
  80683c:	00806a28 	cmpgeui	r2,zero,424
  806840:	00806a40 	call	806a4 <__alt_mem_sdram-0x77f95c>
  806844:	00806874 	movhi	r2,417
  806848:	00806a50 	cmplti	r2,zero,425
  80684c:	00806a50 	cmplti	r2,zero,425
  806850:	00806a50 	cmplti	r2,zero,425
  806854:	00806c6c 	andhi	r2,zero,433
  806858:	2404b03a 	or	r2,r4,r16
  80685c:	10006f1e 	bne	r2,zero,806a1c <__muldf3+0x2f8>
  806860:	04c00204 	movi	r19,8
  806864:	0021883a 	mov	r16,zero
  806868:	0029883a 	mov	r20,zero
  80686c:	07000084 	movi	fp,2
  806870:	003fcb06 	br	8067a0 <__alt_mem_onchip_mem+0xff7fe7a0>
  806874:	502d883a 	mov	r22,r10
  806878:	00800084 	movi	r2,2
  80687c:	28805726 	beq	r5,r2,8069dc <__muldf3+0x2b8>
  806880:	008000c4 	movi	r2,3
  806884:	28816626 	beq	r5,r2,806e20 <__muldf3+0x6fc>
  806888:	00800044 	movi	r2,1
  80688c:	2881411e 	bne	r5,r2,806d94 <__muldf3+0x670>
  806890:	b02b883a 	mov	r21,r22
  806894:	0005883a 	mov	r2,zero
  806898:	000b883a 	mov	r5,zero
  80689c:	0029883a 	mov	r20,zero
  8068a0:	1004953a 	slli	r2,r2,20
  8068a4:	a8c03fcc 	andi	r3,r21,255
  8068a8:	04400434 	movhi	r17,16
  8068ac:	8c7fffc4 	addi	r17,r17,-1
  8068b0:	180697fa 	slli	r3,r3,31
  8068b4:	2c4a703a 	and	r5,r5,r17
  8068b8:	288ab03a 	or	r5,r5,r2
  8068bc:	28c6b03a 	or	r3,r5,r3
  8068c0:	a005883a 	mov	r2,r20
  8068c4:	dfc00c17 	ldw	ra,48(sp)
  8068c8:	df000b17 	ldw	fp,44(sp)
  8068cc:	ddc00a17 	ldw	r23,40(sp)
  8068d0:	dd800917 	ldw	r22,36(sp)
  8068d4:	dd400817 	ldw	r21,32(sp)
  8068d8:	dd000717 	ldw	r20,28(sp)
  8068dc:	dcc00617 	ldw	r19,24(sp)
  8068e0:	dc800517 	ldw	r18,20(sp)
  8068e4:	dc400417 	ldw	r17,16(sp)
  8068e8:	dc000317 	ldw	r16,12(sp)
  8068ec:	dec00d04 	addi	sp,sp,52
  8068f0:	f800283a 	ret
  8068f4:	2404b03a 	or	r2,r4,r16
  8068f8:	2027883a 	mov	r19,r4
  8068fc:	10004226 	beq	r2,zero,806a08 <__muldf3+0x2e4>
  806900:	8000fc26 	beq	r16,zero,806cf4 <__muldf3+0x5d0>
  806904:	8009883a 	mov	r4,r16
  806908:	d9800215 	stw	r6,8(sp)
  80690c:	d9c00015 	stw	r7,0(sp)
  806910:	da400115 	stw	r9,4(sp)
  806914:	08078bc0 	call	8078bc <__clzsi2>
  806918:	d9800217 	ldw	r6,8(sp)
  80691c:	d9c00017 	ldw	r7,0(sp)
  806920:	da400117 	ldw	r9,4(sp)
  806924:	113ffd44 	addi	r4,r2,-11
  806928:	00c00704 	movi	r3,28
  80692c:	1900ed16 	blt	r3,r4,806ce4 <__muldf3+0x5c0>
  806930:	00c00744 	movi	r3,29
  806934:	147ffe04 	addi	r17,r2,-8
  806938:	1907c83a 	sub	r3,r3,r4
  80693c:	8460983a 	sll	r16,r16,r17
  806940:	98c6d83a 	srl	r3,r19,r3
  806944:	9c68983a 	sll	r20,r19,r17
  806948:	1c20b03a 	or	r16,r3,r16
  80694c:	1080fcc4 	addi	r2,r2,1011
  806950:	00a5c83a 	sub	r18,zero,r2
  806954:	0027883a 	mov	r19,zero
  806958:	0039883a 	mov	fp,zero
  80695c:	003f9006 	br	8067a0 <__alt_mem_onchip_mem+0xff7fe7a0>
  806960:	3446b03a 	or	r3,r6,r17
  806964:	1800261e 	bne	r3,zero,806a00 <__muldf3+0x2dc>
  806968:	0023883a 	mov	r17,zero
  80696c:	0011883a 	mov	r8,zero
  806970:	01400084 	movi	r5,2
  806974:	003f9c06 	br	8067e8 <__alt_mem_onchip_mem+0xff7fe7e8>
  806978:	3446b03a 	or	r3,r6,r17
  80697c:	18001c26 	beq	r3,zero,8069f0 <__muldf3+0x2cc>
  806980:	8800ce26 	beq	r17,zero,806cbc <__muldf3+0x598>
  806984:	8809883a 	mov	r4,r17
  806988:	d9800215 	stw	r6,8(sp)
  80698c:	da400115 	stw	r9,4(sp)
  806990:	da800015 	stw	r10,0(sp)
  806994:	08078bc0 	call	8078bc <__clzsi2>
  806998:	d9800217 	ldw	r6,8(sp)
  80699c:	da400117 	ldw	r9,4(sp)
  8069a0:	da800017 	ldw	r10,0(sp)
  8069a4:	113ffd44 	addi	r4,r2,-11
  8069a8:	00c00704 	movi	r3,28
  8069ac:	1900bf16 	blt	r3,r4,806cac <__muldf3+0x588>
  8069b0:	00c00744 	movi	r3,29
  8069b4:	123ffe04 	addi	r8,r2,-8
  8069b8:	1907c83a 	sub	r3,r3,r4
  8069bc:	8a22983a 	sll	r17,r17,r8
  8069c0:	30c6d83a 	srl	r3,r6,r3
  8069c4:	3210983a 	sll	r8,r6,r8
  8069c8:	1c62b03a 	or	r17,r3,r17
  8069cc:	1080fcc4 	addi	r2,r2,1011
  8069d0:	0085c83a 	sub	r2,zero,r2
  8069d4:	000b883a 	mov	r5,zero
  8069d8:	003f8306 	br	8067e8 <__alt_mem_onchip_mem+0xff7fe7e8>
  8069dc:	b02b883a 	mov	r21,r22
  8069e0:	0081ffc4 	movi	r2,2047
  8069e4:	000b883a 	mov	r5,zero
  8069e8:	0029883a 	mov	r20,zero
  8069ec:	003fac06 	br	8068a0 <__alt_mem_onchip_mem+0xff7fe8a0>
  8069f0:	0023883a 	mov	r17,zero
  8069f4:	0011883a 	mov	r8,zero
  8069f8:	01400044 	movi	r5,1
  8069fc:	003f7a06 	br	8067e8 <__alt_mem_onchip_mem+0xff7fe7e8>
  806a00:	014000c4 	movi	r5,3
  806a04:	003f7806 	br	8067e8 <__alt_mem_onchip_mem+0xff7fe7e8>
  806a08:	04c00104 	movi	r19,4
  806a0c:	0021883a 	mov	r16,zero
  806a10:	0029883a 	mov	r20,zero
  806a14:	07000044 	movi	fp,1
  806a18:	003f6106 	br	8067a0 <__alt_mem_onchip_mem+0xff7fe7a0>
  806a1c:	04c00304 	movi	r19,12
  806a20:	070000c4 	movi	fp,3
  806a24:	003f5e06 	br	8067a0 <__alt_mem_onchip_mem+0xff7fe7a0>
  806a28:	01400434 	movhi	r5,16
  806a2c:	002b883a 	mov	r21,zero
  806a30:	297fffc4 	addi	r5,r5,-1
  806a34:	053fffc4 	movi	r20,-1
  806a38:	0081ffc4 	movi	r2,2047
  806a3c:	003f9806 	br	8068a0 <__alt_mem_onchip_mem+0xff7fe8a0>
  806a40:	8023883a 	mov	r17,r16
  806a44:	a011883a 	mov	r8,r20
  806a48:	e00b883a 	mov	r5,fp
  806a4c:	003f8a06 	br	806878 <__alt_mem_onchip_mem+0xff7fe878>
  806a50:	8023883a 	mov	r17,r16
  806a54:	a011883a 	mov	r8,r20
  806a58:	482d883a 	mov	r22,r9
  806a5c:	e00b883a 	mov	r5,fp
  806a60:	003f8506 	br	806878 <__alt_mem_onchip_mem+0xff7fe878>
  806a64:	a00ad43a 	srli	r5,r20,16
  806a68:	401ad43a 	srli	r13,r8,16
  806a6c:	a53fffcc 	andi	r20,r20,65535
  806a70:	423fffcc 	andi	r8,r8,65535
  806a74:	4519383a 	mul	r12,r8,r20
  806a78:	4147383a 	mul	r3,r8,r5
  806a7c:	6d09383a 	mul	r4,r13,r20
  806a80:	600cd43a 	srli	r6,r12,16
  806a84:	2b5d383a 	mul	r14,r5,r13
  806a88:	20c9883a 	add	r4,r4,r3
  806a8c:	310d883a 	add	r6,r6,r4
  806a90:	30c0022e 	bgeu	r6,r3,806a9c <__muldf3+0x378>
  806a94:	00c00074 	movhi	r3,1
  806a98:	70dd883a 	add	r14,r14,r3
  806a9c:	8826d43a 	srli	r19,r17,16
  806aa0:	8bffffcc 	andi	r15,r17,65535
  806aa4:	7d23383a 	mul	r17,r15,r20
  806aa8:	7949383a 	mul	r4,r15,r5
  806aac:	9d29383a 	mul	r20,r19,r20
  806ab0:	8814d43a 	srli	r10,r17,16
  806ab4:	3012943a 	slli	r9,r6,16
  806ab8:	a129883a 	add	r20,r20,r4
  806abc:	633fffcc 	andi	r12,r12,65535
  806ac0:	5515883a 	add	r10,r10,r20
  806ac4:	3006d43a 	srli	r3,r6,16
  806ac8:	4b13883a 	add	r9,r9,r12
  806acc:	2ccb383a 	mul	r5,r5,r19
  806ad0:	5100022e 	bgeu	r10,r4,806adc <__muldf3+0x3b8>
  806ad4:	01000074 	movhi	r4,1
  806ad8:	290b883a 	add	r5,r5,r4
  806adc:	802ad43a 	srli	r21,r16,16
  806ae0:	843fffcc 	andi	r16,r16,65535
  806ae4:	440d383a 	mul	r6,r8,r16
  806ae8:	4565383a 	mul	r18,r8,r21
  806aec:	8349383a 	mul	r4,r16,r13
  806af0:	500e943a 	slli	r7,r10,16
  806af4:	3010d43a 	srli	r8,r6,16
  806af8:	5028d43a 	srli	r20,r10,16
  806afc:	2489883a 	add	r4,r4,r18
  806b00:	8abfffcc 	andi	r10,r17,65535
  806b04:	3a95883a 	add	r10,r7,r10
  806b08:	4119883a 	add	r12,r8,r4
  806b0c:	a169883a 	add	r20,r20,r5
  806b10:	1a87883a 	add	r3,r3,r10
  806b14:	6d5b383a 	mul	r13,r13,r21
  806b18:	6480022e 	bgeu	r12,r18,806b24 <__muldf3+0x400>
  806b1c:	01000074 	movhi	r4,1
  806b20:	691b883a 	add	r13,r13,r4
  806b24:	7c25383a 	mul	r18,r15,r16
  806b28:	7d4b383a 	mul	r5,r15,r21
  806b2c:	84cf383a 	mul	r7,r16,r19
  806b30:	901ed43a 	srli	r15,r18,16
  806b34:	6008d43a 	srli	r4,r12,16
  806b38:	6010943a 	slli	r8,r12,16
  806b3c:	394f883a 	add	r7,r7,r5
  806b40:	333fffcc 	andi	r12,r6,65535
  806b44:	79df883a 	add	r15,r15,r7
  806b48:	235b883a 	add	r13,r4,r13
  806b4c:	9d63383a 	mul	r17,r19,r21
  806b50:	4309883a 	add	r4,r8,r12
  806b54:	7940022e 	bgeu	r15,r5,806b60 <__muldf3+0x43c>
  806b58:	01400074 	movhi	r5,1
  806b5c:	8963883a 	add	r17,r17,r5
  806b60:	780a943a 	slli	r5,r15,16
  806b64:	91bfffcc 	andi	r6,r18,65535
  806b68:	70c7883a 	add	r3,r14,r3
  806b6c:	298d883a 	add	r6,r5,r6
  806b70:	1a8f803a 	cmpltu	r7,r3,r10
  806b74:	350b883a 	add	r5,r6,r20
  806b78:	20c7883a 	add	r3,r4,r3
  806b7c:	3955883a 	add	r10,r7,r5
  806b80:	1909803a 	cmpltu	r4,r3,r4
  806b84:	6a91883a 	add	r8,r13,r10
  806b88:	780cd43a 	srli	r6,r15,16
  806b8c:	2219883a 	add	r12,r4,r8
  806b90:	2d0b803a 	cmpltu	r5,r5,r20
  806b94:	51cf803a 	cmpltu	r7,r10,r7
  806b98:	29ceb03a 	or	r7,r5,r7
  806b9c:	4351803a 	cmpltu	r8,r8,r13
  806ba0:	610b803a 	cmpltu	r5,r12,r4
  806ba4:	4148b03a 	or	r4,r8,r5
  806ba8:	398f883a 	add	r7,r7,r6
  806bac:	3909883a 	add	r4,r7,r4
  806bb0:	1810927a 	slli	r8,r3,9
  806bb4:	2449883a 	add	r4,r4,r17
  806bb8:	2008927a 	slli	r4,r4,9
  806bbc:	6022d5fa 	srli	r17,r12,23
  806bc0:	1806d5fa 	srli	r3,r3,23
  806bc4:	4252b03a 	or	r9,r8,r9
  806bc8:	600a927a 	slli	r5,r12,9
  806bcc:	4810c03a 	cmpne	r8,r9,zero
  806bd0:	2462b03a 	or	r17,r4,r17
  806bd4:	40c6b03a 	or	r3,r8,r3
  806bd8:	8900402c 	andhi	r4,r17,256
  806bdc:	1950b03a 	or	r8,r3,r5
  806be0:	20000726 	beq	r4,zero,806c00 <__muldf3+0x4dc>
  806be4:	4006d07a 	srli	r3,r8,1
  806be8:	880497fa 	slli	r2,r17,31
  806bec:	4200004c 	andi	r8,r8,1
  806bf0:	8822d07a 	srli	r17,r17,1
  806bf4:	1a10b03a 	or	r8,r3,r8
  806bf8:	1210b03a 	or	r8,r2,r8
  806bfc:	5805883a 	mov	r2,r11
  806c00:	1140ffc4 	addi	r5,r2,1023
  806c04:	0140440e 	bge	zero,r5,806d18 <__muldf3+0x5f4>
  806c08:	40c001cc 	andi	r3,r8,7
  806c0c:	18000726 	beq	r3,zero,806c2c <__muldf3+0x508>
  806c10:	40c003cc 	andi	r3,r8,15
  806c14:	01000104 	movi	r4,4
  806c18:	19000426 	beq	r3,r4,806c2c <__muldf3+0x508>
  806c1c:	4107883a 	add	r3,r8,r4
  806c20:	1a11803a 	cmpltu	r8,r3,r8
  806c24:	8a23883a 	add	r17,r17,r8
  806c28:	1811883a 	mov	r8,r3
  806c2c:	88c0402c 	andhi	r3,r17,256
  806c30:	18000426 	beq	r3,zero,806c44 <__muldf3+0x520>
  806c34:	11410004 	addi	r5,r2,1024
  806c38:	00bfc034 	movhi	r2,65280
  806c3c:	10bfffc4 	addi	r2,r2,-1
  806c40:	88a2703a 	and	r17,r17,r2
  806c44:	0081ff84 	movi	r2,2046
  806c48:	117f6416 	blt	r2,r5,8069dc <__alt_mem_onchip_mem+0xff7fe9dc>
  806c4c:	8828977a 	slli	r20,r17,29
  806c50:	4010d0fa 	srli	r8,r8,3
  806c54:	8822927a 	slli	r17,r17,9
  806c58:	2881ffcc 	andi	r2,r5,2047
  806c5c:	a228b03a 	or	r20,r20,r8
  806c60:	880ad33a 	srli	r5,r17,12
  806c64:	b02b883a 	mov	r21,r22
  806c68:	003f0d06 	br	8068a0 <__alt_mem_onchip_mem+0xff7fe8a0>
  806c6c:	8080022c 	andhi	r2,r16,8
  806c70:	10000926 	beq	r2,zero,806c98 <__muldf3+0x574>
  806c74:	8880022c 	andhi	r2,r17,8
  806c78:	1000071e 	bne	r2,zero,806c98 <__muldf3+0x574>
  806c7c:	00800434 	movhi	r2,16
  806c80:	89400234 	orhi	r5,r17,8
  806c84:	10bfffc4 	addi	r2,r2,-1
  806c88:	b82b883a 	mov	r21,r23
  806c8c:	288a703a 	and	r5,r5,r2
  806c90:	4029883a 	mov	r20,r8
  806c94:	003f6806 	br	806a38 <__alt_mem_onchip_mem+0xff7fea38>
  806c98:	00800434 	movhi	r2,16
  806c9c:	81400234 	orhi	r5,r16,8
  806ca0:	10bfffc4 	addi	r2,r2,-1
  806ca4:	288a703a 	and	r5,r5,r2
  806ca8:	003f6306 	br	806a38 <__alt_mem_onchip_mem+0xff7fea38>
  806cac:	147ff604 	addi	r17,r2,-40
  806cb0:	3462983a 	sll	r17,r6,r17
  806cb4:	0011883a 	mov	r8,zero
  806cb8:	003f4406 	br	8069cc <__alt_mem_onchip_mem+0xff7fe9cc>
  806cbc:	3009883a 	mov	r4,r6
  806cc0:	d9800215 	stw	r6,8(sp)
  806cc4:	da400115 	stw	r9,4(sp)
  806cc8:	da800015 	stw	r10,0(sp)
  806ccc:	08078bc0 	call	8078bc <__clzsi2>
  806cd0:	10800804 	addi	r2,r2,32
  806cd4:	da800017 	ldw	r10,0(sp)
  806cd8:	da400117 	ldw	r9,4(sp)
  806cdc:	d9800217 	ldw	r6,8(sp)
  806ce0:	003f3006 	br	8069a4 <__alt_mem_onchip_mem+0xff7fe9a4>
  806ce4:	143ff604 	addi	r16,r2,-40
  806ce8:	9c20983a 	sll	r16,r19,r16
  806cec:	0029883a 	mov	r20,zero
  806cf0:	003f1606 	br	80694c <__alt_mem_onchip_mem+0xff7fe94c>
  806cf4:	d9800215 	stw	r6,8(sp)
  806cf8:	d9c00015 	stw	r7,0(sp)
  806cfc:	da400115 	stw	r9,4(sp)
  806d00:	08078bc0 	call	8078bc <__clzsi2>
  806d04:	10800804 	addi	r2,r2,32
  806d08:	da400117 	ldw	r9,4(sp)
  806d0c:	d9c00017 	ldw	r7,0(sp)
  806d10:	d9800217 	ldw	r6,8(sp)
  806d14:	003f0306 	br	806924 <__alt_mem_onchip_mem+0xff7fe924>
  806d18:	00c00044 	movi	r3,1
  806d1c:	1947c83a 	sub	r3,r3,r5
  806d20:	00800e04 	movi	r2,56
  806d24:	10feda16 	blt	r2,r3,806890 <__alt_mem_onchip_mem+0xff7fe890>
  806d28:	008007c4 	movi	r2,31
  806d2c:	10c01b16 	blt	r2,r3,806d9c <__muldf3+0x678>
  806d30:	00800804 	movi	r2,32
  806d34:	10c5c83a 	sub	r2,r2,r3
  806d38:	888a983a 	sll	r5,r17,r2
  806d3c:	40c8d83a 	srl	r4,r8,r3
  806d40:	4084983a 	sll	r2,r8,r2
  806d44:	88e2d83a 	srl	r17,r17,r3
  806d48:	2906b03a 	or	r3,r5,r4
  806d4c:	1004c03a 	cmpne	r2,r2,zero
  806d50:	1886b03a 	or	r3,r3,r2
  806d54:	188001cc 	andi	r2,r3,7
  806d58:	10000726 	beq	r2,zero,806d78 <__muldf3+0x654>
  806d5c:	188003cc 	andi	r2,r3,15
  806d60:	01000104 	movi	r4,4
  806d64:	11000426 	beq	r2,r4,806d78 <__muldf3+0x654>
  806d68:	1805883a 	mov	r2,r3
  806d6c:	10c00104 	addi	r3,r2,4
  806d70:	1885803a 	cmpltu	r2,r3,r2
  806d74:	88a3883a 	add	r17,r17,r2
  806d78:	8880202c 	andhi	r2,r17,128
  806d7c:	10001c26 	beq	r2,zero,806df0 <__muldf3+0x6cc>
  806d80:	b02b883a 	mov	r21,r22
  806d84:	00800044 	movi	r2,1
  806d88:	000b883a 	mov	r5,zero
  806d8c:	0029883a 	mov	r20,zero
  806d90:	003ec306 	br	8068a0 <__alt_mem_onchip_mem+0xff7fe8a0>
  806d94:	5805883a 	mov	r2,r11
  806d98:	003f9906 	br	806c00 <__alt_mem_onchip_mem+0xff7fec00>
  806d9c:	00bff844 	movi	r2,-31
  806da0:	1145c83a 	sub	r2,r2,r5
  806da4:	8888d83a 	srl	r4,r17,r2
  806da8:	00800804 	movi	r2,32
  806dac:	18801a26 	beq	r3,r2,806e18 <__muldf3+0x6f4>
  806db0:	00801004 	movi	r2,64
  806db4:	10c5c83a 	sub	r2,r2,r3
  806db8:	8884983a 	sll	r2,r17,r2
  806dbc:	1204b03a 	or	r2,r2,r8
  806dc0:	1004c03a 	cmpne	r2,r2,zero
  806dc4:	2084b03a 	or	r2,r4,r2
  806dc8:	144001cc 	andi	r17,r2,7
  806dcc:	88000d1e 	bne	r17,zero,806e04 <__muldf3+0x6e0>
  806dd0:	000b883a 	mov	r5,zero
  806dd4:	1028d0fa 	srli	r20,r2,3
  806dd8:	b02b883a 	mov	r21,r22
  806ddc:	0005883a 	mov	r2,zero
  806de0:	a468b03a 	or	r20,r20,r17
  806de4:	003eae06 	br	8068a0 <__alt_mem_onchip_mem+0xff7fe8a0>
  806de8:	1007883a 	mov	r3,r2
  806dec:	0023883a 	mov	r17,zero
  806df0:	880a927a 	slli	r5,r17,9
  806df4:	1805883a 	mov	r2,r3
  806df8:	8822977a 	slli	r17,r17,29
  806dfc:	280ad33a 	srli	r5,r5,12
  806e00:	003ff406 	br	806dd4 <__alt_mem_onchip_mem+0xff7fedd4>
  806e04:	10c003cc 	andi	r3,r2,15
  806e08:	01000104 	movi	r4,4
  806e0c:	193ff626 	beq	r3,r4,806de8 <__alt_mem_onchip_mem+0xff7fede8>
  806e10:	0023883a 	mov	r17,zero
  806e14:	003fd506 	br	806d6c <__alt_mem_onchip_mem+0xff7fed6c>
  806e18:	0005883a 	mov	r2,zero
  806e1c:	003fe706 	br	806dbc <__alt_mem_onchip_mem+0xff7fedbc>
  806e20:	00800434 	movhi	r2,16
  806e24:	89400234 	orhi	r5,r17,8
  806e28:	10bfffc4 	addi	r2,r2,-1
  806e2c:	b02b883a 	mov	r21,r22
  806e30:	288a703a 	and	r5,r5,r2
  806e34:	4029883a 	mov	r20,r8
  806e38:	003eff06 	br	806a38 <__alt_mem_onchip_mem+0xff7fea38>

00806e3c <__subdf3>:
  806e3c:	02000434 	movhi	r8,16
  806e40:	423fffc4 	addi	r8,r8,-1
  806e44:	defffb04 	addi	sp,sp,-20
  806e48:	2a14703a 	and	r10,r5,r8
  806e4c:	3812d53a 	srli	r9,r7,20
  806e50:	3a10703a 	and	r8,r7,r8
  806e54:	2006d77a 	srli	r3,r4,29
  806e58:	3004d77a 	srli	r2,r6,29
  806e5c:	dc000015 	stw	r16,0(sp)
  806e60:	501490fa 	slli	r10,r10,3
  806e64:	2820d53a 	srli	r16,r5,20
  806e68:	401090fa 	slli	r8,r8,3
  806e6c:	dc800215 	stw	r18,8(sp)
  806e70:	dc400115 	stw	r17,4(sp)
  806e74:	dfc00415 	stw	ra,16(sp)
  806e78:	202290fa 	slli	r17,r4,3
  806e7c:	dcc00315 	stw	r19,12(sp)
  806e80:	4a41ffcc 	andi	r9,r9,2047
  806e84:	0101ffc4 	movi	r4,2047
  806e88:	2824d7fa 	srli	r18,r5,31
  806e8c:	8401ffcc 	andi	r16,r16,2047
  806e90:	50c6b03a 	or	r3,r10,r3
  806e94:	380ed7fa 	srli	r7,r7,31
  806e98:	408ab03a 	or	r5,r8,r2
  806e9c:	300c90fa 	slli	r6,r6,3
  806ea0:	49009626 	beq	r9,r4,8070fc <__subdf3+0x2c0>
  806ea4:	39c0005c 	xori	r7,r7,1
  806ea8:	8245c83a 	sub	r2,r16,r9
  806eac:	3c807426 	beq	r7,r18,807080 <__subdf3+0x244>
  806eb0:	0080af0e 	bge	zero,r2,807170 <__subdf3+0x334>
  806eb4:	48002a1e 	bne	r9,zero,806f60 <__subdf3+0x124>
  806eb8:	2988b03a 	or	r4,r5,r6
  806ebc:	20009a1e 	bne	r4,zero,807128 <__subdf3+0x2ec>
  806ec0:	888001cc 	andi	r2,r17,7
  806ec4:	10000726 	beq	r2,zero,806ee4 <__subdf3+0xa8>
  806ec8:	888003cc 	andi	r2,r17,15
  806ecc:	01000104 	movi	r4,4
  806ed0:	11000426 	beq	r2,r4,806ee4 <__subdf3+0xa8>
  806ed4:	890b883a 	add	r5,r17,r4
  806ed8:	2c63803a 	cmpltu	r17,r5,r17
  806edc:	1c47883a 	add	r3,r3,r17
  806ee0:	2823883a 	mov	r17,r5
  806ee4:	1880202c 	andhi	r2,r3,128
  806ee8:	10005926 	beq	r2,zero,807050 <__subdf3+0x214>
  806eec:	84000044 	addi	r16,r16,1
  806ef0:	0081ffc4 	movi	r2,2047
  806ef4:	8080be26 	beq	r16,r2,8071f0 <__subdf3+0x3b4>
  806ef8:	017fe034 	movhi	r5,65408
  806efc:	297fffc4 	addi	r5,r5,-1
  806f00:	1946703a 	and	r3,r3,r5
  806f04:	1804977a 	slli	r2,r3,29
  806f08:	1806927a 	slli	r3,r3,9
  806f0c:	8822d0fa 	srli	r17,r17,3
  806f10:	8401ffcc 	andi	r16,r16,2047
  806f14:	180ad33a 	srli	r5,r3,12
  806f18:	9100004c 	andi	r4,r18,1
  806f1c:	1444b03a 	or	r2,r2,r17
  806f20:	80c1ffcc 	andi	r3,r16,2047
  806f24:	1820953a 	slli	r16,r3,20
  806f28:	20c03fcc 	andi	r3,r4,255
  806f2c:	180897fa 	slli	r4,r3,31
  806f30:	00c00434 	movhi	r3,16
  806f34:	18ffffc4 	addi	r3,r3,-1
  806f38:	28c6703a 	and	r3,r5,r3
  806f3c:	1c06b03a 	or	r3,r3,r16
  806f40:	1906b03a 	or	r3,r3,r4
  806f44:	dfc00417 	ldw	ra,16(sp)
  806f48:	dcc00317 	ldw	r19,12(sp)
  806f4c:	dc800217 	ldw	r18,8(sp)
  806f50:	dc400117 	ldw	r17,4(sp)
  806f54:	dc000017 	ldw	r16,0(sp)
  806f58:	dec00504 	addi	sp,sp,20
  806f5c:	f800283a 	ret
  806f60:	0101ffc4 	movi	r4,2047
  806f64:	813fd626 	beq	r16,r4,806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  806f68:	29402034 	orhi	r5,r5,128
  806f6c:	01000e04 	movi	r4,56
  806f70:	2080a316 	blt	r4,r2,807200 <__subdf3+0x3c4>
  806f74:	010007c4 	movi	r4,31
  806f78:	2080c616 	blt	r4,r2,807294 <__subdf3+0x458>
  806f7c:	01000804 	movi	r4,32
  806f80:	2089c83a 	sub	r4,r4,r2
  806f84:	2910983a 	sll	r8,r5,r4
  806f88:	308ed83a 	srl	r7,r6,r2
  806f8c:	3108983a 	sll	r4,r6,r4
  806f90:	2884d83a 	srl	r2,r5,r2
  806f94:	41ccb03a 	or	r6,r8,r7
  806f98:	2008c03a 	cmpne	r4,r4,zero
  806f9c:	310cb03a 	or	r6,r6,r4
  806fa0:	898dc83a 	sub	r6,r17,r6
  806fa4:	89a3803a 	cmpltu	r17,r17,r6
  806fa8:	1887c83a 	sub	r3,r3,r2
  806fac:	1c47c83a 	sub	r3,r3,r17
  806fb0:	3023883a 	mov	r17,r6
  806fb4:	1880202c 	andhi	r2,r3,128
  806fb8:	10002326 	beq	r2,zero,807048 <__subdf3+0x20c>
  806fbc:	04c02034 	movhi	r19,128
  806fc0:	9cffffc4 	addi	r19,r19,-1
  806fc4:	1ce6703a 	and	r19,r3,r19
  806fc8:	98007a26 	beq	r19,zero,8071b4 <__subdf3+0x378>
  806fcc:	9809883a 	mov	r4,r19
  806fd0:	08078bc0 	call	8078bc <__clzsi2>
  806fd4:	113ffe04 	addi	r4,r2,-8
  806fd8:	00c007c4 	movi	r3,31
  806fdc:	19007b16 	blt	r3,r4,8071cc <__subdf3+0x390>
  806fe0:	00800804 	movi	r2,32
  806fe4:	1105c83a 	sub	r2,r2,r4
  806fe8:	8884d83a 	srl	r2,r17,r2
  806fec:	9906983a 	sll	r3,r19,r4
  806ff0:	8922983a 	sll	r17,r17,r4
  806ff4:	10c4b03a 	or	r2,r2,r3
  806ff8:	24007816 	blt	r4,r16,8071dc <__subdf3+0x3a0>
  806ffc:	2421c83a 	sub	r16,r4,r16
  807000:	80c00044 	addi	r3,r16,1
  807004:	010007c4 	movi	r4,31
  807008:	20c09516 	blt	r4,r3,807260 <__subdf3+0x424>
  80700c:	01400804 	movi	r5,32
  807010:	28cbc83a 	sub	r5,r5,r3
  807014:	88c8d83a 	srl	r4,r17,r3
  807018:	8962983a 	sll	r17,r17,r5
  80701c:	114a983a 	sll	r5,r2,r5
  807020:	10c6d83a 	srl	r3,r2,r3
  807024:	8804c03a 	cmpne	r2,r17,zero
  807028:	290ab03a 	or	r5,r5,r4
  80702c:	28a2b03a 	or	r17,r5,r2
  807030:	0021883a 	mov	r16,zero
  807034:	003fa206 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  807038:	2090b03a 	or	r8,r4,r2
  80703c:	40018e26 	beq	r8,zero,807678 <__subdf3+0x83c>
  807040:	1007883a 	mov	r3,r2
  807044:	2023883a 	mov	r17,r4
  807048:	888001cc 	andi	r2,r17,7
  80704c:	103f9e1e 	bne	r2,zero,806ec8 <__alt_mem_onchip_mem+0xff7feec8>
  807050:	1804977a 	slli	r2,r3,29
  807054:	8822d0fa 	srli	r17,r17,3
  807058:	1810d0fa 	srli	r8,r3,3
  80705c:	9100004c 	andi	r4,r18,1
  807060:	1444b03a 	or	r2,r2,r17
  807064:	00c1ffc4 	movi	r3,2047
  807068:	80c02826 	beq	r16,r3,80710c <__subdf3+0x2d0>
  80706c:	01400434 	movhi	r5,16
  807070:	297fffc4 	addi	r5,r5,-1
  807074:	80e0703a 	and	r16,r16,r3
  807078:	414a703a 	and	r5,r8,r5
  80707c:	003fa806 	br	806f20 <__alt_mem_onchip_mem+0xff7fef20>
  807080:	0080630e 	bge	zero,r2,807210 <__subdf3+0x3d4>
  807084:	48003026 	beq	r9,zero,807148 <__subdf3+0x30c>
  807088:	0101ffc4 	movi	r4,2047
  80708c:	813f8c26 	beq	r16,r4,806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  807090:	29402034 	orhi	r5,r5,128
  807094:	01000e04 	movi	r4,56
  807098:	2080a90e 	bge	r4,r2,807340 <__subdf3+0x504>
  80709c:	298cb03a 	or	r6,r5,r6
  8070a0:	3012c03a 	cmpne	r9,r6,zero
  8070a4:	0005883a 	mov	r2,zero
  8070a8:	4c53883a 	add	r9,r9,r17
  8070ac:	4c63803a 	cmpltu	r17,r9,r17
  8070b0:	10c7883a 	add	r3,r2,r3
  8070b4:	88c7883a 	add	r3,r17,r3
  8070b8:	4823883a 	mov	r17,r9
  8070bc:	1880202c 	andhi	r2,r3,128
  8070c0:	1000d026 	beq	r2,zero,807404 <__subdf3+0x5c8>
  8070c4:	84000044 	addi	r16,r16,1
  8070c8:	0081ffc4 	movi	r2,2047
  8070cc:	8080fe26 	beq	r16,r2,8074c8 <__subdf3+0x68c>
  8070d0:	00bfe034 	movhi	r2,65408
  8070d4:	10bfffc4 	addi	r2,r2,-1
  8070d8:	1886703a 	and	r3,r3,r2
  8070dc:	880ad07a 	srli	r5,r17,1
  8070e0:	180497fa 	slli	r2,r3,31
  8070e4:	8900004c 	andi	r4,r17,1
  8070e8:	2922b03a 	or	r17,r5,r4
  8070ec:	1806d07a 	srli	r3,r3,1
  8070f0:	1462b03a 	or	r17,r2,r17
  8070f4:	3825883a 	mov	r18,r7
  8070f8:	003f7106 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  8070fc:	2984b03a 	or	r2,r5,r6
  807100:	103f6826 	beq	r2,zero,806ea4 <__alt_mem_onchip_mem+0xff7feea4>
  807104:	39c03fcc 	andi	r7,r7,255
  807108:	003f6706 	br	806ea8 <__alt_mem_onchip_mem+0xff7feea8>
  80710c:	4086b03a 	or	r3,r8,r2
  807110:	18015226 	beq	r3,zero,80765c <__subdf3+0x820>
  807114:	00c00434 	movhi	r3,16
  807118:	41400234 	orhi	r5,r8,8
  80711c:	18ffffc4 	addi	r3,r3,-1
  807120:	28ca703a 	and	r5,r5,r3
  807124:	003f7e06 	br	806f20 <__alt_mem_onchip_mem+0xff7fef20>
  807128:	10bfffc4 	addi	r2,r2,-1
  80712c:	1000491e 	bne	r2,zero,807254 <__subdf3+0x418>
  807130:	898fc83a 	sub	r7,r17,r6
  807134:	89e3803a 	cmpltu	r17,r17,r7
  807138:	1947c83a 	sub	r3,r3,r5
  80713c:	1c47c83a 	sub	r3,r3,r17
  807140:	3823883a 	mov	r17,r7
  807144:	003f9b06 	br	806fb4 <__alt_mem_onchip_mem+0xff7fefb4>
  807148:	2988b03a 	or	r4,r5,r6
  80714c:	203f5c26 	beq	r4,zero,806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  807150:	10bfffc4 	addi	r2,r2,-1
  807154:	1000931e 	bne	r2,zero,8073a4 <__subdf3+0x568>
  807158:	898d883a 	add	r6,r17,r6
  80715c:	3463803a 	cmpltu	r17,r6,r17
  807160:	1947883a 	add	r3,r3,r5
  807164:	88c7883a 	add	r3,r17,r3
  807168:	3023883a 	mov	r17,r6
  80716c:	003fd306 	br	8070bc <__alt_mem_onchip_mem+0xff7ff0bc>
  807170:	1000541e 	bne	r2,zero,8072c4 <__subdf3+0x488>
  807174:	80800044 	addi	r2,r16,1
  807178:	1081ffcc 	andi	r2,r2,2047
  80717c:	01000044 	movi	r4,1
  807180:	2080a20e 	bge	r4,r2,80740c <__subdf3+0x5d0>
  807184:	8989c83a 	sub	r4,r17,r6
  807188:	8905803a 	cmpltu	r2,r17,r4
  80718c:	1967c83a 	sub	r19,r3,r5
  807190:	98a7c83a 	sub	r19,r19,r2
  807194:	9880202c 	andhi	r2,r19,128
  807198:	10006326 	beq	r2,zero,807328 <__subdf3+0x4ec>
  80719c:	3463c83a 	sub	r17,r6,r17
  8071a0:	28c7c83a 	sub	r3,r5,r3
  8071a4:	344d803a 	cmpltu	r6,r6,r17
  8071a8:	19a7c83a 	sub	r19,r3,r6
  8071ac:	3825883a 	mov	r18,r7
  8071b0:	983f861e 	bne	r19,zero,806fcc <__alt_mem_onchip_mem+0xff7fefcc>
  8071b4:	8809883a 	mov	r4,r17
  8071b8:	08078bc0 	call	8078bc <__clzsi2>
  8071bc:	10800804 	addi	r2,r2,32
  8071c0:	113ffe04 	addi	r4,r2,-8
  8071c4:	00c007c4 	movi	r3,31
  8071c8:	193f850e 	bge	r3,r4,806fe0 <__alt_mem_onchip_mem+0xff7fefe0>
  8071cc:	10bff604 	addi	r2,r2,-40
  8071d0:	8884983a 	sll	r2,r17,r2
  8071d4:	0023883a 	mov	r17,zero
  8071d8:	243f880e 	bge	r4,r16,806ffc <__alt_mem_onchip_mem+0xff7feffc>
  8071dc:	00ffe034 	movhi	r3,65408
  8071e0:	18ffffc4 	addi	r3,r3,-1
  8071e4:	8121c83a 	sub	r16,r16,r4
  8071e8:	10c6703a 	and	r3,r2,r3
  8071ec:	003f3406 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  8071f0:	9100004c 	andi	r4,r18,1
  8071f4:	000b883a 	mov	r5,zero
  8071f8:	0005883a 	mov	r2,zero
  8071fc:	003f4806 	br	806f20 <__alt_mem_onchip_mem+0xff7fef20>
  807200:	298cb03a 	or	r6,r5,r6
  807204:	300cc03a 	cmpne	r6,r6,zero
  807208:	0005883a 	mov	r2,zero
  80720c:	003f6406 	br	806fa0 <__alt_mem_onchip_mem+0xff7fefa0>
  807210:	10009a1e 	bne	r2,zero,80747c <__subdf3+0x640>
  807214:	82400044 	addi	r9,r16,1
  807218:	4881ffcc 	andi	r2,r9,2047
  80721c:	02800044 	movi	r10,1
  807220:	5080670e 	bge	r10,r2,8073c0 <__subdf3+0x584>
  807224:	0081ffc4 	movi	r2,2047
  807228:	4880af26 	beq	r9,r2,8074e8 <__subdf3+0x6ac>
  80722c:	898d883a 	add	r6,r17,r6
  807230:	1945883a 	add	r2,r3,r5
  807234:	3447803a 	cmpltu	r3,r6,r17
  807238:	1887883a 	add	r3,r3,r2
  80723c:	182297fa 	slli	r17,r3,31
  807240:	300cd07a 	srli	r6,r6,1
  807244:	1806d07a 	srli	r3,r3,1
  807248:	4821883a 	mov	r16,r9
  80724c:	89a2b03a 	or	r17,r17,r6
  807250:	003f1b06 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  807254:	0101ffc4 	movi	r4,2047
  807258:	813f441e 	bne	r16,r4,806f6c <__alt_mem_onchip_mem+0xff7fef6c>
  80725c:	003f1806 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  807260:	843ff844 	addi	r16,r16,-31
  807264:	01400804 	movi	r5,32
  807268:	1408d83a 	srl	r4,r2,r16
  80726c:	19405026 	beq	r3,r5,8073b0 <__subdf3+0x574>
  807270:	01401004 	movi	r5,64
  807274:	28c7c83a 	sub	r3,r5,r3
  807278:	10c4983a 	sll	r2,r2,r3
  80727c:	88a2b03a 	or	r17,r17,r2
  807280:	8822c03a 	cmpne	r17,r17,zero
  807284:	2462b03a 	or	r17,r4,r17
  807288:	0007883a 	mov	r3,zero
  80728c:	0021883a 	mov	r16,zero
  807290:	003f6d06 	br	807048 <__alt_mem_onchip_mem+0xff7ff048>
  807294:	11fff804 	addi	r7,r2,-32
  807298:	01000804 	movi	r4,32
  80729c:	29ced83a 	srl	r7,r5,r7
  8072a0:	11004526 	beq	r2,r4,8073b8 <__subdf3+0x57c>
  8072a4:	01001004 	movi	r4,64
  8072a8:	2089c83a 	sub	r4,r4,r2
  8072ac:	2904983a 	sll	r2,r5,r4
  8072b0:	118cb03a 	or	r6,r2,r6
  8072b4:	300cc03a 	cmpne	r6,r6,zero
  8072b8:	398cb03a 	or	r6,r7,r6
  8072bc:	0005883a 	mov	r2,zero
  8072c0:	003f3706 	br	806fa0 <__alt_mem_onchip_mem+0xff7fefa0>
  8072c4:	80002a26 	beq	r16,zero,807370 <__subdf3+0x534>
  8072c8:	0101ffc4 	movi	r4,2047
  8072cc:	49006626 	beq	r9,r4,807468 <__subdf3+0x62c>
  8072d0:	0085c83a 	sub	r2,zero,r2
  8072d4:	18c02034 	orhi	r3,r3,128
  8072d8:	01000e04 	movi	r4,56
  8072dc:	20807e16 	blt	r4,r2,8074d8 <__subdf3+0x69c>
  8072e0:	010007c4 	movi	r4,31
  8072e4:	2080e716 	blt	r4,r2,807684 <__subdf3+0x848>
  8072e8:	01000804 	movi	r4,32
  8072ec:	2089c83a 	sub	r4,r4,r2
  8072f0:	1914983a 	sll	r10,r3,r4
  8072f4:	8890d83a 	srl	r8,r17,r2
  8072f8:	8908983a 	sll	r4,r17,r4
  8072fc:	1884d83a 	srl	r2,r3,r2
  807300:	5222b03a 	or	r17,r10,r8
  807304:	2006c03a 	cmpne	r3,r4,zero
  807308:	88e2b03a 	or	r17,r17,r3
  80730c:	3463c83a 	sub	r17,r6,r17
  807310:	2885c83a 	sub	r2,r5,r2
  807314:	344d803a 	cmpltu	r6,r6,r17
  807318:	1187c83a 	sub	r3,r2,r6
  80731c:	4821883a 	mov	r16,r9
  807320:	3825883a 	mov	r18,r7
  807324:	003f2306 	br	806fb4 <__alt_mem_onchip_mem+0xff7fefb4>
  807328:	24d0b03a 	or	r8,r4,r19
  80732c:	40001b1e 	bne	r8,zero,80739c <__subdf3+0x560>
  807330:	0005883a 	mov	r2,zero
  807334:	0009883a 	mov	r4,zero
  807338:	0021883a 	mov	r16,zero
  80733c:	003f4906 	br	807064 <__alt_mem_onchip_mem+0xff7ff064>
  807340:	010007c4 	movi	r4,31
  807344:	20803a16 	blt	r4,r2,807430 <__subdf3+0x5f4>
  807348:	01000804 	movi	r4,32
  80734c:	2089c83a 	sub	r4,r4,r2
  807350:	2912983a 	sll	r9,r5,r4
  807354:	3090d83a 	srl	r8,r6,r2
  807358:	3108983a 	sll	r4,r6,r4
  80735c:	2884d83a 	srl	r2,r5,r2
  807360:	4a12b03a 	or	r9,r9,r8
  807364:	2008c03a 	cmpne	r4,r4,zero
  807368:	4912b03a 	or	r9,r9,r4
  80736c:	003f4e06 	br	8070a8 <__alt_mem_onchip_mem+0xff7ff0a8>
  807370:	1c48b03a 	or	r4,r3,r17
  807374:	20003c26 	beq	r4,zero,807468 <__subdf3+0x62c>
  807378:	0084303a 	nor	r2,zero,r2
  80737c:	1000381e 	bne	r2,zero,807460 <__subdf3+0x624>
  807380:	3463c83a 	sub	r17,r6,r17
  807384:	28c5c83a 	sub	r2,r5,r3
  807388:	344d803a 	cmpltu	r6,r6,r17
  80738c:	1187c83a 	sub	r3,r2,r6
  807390:	4821883a 	mov	r16,r9
  807394:	3825883a 	mov	r18,r7
  807398:	003f0606 	br	806fb4 <__alt_mem_onchip_mem+0xff7fefb4>
  80739c:	2023883a 	mov	r17,r4
  8073a0:	003f0906 	br	806fc8 <__alt_mem_onchip_mem+0xff7fefc8>
  8073a4:	0101ffc4 	movi	r4,2047
  8073a8:	813f3a1e 	bne	r16,r4,807094 <__alt_mem_onchip_mem+0xff7ff094>
  8073ac:	003ec406 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  8073b0:	0005883a 	mov	r2,zero
  8073b4:	003fb106 	br	80727c <__alt_mem_onchip_mem+0xff7ff27c>
  8073b8:	0005883a 	mov	r2,zero
  8073bc:	003fbc06 	br	8072b0 <__alt_mem_onchip_mem+0xff7ff2b0>
  8073c0:	1c44b03a 	or	r2,r3,r17
  8073c4:	80008e1e 	bne	r16,zero,807600 <__subdf3+0x7c4>
  8073c8:	1000c826 	beq	r2,zero,8076ec <__subdf3+0x8b0>
  8073cc:	2984b03a 	or	r2,r5,r6
  8073d0:	103ebb26 	beq	r2,zero,806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  8073d4:	8989883a 	add	r4,r17,r6
  8073d8:	1945883a 	add	r2,r3,r5
  8073dc:	2447803a 	cmpltu	r3,r4,r17
  8073e0:	1887883a 	add	r3,r3,r2
  8073e4:	1880202c 	andhi	r2,r3,128
  8073e8:	2023883a 	mov	r17,r4
  8073ec:	103f1626 	beq	r2,zero,807048 <__alt_mem_onchip_mem+0xff7ff048>
  8073f0:	00bfe034 	movhi	r2,65408
  8073f4:	10bfffc4 	addi	r2,r2,-1
  8073f8:	5021883a 	mov	r16,r10
  8073fc:	1886703a 	and	r3,r3,r2
  807400:	003eaf06 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  807404:	3825883a 	mov	r18,r7
  807408:	003f0f06 	br	807048 <__alt_mem_onchip_mem+0xff7ff048>
  80740c:	1c44b03a 	or	r2,r3,r17
  807410:	8000251e 	bne	r16,zero,8074a8 <__subdf3+0x66c>
  807414:	1000661e 	bne	r2,zero,8075b0 <__subdf3+0x774>
  807418:	2990b03a 	or	r8,r5,r6
  80741c:	40009626 	beq	r8,zero,807678 <__subdf3+0x83c>
  807420:	2807883a 	mov	r3,r5
  807424:	3023883a 	mov	r17,r6
  807428:	3825883a 	mov	r18,r7
  80742c:	003ea406 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  807430:	127ff804 	addi	r9,r2,-32
  807434:	01000804 	movi	r4,32
  807438:	2a52d83a 	srl	r9,r5,r9
  80743c:	11008c26 	beq	r2,r4,807670 <__subdf3+0x834>
  807440:	01001004 	movi	r4,64
  807444:	2085c83a 	sub	r2,r4,r2
  807448:	2884983a 	sll	r2,r5,r2
  80744c:	118cb03a 	or	r6,r2,r6
  807450:	300cc03a 	cmpne	r6,r6,zero
  807454:	4992b03a 	or	r9,r9,r6
  807458:	0005883a 	mov	r2,zero
  80745c:	003f1206 	br	8070a8 <__alt_mem_onchip_mem+0xff7ff0a8>
  807460:	0101ffc4 	movi	r4,2047
  807464:	493f9c1e 	bne	r9,r4,8072d8 <__alt_mem_onchip_mem+0xff7ff2d8>
  807468:	2807883a 	mov	r3,r5
  80746c:	3023883a 	mov	r17,r6
  807470:	4821883a 	mov	r16,r9
  807474:	3825883a 	mov	r18,r7
  807478:	003e9106 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  80747c:	80001f1e 	bne	r16,zero,8074fc <__subdf3+0x6c0>
  807480:	1c48b03a 	or	r4,r3,r17
  807484:	20005a26 	beq	r4,zero,8075f0 <__subdf3+0x7b4>
  807488:	0084303a 	nor	r2,zero,r2
  80748c:	1000561e 	bne	r2,zero,8075e8 <__subdf3+0x7ac>
  807490:	89a3883a 	add	r17,r17,r6
  807494:	1945883a 	add	r2,r3,r5
  807498:	898d803a 	cmpltu	r6,r17,r6
  80749c:	3087883a 	add	r3,r6,r2
  8074a0:	4821883a 	mov	r16,r9
  8074a4:	003f0506 	br	8070bc <__alt_mem_onchip_mem+0xff7ff0bc>
  8074a8:	10002b1e 	bne	r2,zero,807558 <__subdf3+0x71c>
  8074ac:	2984b03a 	or	r2,r5,r6
  8074b0:	10008026 	beq	r2,zero,8076b4 <__subdf3+0x878>
  8074b4:	2807883a 	mov	r3,r5
  8074b8:	3023883a 	mov	r17,r6
  8074bc:	3825883a 	mov	r18,r7
  8074c0:	0401ffc4 	movi	r16,2047
  8074c4:	003e7e06 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  8074c8:	3809883a 	mov	r4,r7
  8074cc:	0011883a 	mov	r8,zero
  8074d0:	0005883a 	mov	r2,zero
  8074d4:	003ee306 	br	807064 <__alt_mem_onchip_mem+0xff7ff064>
  8074d8:	1c62b03a 	or	r17,r3,r17
  8074dc:	8822c03a 	cmpne	r17,r17,zero
  8074e0:	0005883a 	mov	r2,zero
  8074e4:	003f8906 	br	80730c <__alt_mem_onchip_mem+0xff7ff30c>
  8074e8:	3809883a 	mov	r4,r7
  8074ec:	4821883a 	mov	r16,r9
  8074f0:	0011883a 	mov	r8,zero
  8074f4:	0005883a 	mov	r2,zero
  8074f8:	003eda06 	br	807064 <__alt_mem_onchip_mem+0xff7ff064>
  8074fc:	0101ffc4 	movi	r4,2047
  807500:	49003b26 	beq	r9,r4,8075f0 <__subdf3+0x7b4>
  807504:	0085c83a 	sub	r2,zero,r2
  807508:	18c02034 	orhi	r3,r3,128
  80750c:	01000e04 	movi	r4,56
  807510:	20806e16 	blt	r4,r2,8076cc <__subdf3+0x890>
  807514:	010007c4 	movi	r4,31
  807518:	20807716 	blt	r4,r2,8076f8 <__subdf3+0x8bc>
  80751c:	01000804 	movi	r4,32
  807520:	2089c83a 	sub	r4,r4,r2
  807524:	1914983a 	sll	r10,r3,r4
  807528:	8890d83a 	srl	r8,r17,r2
  80752c:	8908983a 	sll	r4,r17,r4
  807530:	1884d83a 	srl	r2,r3,r2
  807534:	5222b03a 	or	r17,r10,r8
  807538:	2006c03a 	cmpne	r3,r4,zero
  80753c:	88e2b03a 	or	r17,r17,r3
  807540:	89a3883a 	add	r17,r17,r6
  807544:	1145883a 	add	r2,r2,r5
  807548:	898d803a 	cmpltu	r6,r17,r6
  80754c:	3087883a 	add	r3,r6,r2
  807550:	4821883a 	mov	r16,r9
  807554:	003ed906 	br	8070bc <__alt_mem_onchip_mem+0xff7ff0bc>
  807558:	2984b03a 	or	r2,r5,r6
  80755c:	10004226 	beq	r2,zero,807668 <__subdf3+0x82c>
  807560:	1808d0fa 	srli	r4,r3,3
  807564:	8822d0fa 	srli	r17,r17,3
  807568:	1806977a 	slli	r3,r3,29
  80756c:	2080022c 	andhi	r2,r4,8
  807570:	1c62b03a 	or	r17,r3,r17
  807574:	10000826 	beq	r2,zero,807598 <__subdf3+0x75c>
  807578:	2812d0fa 	srli	r9,r5,3
  80757c:	4880022c 	andhi	r2,r9,8
  807580:	1000051e 	bne	r2,zero,807598 <__subdf3+0x75c>
  807584:	300cd0fa 	srli	r6,r6,3
  807588:	2804977a 	slli	r2,r5,29
  80758c:	4809883a 	mov	r4,r9
  807590:	3825883a 	mov	r18,r7
  807594:	11a2b03a 	or	r17,r2,r6
  807598:	8806d77a 	srli	r3,r17,29
  80759c:	200890fa 	slli	r4,r4,3
  8075a0:	882290fa 	slli	r17,r17,3
  8075a4:	0401ffc4 	movi	r16,2047
  8075a8:	1906b03a 	or	r3,r3,r4
  8075ac:	003e4406 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  8075b0:	2984b03a 	or	r2,r5,r6
  8075b4:	103e4226 	beq	r2,zero,806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  8075b8:	8989c83a 	sub	r4,r17,r6
  8075bc:	8911803a 	cmpltu	r8,r17,r4
  8075c0:	1945c83a 	sub	r2,r3,r5
  8075c4:	1205c83a 	sub	r2,r2,r8
  8075c8:	1200202c 	andhi	r8,r2,128
  8075cc:	403e9a26 	beq	r8,zero,807038 <__alt_mem_onchip_mem+0xff7ff038>
  8075d0:	3463c83a 	sub	r17,r6,r17
  8075d4:	28c5c83a 	sub	r2,r5,r3
  8075d8:	344d803a 	cmpltu	r6,r6,r17
  8075dc:	1187c83a 	sub	r3,r2,r6
  8075e0:	3825883a 	mov	r18,r7
  8075e4:	003e3606 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  8075e8:	0101ffc4 	movi	r4,2047
  8075ec:	493fc71e 	bne	r9,r4,80750c <__alt_mem_onchip_mem+0xff7ff50c>
  8075f0:	2807883a 	mov	r3,r5
  8075f4:	3023883a 	mov	r17,r6
  8075f8:	4821883a 	mov	r16,r9
  8075fc:	003e3006 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  807600:	10003626 	beq	r2,zero,8076dc <__subdf3+0x8a0>
  807604:	2984b03a 	or	r2,r5,r6
  807608:	10001726 	beq	r2,zero,807668 <__subdf3+0x82c>
  80760c:	1808d0fa 	srli	r4,r3,3
  807610:	8822d0fa 	srli	r17,r17,3
  807614:	1806977a 	slli	r3,r3,29
  807618:	2080022c 	andhi	r2,r4,8
  80761c:	1c62b03a 	or	r17,r3,r17
  807620:	10000726 	beq	r2,zero,807640 <__subdf3+0x804>
  807624:	2812d0fa 	srli	r9,r5,3
  807628:	4880022c 	andhi	r2,r9,8
  80762c:	1000041e 	bne	r2,zero,807640 <__subdf3+0x804>
  807630:	300cd0fa 	srli	r6,r6,3
  807634:	2804977a 	slli	r2,r5,29
  807638:	4809883a 	mov	r4,r9
  80763c:	11a2b03a 	or	r17,r2,r6
  807640:	8806d77a 	srli	r3,r17,29
  807644:	200890fa 	slli	r4,r4,3
  807648:	882290fa 	slli	r17,r17,3
  80764c:	3825883a 	mov	r18,r7
  807650:	1906b03a 	or	r3,r3,r4
  807654:	0401ffc4 	movi	r16,2047
  807658:	003e1906 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  80765c:	000b883a 	mov	r5,zero
  807660:	0005883a 	mov	r2,zero
  807664:	003e2e06 	br	806f20 <__alt_mem_onchip_mem+0xff7fef20>
  807668:	0401ffc4 	movi	r16,2047
  80766c:	003e1406 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  807670:	0005883a 	mov	r2,zero
  807674:	003f7506 	br	80744c <__alt_mem_onchip_mem+0xff7ff44c>
  807678:	0005883a 	mov	r2,zero
  80767c:	0009883a 	mov	r4,zero
  807680:	003e7806 	br	807064 <__alt_mem_onchip_mem+0xff7ff064>
  807684:	123ff804 	addi	r8,r2,-32
  807688:	01000804 	movi	r4,32
  80768c:	1a10d83a 	srl	r8,r3,r8
  807690:	11002526 	beq	r2,r4,807728 <__subdf3+0x8ec>
  807694:	01001004 	movi	r4,64
  807698:	2085c83a 	sub	r2,r4,r2
  80769c:	1884983a 	sll	r2,r3,r2
  8076a0:	1444b03a 	or	r2,r2,r17
  8076a4:	1004c03a 	cmpne	r2,r2,zero
  8076a8:	40a2b03a 	or	r17,r8,r2
  8076ac:	0005883a 	mov	r2,zero
  8076b0:	003f1606 	br	80730c <__alt_mem_onchip_mem+0xff7ff30c>
  8076b4:	02000434 	movhi	r8,16
  8076b8:	0009883a 	mov	r4,zero
  8076bc:	423fffc4 	addi	r8,r8,-1
  8076c0:	00bfffc4 	movi	r2,-1
  8076c4:	0401ffc4 	movi	r16,2047
  8076c8:	003e6606 	br	807064 <__alt_mem_onchip_mem+0xff7ff064>
  8076cc:	1c62b03a 	or	r17,r3,r17
  8076d0:	8822c03a 	cmpne	r17,r17,zero
  8076d4:	0005883a 	mov	r2,zero
  8076d8:	003f9906 	br	807540 <__alt_mem_onchip_mem+0xff7ff540>
  8076dc:	2807883a 	mov	r3,r5
  8076e0:	3023883a 	mov	r17,r6
  8076e4:	0401ffc4 	movi	r16,2047
  8076e8:	003df506 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  8076ec:	2807883a 	mov	r3,r5
  8076f0:	3023883a 	mov	r17,r6
  8076f4:	003df206 	br	806ec0 <__alt_mem_onchip_mem+0xff7feec0>
  8076f8:	123ff804 	addi	r8,r2,-32
  8076fc:	01000804 	movi	r4,32
  807700:	1a10d83a 	srl	r8,r3,r8
  807704:	11000a26 	beq	r2,r4,807730 <__subdf3+0x8f4>
  807708:	01001004 	movi	r4,64
  80770c:	2085c83a 	sub	r2,r4,r2
  807710:	1884983a 	sll	r2,r3,r2
  807714:	1444b03a 	or	r2,r2,r17
  807718:	1004c03a 	cmpne	r2,r2,zero
  80771c:	40a2b03a 	or	r17,r8,r2
  807720:	0005883a 	mov	r2,zero
  807724:	003f8606 	br	807540 <__alt_mem_onchip_mem+0xff7ff540>
  807728:	0005883a 	mov	r2,zero
  80772c:	003fdc06 	br	8076a0 <__alt_mem_onchip_mem+0xff7ff6a0>
  807730:	0005883a 	mov	r2,zero
  807734:	003ff706 	br	807714 <__alt_mem_onchip_mem+0xff7ff714>

00807738 <__floatsidf>:
  807738:	defffd04 	addi	sp,sp,-12
  80773c:	dfc00215 	stw	ra,8(sp)
  807740:	dc400115 	stw	r17,4(sp)
  807744:	dc000015 	stw	r16,0(sp)
  807748:	20002b26 	beq	r4,zero,8077f8 <__floatsidf+0xc0>
  80774c:	2023883a 	mov	r17,r4
  807750:	2020d7fa 	srli	r16,r4,31
  807754:	20002d16 	blt	r4,zero,80780c <__floatsidf+0xd4>
  807758:	8809883a 	mov	r4,r17
  80775c:	08078bc0 	call	8078bc <__clzsi2>
  807760:	01410784 	movi	r5,1054
  807764:	288bc83a 	sub	r5,r5,r2
  807768:	01010cc4 	movi	r4,1075
  80776c:	2149c83a 	sub	r4,r4,r5
  807770:	00c007c4 	movi	r3,31
  807774:	1900160e 	bge	r3,r4,8077d0 <__floatsidf+0x98>
  807778:	00c104c4 	movi	r3,1043
  80777c:	1947c83a 	sub	r3,r3,r5
  807780:	88c6983a 	sll	r3,r17,r3
  807784:	00800434 	movhi	r2,16
  807788:	10bfffc4 	addi	r2,r2,-1
  80778c:	1886703a 	and	r3,r3,r2
  807790:	2941ffcc 	andi	r5,r5,2047
  807794:	800d883a 	mov	r6,r16
  807798:	0005883a 	mov	r2,zero
  80779c:	280a953a 	slli	r5,r5,20
  8077a0:	31803fcc 	andi	r6,r6,255
  8077a4:	01000434 	movhi	r4,16
  8077a8:	300c97fa 	slli	r6,r6,31
  8077ac:	213fffc4 	addi	r4,r4,-1
  8077b0:	1906703a 	and	r3,r3,r4
  8077b4:	1946b03a 	or	r3,r3,r5
  8077b8:	1986b03a 	or	r3,r3,r6
  8077bc:	dfc00217 	ldw	ra,8(sp)
  8077c0:	dc400117 	ldw	r17,4(sp)
  8077c4:	dc000017 	ldw	r16,0(sp)
  8077c8:	dec00304 	addi	sp,sp,12
  8077cc:	f800283a 	ret
  8077d0:	00c002c4 	movi	r3,11
  8077d4:	1887c83a 	sub	r3,r3,r2
  8077d8:	88c6d83a 	srl	r3,r17,r3
  8077dc:	8904983a 	sll	r2,r17,r4
  8077e0:	01000434 	movhi	r4,16
  8077e4:	213fffc4 	addi	r4,r4,-1
  8077e8:	2941ffcc 	andi	r5,r5,2047
  8077ec:	1906703a 	and	r3,r3,r4
  8077f0:	800d883a 	mov	r6,r16
  8077f4:	003fe906 	br	80779c <__alt_mem_onchip_mem+0xff7ff79c>
  8077f8:	000d883a 	mov	r6,zero
  8077fc:	000b883a 	mov	r5,zero
  807800:	0007883a 	mov	r3,zero
  807804:	0005883a 	mov	r2,zero
  807808:	003fe406 	br	80779c <__alt_mem_onchip_mem+0xff7ff79c>
  80780c:	0123c83a 	sub	r17,zero,r4
  807810:	003fd106 	br	807758 <__alt_mem_onchip_mem+0xff7ff758>

00807814 <__floatunsidf>:
  807814:	defffe04 	addi	sp,sp,-8
  807818:	dc000015 	stw	r16,0(sp)
  80781c:	dfc00115 	stw	ra,4(sp)
  807820:	2021883a 	mov	r16,r4
  807824:	20002226 	beq	r4,zero,8078b0 <__floatunsidf+0x9c>
  807828:	08078bc0 	call	8078bc <__clzsi2>
  80782c:	01010784 	movi	r4,1054
  807830:	2089c83a 	sub	r4,r4,r2
  807834:	01810cc4 	movi	r6,1075
  807838:	310dc83a 	sub	r6,r6,r4
  80783c:	00c007c4 	movi	r3,31
  807840:	1980120e 	bge	r3,r6,80788c <__floatunsidf+0x78>
  807844:	00c104c4 	movi	r3,1043
  807848:	1907c83a 	sub	r3,r3,r4
  80784c:	80ca983a 	sll	r5,r16,r3
  807850:	00800434 	movhi	r2,16
  807854:	10bfffc4 	addi	r2,r2,-1
  807858:	2101ffcc 	andi	r4,r4,2047
  80785c:	0021883a 	mov	r16,zero
  807860:	288a703a 	and	r5,r5,r2
  807864:	2008953a 	slli	r4,r4,20
  807868:	00c00434 	movhi	r3,16
  80786c:	18ffffc4 	addi	r3,r3,-1
  807870:	28c6703a 	and	r3,r5,r3
  807874:	8005883a 	mov	r2,r16
  807878:	1906b03a 	or	r3,r3,r4
  80787c:	dfc00117 	ldw	ra,4(sp)
  807880:	dc000017 	ldw	r16,0(sp)
  807884:	dec00204 	addi	sp,sp,8
  807888:	f800283a 	ret
  80788c:	00c002c4 	movi	r3,11
  807890:	188bc83a 	sub	r5,r3,r2
  807894:	814ad83a 	srl	r5,r16,r5
  807898:	00c00434 	movhi	r3,16
  80789c:	18ffffc4 	addi	r3,r3,-1
  8078a0:	81a0983a 	sll	r16,r16,r6
  8078a4:	2101ffcc 	andi	r4,r4,2047
  8078a8:	28ca703a 	and	r5,r5,r3
  8078ac:	003fed06 	br	807864 <__alt_mem_onchip_mem+0xff7ff864>
  8078b0:	0009883a 	mov	r4,zero
  8078b4:	000b883a 	mov	r5,zero
  8078b8:	003fea06 	br	807864 <__alt_mem_onchip_mem+0xff7ff864>

008078bc <__clzsi2>:
  8078bc:	00bfffd4 	movui	r2,65535
  8078c0:	11000536 	bltu	r2,r4,8078d8 <__clzsi2+0x1c>
  8078c4:	00803fc4 	movi	r2,255
  8078c8:	11000f36 	bltu	r2,r4,807908 <__clzsi2+0x4c>
  8078cc:	00800804 	movi	r2,32
  8078d0:	0007883a 	mov	r3,zero
  8078d4:	00000506 	br	8078ec <__clzsi2+0x30>
  8078d8:	00804034 	movhi	r2,256
  8078dc:	10bfffc4 	addi	r2,r2,-1
  8078e0:	11000c2e 	bgeu	r2,r4,807914 <__clzsi2+0x58>
  8078e4:	00800204 	movi	r2,8
  8078e8:	00c00604 	movi	r3,24
  8078ec:	20c8d83a 	srl	r4,r4,r3
  8078f0:	00c02074 	movhi	r3,129
  8078f4:	18fc9c84 	addi	r3,r3,-3470
  8078f8:	1909883a 	add	r4,r3,r4
  8078fc:	20c00003 	ldbu	r3,0(r4)
  807900:	10c5c83a 	sub	r2,r2,r3
  807904:	f800283a 	ret
  807908:	00800604 	movi	r2,24
  80790c:	00c00204 	movi	r3,8
  807910:	003ff606 	br	8078ec <__alt_mem_onchip_mem+0xff7ff8ec>
  807914:	00800404 	movi	r2,16
  807918:	1007883a 	mov	r3,r2
  80791c:	003ff306 	br	8078ec <__alt_mem_onchip_mem+0xff7ff8ec>

00807920 <_fopen_r>:
  807920:	defffa04 	addi	sp,sp,-24
  807924:	3005883a 	mov	r2,r6
  807928:	dcc00415 	stw	r19,16(sp)
  80792c:	d80d883a 	mov	r6,sp
  807930:	2827883a 	mov	r19,r5
  807934:	100b883a 	mov	r5,r2
  807938:	dc800315 	stw	r18,12(sp)
  80793c:	dfc00515 	stw	ra,20(sp)
  807940:	dc400215 	stw	r17,8(sp)
  807944:	dc000115 	stw	r16,4(sp)
  807948:	2025883a 	mov	r18,r4
  80794c:	08096400 	call	809640 <__sflags>
  807950:	10002726 	beq	r2,zero,8079f0 <_fopen_r+0xd0>
  807954:	9009883a 	mov	r4,r18
  807958:	1023883a 	mov	r17,r2
  80795c:	08094c00 	call	8094c0 <__sfp>
  807960:	1021883a 	mov	r16,r2
  807964:	10002226 	beq	r2,zero,8079f0 <_fopen_r+0xd0>
  807968:	d9800017 	ldw	r6,0(sp)
  80796c:	01c06d84 	movi	r7,438
  807970:	980b883a 	mov	r5,r19
  807974:	9009883a 	mov	r4,r18
  807978:	08089f80 	call	8089f8 <_open_r>
  80797c:	10001916 	blt	r2,zero,8079e4 <_fopen_r+0xc4>
  807980:	8080038d 	sth	r2,14(r16)
  807984:	00802074 	movhi	r2,129
  807988:	10a35c04 	addi	r2,r2,-29328
  80798c:	80800815 	stw	r2,32(r16)
  807990:	00802074 	movhi	r2,129
  807994:	10a37304 	addi	r2,r2,-29236
  807998:	80800915 	stw	r2,36(r16)
  80799c:	00802074 	movhi	r2,129
  8079a0:	10a39204 	addi	r2,r2,-29112
  8079a4:	80800a15 	stw	r2,40(r16)
  8079a8:	00802074 	movhi	r2,129
  8079ac:	10a3a904 	addi	r2,r2,-29020
  8079b0:	8440030d 	sth	r17,12(r16)
  8079b4:	84000715 	stw	r16,28(r16)
  8079b8:	80800b15 	stw	r2,44(r16)
  8079bc:	8c40400c 	andi	r17,r17,256
  8079c0:	88000d1e 	bne	r17,zero,8079f8 <_fopen_r+0xd8>
  8079c4:	8005883a 	mov	r2,r16
  8079c8:	dfc00517 	ldw	ra,20(sp)
  8079cc:	dcc00417 	ldw	r19,16(sp)
  8079d0:	dc800317 	ldw	r18,12(sp)
  8079d4:	dc400217 	ldw	r17,8(sp)
  8079d8:	dc000117 	ldw	r16,4(sp)
  8079dc:	dec00604 	addi	sp,sp,24
  8079e0:	f800283a 	ret
  8079e4:	08096000 	call	809600 <__sfp_lock_acquire>
  8079e8:	8000030d 	sth	zero,12(r16)
  8079ec:	08096040 	call	809604 <__sfp_lock_release>
  8079f0:	0005883a 	mov	r2,zero
  8079f4:	003ff406 	br	8079c8 <__alt_mem_onchip_mem+0xff7ff9c8>
  8079f8:	01c00084 	movi	r7,2
  8079fc:	000d883a 	mov	r6,zero
  807a00:	800b883a 	mov	r5,r16
  807a04:	9009883a 	mov	r4,r18
  807a08:	0807a2c0 	call	807a2c <_fseek_r>
  807a0c:	8005883a 	mov	r2,r16
  807a10:	003fed06 	br	8079c8 <__alt_mem_onchip_mem+0xff7ff9c8>

00807a14 <fopen>:
  807a14:	00802074 	movhi	r2,129
  807a18:	10849704 	addi	r2,r2,4700
  807a1c:	280d883a 	mov	r6,r5
  807a20:	200b883a 	mov	r5,r4
  807a24:	11000017 	ldw	r4,0(r2)
  807a28:	08079201 	jmpi	807920 <_fopen_r>

00807a2c <_fseek_r>:
  807a2c:	0807a4c1 	jmpi	807a4c <_fseeko_r>

00807a30 <fseek>:
  807a30:	00802074 	movhi	r2,129
  807a34:	10849704 	addi	r2,r2,4700
  807a38:	300f883a 	mov	r7,r6
  807a3c:	280d883a 	mov	r6,r5
  807a40:	200b883a 	mov	r5,r4
  807a44:	11000017 	ldw	r4,0(r2)
  807a48:	0807a4c1 	jmpi	807a4c <_fseeko_r>

00807a4c <_fseeko_r>:
  807a4c:	deffe804 	addi	sp,sp,-96
  807a50:	dd401415 	stw	r21,80(sp)
  807a54:	dc801115 	stw	r18,68(sp)
  807a58:	dc401015 	stw	r17,64(sp)
  807a5c:	dc000f15 	stw	r16,60(sp)
  807a60:	dfc01715 	stw	ra,92(sp)
  807a64:	ddc01615 	stw	r23,88(sp)
  807a68:	dd801515 	stw	r22,84(sp)
  807a6c:	dd001315 	stw	r20,76(sp)
  807a70:	dcc01215 	stw	r19,72(sp)
  807a74:	2023883a 	mov	r17,r4
  807a78:	2821883a 	mov	r16,r5
  807a7c:	302b883a 	mov	r21,r6
  807a80:	3825883a 	mov	r18,r7
  807a84:	20000226 	beq	r4,zero,807a90 <_fseeko_r+0x44>
  807a88:	20800e17 	ldw	r2,56(r4)
  807a8c:	10005a26 	beq	r2,zero,807bf8 <_fseeko_r+0x1ac>
  807a90:	8080030b 	ldhu	r2,12(r16)
  807a94:	00c04204 	movi	r3,264
  807a98:	1080420c 	andi	r2,r2,264
  807a9c:	10c05b26 	beq	r2,r3,807c0c <_fseeko_r+0x1c0>
  807aa0:	85000a17 	ldw	r20,40(r16)
  807aa4:	a000f626 	beq	r20,zero,807e80 <_fseeko_r+0x434>
  807aa8:	00800044 	movi	r2,1
  807aac:	90803e26 	beq	r18,r2,807ba8 <_fseeko_r+0x15c>
  807ab0:	00800084 	movi	r2,2
  807ab4:	90801026 	beq	r18,r2,807af8 <_fseeko_r+0xac>
  807ab8:	90000f26 	beq	r18,zero,807af8 <_fseeko_r+0xac>
  807abc:	00800584 	movi	r2,22
  807ac0:	88800015 	stw	r2,0(r17)
  807ac4:	04ffffc4 	movi	r19,-1
  807ac8:	9805883a 	mov	r2,r19
  807acc:	dfc01717 	ldw	ra,92(sp)
  807ad0:	ddc01617 	ldw	r23,88(sp)
  807ad4:	dd801517 	ldw	r22,84(sp)
  807ad8:	dd401417 	ldw	r21,80(sp)
  807adc:	dd001317 	ldw	r20,76(sp)
  807ae0:	dcc01217 	ldw	r19,72(sp)
  807ae4:	dc801117 	ldw	r18,68(sp)
  807ae8:	dc401017 	ldw	r17,64(sp)
  807aec:	dc000f17 	ldw	r16,60(sp)
  807af0:	dec01804 	addi	sp,sp,96
  807af4:	f800283a 	ret
  807af8:	80800417 	ldw	r2,16(r16)
  807afc:	002f883a 	mov	r23,zero
  807b00:	0027883a 	mov	r19,zero
  807b04:	1000cb26 	beq	r2,zero,807e34 <_fseeko_r+0x3e8>
  807b08:	8080030b 	ldhu	r2,12(r16)
  807b0c:	10c2068c 	andi	r3,r2,2074
  807b10:	1800071e 	bne	r3,zero,807b30 <_fseeko_r+0xe4>
  807b14:	10c1000c 	andi	r3,r2,1024
  807b18:	1800451e 	bne	r3,zero,807c30 <_fseeko_r+0x1e4>
  807b1c:	00c02074 	movhi	r3,129
  807b20:	18e39204 	addi	r3,r3,-29112
  807b24:	a0c0b726 	beq	r20,r3,807e04 <_fseeko_r+0x3b8>
  807b28:	10820014 	ori	r2,r2,2048
  807b2c:	8080030d 	sth	r2,12(r16)
  807b30:	800b883a 	mov	r5,r16
  807b34:	8809883a 	mov	r4,r17
  807b38:	08092140 	call	809214 <_fflush_r>
  807b3c:	1027883a 	mov	r19,r2
  807b40:	103fe01e 	bne	r2,zero,807ac4 <__alt_mem_onchip_mem+0xff7ffac4>
  807b44:	81400717 	ldw	r5,28(r16)
  807b48:	900f883a 	mov	r7,r18
  807b4c:	a80d883a 	mov	r6,r21
  807b50:	8809883a 	mov	r4,r17
  807b54:	a03ee83a 	callr	r20
  807b58:	00ffffc4 	movi	r3,-1
  807b5c:	10ffd926 	beq	r2,r3,807ac4 <__alt_mem_onchip_mem+0xff7ffac4>
  807b60:	81400c17 	ldw	r5,48(r16)
  807b64:	28000526 	beq	r5,zero,807b7c <_fseeko_r+0x130>
  807b68:	80801004 	addi	r2,r16,64
  807b6c:	28800226 	beq	r5,r2,807b78 <_fseeko_r+0x12c>
  807b70:	8809883a 	mov	r4,r17
  807b74:	08098100 	call	809810 <_free_r>
  807b78:	80000c15 	stw	zero,48(r16)
  807b7c:	8080030b 	ldhu	r2,12(r16)
  807b80:	80c00417 	ldw	r3,16(r16)
  807b84:	80000115 	stw	zero,4(r16)
  807b88:	10bdf7cc 	andi	r2,r2,63455
  807b8c:	80c00015 	stw	r3,0(r16)
  807b90:	8080030d 	sth	r2,12(r16)
  807b94:	01800204 	movi	r6,8
  807b98:	000b883a 	mov	r5,zero
  807b9c:	81001704 	addi	r4,r16,92
  807ba0:	08088d00 	call	8088d0 <memset>
  807ba4:	003fc806 	br	807ac8 <__alt_mem_onchip_mem+0xff7ffac8>
  807ba8:	800b883a 	mov	r5,r16
  807bac:	8809883a 	mov	r4,r17
  807bb0:	08092140 	call	809214 <_fflush_r>
  807bb4:	8080030b 	ldhu	r2,12(r16)
  807bb8:	10c4000c 	andi	r3,r2,4096
  807bbc:	18008726 	beq	r3,zero,807ddc <_fseeko_r+0x390>
  807bc0:	84c01417 	ldw	r19,80(r16)
  807bc4:	10c0010c 	andi	r3,r2,4
  807bc8:	1800431e 	bne	r3,zero,807cd8 <_fseeko_r+0x28c>
  807bcc:	1080020c 	andi	r2,r2,8
  807bd0:	10008026 	beq	r2,zero,807dd4 <_fseeko_r+0x388>
  807bd4:	80c00017 	ldw	r3,0(r16)
  807bd8:	80800417 	ldw	r2,16(r16)
  807bdc:	18000226 	beq	r3,zero,807be8 <_fseeko_r+0x19c>
  807be0:	1887c83a 	sub	r3,r3,r2
  807be4:	98e7883a 	add	r19,r19,r3
  807be8:	aceb883a 	add	r21,r21,r19
  807bec:	05c00044 	movi	r23,1
  807bf0:	0025883a 	mov	r18,zero
  807bf4:	003fc306 	br	807b04 <__alt_mem_onchip_mem+0xff7ffb04>
  807bf8:	08095f00 	call	8095f0 <__sinit>
  807bfc:	8080030b 	ldhu	r2,12(r16)
  807c00:	00c04204 	movi	r3,264
  807c04:	1080420c 	andi	r2,r2,264
  807c08:	10ffa51e 	bne	r2,r3,807aa0 <__alt_mem_onchip_mem+0xff7ffaa0>
  807c0c:	800b883a 	mov	r5,r16
  807c10:	8809883a 	mov	r4,r17
  807c14:	08092140 	call	809214 <_fflush_r>
  807c18:	003fa106 	br	807aa0 <__alt_mem_onchip_mem+0xff7ffaa0>
  807c1c:	8080030b 	ldhu	r2,12(r16)
  807c20:	00c10004 	movi	r3,1024
  807c24:	80c01315 	stw	r3,76(r16)
  807c28:	10c4b03a 	or	r2,r2,r3
  807c2c:	8080030d 	sth	r2,12(r16)
  807c30:	9000311e 	bne	r18,zero,807cf8 <_fseeko_r+0x2ac>
  807c34:	a82d883a 	mov	r22,r21
  807c38:	b800371e 	bne	r23,zero,807d18 <_fseeko_r+0x2cc>
  807c3c:	8080030b 	ldhu	r2,12(r16)
  807c40:	1084000c 	andi	r2,r2,4096
  807c44:	10007f26 	beq	r2,zero,807e44 <_fseeko_r+0x3f8>
  807c48:	80801417 	ldw	r2,80(r16)
  807c4c:	81800117 	ldw	r6,4(r16)
  807c50:	81400c17 	ldw	r5,48(r16)
  807c54:	11a7c83a 	sub	r19,r2,r6
  807c58:	28008226 	beq	r5,zero,807e64 <_fseeko_r+0x418>
  807c5c:	81c00f17 	ldw	r7,60(r16)
  807c60:	99e7c83a 	sub	r19,r19,r7
  807c64:	81000e17 	ldw	r4,56(r16)
  807c68:	80800417 	ldw	r2,16(r16)
  807c6c:	99a7883a 	add	r19,r19,r6
  807c70:	2087c83a 	sub	r3,r4,r2
  807c74:	98e7c83a 	sub	r19,r19,r3
  807c78:	38c7883a 	add	r3,r7,r3
  807c7c:	b4c02b16 	blt	r22,r19,807d2c <_fseeko_r+0x2e0>
  807c80:	98c9883a 	add	r4,r19,r3
  807c84:	b100292e 	bgeu	r22,r4,807d2c <_fseeko_r+0x2e0>
  807c88:	b4e7c83a 	sub	r19,r22,r19
  807c8c:	14c5883a 	add	r2,r2,r19
  807c90:	1ce7c83a 	sub	r19,r3,r19
  807c94:	80800015 	stw	r2,0(r16)
  807c98:	84c00115 	stw	r19,4(r16)
  807c9c:	28000526 	beq	r5,zero,807cb4 <_fseeko_r+0x268>
  807ca0:	80801004 	addi	r2,r16,64
  807ca4:	28800226 	beq	r5,r2,807cb0 <_fseeko_r+0x264>
  807ca8:	8809883a 	mov	r4,r17
  807cac:	08098100 	call	809810 <_free_r>
  807cb0:	80000c15 	stw	zero,48(r16)
  807cb4:	8080030b 	ldhu	r2,12(r16)
  807cb8:	01800204 	movi	r6,8
  807cbc:	000b883a 	mov	r5,zero
  807cc0:	10bff7cc 	andi	r2,r2,65503
  807cc4:	8080030d 	sth	r2,12(r16)
  807cc8:	81001704 	addi	r4,r16,92
  807ccc:	08088d00 	call	8088d0 <memset>
  807cd0:	0027883a 	mov	r19,zero
  807cd4:	003f7c06 	br	807ac8 <__alt_mem_onchip_mem+0xff7ffac8>
  807cd8:	80c00117 	ldw	r3,4(r16)
  807cdc:	80800c17 	ldw	r2,48(r16)
  807ce0:	98e7c83a 	sub	r19,r19,r3
  807ce4:	10003b26 	beq	r2,zero,807dd4 <_fseeko_r+0x388>
  807ce8:	80c00f17 	ldw	r3,60(r16)
  807cec:	80800417 	ldw	r2,16(r16)
  807cf0:	98e7c83a 	sub	r19,r19,r3
  807cf4:	003fbc06 	br	807be8 <__alt_mem_onchip_mem+0xff7ffbe8>
  807cf8:	8140038f 	ldh	r5,14(r16)
  807cfc:	d80d883a 	mov	r6,sp
  807d00:	8809883a 	mov	r4,r17
  807d04:	0807eac0 	call	807eac <_fstat_r>
  807d08:	103f891e 	bne	r2,zero,807b30 <__alt_mem_onchip_mem+0xff7ffb30>
  807d0c:	dd800417 	ldw	r22,16(sp)
  807d10:	adad883a 	add	r22,r21,r22
  807d14:	b83fc926 	beq	r23,zero,807c3c <__alt_mem_onchip_mem+0xff7ffc3c>
  807d18:	81400c17 	ldw	r5,48(r16)
  807d1c:	81800117 	ldw	r6,4(r16)
  807d20:	28005026 	beq	r5,zero,807e64 <_fseeko_r+0x418>
  807d24:	81c00f17 	ldw	r7,60(r16)
  807d28:	003fce06 	br	807c64 <__alt_mem_onchip_mem+0xff7ffc64>
  807d2c:	84c01317 	ldw	r19,76(r16)
  807d30:	81400717 	ldw	r5,28(r16)
  807d34:	000f883a 	mov	r7,zero
  807d38:	04e7c83a 	sub	r19,zero,r19
  807d3c:	9da6703a 	and	r19,r19,r22
  807d40:	980d883a 	mov	r6,r19
  807d44:	8809883a 	mov	r4,r17
  807d48:	a03ee83a 	callr	r20
  807d4c:	00ffffc4 	movi	r3,-1
  807d50:	10ff7726 	beq	r2,r3,807b30 <__alt_mem_onchip_mem+0xff7ffb30>
  807d54:	80800417 	ldw	r2,16(r16)
  807d58:	81400c17 	ldw	r5,48(r16)
  807d5c:	80000115 	stw	zero,4(r16)
  807d60:	80800015 	stw	r2,0(r16)
  807d64:	28000526 	beq	r5,zero,807d7c <_fseeko_r+0x330>
  807d68:	80801004 	addi	r2,r16,64
  807d6c:	28800226 	beq	r5,r2,807d78 <_fseeko_r+0x32c>
  807d70:	8809883a 	mov	r4,r17
  807d74:	08098100 	call	809810 <_free_r>
  807d78:	80000c15 	stw	zero,48(r16)
  807d7c:	8080030b 	ldhu	r2,12(r16)
  807d80:	b4e7c83a 	sub	r19,r22,r19
  807d84:	10bff7cc 	andi	r2,r2,65503
  807d88:	8080030d 	sth	r2,12(r16)
  807d8c:	98000b26 	beq	r19,zero,807dbc <_fseeko_r+0x370>
  807d90:	800b883a 	mov	r5,r16
  807d94:	8809883a 	mov	r4,r17
  807d98:	0808b480 	call	808b48 <__srefill_r>
  807d9c:	103f641e 	bne	r2,zero,807b30 <__alt_mem_onchip_mem+0xff7ffb30>
  807da0:	80800117 	ldw	r2,4(r16)
  807da4:	14ff6236 	bltu	r2,r19,807b30 <__alt_mem_onchip_mem+0xff7ffb30>
  807da8:	80c00017 	ldw	r3,0(r16)
  807dac:	14c5c83a 	sub	r2,r2,r19
  807db0:	80800115 	stw	r2,4(r16)
  807db4:	1ce7883a 	add	r19,r3,r19
  807db8:	84c00015 	stw	r19,0(r16)
  807dbc:	01800204 	movi	r6,8
  807dc0:	000b883a 	mov	r5,zero
  807dc4:	81001704 	addi	r4,r16,92
  807dc8:	08088d00 	call	8088d0 <memset>
  807dcc:	0027883a 	mov	r19,zero
  807dd0:	003f3d06 	br	807ac8 <__alt_mem_onchip_mem+0xff7ffac8>
  807dd4:	80800417 	ldw	r2,16(r16)
  807dd8:	003f8306 	br	807be8 <__alt_mem_onchip_mem+0xff7ffbe8>
  807ddc:	81400717 	ldw	r5,28(r16)
  807de0:	900f883a 	mov	r7,r18
  807de4:	000d883a 	mov	r6,zero
  807de8:	8809883a 	mov	r4,r17
  807dec:	a03ee83a 	callr	r20
  807df0:	1027883a 	mov	r19,r2
  807df4:	00bfffc4 	movi	r2,-1
  807df8:	98bf3226 	beq	r19,r2,807ac4 <__alt_mem_onchip_mem+0xff7ffac4>
  807dfc:	8080030b 	ldhu	r2,12(r16)
  807e00:	003f7006 	br	807bc4 <__alt_mem_onchip_mem+0xff7ffbc4>
  807e04:	8140038f 	ldh	r5,14(r16)
  807e08:	283f4716 	blt	r5,zero,807b28 <__alt_mem_onchip_mem+0xff7ffb28>
  807e0c:	d80d883a 	mov	r6,sp
  807e10:	8809883a 	mov	r4,r17
  807e14:	0807eac0 	call	807eac <_fstat_r>
  807e18:	1000041e 	bne	r2,zero,807e2c <_fseeko_r+0x3e0>
  807e1c:	d8800117 	ldw	r2,4(sp)
  807e20:	00e00014 	movui	r3,32768
  807e24:	10bc000c 	andi	r2,r2,61440
  807e28:	10ff7c26 	beq	r2,r3,807c1c <__alt_mem_onchip_mem+0xff7ffc1c>
  807e2c:	8080030b 	ldhu	r2,12(r16)
  807e30:	003f3d06 	br	807b28 <__alt_mem_onchip_mem+0xff7ffb28>
  807e34:	800b883a 	mov	r5,r16
  807e38:	8809883a 	mov	r4,r17
  807e3c:	0807f080 	call	807f08 <__smakebuf_r>
  807e40:	003f3106 	br	807b08 <__alt_mem_onchip_mem+0xff7ffb08>
  807e44:	81400717 	ldw	r5,28(r16)
  807e48:	01c00044 	movi	r7,1
  807e4c:	000d883a 	mov	r6,zero
  807e50:	8809883a 	mov	r4,r17
  807e54:	a03ee83a 	callr	r20
  807e58:	00ffffc4 	movi	r3,-1
  807e5c:	10ff7b1e 	bne	r2,r3,807c4c <__alt_mem_onchip_mem+0xff7ffc4c>
  807e60:	003f3306 	br	807b30 <__alt_mem_onchip_mem+0xff7ffb30>
  807e64:	80c00017 	ldw	r3,0(r16)
  807e68:	80800417 	ldw	r2,16(r16)
  807e6c:	000b883a 	mov	r5,zero
  807e70:	1887c83a 	sub	r3,r3,r2
  807e74:	98e7c83a 	sub	r19,r19,r3
  807e78:	30c7883a 	add	r3,r6,r3
  807e7c:	003f7f06 	br	807c7c <__alt_mem_onchip_mem+0xff7ffc7c>
  807e80:	00800744 	movi	r2,29
  807e84:	88800015 	stw	r2,0(r17)
  807e88:	04ffffc4 	movi	r19,-1
  807e8c:	003f0e06 	br	807ac8 <__alt_mem_onchip_mem+0xff7ffac8>

00807e90 <fseeko>:
  807e90:	00802074 	movhi	r2,129
  807e94:	10849704 	addi	r2,r2,4700
  807e98:	300f883a 	mov	r7,r6
  807e9c:	280d883a 	mov	r6,r5
  807ea0:	200b883a 	mov	r5,r4
  807ea4:	11000017 	ldw	r4,0(r2)
  807ea8:	0807a4c1 	jmpi	807a4c <_fseeko_r>

00807eac <_fstat_r>:
  807eac:	defffd04 	addi	sp,sp,-12
  807eb0:	2805883a 	mov	r2,r5
  807eb4:	dc000015 	stw	r16,0(sp)
  807eb8:	04002074 	movhi	r16,129
  807ebc:	dc400115 	stw	r17,4(sp)
  807ec0:	840bbf04 	addi	r16,r16,12028
  807ec4:	2023883a 	mov	r17,r4
  807ec8:	300b883a 	mov	r5,r6
  807ecc:	1009883a 	mov	r4,r2
  807ed0:	dfc00215 	stw	ra,8(sp)
  807ed4:	80000015 	stw	zero,0(r16)
  807ed8:	080b2100 	call	80b210 <fstat>
  807edc:	00ffffc4 	movi	r3,-1
  807ee0:	10c00526 	beq	r2,r3,807ef8 <_fstat_r+0x4c>
  807ee4:	dfc00217 	ldw	ra,8(sp)
  807ee8:	dc400117 	ldw	r17,4(sp)
  807eec:	dc000017 	ldw	r16,0(sp)
  807ef0:	dec00304 	addi	sp,sp,12
  807ef4:	f800283a 	ret
  807ef8:	80c00017 	ldw	r3,0(r16)
  807efc:	183ff926 	beq	r3,zero,807ee4 <__alt_mem_onchip_mem+0xff7ffee4>
  807f00:	88c00015 	stw	r3,0(r17)
  807f04:	003ff706 	br	807ee4 <__alt_mem_onchip_mem+0xff7ffee4>

00807f08 <__smakebuf_r>:
  807f08:	2880030b 	ldhu	r2,12(r5)
  807f0c:	10c0008c 	andi	r3,r2,2
  807f10:	1800411e 	bne	r3,zero,808018 <__smakebuf_r+0x110>
  807f14:	deffec04 	addi	sp,sp,-80
  807f18:	dc000f15 	stw	r16,60(sp)
  807f1c:	2821883a 	mov	r16,r5
  807f20:	2940038f 	ldh	r5,14(r5)
  807f24:	dc401015 	stw	r17,64(sp)
  807f28:	dfc01315 	stw	ra,76(sp)
  807f2c:	dcc01215 	stw	r19,72(sp)
  807f30:	dc801115 	stw	r18,68(sp)
  807f34:	2023883a 	mov	r17,r4
  807f38:	28001c16 	blt	r5,zero,807fac <__smakebuf_r+0xa4>
  807f3c:	d80d883a 	mov	r6,sp
  807f40:	0807eac0 	call	807eac <_fstat_r>
  807f44:	10001816 	blt	r2,zero,807fa8 <__smakebuf_r+0xa0>
  807f48:	d8800117 	ldw	r2,4(sp)
  807f4c:	00e00014 	movui	r3,32768
  807f50:	10bc000c 	andi	r2,r2,61440
  807f54:	14c80020 	cmpeqi	r19,r2,8192
  807f58:	10c03726 	beq	r2,r3,808038 <__smakebuf_r+0x130>
  807f5c:	80c0030b 	ldhu	r3,12(r16)
  807f60:	18c20014 	ori	r3,r3,2048
  807f64:	80c0030d 	sth	r3,12(r16)
  807f68:	00c80004 	movi	r3,8192
  807f6c:	10c0521e 	bne	r2,r3,8080b8 <__smakebuf_r+0x1b0>
  807f70:	8140038f 	ldh	r5,14(r16)
  807f74:	8809883a 	mov	r4,r17
  807f78:	080a1640 	call	80a164 <_isatty_r>
  807f7c:	10004c26 	beq	r2,zero,8080b0 <__smakebuf_r+0x1a8>
  807f80:	8080030b 	ldhu	r2,12(r16)
  807f84:	80c010c4 	addi	r3,r16,67
  807f88:	80c00015 	stw	r3,0(r16)
  807f8c:	10800054 	ori	r2,r2,1
  807f90:	8080030d 	sth	r2,12(r16)
  807f94:	00800044 	movi	r2,1
  807f98:	80c00415 	stw	r3,16(r16)
  807f9c:	80800515 	stw	r2,20(r16)
  807fa0:	04810004 	movi	r18,1024
  807fa4:	00000706 	br	807fc4 <__smakebuf_r+0xbc>
  807fa8:	8080030b 	ldhu	r2,12(r16)
  807fac:	10c0200c 	andi	r3,r2,128
  807fb0:	18001f1e 	bne	r3,zero,808030 <__smakebuf_r+0x128>
  807fb4:	04810004 	movi	r18,1024
  807fb8:	10820014 	ori	r2,r2,2048
  807fbc:	8080030d 	sth	r2,12(r16)
  807fc0:	0027883a 	mov	r19,zero
  807fc4:	900b883a 	mov	r5,r18
  807fc8:	8809883a 	mov	r4,r17
  807fcc:	08080c40 	call	8080c4 <_malloc_r>
  807fd0:	10002c26 	beq	r2,zero,808084 <__smakebuf_r+0x17c>
  807fd4:	80c0030b 	ldhu	r3,12(r16)
  807fd8:	01002074 	movhi	r4,129
  807fdc:	2124aa04 	addi	r4,r4,-27992
  807fe0:	89000f15 	stw	r4,60(r17)
  807fe4:	18c02014 	ori	r3,r3,128
  807fe8:	80c0030d 	sth	r3,12(r16)
  807fec:	80800015 	stw	r2,0(r16)
  807ff0:	80800415 	stw	r2,16(r16)
  807ff4:	84800515 	stw	r18,20(r16)
  807ff8:	98001a1e 	bne	r19,zero,808064 <__smakebuf_r+0x15c>
  807ffc:	dfc01317 	ldw	ra,76(sp)
  808000:	dcc01217 	ldw	r19,72(sp)
  808004:	dc801117 	ldw	r18,68(sp)
  808008:	dc401017 	ldw	r17,64(sp)
  80800c:	dc000f17 	ldw	r16,60(sp)
  808010:	dec01404 	addi	sp,sp,80
  808014:	f800283a 	ret
  808018:	288010c4 	addi	r2,r5,67
  80801c:	28800015 	stw	r2,0(r5)
  808020:	28800415 	stw	r2,16(r5)
  808024:	00800044 	movi	r2,1
  808028:	28800515 	stw	r2,20(r5)
  80802c:	f800283a 	ret
  808030:	04801004 	movi	r18,64
  808034:	003fe006 	br	807fb8 <__alt_mem_onchip_mem+0xff7fffb8>
  808038:	81000a17 	ldw	r4,40(r16)
  80803c:	00c02074 	movhi	r3,129
  808040:	18e39204 	addi	r3,r3,-29112
  808044:	20ffc51e 	bne	r4,r3,807f5c <__alt_mem_onchip_mem+0xff7fff5c>
  808048:	8080030b 	ldhu	r2,12(r16)
  80804c:	04810004 	movi	r18,1024
  808050:	84801315 	stw	r18,76(r16)
  808054:	1484b03a 	or	r2,r2,r18
  808058:	8080030d 	sth	r2,12(r16)
  80805c:	0027883a 	mov	r19,zero
  808060:	003fd806 	br	807fc4 <__alt_mem_onchip_mem+0xff7fffc4>
  808064:	8140038f 	ldh	r5,14(r16)
  808068:	8809883a 	mov	r4,r17
  80806c:	080a1640 	call	80a164 <_isatty_r>
  808070:	103fe226 	beq	r2,zero,807ffc <__alt_mem_onchip_mem+0xff7ffffc>
  808074:	8080030b 	ldhu	r2,12(r16)
  808078:	10800054 	ori	r2,r2,1
  80807c:	8080030d 	sth	r2,12(r16)
  808080:	003fde06 	br	807ffc <__alt_mem_onchip_mem+0xff7ffffc>
  808084:	8080030b 	ldhu	r2,12(r16)
  808088:	10c0800c 	andi	r3,r2,512
  80808c:	183fdb1e 	bne	r3,zero,807ffc <__alt_mem_onchip_mem+0xff7ffffc>
  808090:	10800094 	ori	r2,r2,2
  808094:	80c010c4 	addi	r3,r16,67
  808098:	8080030d 	sth	r2,12(r16)
  80809c:	00800044 	movi	r2,1
  8080a0:	80c00015 	stw	r3,0(r16)
  8080a4:	80c00415 	stw	r3,16(r16)
  8080a8:	80800515 	stw	r2,20(r16)
  8080ac:	003fd306 	br	807ffc <__alt_mem_onchip_mem+0xff7ffffc>
  8080b0:	04810004 	movi	r18,1024
  8080b4:	003fc306 	br	807fc4 <__alt_mem_onchip_mem+0xff7fffc4>
  8080b8:	0027883a 	mov	r19,zero
  8080bc:	04810004 	movi	r18,1024
  8080c0:	003fc006 	br	807fc4 <__alt_mem_onchip_mem+0xff7fffc4>

008080c4 <_malloc_r>:
  8080c4:	defff504 	addi	sp,sp,-44
  8080c8:	dc800315 	stw	r18,12(sp)
  8080cc:	dfc00a15 	stw	ra,40(sp)
  8080d0:	df000915 	stw	fp,36(sp)
  8080d4:	ddc00815 	stw	r23,32(sp)
  8080d8:	dd800715 	stw	r22,28(sp)
  8080dc:	dd400615 	stw	r21,24(sp)
  8080e0:	dd000515 	stw	r20,20(sp)
  8080e4:	dcc00415 	stw	r19,16(sp)
  8080e8:	dc400215 	stw	r17,8(sp)
  8080ec:	dc000115 	stw	r16,4(sp)
  8080f0:	288002c4 	addi	r2,r5,11
  8080f4:	00c00584 	movi	r3,22
  8080f8:	2025883a 	mov	r18,r4
  8080fc:	18807f2e 	bgeu	r3,r2,8082fc <_malloc_r+0x238>
  808100:	047ffe04 	movi	r17,-8
  808104:	1462703a 	and	r17,r2,r17
  808108:	8800a316 	blt	r17,zero,808398 <_malloc_r+0x2d4>
  80810c:	8940a236 	bltu	r17,r5,808398 <_malloc_r+0x2d4>
  808110:	080b7980 	call	80b798 <__malloc_lock>
  808114:	00807dc4 	movi	r2,503
  808118:	1441e92e 	bgeu	r2,r17,8088c0 <_malloc_r+0x7fc>
  80811c:	8804d27a 	srli	r2,r17,9
  808120:	1000a126 	beq	r2,zero,8083a8 <_malloc_r+0x2e4>
  808124:	00c00104 	movi	r3,4
  808128:	18811e36 	bltu	r3,r2,8085a4 <_malloc_r+0x4e0>
  80812c:	8804d1ba 	srli	r2,r17,6
  808130:	12000e44 	addi	r8,r2,57
  808134:	11c00e04 	addi	r7,r2,56
  808138:	4209883a 	add	r4,r8,r8
  80813c:	04c02074 	movhi	r19,129
  808140:	2109883a 	add	r4,r4,r4
  808144:	9cfe9904 	addi	r19,r19,-1436
  808148:	2109883a 	add	r4,r4,r4
  80814c:	9909883a 	add	r4,r19,r4
  808150:	24000117 	ldw	r16,4(r4)
  808154:	213ffe04 	addi	r4,r4,-8
  808158:	24009726 	beq	r4,r16,8083b8 <_malloc_r+0x2f4>
  80815c:	80800117 	ldw	r2,4(r16)
  808160:	01bfff04 	movi	r6,-4
  808164:	014003c4 	movi	r5,15
  808168:	1184703a 	and	r2,r2,r6
  80816c:	1447c83a 	sub	r3,r2,r17
  808170:	28c00716 	blt	r5,r3,808190 <_malloc_r+0xcc>
  808174:	1800920e 	bge	r3,zero,8083c0 <_malloc_r+0x2fc>
  808178:	84000317 	ldw	r16,12(r16)
  80817c:	24008e26 	beq	r4,r16,8083b8 <_malloc_r+0x2f4>
  808180:	80800117 	ldw	r2,4(r16)
  808184:	1184703a 	and	r2,r2,r6
  808188:	1447c83a 	sub	r3,r2,r17
  80818c:	28fff90e 	bge	r5,r3,808174 <__alt_mem_onchip_mem+0xff800174>
  808190:	3809883a 	mov	r4,r7
  808194:	01802074 	movhi	r6,129
  808198:	9c000417 	ldw	r16,16(r19)
  80819c:	31be9904 	addi	r6,r6,-1436
  8081a0:	32000204 	addi	r8,r6,8
  8081a4:	82013426 	beq	r16,r8,808678 <_malloc_r+0x5b4>
  8081a8:	80c00117 	ldw	r3,4(r16)
  8081ac:	00bfff04 	movi	r2,-4
  8081b0:	188e703a 	and	r7,r3,r2
  8081b4:	3c45c83a 	sub	r2,r7,r17
  8081b8:	00c003c4 	movi	r3,15
  8081bc:	18811f16 	blt	r3,r2,80863c <_malloc_r+0x578>
  8081c0:	32000515 	stw	r8,20(r6)
  8081c4:	32000415 	stw	r8,16(r6)
  8081c8:	10007f0e 	bge	r2,zero,8083c8 <_malloc_r+0x304>
  8081cc:	00807fc4 	movi	r2,511
  8081d0:	11c0fd36 	bltu	r2,r7,8085c8 <_malloc_r+0x504>
  8081d4:	3806d0fa 	srli	r3,r7,3
  8081d8:	01c00044 	movi	r7,1
  8081dc:	30800117 	ldw	r2,4(r6)
  8081e0:	19400044 	addi	r5,r3,1
  8081e4:	294b883a 	add	r5,r5,r5
  8081e8:	1807d0ba 	srai	r3,r3,2
  8081ec:	294b883a 	add	r5,r5,r5
  8081f0:	294b883a 	add	r5,r5,r5
  8081f4:	298b883a 	add	r5,r5,r6
  8081f8:	38c6983a 	sll	r3,r7,r3
  8081fc:	29c00017 	ldw	r7,0(r5)
  808200:	2a7ffe04 	addi	r9,r5,-8
  808204:	1886b03a 	or	r3,r3,r2
  808208:	82400315 	stw	r9,12(r16)
  80820c:	81c00215 	stw	r7,8(r16)
  808210:	30c00115 	stw	r3,4(r6)
  808214:	2c000015 	stw	r16,0(r5)
  808218:	3c000315 	stw	r16,12(r7)
  80821c:	2005d0ba 	srai	r2,r4,2
  808220:	01400044 	movi	r5,1
  808224:	288a983a 	sll	r5,r5,r2
  808228:	19406f36 	bltu	r3,r5,8083e8 <_malloc_r+0x324>
  80822c:	28c4703a 	and	r2,r5,r3
  808230:	10000a1e 	bne	r2,zero,80825c <_malloc_r+0x198>
  808234:	00bfff04 	movi	r2,-4
  808238:	294b883a 	add	r5,r5,r5
  80823c:	2088703a 	and	r4,r4,r2
  808240:	28c4703a 	and	r2,r5,r3
  808244:	21000104 	addi	r4,r4,4
  808248:	1000041e 	bne	r2,zero,80825c <_malloc_r+0x198>
  80824c:	294b883a 	add	r5,r5,r5
  808250:	28c4703a 	and	r2,r5,r3
  808254:	21000104 	addi	r4,r4,4
  808258:	103ffc26 	beq	r2,zero,80824c <__alt_mem_onchip_mem+0xff80024c>
  80825c:	02bfff04 	movi	r10,-4
  808260:	024003c4 	movi	r9,15
  808264:	21800044 	addi	r6,r4,1
  808268:	318d883a 	add	r6,r6,r6
  80826c:	318d883a 	add	r6,r6,r6
  808270:	318d883a 	add	r6,r6,r6
  808274:	998d883a 	add	r6,r19,r6
  808278:	333ffe04 	addi	r12,r6,-8
  80827c:	2017883a 	mov	r11,r4
  808280:	31800104 	addi	r6,r6,4
  808284:	34000017 	ldw	r16,0(r6)
  808288:	31fffd04 	addi	r7,r6,-12
  80828c:	81c0041e 	bne	r16,r7,8082a0 <_malloc_r+0x1dc>
  808290:	0000fb06 	br	808680 <_malloc_r+0x5bc>
  808294:	1801030e 	bge	r3,zero,8086a4 <_malloc_r+0x5e0>
  808298:	84000317 	ldw	r16,12(r16)
  80829c:	81c0f826 	beq	r16,r7,808680 <_malloc_r+0x5bc>
  8082a0:	80800117 	ldw	r2,4(r16)
  8082a4:	1284703a 	and	r2,r2,r10
  8082a8:	1447c83a 	sub	r3,r2,r17
  8082ac:	48fff90e 	bge	r9,r3,808294 <__alt_mem_onchip_mem+0xff800294>
  8082b0:	80800317 	ldw	r2,12(r16)
  8082b4:	81000217 	ldw	r4,8(r16)
  8082b8:	89400054 	ori	r5,r17,1
  8082bc:	81400115 	stw	r5,4(r16)
  8082c0:	20800315 	stw	r2,12(r4)
  8082c4:	11000215 	stw	r4,8(r2)
  8082c8:	8463883a 	add	r17,r16,r17
  8082cc:	9c400515 	stw	r17,20(r19)
  8082d0:	9c400415 	stw	r17,16(r19)
  8082d4:	18800054 	ori	r2,r3,1
  8082d8:	88800115 	stw	r2,4(r17)
  8082dc:	8a000315 	stw	r8,12(r17)
  8082e0:	8a000215 	stw	r8,8(r17)
  8082e4:	88e3883a 	add	r17,r17,r3
  8082e8:	88c00015 	stw	r3,0(r17)
  8082ec:	9009883a 	mov	r4,r18
  8082f0:	080b7bc0 	call	80b7bc <__malloc_unlock>
  8082f4:	80800204 	addi	r2,r16,8
  8082f8:	00001b06 	br	808368 <_malloc_r+0x2a4>
  8082fc:	04400404 	movi	r17,16
  808300:	89402536 	bltu	r17,r5,808398 <_malloc_r+0x2d4>
  808304:	080b7980 	call	80b798 <__malloc_lock>
  808308:	00800184 	movi	r2,6
  80830c:	01000084 	movi	r4,2
  808310:	04c02074 	movhi	r19,129
  808314:	1085883a 	add	r2,r2,r2
  808318:	9cfe9904 	addi	r19,r19,-1436
  80831c:	1085883a 	add	r2,r2,r2
  808320:	9885883a 	add	r2,r19,r2
  808324:	14000117 	ldw	r16,4(r2)
  808328:	10fffe04 	addi	r3,r2,-8
  80832c:	80c0d926 	beq	r16,r3,808694 <_malloc_r+0x5d0>
  808330:	80c00117 	ldw	r3,4(r16)
  808334:	81000317 	ldw	r4,12(r16)
  808338:	00bfff04 	movi	r2,-4
  80833c:	1884703a 	and	r2,r3,r2
  808340:	81400217 	ldw	r5,8(r16)
  808344:	8085883a 	add	r2,r16,r2
  808348:	10c00117 	ldw	r3,4(r2)
  80834c:	29000315 	stw	r4,12(r5)
  808350:	21400215 	stw	r5,8(r4)
  808354:	18c00054 	ori	r3,r3,1
  808358:	10c00115 	stw	r3,4(r2)
  80835c:	9009883a 	mov	r4,r18
  808360:	080b7bc0 	call	80b7bc <__malloc_unlock>
  808364:	80800204 	addi	r2,r16,8
  808368:	dfc00a17 	ldw	ra,40(sp)
  80836c:	df000917 	ldw	fp,36(sp)
  808370:	ddc00817 	ldw	r23,32(sp)
  808374:	dd800717 	ldw	r22,28(sp)
  808378:	dd400617 	ldw	r21,24(sp)
  80837c:	dd000517 	ldw	r20,20(sp)
  808380:	dcc00417 	ldw	r19,16(sp)
  808384:	dc800317 	ldw	r18,12(sp)
  808388:	dc400217 	ldw	r17,8(sp)
  80838c:	dc000117 	ldw	r16,4(sp)
  808390:	dec00b04 	addi	sp,sp,44
  808394:	f800283a 	ret
  808398:	00800304 	movi	r2,12
  80839c:	90800015 	stw	r2,0(r18)
  8083a0:	0005883a 	mov	r2,zero
  8083a4:	003ff006 	br	808368 <__alt_mem_onchip_mem+0xff800368>
  8083a8:	01002004 	movi	r4,128
  8083ac:	02001004 	movi	r8,64
  8083b0:	01c00fc4 	movi	r7,63
  8083b4:	003f6106 	br	80813c <__alt_mem_onchip_mem+0xff80013c>
  8083b8:	4009883a 	mov	r4,r8
  8083bc:	003f7506 	br	808194 <__alt_mem_onchip_mem+0xff800194>
  8083c0:	81000317 	ldw	r4,12(r16)
  8083c4:	003fde06 	br	808340 <__alt_mem_onchip_mem+0xff800340>
  8083c8:	81c5883a 	add	r2,r16,r7
  8083cc:	11400117 	ldw	r5,4(r2)
  8083d0:	9009883a 	mov	r4,r18
  8083d4:	29400054 	ori	r5,r5,1
  8083d8:	11400115 	stw	r5,4(r2)
  8083dc:	080b7bc0 	call	80b7bc <__malloc_unlock>
  8083e0:	80800204 	addi	r2,r16,8
  8083e4:	003fe006 	br	808368 <__alt_mem_onchip_mem+0xff800368>
  8083e8:	9c000217 	ldw	r16,8(r19)
  8083ec:	00bfff04 	movi	r2,-4
  8083f0:	85800117 	ldw	r22,4(r16)
  8083f4:	b0ac703a 	and	r22,r22,r2
  8083f8:	b4400336 	bltu	r22,r17,808408 <_malloc_r+0x344>
  8083fc:	b445c83a 	sub	r2,r22,r17
  808400:	00c003c4 	movi	r3,15
  808404:	18805d16 	blt	r3,r2,80857c <_malloc_r+0x4b8>
  808408:	05c02074 	movhi	r23,129
  80840c:	00802074 	movhi	r2,129
  808410:	108bc204 	addi	r2,r2,12040
  808414:	bdc49804 	addi	r23,r23,4704
  808418:	15400017 	ldw	r21,0(r2)
  80841c:	b8c00017 	ldw	r3,0(r23)
  808420:	00bfffc4 	movi	r2,-1
  808424:	858d883a 	add	r6,r16,r22
  808428:	8d6b883a 	add	r21,r17,r21
  80842c:	1880ea26 	beq	r3,r2,8087d8 <_malloc_r+0x714>
  808430:	ad4403c4 	addi	r21,r21,4111
  808434:	00bc0004 	movi	r2,-4096
  808438:	a8aa703a 	and	r21,r21,r2
  80843c:	a80b883a 	mov	r5,r21
  808440:	9009883a 	mov	r4,r18
  808444:	d9800015 	stw	r6,0(sp)
  808448:	0808d1c0 	call	808d1c <_sbrk_r>
  80844c:	1029883a 	mov	r20,r2
  808450:	00bfffc4 	movi	r2,-1
  808454:	d9800017 	ldw	r6,0(sp)
  808458:	a080e826 	beq	r20,r2,8087fc <_malloc_r+0x738>
  80845c:	a180a636 	bltu	r20,r6,8086f8 <_malloc_r+0x634>
  808460:	07002074 	movhi	fp,129
  808464:	e70bca04 	addi	fp,fp,12072
  808468:	e0800017 	ldw	r2,0(fp)
  80846c:	a887883a 	add	r3,r21,r2
  808470:	e0c00015 	stw	r3,0(fp)
  808474:	3500e626 	beq	r6,r20,808810 <_malloc_r+0x74c>
  808478:	b9000017 	ldw	r4,0(r23)
  80847c:	00bfffc4 	movi	r2,-1
  808480:	2080ee26 	beq	r4,r2,80883c <_malloc_r+0x778>
  808484:	a185c83a 	sub	r2,r20,r6
  808488:	10c5883a 	add	r2,r2,r3
  80848c:	e0800015 	stw	r2,0(fp)
  808490:	a0c001cc 	andi	r3,r20,7
  808494:	1800bc26 	beq	r3,zero,808788 <_malloc_r+0x6c4>
  808498:	a0e9c83a 	sub	r20,r20,r3
  80849c:	00840204 	movi	r2,4104
  8084a0:	a5000204 	addi	r20,r20,8
  8084a4:	10c7c83a 	sub	r3,r2,r3
  8084a8:	a545883a 	add	r2,r20,r21
  8084ac:	1083ffcc 	andi	r2,r2,4095
  8084b0:	18abc83a 	sub	r21,r3,r2
  8084b4:	a80b883a 	mov	r5,r21
  8084b8:	9009883a 	mov	r4,r18
  8084bc:	0808d1c0 	call	808d1c <_sbrk_r>
  8084c0:	00ffffc4 	movi	r3,-1
  8084c4:	10c0e126 	beq	r2,r3,80884c <_malloc_r+0x788>
  8084c8:	1505c83a 	sub	r2,r2,r20
  8084cc:	1545883a 	add	r2,r2,r21
  8084d0:	10800054 	ori	r2,r2,1
  8084d4:	e0c00017 	ldw	r3,0(fp)
  8084d8:	9d000215 	stw	r20,8(r19)
  8084dc:	a0800115 	stw	r2,4(r20)
  8084e0:	a8c7883a 	add	r3,r21,r3
  8084e4:	e0c00015 	stw	r3,0(fp)
  8084e8:	84c00e26 	beq	r16,r19,808524 <_malloc_r+0x460>
  8084ec:	018003c4 	movi	r6,15
  8084f0:	3580a72e 	bgeu	r6,r22,808790 <_malloc_r+0x6cc>
  8084f4:	81400117 	ldw	r5,4(r16)
  8084f8:	013ffe04 	movi	r4,-8
  8084fc:	b0bffd04 	addi	r2,r22,-12
  808500:	1104703a 	and	r2,r2,r4
  808504:	2900004c 	andi	r4,r5,1
  808508:	2088b03a 	or	r4,r4,r2
  80850c:	81000115 	stw	r4,4(r16)
  808510:	01400144 	movi	r5,5
  808514:	8089883a 	add	r4,r16,r2
  808518:	21400115 	stw	r5,4(r4)
  80851c:	21400215 	stw	r5,8(r4)
  808520:	3080cd36 	bltu	r6,r2,808858 <_malloc_r+0x794>
  808524:	00802074 	movhi	r2,129
  808528:	108bc104 	addi	r2,r2,12036
  80852c:	11000017 	ldw	r4,0(r2)
  808530:	20c0012e 	bgeu	r4,r3,808538 <_malloc_r+0x474>
  808534:	10c00015 	stw	r3,0(r2)
  808538:	00802074 	movhi	r2,129
  80853c:	108bc004 	addi	r2,r2,12032
  808540:	11000017 	ldw	r4,0(r2)
  808544:	9c000217 	ldw	r16,8(r19)
  808548:	20c0012e 	bgeu	r4,r3,808550 <_malloc_r+0x48c>
  80854c:	10c00015 	stw	r3,0(r2)
  808550:	80c00117 	ldw	r3,4(r16)
  808554:	00bfff04 	movi	r2,-4
  808558:	1886703a 	and	r3,r3,r2
  80855c:	1c45c83a 	sub	r2,r3,r17
  808560:	1c400236 	bltu	r3,r17,80856c <_malloc_r+0x4a8>
  808564:	00c003c4 	movi	r3,15
  808568:	18800416 	blt	r3,r2,80857c <_malloc_r+0x4b8>
  80856c:	9009883a 	mov	r4,r18
  808570:	080b7bc0 	call	80b7bc <__malloc_unlock>
  808574:	0005883a 	mov	r2,zero
  808578:	003f7b06 	br	808368 <__alt_mem_onchip_mem+0xff800368>
  80857c:	88c00054 	ori	r3,r17,1
  808580:	80c00115 	stw	r3,4(r16)
  808584:	8463883a 	add	r17,r16,r17
  808588:	10800054 	ori	r2,r2,1
  80858c:	9c400215 	stw	r17,8(r19)
  808590:	88800115 	stw	r2,4(r17)
  808594:	9009883a 	mov	r4,r18
  808598:	080b7bc0 	call	80b7bc <__malloc_unlock>
  80859c:	80800204 	addi	r2,r16,8
  8085a0:	003f7106 	br	808368 <__alt_mem_onchip_mem+0xff800368>
  8085a4:	00c00504 	movi	r3,20
  8085a8:	18804a2e 	bgeu	r3,r2,8086d4 <_malloc_r+0x610>
  8085ac:	00c01504 	movi	r3,84
  8085b0:	18806e36 	bltu	r3,r2,80876c <_malloc_r+0x6a8>
  8085b4:	8804d33a 	srli	r2,r17,12
  8085b8:	12001bc4 	addi	r8,r2,111
  8085bc:	11c01b84 	addi	r7,r2,110
  8085c0:	4209883a 	add	r4,r8,r8
  8085c4:	003edd06 	br	80813c <__alt_mem_onchip_mem+0xff80013c>
  8085c8:	3804d27a 	srli	r2,r7,9
  8085cc:	00c00104 	movi	r3,4
  8085d0:	1880442e 	bgeu	r3,r2,8086e4 <_malloc_r+0x620>
  8085d4:	00c00504 	movi	r3,20
  8085d8:	18808136 	bltu	r3,r2,8087e0 <_malloc_r+0x71c>
  8085dc:	11401704 	addi	r5,r2,92
  8085e0:	10c016c4 	addi	r3,r2,91
  8085e4:	294b883a 	add	r5,r5,r5
  8085e8:	294b883a 	add	r5,r5,r5
  8085ec:	294b883a 	add	r5,r5,r5
  8085f0:	994b883a 	add	r5,r19,r5
  8085f4:	28800017 	ldw	r2,0(r5)
  8085f8:	01802074 	movhi	r6,129
  8085fc:	297ffe04 	addi	r5,r5,-8
  808600:	31be9904 	addi	r6,r6,-1436
  808604:	28806526 	beq	r5,r2,80879c <_malloc_r+0x6d8>
  808608:	01bfff04 	movi	r6,-4
  80860c:	10c00117 	ldw	r3,4(r2)
  808610:	1986703a 	and	r3,r3,r6
  808614:	38c0022e 	bgeu	r7,r3,808620 <_malloc_r+0x55c>
  808618:	10800217 	ldw	r2,8(r2)
  80861c:	28bffb1e 	bne	r5,r2,80860c <__alt_mem_onchip_mem+0xff80060c>
  808620:	11400317 	ldw	r5,12(r2)
  808624:	98c00117 	ldw	r3,4(r19)
  808628:	81400315 	stw	r5,12(r16)
  80862c:	80800215 	stw	r2,8(r16)
  808630:	2c000215 	stw	r16,8(r5)
  808634:	14000315 	stw	r16,12(r2)
  808638:	003ef806 	br	80821c <__alt_mem_onchip_mem+0xff80021c>
  80863c:	88c00054 	ori	r3,r17,1
  808640:	80c00115 	stw	r3,4(r16)
  808644:	8463883a 	add	r17,r16,r17
  808648:	34400515 	stw	r17,20(r6)
  80864c:	34400415 	stw	r17,16(r6)
  808650:	10c00054 	ori	r3,r2,1
  808654:	8a000315 	stw	r8,12(r17)
  808658:	8a000215 	stw	r8,8(r17)
  80865c:	88c00115 	stw	r3,4(r17)
  808660:	88a3883a 	add	r17,r17,r2
  808664:	88800015 	stw	r2,0(r17)
  808668:	9009883a 	mov	r4,r18
  80866c:	080b7bc0 	call	80b7bc <__malloc_unlock>
  808670:	80800204 	addi	r2,r16,8
  808674:	003f3c06 	br	808368 <__alt_mem_onchip_mem+0xff800368>
  808678:	30c00117 	ldw	r3,4(r6)
  80867c:	003ee706 	br	80821c <__alt_mem_onchip_mem+0xff80021c>
  808680:	5ac00044 	addi	r11,r11,1
  808684:	588000cc 	andi	r2,r11,3
  808688:	31800204 	addi	r6,r6,8
  80868c:	103efd1e 	bne	r2,zero,808284 <__alt_mem_onchip_mem+0xff800284>
  808690:	00002406 	br	808724 <_malloc_r+0x660>
  808694:	14000317 	ldw	r16,12(r2)
  808698:	143f251e 	bne	r2,r16,808330 <__alt_mem_onchip_mem+0xff800330>
  80869c:	21000084 	addi	r4,r4,2
  8086a0:	003ebc06 	br	808194 <__alt_mem_onchip_mem+0xff800194>
  8086a4:	8085883a 	add	r2,r16,r2
  8086a8:	10c00117 	ldw	r3,4(r2)
  8086ac:	81000317 	ldw	r4,12(r16)
  8086b0:	81400217 	ldw	r5,8(r16)
  8086b4:	18c00054 	ori	r3,r3,1
  8086b8:	10c00115 	stw	r3,4(r2)
  8086bc:	29000315 	stw	r4,12(r5)
  8086c0:	21400215 	stw	r5,8(r4)
  8086c4:	9009883a 	mov	r4,r18
  8086c8:	080b7bc0 	call	80b7bc <__malloc_unlock>
  8086cc:	80800204 	addi	r2,r16,8
  8086d0:	003f2506 	br	808368 <__alt_mem_onchip_mem+0xff800368>
  8086d4:	12001704 	addi	r8,r2,92
  8086d8:	11c016c4 	addi	r7,r2,91
  8086dc:	4209883a 	add	r4,r8,r8
  8086e0:	003e9606 	br	80813c <__alt_mem_onchip_mem+0xff80013c>
  8086e4:	3804d1ba 	srli	r2,r7,6
  8086e8:	11400e44 	addi	r5,r2,57
  8086ec:	10c00e04 	addi	r3,r2,56
  8086f0:	294b883a 	add	r5,r5,r5
  8086f4:	003fbc06 	br	8085e8 <__alt_mem_onchip_mem+0xff8005e8>
  8086f8:	84ff5926 	beq	r16,r19,808460 <__alt_mem_onchip_mem+0xff800460>
  8086fc:	00802074 	movhi	r2,129
  808700:	10be9904 	addi	r2,r2,-1436
  808704:	14000217 	ldw	r16,8(r2)
  808708:	00bfff04 	movi	r2,-4
  80870c:	80c00117 	ldw	r3,4(r16)
  808710:	1886703a 	and	r3,r3,r2
  808714:	003f9106 	br	80855c <__alt_mem_onchip_mem+0xff80055c>
  808718:	60800217 	ldw	r2,8(r12)
  80871c:	213fffc4 	addi	r4,r4,-1
  808720:	1300651e 	bne	r2,r12,8088b8 <_malloc_r+0x7f4>
  808724:	208000cc 	andi	r2,r4,3
  808728:	633ffe04 	addi	r12,r12,-8
  80872c:	103ffa1e 	bne	r2,zero,808718 <__alt_mem_onchip_mem+0xff800718>
  808730:	98800117 	ldw	r2,4(r19)
  808734:	0146303a 	nor	r3,zero,r5
  808738:	1884703a 	and	r2,r3,r2
  80873c:	98800115 	stw	r2,4(r19)
  808740:	294b883a 	add	r5,r5,r5
  808744:	117f2836 	bltu	r2,r5,8083e8 <__alt_mem_onchip_mem+0xff8003e8>
  808748:	283f2726 	beq	r5,zero,8083e8 <__alt_mem_onchip_mem+0xff8003e8>
  80874c:	2886703a 	and	r3,r5,r2
  808750:	5809883a 	mov	r4,r11
  808754:	183ec31e 	bne	r3,zero,808264 <__alt_mem_onchip_mem+0xff800264>
  808758:	294b883a 	add	r5,r5,r5
  80875c:	2886703a 	and	r3,r5,r2
  808760:	21000104 	addi	r4,r4,4
  808764:	183ffc26 	beq	r3,zero,808758 <__alt_mem_onchip_mem+0xff800758>
  808768:	003ebe06 	br	808264 <__alt_mem_onchip_mem+0xff800264>
  80876c:	00c05504 	movi	r3,340
  808770:	18801236 	bltu	r3,r2,8087bc <_malloc_r+0x6f8>
  808774:	8804d3fa 	srli	r2,r17,15
  808778:	12001e04 	addi	r8,r2,120
  80877c:	11c01dc4 	addi	r7,r2,119
  808780:	4209883a 	add	r4,r8,r8
  808784:	003e6d06 	br	80813c <__alt_mem_onchip_mem+0xff80013c>
  808788:	00c40004 	movi	r3,4096
  80878c:	003f4606 	br	8084a8 <__alt_mem_onchip_mem+0xff8004a8>
  808790:	00800044 	movi	r2,1
  808794:	a0800115 	stw	r2,4(r20)
  808798:	003f7406 	br	80856c <__alt_mem_onchip_mem+0xff80056c>
  80879c:	1805d0ba 	srai	r2,r3,2
  8087a0:	01c00044 	movi	r7,1
  8087a4:	30c00117 	ldw	r3,4(r6)
  8087a8:	388e983a 	sll	r7,r7,r2
  8087ac:	2805883a 	mov	r2,r5
  8087b0:	38c6b03a 	or	r3,r7,r3
  8087b4:	30c00115 	stw	r3,4(r6)
  8087b8:	003f9b06 	br	808628 <__alt_mem_onchip_mem+0xff800628>
  8087bc:	00c15504 	movi	r3,1364
  8087c0:	18801a36 	bltu	r3,r2,80882c <_malloc_r+0x768>
  8087c4:	8804d4ba 	srli	r2,r17,18
  8087c8:	12001f44 	addi	r8,r2,125
  8087cc:	11c01f04 	addi	r7,r2,124
  8087d0:	4209883a 	add	r4,r8,r8
  8087d4:	003e5906 	br	80813c <__alt_mem_onchip_mem+0xff80013c>
  8087d8:	ad400404 	addi	r21,r21,16
  8087dc:	003f1706 	br	80843c <__alt_mem_onchip_mem+0xff80043c>
  8087e0:	00c01504 	movi	r3,84
  8087e4:	18802336 	bltu	r3,r2,808874 <_malloc_r+0x7b0>
  8087e8:	3804d33a 	srli	r2,r7,12
  8087ec:	11401bc4 	addi	r5,r2,111
  8087f0:	10c01b84 	addi	r3,r2,110
  8087f4:	294b883a 	add	r5,r5,r5
  8087f8:	003f7b06 	br	8085e8 <__alt_mem_onchip_mem+0xff8005e8>
  8087fc:	9c000217 	ldw	r16,8(r19)
  808800:	00bfff04 	movi	r2,-4
  808804:	80c00117 	ldw	r3,4(r16)
  808808:	1886703a 	and	r3,r3,r2
  80880c:	003f5306 	br	80855c <__alt_mem_onchip_mem+0xff80055c>
  808810:	3083ffcc 	andi	r2,r6,4095
  808814:	103f181e 	bne	r2,zero,808478 <__alt_mem_onchip_mem+0xff800478>
  808818:	99000217 	ldw	r4,8(r19)
  80881c:	b545883a 	add	r2,r22,r21
  808820:	10800054 	ori	r2,r2,1
  808824:	20800115 	stw	r2,4(r4)
  808828:	003f3e06 	br	808524 <__alt_mem_onchip_mem+0xff800524>
  80882c:	01003f84 	movi	r4,254
  808830:	02001fc4 	movi	r8,127
  808834:	01c01f84 	movi	r7,126
  808838:	003e4006 	br	80813c <__alt_mem_onchip_mem+0xff80013c>
  80883c:	00802074 	movhi	r2,129
  808840:	10849804 	addi	r2,r2,4704
  808844:	15000015 	stw	r20,0(r2)
  808848:	003f1106 	br	808490 <__alt_mem_onchip_mem+0xff800490>
  80884c:	00800044 	movi	r2,1
  808850:	002b883a 	mov	r21,zero
  808854:	003f1f06 	br	8084d4 <__alt_mem_onchip_mem+0xff8004d4>
  808858:	81400204 	addi	r5,r16,8
  80885c:	9009883a 	mov	r4,r18
  808860:	08098100 	call	809810 <_free_r>
  808864:	00802074 	movhi	r2,129
  808868:	108bca04 	addi	r2,r2,12072
  80886c:	10c00017 	ldw	r3,0(r2)
  808870:	003f2c06 	br	808524 <__alt_mem_onchip_mem+0xff800524>
  808874:	00c05504 	movi	r3,340
  808878:	18800536 	bltu	r3,r2,808890 <_malloc_r+0x7cc>
  80887c:	3804d3fa 	srli	r2,r7,15
  808880:	11401e04 	addi	r5,r2,120
  808884:	10c01dc4 	addi	r3,r2,119
  808888:	294b883a 	add	r5,r5,r5
  80888c:	003f5606 	br	8085e8 <__alt_mem_onchip_mem+0xff8005e8>
  808890:	00c15504 	movi	r3,1364
  808894:	18800536 	bltu	r3,r2,8088ac <_malloc_r+0x7e8>
  808898:	3804d4ba 	srli	r2,r7,18
  80889c:	11401f44 	addi	r5,r2,125
  8088a0:	10c01f04 	addi	r3,r2,124
  8088a4:	294b883a 	add	r5,r5,r5
  8088a8:	003f4f06 	br	8085e8 <__alt_mem_onchip_mem+0xff8005e8>
  8088ac:	01403f84 	movi	r5,254
  8088b0:	00c01f84 	movi	r3,126
  8088b4:	003f4c06 	br	8085e8 <__alt_mem_onchip_mem+0xff8005e8>
  8088b8:	98800117 	ldw	r2,4(r19)
  8088bc:	003fa006 	br	808740 <__alt_mem_onchip_mem+0xff800740>
  8088c0:	8808d0fa 	srli	r4,r17,3
  8088c4:	20800044 	addi	r2,r4,1
  8088c8:	1085883a 	add	r2,r2,r2
  8088cc:	003e9006 	br	808310 <__alt_mem_onchip_mem+0xff800310>

008088d0 <memset>:
  8088d0:	20c000cc 	andi	r3,r4,3
  8088d4:	2005883a 	mov	r2,r4
  8088d8:	18004426 	beq	r3,zero,8089ec <memset+0x11c>
  8088dc:	31ffffc4 	addi	r7,r6,-1
  8088e0:	30004026 	beq	r6,zero,8089e4 <memset+0x114>
  8088e4:	2813883a 	mov	r9,r5
  8088e8:	200d883a 	mov	r6,r4
  8088ec:	2007883a 	mov	r3,r4
  8088f0:	00000406 	br	808904 <memset+0x34>
  8088f4:	3a3fffc4 	addi	r8,r7,-1
  8088f8:	31800044 	addi	r6,r6,1
  8088fc:	38003926 	beq	r7,zero,8089e4 <memset+0x114>
  808900:	400f883a 	mov	r7,r8
  808904:	18c00044 	addi	r3,r3,1
  808908:	32400005 	stb	r9,0(r6)
  80890c:	1a0000cc 	andi	r8,r3,3
  808910:	403ff81e 	bne	r8,zero,8088f4 <__alt_mem_onchip_mem+0xff8008f4>
  808914:	010000c4 	movi	r4,3
  808918:	21c02d2e 	bgeu	r4,r7,8089d0 <memset+0x100>
  80891c:	29003fcc 	andi	r4,r5,255
  808920:	200c923a 	slli	r6,r4,8
  808924:	3108b03a 	or	r4,r6,r4
  808928:	200c943a 	slli	r6,r4,16
  80892c:	218cb03a 	or	r6,r4,r6
  808930:	010003c4 	movi	r4,15
  808934:	21c0182e 	bgeu	r4,r7,808998 <memset+0xc8>
  808938:	3b3ffc04 	addi	r12,r7,-16
  80893c:	6018d13a 	srli	r12,r12,4
  808940:	1a000104 	addi	r8,r3,4
  808944:	1ac00204 	addi	r11,r3,8
  808948:	6008913a 	slli	r4,r12,4
  80894c:	1a800304 	addi	r10,r3,12
  808950:	1813883a 	mov	r9,r3
  808954:	21000504 	addi	r4,r4,20
  808958:	1909883a 	add	r4,r3,r4
  80895c:	49800015 	stw	r6,0(r9)
  808960:	41800015 	stw	r6,0(r8)
  808964:	59800015 	stw	r6,0(r11)
  808968:	51800015 	stw	r6,0(r10)
  80896c:	42000404 	addi	r8,r8,16
  808970:	4a400404 	addi	r9,r9,16
  808974:	5ac00404 	addi	r11,r11,16
  808978:	52800404 	addi	r10,r10,16
  80897c:	413ff71e 	bne	r8,r4,80895c <__alt_mem_onchip_mem+0xff80095c>
  808980:	63000044 	addi	r12,r12,1
  808984:	6018913a 	slli	r12,r12,4
  808988:	39c003cc 	andi	r7,r7,15
  80898c:	010000c4 	movi	r4,3
  808990:	1b07883a 	add	r3,r3,r12
  808994:	21c00e2e 	bgeu	r4,r7,8089d0 <memset+0x100>
  808998:	1813883a 	mov	r9,r3
  80899c:	3811883a 	mov	r8,r7
  8089a0:	010000c4 	movi	r4,3
  8089a4:	49800015 	stw	r6,0(r9)
  8089a8:	423fff04 	addi	r8,r8,-4
  8089ac:	4a400104 	addi	r9,r9,4
  8089b0:	223ffc36 	bltu	r4,r8,8089a4 <__alt_mem_onchip_mem+0xff8009a4>
  8089b4:	393fff04 	addi	r4,r7,-4
  8089b8:	2008d0ba 	srli	r4,r4,2
  8089bc:	39c000cc 	andi	r7,r7,3
  8089c0:	21000044 	addi	r4,r4,1
  8089c4:	2109883a 	add	r4,r4,r4
  8089c8:	2109883a 	add	r4,r4,r4
  8089cc:	1907883a 	add	r3,r3,r4
  8089d0:	38000526 	beq	r7,zero,8089e8 <memset+0x118>
  8089d4:	19cf883a 	add	r7,r3,r7
  8089d8:	19400005 	stb	r5,0(r3)
  8089dc:	18c00044 	addi	r3,r3,1
  8089e0:	38fffd1e 	bne	r7,r3,8089d8 <__alt_mem_onchip_mem+0xff8009d8>
  8089e4:	f800283a 	ret
  8089e8:	f800283a 	ret
  8089ec:	2007883a 	mov	r3,r4
  8089f0:	300f883a 	mov	r7,r6
  8089f4:	003fc706 	br	808914 <__alt_mem_onchip_mem+0xff800914>

008089f8 <_open_r>:
  8089f8:	defffd04 	addi	sp,sp,-12
  8089fc:	2805883a 	mov	r2,r5
  808a00:	dc000015 	stw	r16,0(sp)
  808a04:	04002074 	movhi	r16,129
  808a08:	dc400115 	stw	r17,4(sp)
  808a0c:	300b883a 	mov	r5,r6
  808a10:	840bbf04 	addi	r16,r16,12028
  808a14:	2023883a 	mov	r17,r4
  808a18:	380d883a 	mov	r6,r7
  808a1c:	1009883a 	mov	r4,r2
  808a20:	dfc00215 	stw	ra,8(sp)
  808a24:	80000015 	stw	zero,0(r16)
  808a28:	080b8e00 	call	80b8e0 <open>
  808a2c:	00ffffc4 	movi	r3,-1
  808a30:	10c00526 	beq	r2,r3,808a48 <_open_r+0x50>
  808a34:	dfc00217 	ldw	ra,8(sp)
  808a38:	dc400117 	ldw	r17,4(sp)
  808a3c:	dc000017 	ldw	r16,0(sp)
  808a40:	dec00304 	addi	sp,sp,12
  808a44:	f800283a 	ret
  808a48:	80c00017 	ldw	r3,0(r16)
  808a4c:	183ff926 	beq	r3,zero,808a34 <__alt_mem_onchip_mem+0xff800a34>
  808a50:	88c00015 	stw	r3,0(r17)
  808a54:	003ff706 	br	808a34 <__alt_mem_onchip_mem+0xff800a34>

00808a58 <_puts_r>:
  808a58:	defff604 	addi	sp,sp,-40
  808a5c:	dc000715 	stw	r16,28(sp)
  808a60:	2021883a 	mov	r16,r4
  808a64:	2809883a 	mov	r4,r5
  808a68:	dc400815 	stw	r17,32(sp)
  808a6c:	dfc00915 	stw	ra,36(sp)
  808a70:	2823883a 	mov	r17,r5
  808a74:	0808eac0 	call	808eac <strlen>
  808a78:	10c00044 	addi	r3,r2,1
  808a7c:	d8800115 	stw	r2,4(sp)
  808a80:	00802074 	movhi	r2,129
  808a84:	10bcde04 	addi	r2,r2,-3208
  808a88:	d8800215 	stw	r2,8(sp)
  808a8c:	00800044 	movi	r2,1
  808a90:	d8800315 	stw	r2,12(sp)
  808a94:	00800084 	movi	r2,2
  808a98:	dc400015 	stw	r17,0(sp)
  808a9c:	d8c00615 	stw	r3,24(sp)
  808aa0:	dec00415 	stw	sp,16(sp)
  808aa4:	d8800515 	stw	r2,20(sp)
  808aa8:	80000226 	beq	r16,zero,808ab4 <_puts_r+0x5c>
  808aac:	80800e17 	ldw	r2,56(r16)
  808ab0:	10001426 	beq	r2,zero,808b04 <_puts_r+0xac>
  808ab4:	81400217 	ldw	r5,8(r16)
  808ab8:	2880030b 	ldhu	r2,12(r5)
  808abc:	10c8000c 	andi	r3,r2,8192
  808ac0:	1800061e 	bne	r3,zero,808adc <_puts_r+0x84>
  808ac4:	29001917 	ldw	r4,100(r5)
  808ac8:	00f7ffc4 	movi	r3,-8193
  808acc:	10880014 	ori	r2,r2,8192
  808ad0:	20c6703a 	and	r3,r4,r3
  808ad4:	2880030d 	sth	r2,12(r5)
  808ad8:	28c01915 	stw	r3,100(r5)
  808adc:	d9800404 	addi	r6,sp,16
  808ae0:	8009883a 	mov	r4,r16
  808ae4:	0809b200 	call	809b20 <__sfvwrite_r>
  808ae8:	1000091e 	bne	r2,zero,808b10 <_puts_r+0xb8>
  808aec:	00800284 	movi	r2,10
  808af0:	dfc00917 	ldw	ra,36(sp)
  808af4:	dc400817 	ldw	r17,32(sp)
  808af8:	dc000717 	ldw	r16,28(sp)
  808afc:	dec00a04 	addi	sp,sp,40
  808b00:	f800283a 	ret
  808b04:	8009883a 	mov	r4,r16
  808b08:	08095f00 	call	8095f0 <__sinit>
  808b0c:	003fe906 	br	808ab4 <__alt_mem_onchip_mem+0xff800ab4>
  808b10:	00bfffc4 	movi	r2,-1
  808b14:	003ff606 	br	808af0 <__alt_mem_onchip_mem+0xff800af0>

00808b18 <puts>:
  808b18:	00802074 	movhi	r2,129
  808b1c:	10849704 	addi	r2,r2,4700
  808b20:	200b883a 	mov	r5,r4
  808b24:	11000017 	ldw	r4,0(r2)
  808b28:	0808a581 	jmpi	808a58 <_puts_r>

00808b2c <lflush>:
  808b2c:	2080030b 	ldhu	r2,12(r4)
  808b30:	00c00244 	movi	r3,9
  808b34:	1080024c 	andi	r2,r2,9
  808b38:	10c00226 	beq	r2,r3,808b44 <lflush+0x18>
  808b3c:	0005883a 	mov	r2,zero
  808b40:	f800283a 	ret
  808b44:	08092701 	jmpi	809270 <fflush>

00808b48 <__srefill_r>:
  808b48:	defffc04 	addi	sp,sp,-16
  808b4c:	dc400115 	stw	r17,4(sp)
  808b50:	dc000015 	stw	r16,0(sp)
  808b54:	dfc00315 	stw	ra,12(sp)
  808b58:	dc800215 	stw	r18,8(sp)
  808b5c:	2023883a 	mov	r17,r4
  808b60:	2821883a 	mov	r16,r5
  808b64:	20000226 	beq	r4,zero,808b70 <__srefill_r+0x28>
  808b68:	20800e17 	ldw	r2,56(r4)
  808b6c:	10003c26 	beq	r2,zero,808c60 <__srefill_r+0x118>
  808b70:	80c0030b 	ldhu	r3,12(r16)
  808b74:	1908000c 	andi	r4,r3,8192
  808b78:	1805883a 	mov	r2,r3
  808b7c:	2000071e 	bne	r4,zero,808b9c <__srefill_r+0x54>
  808b80:	81001917 	ldw	r4,100(r16)
  808b84:	18880014 	ori	r2,r3,8192
  808b88:	00f7ffc4 	movi	r3,-8193
  808b8c:	20c8703a 	and	r4,r4,r3
  808b90:	8080030d 	sth	r2,12(r16)
  808b94:	1007883a 	mov	r3,r2
  808b98:	81001915 	stw	r4,100(r16)
  808b9c:	80000115 	stw	zero,4(r16)
  808ba0:	1100080c 	andi	r4,r2,32
  808ba4:	2000571e 	bne	r4,zero,808d04 <__srefill_r+0x1bc>
  808ba8:	1100010c 	andi	r4,r2,4
  808bac:	20001f26 	beq	r4,zero,808c2c <__srefill_r+0xe4>
  808bb0:	81400c17 	ldw	r5,48(r16)
  808bb4:	28000826 	beq	r5,zero,808bd8 <__srefill_r+0x90>
  808bb8:	80801004 	addi	r2,r16,64
  808bbc:	28800226 	beq	r5,r2,808bc8 <__srefill_r+0x80>
  808bc0:	8809883a 	mov	r4,r17
  808bc4:	08098100 	call	809810 <_free_r>
  808bc8:	80800f17 	ldw	r2,60(r16)
  808bcc:	80000c15 	stw	zero,48(r16)
  808bd0:	80800115 	stw	r2,4(r16)
  808bd4:	1000391e 	bne	r2,zero,808cbc <__srefill_r+0x174>
  808bd8:	80800417 	ldw	r2,16(r16)
  808bdc:	10004b26 	beq	r2,zero,808d0c <__srefill_r+0x1c4>
  808be0:	8480030b 	ldhu	r18,12(r16)
  808be4:	908000cc 	andi	r2,r18,3
  808be8:	10001f1e 	bne	r2,zero,808c68 <__srefill_r+0x120>
  808bec:	81800417 	ldw	r6,16(r16)
  808bf0:	80800817 	ldw	r2,32(r16)
  808bf4:	81c00517 	ldw	r7,20(r16)
  808bf8:	81400717 	ldw	r5,28(r16)
  808bfc:	81800015 	stw	r6,0(r16)
  808c00:	8809883a 	mov	r4,r17
  808c04:	103ee83a 	callr	r2
  808c08:	80800115 	stw	r2,4(r16)
  808c0c:	00800e0e 	bge	zero,r2,808c48 <__srefill_r+0x100>
  808c10:	0005883a 	mov	r2,zero
  808c14:	dfc00317 	ldw	ra,12(sp)
  808c18:	dc800217 	ldw	r18,8(sp)
  808c1c:	dc400117 	ldw	r17,4(sp)
  808c20:	dc000017 	ldw	r16,0(sp)
  808c24:	dec00404 	addi	sp,sp,16
  808c28:	f800283a 	ret
  808c2c:	1100040c 	andi	r4,r2,16
  808c30:	20003026 	beq	r4,zero,808cf4 <__srefill_r+0x1ac>
  808c34:	1080020c 	andi	r2,r2,8
  808c38:	1000241e 	bne	r2,zero,808ccc <__srefill_r+0x184>
  808c3c:	18c00114 	ori	r3,r3,4
  808c40:	80c0030d 	sth	r3,12(r16)
  808c44:	003fe406 	br	808bd8 <__alt_mem_onchip_mem+0xff800bd8>
  808c48:	80c0030b 	ldhu	r3,12(r16)
  808c4c:	1000161e 	bne	r2,zero,808ca8 <__srefill_r+0x160>
  808c50:	18c00814 	ori	r3,r3,32
  808c54:	00bfffc4 	movi	r2,-1
  808c58:	80c0030d 	sth	r3,12(r16)
  808c5c:	003fed06 	br	808c14 <__alt_mem_onchip_mem+0xff800c14>
  808c60:	08095f00 	call	8095f0 <__sinit>
  808c64:	003fc206 	br	808b70 <__alt_mem_onchip_mem+0xff800b70>
  808c68:	00802074 	movhi	r2,129
  808c6c:	10849604 	addi	r2,r2,4696
  808c70:	11000017 	ldw	r4,0(r2)
  808c74:	01402074 	movhi	r5,129
  808c78:	00800044 	movi	r2,1
  808c7c:	2962cb04 	addi	r5,r5,-29908
  808c80:	8080030d 	sth	r2,12(r16)
  808c84:	0809fdc0 	call	809fdc <_fwalk>
  808c88:	00800244 	movi	r2,9
  808c8c:	8480030d 	sth	r18,12(r16)
  808c90:	9480024c 	andi	r18,r18,9
  808c94:	90bfd51e 	bne	r18,r2,808bec <__alt_mem_onchip_mem+0xff800bec>
  808c98:	800b883a 	mov	r5,r16
  808c9c:	8809883a 	mov	r4,r17
  808ca0:	0808ff80 	call	808ff8 <__sflush_r>
  808ca4:	003fd106 	br	808bec <__alt_mem_onchip_mem+0xff800bec>
  808ca8:	18c01014 	ori	r3,r3,64
  808cac:	80000115 	stw	zero,4(r16)
  808cb0:	00bfffc4 	movi	r2,-1
  808cb4:	80c0030d 	sth	r3,12(r16)
  808cb8:	003fd606 	br	808c14 <__alt_mem_onchip_mem+0xff800c14>
  808cbc:	80c00e17 	ldw	r3,56(r16)
  808cc0:	0005883a 	mov	r2,zero
  808cc4:	80c00015 	stw	r3,0(r16)
  808cc8:	003fd206 	br	808c14 <__alt_mem_onchip_mem+0xff800c14>
  808ccc:	800b883a 	mov	r5,r16
  808cd0:	8809883a 	mov	r4,r17
  808cd4:	08092140 	call	809214 <_fflush_r>
  808cd8:	10000a1e 	bne	r2,zero,808d04 <__srefill_r+0x1bc>
  808cdc:	8080030b 	ldhu	r2,12(r16)
  808ce0:	00fffdc4 	movi	r3,-9
  808ce4:	80000215 	stw	zero,8(r16)
  808ce8:	1886703a 	and	r3,r3,r2
  808cec:	80000615 	stw	zero,24(r16)
  808cf0:	003fd206 	br	808c3c <__alt_mem_onchip_mem+0xff800c3c>
  808cf4:	00800244 	movi	r2,9
  808cf8:	88800015 	stw	r2,0(r17)
  808cfc:	18c01014 	ori	r3,r3,64
  808d00:	80c0030d 	sth	r3,12(r16)
  808d04:	00bfffc4 	movi	r2,-1
  808d08:	003fc206 	br	808c14 <__alt_mem_onchip_mem+0xff800c14>
  808d0c:	800b883a 	mov	r5,r16
  808d10:	8809883a 	mov	r4,r17
  808d14:	0807f080 	call	807f08 <__smakebuf_r>
  808d18:	003fb106 	br	808be0 <__alt_mem_onchip_mem+0xff800be0>

00808d1c <_sbrk_r>:
  808d1c:	defffd04 	addi	sp,sp,-12
  808d20:	dc000015 	stw	r16,0(sp)
  808d24:	04002074 	movhi	r16,129
  808d28:	dc400115 	stw	r17,4(sp)
  808d2c:	840bbf04 	addi	r16,r16,12028
  808d30:	2023883a 	mov	r17,r4
  808d34:	2809883a 	mov	r4,r5
  808d38:	dfc00215 	stw	ra,8(sp)
  808d3c:	80000015 	stw	zero,0(r16)
  808d40:	080bbd00 	call	80bbd0 <sbrk>
  808d44:	00ffffc4 	movi	r3,-1
  808d48:	10c00526 	beq	r2,r3,808d60 <_sbrk_r+0x44>
  808d4c:	dfc00217 	ldw	ra,8(sp)
  808d50:	dc400117 	ldw	r17,4(sp)
  808d54:	dc000017 	ldw	r16,0(sp)
  808d58:	dec00304 	addi	sp,sp,12
  808d5c:	f800283a 	ret
  808d60:	80c00017 	ldw	r3,0(r16)
  808d64:	183ff926 	beq	r3,zero,808d4c <__alt_mem_onchip_mem+0xff800d4c>
  808d68:	88c00015 	stw	r3,0(r17)
  808d6c:	003ff706 	br	808d4c <__alt_mem_onchip_mem+0xff800d4c>

00808d70 <__sread>:
  808d70:	defffe04 	addi	sp,sp,-8
  808d74:	dc000015 	stw	r16,0(sp)
  808d78:	2821883a 	mov	r16,r5
  808d7c:	2940038f 	ldh	r5,14(r5)
  808d80:	dfc00115 	stw	ra,4(sp)
  808d84:	080a5a00 	call	80a5a0 <_read_r>
  808d88:	10000716 	blt	r2,zero,808da8 <__sread+0x38>
  808d8c:	80c01417 	ldw	r3,80(r16)
  808d90:	1887883a 	add	r3,r3,r2
  808d94:	80c01415 	stw	r3,80(r16)
  808d98:	dfc00117 	ldw	ra,4(sp)
  808d9c:	dc000017 	ldw	r16,0(sp)
  808da0:	dec00204 	addi	sp,sp,8
  808da4:	f800283a 	ret
  808da8:	80c0030b 	ldhu	r3,12(r16)
  808dac:	18fbffcc 	andi	r3,r3,61439
  808db0:	80c0030d 	sth	r3,12(r16)
  808db4:	dfc00117 	ldw	ra,4(sp)
  808db8:	dc000017 	ldw	r16,0(sp)
  808dbc:	dec00204 	addi	sp,sp,8
  808dc0:	f800283a 	ret

00808dc4 <__seofread>:
  808dc4:	0005883a 	mov	r2,zero
  808dc8:	f800283a 	ret

00808dcc <__swrite>:
  808dcc:	2880030b 	ldhu	r2,12(r5)
  808dd0:	defffb04 	addi	sp,sp,-20
  808dd4:	dcc00315 	stw	r19,12(sp)
  808dd8:	dc800215 	stw	r18,8(sp)
  808ddc:	dc400115 	stw	r17,4(sp)
  808de0:	dc000015 	stw	r16,0(sp)
  808de4:	dfc00415 	stw	ra,16(sp)
  808de8:	10c0400c 	andi	r3,r2,256
  808dec:	2821883a 	mov	r16,r5
  808df0:	2023883a 	mov	r17,r4
  808df4:	3025883a 	mov	r18,r6
  808df8:	3827883a 	mov	r19,r7
  808dfc:	18000526 	beq	r3,zero,808e14 <__swrite+0x48>
  808e00:	2940038f 	ldh	r5,14(r5)
  808e04:	01c00084 	movi	r7,2
  808e08:	000d883a 	mov	r6,zero
  808e0c:	080a1b80 	call	80a1b8 <_lseek_r>
  808e10:	8080030b 	ldhu	r2,12(r16)
  808e14:	8140038f 	ldh	r5,14(r16)
  808e18:	10bbffcc 	andi	r2,r2,61439
  808e1c:	980f883a 	mov	r7,r19
  808e20:	900d883a 	mov	r6,r18
  808e24:	8809883a 	mov	r4,r17
  808e28:	8080030d 	sth	r2,12(r16)
  808e2c:	dfc00417 	ldw	ra,16(sp)
  808e30:	dcc00317 	ldw	r19,12(sp)
  808e34:	dc800217 	ldw	r18,8(sp)
  808e38:	dc400117 	ldw	r17,4(sp)
  808e3c:	dc000017 	ldw	r16,0(sp)
  808e40:	dec00504 	addi	sp,sp,20
  808e44:	0808f441 	jmpi	808f44 <_write_r>

00808e48 <__sseek>:
  808e48:	defffe04 	addi	sp,sp,-8
  808e4c:	dc000015 	stw	r16,0(sp)
  808e50:	2821883a 	mov	r16,r5
  808e54:	2940038f 	ldh	r5,14(r5)
  808e58:	dfc00115 	stw	ra,4(sp)
  808e5c:	080a1b80 	call	80a1b8 <_lseek_r>
  808e60:	00ffffc4 	movi	r3,-1
  808e64:	10c00826 	beq	r2,r3,808e88 <__sseek+0x40>
  808e68:	80c0030b 	ldhu	r3,12(r16)
  808e6c:	80801415 	stw	r2,80(r16)
  808e70:	18c40014 	ori	r3,r3,4096
  808e74:	80c0030d 	sth	r3,12(r16)
  808e78:	dfc00117 	ldw	ra,4(sp)
  808e7c:	dc000017 	ldw	r16,0(sp)
  808e80:	dec00204 	addi	sp,sp,8
  808e84:	f800283a 	ret
  808e88:	80c0030b 	ldhu	r3,12(r16)
  808e8c:	18fbffcc 	andi	r3,r3,61439
  808e90:	80c0030d 	sth	r3,12(r16)
  808e94:	dfc00117 	ldw	ra,4(sp)
  808e98:	dc000017 	ldw	r16,0(sp)
  808e9c:	dec00204 	addi	sp,sp,8
  808ea0:	f800283a 	ret

00808ea4 <__sclose>:
  808ea4:	2940038f 	ldh	r5,14(r5)
  808ea8:	0808fa41 	jmpi	808fa4 <_close_r>

00808eac <strlen>:
  808eac:	208000cc 	andi	r2,r4,3
  808eb0:	10002026 	beq	r2,zero,808f34 <strlen+0x88>
  808eb4:	20800007 	ldb	r2,0(r4)
  808eb8:	10002026 	beq	r2,zero,808f3c <strlen+0x90>
  808ebc:	2005883a 	mov	r2,r4
  808ec0:	00000206 	br	808ecc <strlen+0x20>
  808ec4:	10c00007 	ldb	r3,0(r2)
  808ec8:	18001826 	beq	r3,zero,808f2c <strlen+0x80>
  808ecc:	10800044 	addi	r2,r2,1
  808ed0:	10c000cc 	andi	r3,r2,3
  808ed4:	183ffb1e 	bne	r3,zero,808ec4 <__alt_mem_onchip_mem+0xff800ec4>
  808ed8:	10c00017 	ldw	r3,0(r2)
  808edc:	01ffbff4 	movhi	r7,65279
  808ee0:	39ffbfc4 	addi	r7,r7,-257
  808ee4:	00ca303a 	nor	r5,zero,r3
  808ee8:	01a02074 	movhi	r6,32897
  808eec:	19c7883a 	add	r3,r3,r7
  808ef0:	31a02004 	addi	r6,r6,-32640
  808ef4:	1946703a 	and	r3,r3,r5
  808ef8:	1986703a 	and	r3,r3,r6
  808efc:	1800091e 	bne	r3,zero,808f24 <strlen+0x78>
  808f00:	10800104 	addi	r2,r2,4
  808f04:	10c00017 	ldw	r3,0(r2)
  808f08:	19cb883a 	add	r5,r3,r7
  808f0c:	00c6303a 	nor	r3,zero,r3
  808f10:	28c6703a 	and	r3,r5,r3
  808f14:	1986703a 	and	r3,r3,r6
  808f18:	183ff926 	beq	r3,zero,808f00 <__alt_mem_onchip_mem+0xff800f00>
  808f1c:	00000106 	br	808f24 <strlen+0x78>
  808f20:	10800044 	addi	r2,r2,1
  808f24:	10c00007 	ldb	r3,0(r2)
  808f28:	183ffd1e 	bne	r3,zero,808f20 <__alt_mem_onchip_mem+0xff800f20>
  808f2c:	1105c83a 	sub	r2,r2,r4
  808f30:	f800283a 	ret
  808f34:	2005883a 	mov	r2,r4
  808f38:	003fe706 	br	808ed8 <__alt_mem_onchip_mem+0xff800ed8>
  808f3c:	0005883a 	mov	r2,zero
  808f40:	f800283a 	ret

00808f44 <_write_r>:
  808f44:	defffd04 	addi	sp,sp,-12
  808f48:	2805883a 	mov	r2,r5
  808f4c:	dc000015 	stw	r16,0(sp)
  808f50:	04002074 	movhi	r16,129
  808f54:	dc400115 	stw	r17,4(sp)
  808f58:	300b883a 	mov	r5,r6
  808f5c:	840bbf04 	addi	r16,r16,12028
  808f60:	2023883a 	mov	r17,r4
  808f64:	380d883a 	mov	r6,r7
  808f68:	1009883a 	mov	r4,r2
  808f6c:	dfc00215 	stw	ra,8(sp)
  808f70:	80000015 	stw	zero,0(r16)
  808f74:	080be600 	call	80be60 <write>
  808f78:	00ffffc4 	movi	r3,-1
  808f7c:	10c00526 	beq	r2,r3,808f94 <_write_r+0x50>
  808f80:	dfc00217 	ldw	ra,8(sp)
  808f84:	dc400117 	ldw	r17,4(sp)
  808f88:	dc000017 	ldw	r16,0(sp)
  808f8c:	dec00304 	addi	sp,sp,12
  808f90:	f800283a 	ret
  808f94:	80c00017 	ldw	r3,0(r16)
  808f98:	183ff926 	beq	r3,zero,808f80 <__alt_mem_onchip_mem+0xff800f80>
  808f9c:	88c00015 	stw	r3,0(r17)
  808fa0:	003ff706 	br	808f80 <__alt_mem_onchip_mem+0xff800f80>

00808fa4 <_close_r>:
  808fa4:	defffd04 	addi	sp,sp,-12
  808fa8:	dc000015 	stw	r16,0(sp)
  808fac:	04002074 	movhi	r16,129
  808fb0:	dc400115 	stw	r17,4(sp)
  808fb4:	840bbf04 	addi	r16,r16,12028
  808fb8:	2023883a 	mov	r17,r4
  808fbc:	2809883a 	mov	r4,r5
  808fc0:	dfc00215 	stw	ra,8(sp)
  808fc4:	80000015 	stw	zero,0(r16)
  808fc8:	080b0d80 	call	80b0d8 <close>
  808fcc:	00ffffc4 	movi	r3,-1
  808fd0:	10c00526 	beq	r2,r3,808fe8 <_close_r+0x44>
  808fd4:	dfc00217 	ldw	ra,8(sp)
  808fd8:	dc400117 	ldw	r17,4(sp)
  808fdc:	dc000017 	ldw	r16,0(sp)
  808fe0:	dec00304 	addi	sp,sp,12
  808fe4:	f800283a 	ret
  808fe8:	80c00017 	ldw	r3,0(r16)
  808fec:	183ff926 	beq	r3,zero,808fd4 <__alt_mem_onchip_mem+0xff800fd4>
  808ff0:	88c00015 	stw	r3,0(r17)
  808ff4:	003ff706 	br	808fd4 <__alt_mem_onchip_mem+0xff800fd4>

00808ff8 <__sflush_r>:
  808ff8:	2880030b 	ldhu	r2,12(r5)
  808ffc:	defffb04 	addi	sp,sp,-20
  809000:	dcc00315 	stw	r19,12(sp)
  809004:	dc400115 	stw	r17,4(sp)
  809008:	dfc00415 	stw	ra,16(sp)
  80900c:	dc800215 	stw	r18,8(sp)
  809010:	dc000015 	stw	r16,0(sp)
  809014:	10c0020c 	andi	r3,r2,8
  809018:	2823883a 	mov	r17,r5
  80901c:	2027883a 	mov	r19,r4
  809020:	1800311e 	bne	r3,zero,8090e8 <__sflush_r+0xf0>
  809024:	28c00117 	ldw	r3,4(r5)
  809028:	10820014 	ori	r2,r2,2048
  80902c:	2880030d 	sth	r2,12(r5)
  809030:	00c04b0e 	bge	zero,r3,809160 <__sflush_r+0x168>
  809034:	8a000a17 	ldw	r8,40(r17)
  809038:	40002326 	beq	r8,zero,8090c8 <__sflush_r+0xd0>
  80903c:	9c000017 	ldw	r16,0(r19)
  809040:	10c4000c 	andi	r3,r2,4096
  809044:	98000015 	stw	zero,0(r19)
  809048:	18004826 	beq	r3,zero,80916c <__sflush_r+0x174>
  80904c:	89801417 	ldw	r6,80(r17)
  809050:	10c0010c 	andi	r3,r2,4
  809054:	18000626 	beq	r3,zero,809070 <__sflush_r+0x78>
  809058:	88c00117 	ldw	r3,4(r17)
  80905c:	88800c17 	ldw	r2,48(r17)
  809060:	30cdc83a 	sub	r6,r6,r3
  809064:	10000226 	beq	r2,zero,809070 <__sflush_r+0x78>
  809068:	88800f17 	ldw	r2,60(r17)
  80906c:	308dc83a 	sub	r6,r6,r2
  809070:	89400717 	ldw	r5,28(r17)
  809074:	000f883a 	mov	r7,zero
  809078:	9809883a 	mov	r4,r19
  80907c:	403ee83a 	callr	r8
  809080:	00ffffc4 	movi	r3,-1
  809084:	10c04426 	beq	r2,r3,809198 <__sflush_r+0x1a0>
  809088:	88c0030b 	ldhu	r3,12(r17)
  80908c:	89000417 	ldw	r4,16(r17)
  809090:	88000115 	stw	zero,4(r17)
  809094:	197dffcc 	andi	r5,r3,63487
  809098:	8940030d 	sth	r5,12(r17)
  80909c:	89000015 	stw	r4,0(r17)
  8090a0:	18c4000c 	andi	r3,r3,4096
  8090a4:	18002c1e 	bne	r3,zero,809158 <__sflush_r+0x160>
  8090a8:	89400c17 	ldw	r5,48(r17)
  8090ac:	9c000015 	stw	r16,0(r19)
  8090b0:	28000526 	beq	r5,zero,8090c8 <__sflush_r+0xd0>
  8090b4:	88801004 	addi	r2,r17,64
  8090b8:	28800226 	beq	r5,r2,8090c4 <__sflush_r+0xcc>
  8090bc:	9809883a 	mov	r4,r19
  8090c0:	08098100 	call	809810 <_free_r>
  8090c4:	88000c15 	stw	zero,48(r17)
  8090c8:	0005883a 	mov	r2,zero
  8090cc:	dfc00417 	ldw	ra,16(sp)
  8090d0:	dcc00317 	ldw	r19,12(sp)
  8090d4:	dc800217 	ldw	r18,8(sp)
  8090d8:	dc400117 	ldw	r17,4(sp)
  8090dc:	dc000017 	ldw	r16,0(sp)
  8090e0:	dec00504 	addi	sp,sp,20
  8090e4:	f800283a 	ret
  8090e8:	2c800417 	ldw	r18,16(r5)
  8090ec:	903ff626 	beq	r18,zero,8090c8 <__alt_mem_onchip_mem+0xff8010c8>
  8090f0:	2c000017 	ldw	r16,0(r5)
  8090f4:	108000cc 	andi	r2,r2,3
  8090f8:	2c800015 	stw	r18,0(r5)
  8090fc:	84a1c83a 	sub	r16,r16,r18
  809100:	1000131e 	bne	r2,zero,809150 <__sflush_r+0x158>
  809104:	28800517 	ldw	r2,20(r5)
  809108:	88800215 	stw	r2,8(r17)
  80910c:	04000316 	blt	zero,r16,80911c <__sflush_r+0x124>
  809110:	003fed06 	br	8090c8 <__alt_mem_onchip_mem+0xff8010c8>
  809114:	90a5883a 	add	r18,r18,r2
  809118:	043feb0e 	bge	zero,r16,8090c8 <__alt_mem_onchip_mem+0xff8010c8>
  80911c:	88800917 	ldw	r2,36(r17)
  809120:	89400717 	ldw	r5,28(r17)
  809124:	800f883a 	mov	r7,r16
  809128:	900d883a 	mov	r6,r18
  80912c:	9809883a 	mov	r4,r19
  809130:	103ee83a 	callr	r2
  809134:	80a1c83a 	sub	r16,r16,r2
  809138:	00bff616 	blt	zero,r2,809114 <__alt_mem_onchip_mem+0xff801114>
  80913c:	88c0030b 	ldhu	r3,12(r17)
  809140:	00bfffc4 	movi	r2,-1
  809144:	18c01014 	ori	r3,r3,64
  809148:	88c0030d 	sth	r3,12(r17)
  80914c:	003fdf06 	br	8090cc <__alt_mem_onchip_mem+0xff8010cc>
  809150:	0005883a 	mov	r2,zero
  809154:	003fec06 	br	809108 <__alt_mem_onchip_mem+0xff801108>
  809158:	88801415 	stw	r2,80(r17)
  80915c:	003fd206 	br	8090a8 <__alt_mem_onchip_mem+0xff8010a8>
  809160:	28c00f17 	ldw	r3,60(r5)
  809164:	00ffb316 	blt	zero,r3,809034 <__alt_mem_onchip_mem+0xff801034>
  809168:	003fd706 	br	8090c8 <__alt_mem_onchip_mem+0xff8010c8>
  80916c:	89400717 	ldw	r5,28(r17)
  809170:	000d883a 	mov	r6,zero
  809174:	01c00044 	movi	r7,1
  809178:	9809883a 	mov	r4,r19
  80917c:	403ee83a 	callr	r8
  809180:	100d883a 	mov	r6,r2
  809184:	00bfffc4 	movi	r2,-1
  809188:	30801426 	beq	r6,r2,8091dc <__sflush_r+0x1e4>
  80918c:	8880030b 	ldhu	r2,12(r17)
  809190:	8a000a17 	ldw	r8,40(r17)
  809194:	003fae06 	br	809050 <__alt_mem_onchip_mem+0xff801050>
  809198:	98c00017 	ldw	r3,0(r19)
  80919c:	183fba26 	beq	r3,zero,809088 <__alt_mem_onchip_mem+0xff801088>
  8091a0:	01000744 	movi	r4,29
  8091a4:	19000626 	beq	r3,r4,8091c0 <__sflush_r+0x1c8>
  8091a8:	01000584 	movi	r4,22
  8091ac:	19000426 	beq	r3,r4,8091c0 <__sflush_r+0x1c8>
  8091b0:	88c0030b 	ldhu	r3,12(r17)
  8091b4:	18c01014 	ori	r3,r3,64
  8091b8:	88c0030d 	sth	r3,12(r17)
  8091bc:	003fc306 	br	8090cc <__alt_mem_onchip_mem+0xff8010cc>
  8091c0:	8880030b 	ldhu	r2,12(r17)
  8091c4:	88c00417 	ldw	r3,16(r17)
  8091c8:	88000115 	stw	zero,4(r17)
  8091cc:	10bdffcc 	andi	r2,r2,63487
  8091d0:	8880030d 	sth	r2,12(r17)
  8091d4:	88c00015 	stw	r3,0(r17)
  8091d8:	003fb306 	br	8090a8 <__alt_mem_onchip_mem+0xff8010a8>
  8091dc:	98800017 	ldw	r2,0(r19)
  8091e0:	103fea26 	beq	r2,zero,80918c <__alt_mem_onchip_mem+0xff80118c>
  8091e4:	00c00744 	movi	r3,29
  8091e8:	10c00226 	beq	r2,r3,8091f4 <__sflush_r+0x1fc>
  8091ec:	00c00584 	movi	r3,22
  8091f0:	10c0031e 	bne	r2,r3,809200 <__sflush_r+0x208>
  8091f4:	9c000015 	stw	r16,0(r19)
  8091f8:	0005883a 	mov	r2,zero
  8091fc:	003fb306 	br	8090cc <__alt_mem_onchip_mem+0xff8010cc>
  809200:	88c0030b 	ldhu	r3,12(r17)
  809204:	3005883a 	mov	r2,r6
  809208:	18c01014 	ori	r3,r3,64
  80920c:	88c0030d 	sth	r3,12(r17)
  809210:	003fae06 	br	8090cc <__alt_mem_onchip_mem+0xff8010cc>

00809214 <_fflush_r>:
  809214:	defffd04 	addi	sp,sp,-12
  809218:	dc000115 	stw	r16,4(sp)
  80921c:	dfc00215 	stw	ra,8(sp)
  809220:	2021883a 	mov	r16,r4
  809224:	20000226 	beq	r4,zero,809230 <_fflush_r+0x1c>
  809228:	20800e17 	ldw	r2,56(r4)
  80922c:	10000c26 	beq	r2,zero,809260 <_fflush_r+0x4c>
  809230:	2880030f 	ldh	r2,12(r5)
  809234:	1000051e 	bne	r2,zero,80924c <_fflush_r+0x38>
  809238:	0005883a 	mov	r2,zero
  80923c:	dfc00217 	ldw	ra,8(sp)
  809240:	dc000117 	ldw	r16,4(sp)
  809244:	dec00304 	addi	sp,sp,12
  809248:	f800283a 	ret
  80924c:	8009883a 	mov	r4,r16
  809250:	dfc00217 	ldw	ra,8(sp)
  809254:	dc000117 	ldw	r16,4(sp)
  809258:	dec00304 	addi	sp,sp,12
  80925c:	0808ff81 	jmpi	808ff8 <__sflush_r>
  809260:	d9400015 	stw	r5,0(sp)
  809264:	08095f00 	call	8095f0 <__sinit>
  809268:	d9400017 	ldw	r5,0(sp)
  80926c:	003ff006 	br	809230 <__alt_mem_onchip_mem+0xff801230>

00809270 <fflush>:
  809270:	20000526 	beq	r4,zero,809288 <fflush+0x18>
  809274:	00802074 	movhi	r2,129
  809278:	10849704 	addi	r2,r2,4700
  80927c:	200b883a 	mov	r5,r4
  809280:	11000017 	ldw	r4,0(r2)
  809284:	08092141 	jmpi	809214 <_fflush_r>
  809288:	00802074 	movhi	r2,129
  80928c:	10849604 	addi	r2,r2,4696
  809290:	11000017 	ldw	r4,0(r2)
  809294:	01402074 	movhi	r5,129
  809298:	29648504 	addi	r5,r5,-28140
  80929c:	080a0a01 	jmpi	80a0a0 <_fwalk_reent>

008092a0 <__fp_unlock>:
  8092a0:	0005883a 	mov	r2,zero
  8092a4:	f800283a 	ret

008092a8 <_cleanup_r>:
  8092a8:	01402074 	movhi	r5,129
  8092ac:	296b2e04 	addi	r5,r5,-21320
  8092b0:	080a0a01 	jmpi	80a0a0 <_fwalk_reent>

008092b4 <__sinit.part.1>:
  8092b4:	defff704 	addi	sp,sp,-36
  8092b8:	00c02074 	movhi	r3,129
  8092bc:	dfc00815 	stw	ra,32(sp)
  8092c0:	ddc00715 	stw	r23,28(sp)
  8092c4:	dd800615 	stw	r22,24(sp)
  8092c8:	dd400515 	stw	r21,20(sp)
  8092cc:	dd000415 	stw	r20,16(sp)
  8092d0:	dcc00315 	stw	r19,12(sp)
  8092d4:	dc800215 	stw	r18,8(sp)
  8092d8:	dc400115 	stw	r17,4(sp)
  8092dc:	dc000015 	stw	r16,0(sp)
  8092e0:	18e4aa04 	addi	r3,r3,-27992
  8092e4:	24000117 	ldw	r16,4(r4)
  8092e8:	20c00f15 	stw	r3,60(r4)
  8092ec:	2080bb04 	addi	r2,r4,748
  8092f0:	00c000c4 	movi	r3,3
  8092f4:	20c0b915 	stw	r3,740(r4)
  8092f8:	2080ba15 	stw	r2,744(r4)
  8092fc:	2000b815 	stw	zero,736(r4)
  809300:	05c00204 	movi	r23,8
  809304:	00800104 	movi	r2,4
  809308:	2025883a 	mov	r18,r4
  80930c:	b80d883a 	mov	r6,r23
  809310:	81001704 	addi	r4,r16,92
  809314:	000b883a 	mov	r5,zero
  809318:	80000015 	stw	zero,0(r16)
  80931c:	80000115 	stw	zero,4(r16)
  809320:	80000215 	stw	zero,8(r16)
  809324:	8080030d 	sth	r2,12(r16)
  809328:	80001915 	stw	zero,100(r16)
  80932c:	8000038d 	sth	zero,14(r16)
  809330:	80000415 	stw	zero,16(r16)
  809334:	80000515 	stw	zero,20(r16)
  809338:	80000615 	stw	zero,24(r16)
  80933c:	08088d00 	call	8088d0 <memset>
  809340:	05802074 	movhi	r22,129
  809344:	94400217 	ldw	r17,8(r18)
  809348:	05402074 	movhi	r21,129
  80934c:	05002074 	movhi	r20,129
  809350:	04c02074 	movhi	r19,129
  809354:	b5a35c04 	addi	r22,r22,-29328
  809358:	ad637304 	addi	r21,r21,-29236
  80935c:	a5239204 	addi	r20,r20,-29112
  809360:	9ce3a904 	addi	r19,r19,-29020
  809364:	85800815 	stw	r22,32(r16)
  809368:	85400915 	stw	r21,36(r16)
  80936c:	85000a15 	stw	r20,40(r16)
  809370:	84c00b15 	stw	r19,44(r16)
  809374:	84000715 	stw	r16,28(r16)
  809378:	00800284 	movi	r2,10
  80937c:	8880030d 	sth	r2,12(r17)
  809380:	00800044 	movi	r2,1
  809384:	b80d883a 	mov	r6,r23
  809388:	89001704 	addi	r4,r17,92
  80938c:	000b883a 	mov	r5,zero
  809390:	88000015 	stw	zero,0(r17)
  809394:	88000115 	stw	zero,4(r17)
  809398:	88000215 	stw	zero,8(r17)
  80939c:	88001915 	stw	zero,100(r17)
  8093a0:	8880038d 	sth	r2,14(r17)
  8093a4:	88000415 	stw	zero,16(r17)
  8093a8:	88000515 	stw	zero,20(r17)
  8093ac:	88000615 	stw	zero,24(r17)
  8093b0:	08088d00 	call	8088d0 <memset>
  8093b4:	94000317 	ldw	r16,12(r18)
  8093b8:	00800484 	movi	r2,18
  8093bc:	8c400715 	stw	r17,28(r17)
  8093c0:	8d800815 	stw	r22,32(r17)
  8093c4:	8d400915 	stw	r21,36(r17)
  8093c8:	8d000a15 	stw	r20,40(r17)
  8093cc:	8cc00b15 	stw	r19,44(r17)
  8093d0:	8080030d 	sth	r2,12(r16)
  8093d4:	00800084 	movi	r2,2
  8093d8:	80000015 	stw	zero,0(r16)
  8093dc:	80000115 	stw	zero,4(r16)
  8093e0:	80000215 	stw	zero,8(r16)
  8093e4:	80001915 	stw	zero,100(r16)
  8093e8:	8080038d 	sth	r2,14(r16)
  8093ec:	80000415 	stw	zero,16(r16)
  8093f0:	80000515 	stw	zero,20(r16)
  8093f4:	80000615 	stw	zero,24(r16)
  8093f8:	b80d883a 	mov	r6,r23
  8093fc:	000b883a 	mov	r5,zero
  809400:	81001704 	addi	r4,r16,92
  809404:	08088d00 	call	8088d0 <memset>
  809408:	00800044 	movi	r2,1
  80940c:	84000715 	stw	r16,28(r16)
  809410:	85800815 	stw	r22,32(r16)
  809414:	85400915 	stw	r21,36(r16)
  809418:	85000a15 	stw	r20,40(r16)
  80941c:	84c00b15 	stw	r19,44(r16)
  809420:	90800e15 	stw	r2,56(r18)
  809424:	dfc00817 	ldw	ra,32(sp)
  809428:	ddc00717 	ldw	r23,28(sp)
  80942c:	dd800617 	ldw	r22,24(sp)
  809430:	dd400517 	ldw	r21,20(sp)
  809434:	dd000417 	ldw	r20,16(sp)
  809438:	dcc00317 	ldw	r19,12(sp)
  80943c:	dc800217 	ldw	r18,8(sp)
  809440:	dc400117 	ldw	r17,4(sp)
  809444:	dc000017 	ldw	r16,0(sp)
  809448:	dec00904 	addi	sp,sp,36
  80944c:	f800283a 	ret

00809450 <__fp_lock>:
  809450:	0005883a 	mov	r2,zero
  809454:	f800283a 	ret

00809458 <__sfmoreglue>:
  809458:	defffc04 	addi	sp,sp,-16
  80945c:	dc400115 	stw	r17,4(sp)
  809460:	2c7fffc4 	addi	r17,r5,-1
  809464:	8c401a24 	muli	r17,r17,104
  809468:	dc800215 	stw	r18,8(sp)
  80946c:	2825883a 	mov	r18,r5
  809470:	89401d04 	addi	r5,r17,116
  809474:	dc000015 	stw	r16,0(sp)
  809478:	dfc00315 	stw	ra,12(sp)
  80947c:	08080c40 	call	8080c4 <_malloc_r>
  809480:	1021883a 	mov	r16,r2
  809484:	10000726 	beq	r2,zero,8094a4 <__sfmoreglue+0x4c>
  809488:	11000304 	addi	r4,r2,12
  80948c:	10000015 	stw	zero,0(r2)
  809490:	14800115 	stw	r18,4(r2)
  809494:	11000215 	stw	r4,8(r2)
  809498:	89801a04 	addi	r6,r17,104
  80949c:	000b883a 	mov	r5,zero
  8094a0:	08088d00 	call	8088d0 <memset>
  8094a4:	8005883a 	mov	r2,r16
  8094a8:	dfc00317 	ldw	ra,12(sp)
  8094ac:	dc800217 	ldw	r18,8(sp)
  8094b0:	dc400117 	ldw	r17,4(sp)
  8094b4:	dc000017 	ldw	r16,0(sp)
  8094b8:	dec00404 	addi	sp,sp,16
  8094bc:	f800283a 	ret

008094c0 <__sfp>:
  8094c0:	defffb04 	addi	sp,sp,-20
  8094c4:	dc000015 	stw	r16,0(sp)
  8094c8:	04002074 	movhi	r16,129
  8094cc:	84049604 	addi	r16,r16,4696
  8094d0:	dcc00315 	stw	r19,12(sp)
  8094d4:	2027883a 	mov	r19,r4
  8094d8:	81000017 	ldw	r4,0(r16)
  8094dc:	dfc00415 	stw	ra,16(sp)
  8094e0:	dc800215 	stw	r18,8(sp)
  8094e4:	20800e17 	ldw	r2,56(r4)
  8094e8:	dc400115 	stw	r17,4(sp)
  8094ec:	1000021e 	bne	r2,zero,8094f8 <__sfp+0x38>
  8094f0:	08092b40 	call	8092b4 <__sinit.part.1>
  8094f4:	81000017 	ldw	r4,0(r16)
  8094f8:	2480b804 	addi	r18,r4,736
  8094fc:	047fffc4 	movi	r17,-1
  809500:	91000117 	ldw	r4,4(r18)
  809504:	94000217 	ldw	r16,8(r18)
  809508:	213fffc4 	addi	r4,r4,-1
  80950c:	20000a16 	blt	r4,zero,809538 <__sfp+0x78>
  809510:	8080030f 	ldh	r2,12(r16)
  809514:	10000c26 	beq	r2,zero,809548 <__sfp+0x88>
  809518:	80c01d04 	addi	r3,r16,116
  80951c:	00000206 	br	809528 <__sfp+0x68>
  809520:	18bfe60f 	ldh	r2,-104(r3)
  809524:	10000826 	beq	r2,zero,809548 <__sfp+0x88>
  809528:	213fffc4 	addi	r4,r4,-1
  80952c:	1c3ffd04 	addi	r16,r3,-12
  809530:	18c01a04 	addi	r3,r3,104
  809534:	247ffa1e 	bne	r4,r17,809520 <__alt_mem_onchip_mem+0xff801520>
  809538:	90800017 	ldw	r2,0(r18)
  80953c:	10001d26 	beq	r2,zero,8095b4 <__sfp+0xf4>
  809540:	1025883a 	mov	r18,r2
  809544:	003fee06 	br	809500 <__alt_mem_onchip_mem+0xff801500>
  809548:	00bfffc4 	movi	r2,-1
  80954c:	8080038d 	sth	r2,14(r16)
  809550:	00800044 	movi	r2,1
  809554:	8080030d 	sth	r2,12(r16)
  809558:	80001915 	stw	zero,100(r16)
  80955c:	80000015 	stw	zero,0(r16)
  809560:	80000215 	stw	zero,8(r16)
  809564:	80000115 	stw	zero,4(r16)
  809568:	80000415 	stw	zero,16(r16)
  80956c:	80000515 	stw	zero,20(r16)
  809570:	80000615 	stw	zero,24(r16)
  809574:	01800204 	movi	r6,8
  809578:	000b883a 	mov	r5,zero
  80957c:	81001704 	addi	r4,r16,92
  809580:	08088d00 	call	8088d0 <memset>
  809584:	8005883a 	mov	r2,r16
  809588:	80000c15 	stw	zero,48(r16)
  80958c:	80000d15 	stw	zero,52(r16)
  809590:	80001115 	stw	zero,68(r16)
  809594:	80001215 	stw	zero,72(r16)
  809598:	dfc00417 	ldw	ra,16(sp)
  80959c:	dcc00317 	ldw	r19,12(sp)
  8095a0:	dc800217 	ldw	r18,8(sp)
  8095a4:	dc400117 	ldw	r17,4(sp)
  8095a8:	dc000017 	ldw	r16,0(sp)
  8095ac:	dec00504 	addi	sp,sp,20
  8095b0:	f800283a 	ret
  8095b4:	01400104 	movi	r5,4
  8095b8:	9809883a 	mov	r4,r19
  8095bc:	08094580 	call	809458 <__sfmoreglue>
  8095c0:	90800015 	stw	r2,0(r18)
  8095c4:	103fde1e 	bne	r2,zero,809540 <__alt_mem_onchip_mem+0xff801540>
  8095c8:	00800304 	movi	r2,12
  8095cc:	98800015 	stw	r2,0(r19)
  8095d0:	0005883a 	mov	r2,zero
  8095d4:	003ff006 	br	809598 <__alt_mem_onchip_mem+0xff801598>

008095d8 <_cleanup>:
  8095d8:	00802074 	movhi	r2,129
  8095dc:	10849604 	addi	r2,r2,4696
  8095e0:	11000017 	ldw	r4,0(r2)
  8095e4:	01402074 	movhi	r5,129
  8095e8:	296b2e04 	addi	r5,r5,-21320
  8095ec:	080a0a01 	jmpi	80a0a0 <_fwalk_reent>

008095f0 <__sinit>:
  8095f0:	20800e17 	ldw	r2,56(r4)
  8095f4:	10000126 	beq	r2,zero,8095fc <__sinit+0xc>
  8095f8:	f800283a 	ret
  8095fc:	08092b41 	jmpi	8092b4 <__sinit.part.1>

00809600 <__sfp_lock_acquire>:
  809600:	f800283a 	ret

00809604 <__sfp_lock_release>:
  809604:	f800283a 	ret

00809608 <__sinit_lock_acquire>:
  809608:	f800283a 	ret

0080960c <__sinit_lock_release>:
  80960c:	f800283a 	ret

00809610 <__fp_lock_all>:
  809610:	00802074 	movhi	r2,129
  809614:	10849704 	addi	r2,r2,4700
  809618:	11000017 	ldw	r4,0(r2)
  80961c:	01402074 	movhi	r5,129
  809620:	29651404 	addi	r5,r5,-27568
  809624:	0809fdc1 	jmpi	809fdc <_fwalk>

00809628 <__fp_unlock_all>:
  809628:	00802074 	movhi	r2,129
  80962c:	10849704 	addi	r2,r2,4700
  809630:	11000017 	ldw	r4,0(r2)
  809634:	01402074 	movhi	r5,129
  809638:	2964a804 	addi	r5,r5,-28000
  80963c:	0809fdc1 	jmpi	809fdc <_fwalk>

00809640 <__sflags>:
  809640:	28800007 	ldb	r2,0(r5)
  809644:	00c01c84 	movi	r3,114
  809648:	10c02426 	beq	r2,r3,8096dc <__sflags+0x9c>
  80964c:	00c01dc4 	movi	r3,119
  809650:	10c01e26 	beq	r2,r3,8096cc <__sflags+0x8c>
  809654:	00c01844 	movi	r3,97
  809658:	10c00426 	beq	r2,r3,80966c <__sflags+0x2c>
  80965c:	00800584 	movi	r2,22
  809660:	20800015 	stw	r2,0(r4)
  809664:	0005883a 	mov	r2,zero
  809668:	f800283a 	ret
  80966c:	02c08204 	movi	r11,520
  809670:	01000044 	movi	r4,1
  809674:	00804204 	movi	r2,264
  809678:	01c00ac4 	movi	r7,43
  80967c:	02bff8c4 	movi	r10,-29
  809680:	027fff04 	movi	r9,-4
  809684:	02001e04 	movi	r8,120
  809688:	29400044 	addi	r5,r5,1
  80968c:	28c00007 	ldb	r3,0(r5)
  809690:	18000626 	beq	r3,zero,8096ac <__sflags+0x6c>
  809694:	19c00826 	beq	r3,r7,8096b8 <__sflags+0x78>
  809698:	1a3ffb1e 	bne	r3,r8,809688 <__alt_mem_onchip_mem+0xff801688>
  80969c:	29400044 	addi	r5,r5,1
  8096a0:	28c00007 	ldb	r3,0(r5)
  8096a4:	21020014 	ori	r4,r4,2048
  8096a8:	183ffa1e 	bne	r3,zero,809694 <__alt_mem_onchip_mem+0xff801694>
  8096ac:	22c8b03a 	or	r4,r4,r11
  8096b0:	31000015 	stw	r4,0(r6)
  8096b4:	f800283a 	ret
  8096b8:	1284703a 	and	r2,r2,r10
  8096bc:	2248703a 	and	r4,r4,r9
  8096c0:	10800414 	ori	r2,r2,16
  8096c4:	21000094 	ori	r4,r4,2
  8096c8:	003fef06 	br	809688 <__alt_mem_onchip_mem+0xff801688>
  8096cc:	02c18004 	movi	r11,1536
  8096d0:	01000044 	movi	r4,1
  8096d4:	00800204 	movi	r2,8
  8096d8:	003fe706 	br	809678 <__alt_mem_onchip_mem+0xff801678>
  8096dc:	0017883a 	mov	r11,zero
  8096e0:	0009883a 	mov	r4,zero
  8096e4:	00800104 	movi	r2,4
  8096e8:	003fe306 	br	809678 <__alt_mem_onchip_mem+0xff801678>

008096ec <_malloc_trim_r>:
  8096ec:	defffb04 	addi	sp,sp,-20
  8096f0:	dcc00315 	stw	r19,12(sp)
  8096f4:	04c02074 	movhi	r19,129
  8096f8:	dc800215 	stw	r18,8(sp)
  8096fc:	dc400115 	stw	r17,4(sp)
  809700:	dc000015 	stw	r16,0(sp)
  809704:	dfc00415 	stw	ra,16(sp)
  809708:	2821883a 	mov	r16,r5
  80970c:	9cfe9904 	addi	r19,r19,-1436
  809710:	2025883a 	mov	r18,r4
  809714:	080b7980 	call	80b798 <__malloc_lock>
  809718:	98800217 	ldw	r2,8(r19)
  80971c:	14400117 	ldw	r17,4(r2)
  809720:	00bfff04 	movi	r2,-4
  809724:	88a2703a 	and	r17,r17,r2
  809728:	8c21c83a 	sub	r16,r17,r16
  80972c:	8403fbc4 	addi	r16,r16,4079
  809730:	8020d33a 	srli	r16,r16,12
  809734:	0083ffc4 	movi	r2,4095
  809738:	843fffc4 	addi	r16,r16,-1
  80973c:	8020933a 	slli	r16,r16,12
  809740:	1400060e 	bge	r2,r16,80975c <_malloc_trim_r+0x70>
  809744:	000b883a 	mov	r5,zero
  809748:	9009883a 	mov	r4,r18
  80974c:	0808d1c0 	call	808d1c <_sbrk_r>
  809750:	98c00217 	ldw	r3,8(r19)
  809754:	1c47883a 	add	r3,r3,r17
  809758:	10c00a26 	beq	r2,r3,809784 <_malloc_trim_r+0x98>
  80975c:	9009883a 	mov	r4,r18
  809760:	080b7bc0 	call	80b7bc <__malloc_unlock>
  809764:	0005883a 	mov	r2,zero
  809768:	dfc00417 	ldw	ra,16(sp)
  80976c:	dcc00317 	ldw	r19,12(sp)
  809770:	dc800217 	ldw	r18,8(sp)
  809774:	dc400117 	ldw	r17,4(sp)
  809778:	dc000017 	ldw	r16,0(sp)
  80977c:	dec00504 	addi	sp,sp,20
  809780:	f800283a 	ret
  809784:	040bc83a 	sub	r5,zero,r16
  809788:	9009883a 	mov	r4,r18
  80978c:	0808d1c0 	call	808d1c <_sbrk_r>
  809790:	00ffffc4 	movi	r3,-1
  809794:	10c00d26 	beq	r2,r3,8097cc <_malloc_trim_r+0xe0>
  809798:	00c02074 	movhi	r3,129
  80979c:	18cbca04 	addi	r3,r3,12072
  8097a0:	18800017 	ldw	r2,0(r3)
  8097a4:	99000217 	ldw	r4,8(r19)
  8097a8:	8c23c83a 	sub	r17,r17,r16
  8097ac:	8c400054 	ori	r17,r17,1
  8097b0:	1421c83a 	sub	r16,r2,r16
  8097b4:	24400115 	stw	r17,4(r4)
  8097b8:	9009883a 	mov	r4,r18
  8097bc:	1c000015 	stw	r16,0(r3)
  8097c0:	080b7bc0 	call	80b7bc <__malloc_unlock>
  8097c4:	00800044 	movi	r2,1
  8097c8:	003fe706 	br	809768 <__alt_mem_onchip_mem+0xff801768>
  8097cc:	000b883a 	mov	r5,zero
  8097d0:	9009883a 	mov	r4,r18
  8097d4:	0808d1c0 	call	808d1c <_sbrk_r>
  8097d8:	99000217 	ldw	r4,8(r19)
  8097dc:	014003c4 	movi	r5,15
  8097e0:	1107c83a 	sub	r3,r2,r4
  8097e4:	28ffdd0e 	bge	r5,r3,80975c <__alt_mem_onchip_mem+0xff80175c>
  8097e8:	01402074 	movhi	r5,129
  8097ec:	29449804 	addi	r5,r5,4704
  8097f0:	29400017 	ldw	r5,0(r5)
  8097f4:	18c00054 	ori	r3,r3,1
  8097f8:	20c00115 	stw	r3,4(r4)
  8097fc:	00c02074 	movhi	r3,129
  809800:	1145c83a 	sub	r2,r2,r5
  809804:	18cbca04 	addi	r3,r3,12072
  809808:	18800015 	stw	r2,0(r3)
  80980c:	003fd306 	br	80975c <__alt_mem_onchip_mem+0xff80175c>

00809810 <_free_r>:
  809810:	28004126 	beq	r5,zero,809918 <_free_r+0x108>
  809814:	defffd04 	addi	sp,sp,-12
  809818:	dc400115 	stw	r17,4(sp)
  80981c:	dc000015 	stw	r16,0(sp)
  809820:	2023883a 	mov	r17,r4
  809824:	2821883a 	mov	r16,r5
  809828:	dfc00215 	stw	ra,8(sp)
  80982c:	080b7980 	call	80b798 <__malloc_lock>
  809830:	81ffff17 	ldw	r7,-4(r16)
  809834:	00bfff84 	movi	r2,-2
  809838:	01002074 	movhi	r4,129
  80983c:	81bffe04 	addi	r6,r16,-8
  809840:	3884703a 	and	r2,r7,r2
  809844:	213e9904 	addi	r4,r4,-1436
  809848:	308b883a 	add	r5,r6,r2
  80984c:	2a400117 	ldw	r9,4(r5)
  809850:	22000217 	ldw	r8,8(r4)
  809854:	00ffff04 	movi	r3,-4
  809858:	48c6703a 	and	r3,r9,r3
  80985c:	2a005726 	beq	r5,r8,8099bc <_free_r+0x1ac>
  809860:	28c00115 	stw	r3,4(r5)
  809864:	39c0004c 	andi	r7,r7,1
  809868:	3800091e 	bne	r7,zero,809890 <_free_r+0x80>
  80986c:	823ffe17 	ldw	r8,-8(r16)
  809870:	22400204 	addi	r9,r4,8
  809874:	320dc83a 	sub	r6,r6,r8
  809878:	31c00217 	ldw	r7,8(r6)
  80987c:	1205883a 	add	r2,r2,r8
  809880:	3a406526 	beq	r7,r9,809a18 <_free_r+0x208>
  809884:	32000317 	ldw	r8,12(r6)
  809888:	3a000315 	stw	r8,12(r7)
  80988c:	41c00215 	stw	r7,8(r8)
  809890:	28cf883a 	add	r7,r5,r3
  809894:	39c00117 	ldw	r7,4(r7)
  809898:	39c0004c 	andi	r7,r7,1
  80989c:	38003a26 	beq	r7,zero,809988 <_free_r+0x178>
  8098a0:	10c00054 	ori	r3,r2,1
  8098a4:	30c00115 	stw	r3,4(r6)
  8098a8:	3087883a 	add	r3,r6,r2
  8098ac:	18800015 	stw	r2,0(r3)
  8098b0:	00c07fc4 	movi	r3,511
  8098b4:	18801936 	bltu	r3,r2,80991c <_free_r+0x10c>
  8098b8:	1004d0fa 	srli	r2,r2,3
  8098bc:	01c00044 	movi	r7,1
  8098c0:	21400117 	ldw	r5,4(r4)
  8098c4:	10c00044 	addi	r3,r2,1
  8098c8:	18c7883a 	add	r3,r3,r3
  8098cc:	1005d0ba 	srai	r2,r2,2
  8098d0:	18c7883a 	add	r3,r3,r3
  8098d4:	18c7883a 	add	r3,r3,r3
  8098d8:	1907883a 	add	r3,r3,r4
  8098dc:	3884983a 	sll	r2,r7,r2
  8098e0:	19c00017 	ldw	r7,0(r3)
  8098e4:	1a3ffe04 	addi	r8,r3,-8
  8098e8:	1144b03a 	or	r2,r2,r5
  8098ec:	32000315 	stw	r8,12(r6)
  8098f0:	31c00215 	stw	r7,8(r6)
  8098f4:	20800115 	stw	r2,4(r4)
  8098f8:	19800015 	stw	r6,0(r3)
  8098fc:	39800315 	stw	r6,12(r7)
  809900:	8809883a 	mov	r4,r17
  809904:	dfc00217 	ldw	ra,8(sp)
  809908:	dc400117 	ldw	r17,4(sp)
  80990c:	dc000017 	ldw	r16,0(sp)
  809910:	dec00304 	addi	sp,sp,12
  809914:	080b7bc1 	jmpi	80b7bc <__malloc_unlock>
  809918:	f800283a 	ret
  80991c:	100ad27a 	srli	r5,r2,9
  809920:	00c00104 	movi	r3,4
  809924:	19404a36 	bltu	r3,r5,809a50 <_free_r+0x240>
  809928:	100ad1ba 	srli	r5,r2,6
  80992c:	28c00e44 	addi	r3,r5,57
  809930:	18c7883a 	add	r3,r3,r3
  809934:	29400e04 	addi	r5,r5,56
  809938:	18c7883a 	add	r3,r3,r3
  80993c:	18c7883a 	add	r3,r3,r3
  809940:	1909883a 	add	r4,r3,r4
  809944:	20c00017 	ldw	r3,0(r4)
  809948:	01c02074 	movhi	r7,129
  80994c:	213ffe04 	addi	r4,r4,-8
  809950:	39fe9904 	addi	r7,r7,-1436
  809954:	20c04426 	beq	r4,r3,809a68 <_free_r+0x258>
  809958:	01ffff04 	movi	r7,-4
  80995c:	19400117 	ldw	r5,4(r3)
  809960:	29ca703a 	and	r5,r5,r7
  809964:	1140022e 	bgeu	r2,r5,809970 <_free_r+0x160>
  809968:	18c00217 	ldw	r3,8(r3)
  80996c:	20fffb1e 	bne	r4,r3,80995c <__alt_mem_onchip_mem+0xff80195c>
  809970:	19000317 	ldw	r4,12(r3)
  809974:	31000315 	stw	r4,12(r6)
  809978:	30c00215 	stw	r3,8(r6)
  80997c:	21800215 	stw	r6,8(r4)
  809980:	19800315 	stw	r6,12(r3)
  809984:	003fde06 	br	809900 <__alt_mem_onchip_mem+0xff801900>
  809988:	29c00217 	ldw	r7,8(r5)
  80998c:	10c5883a 	add	r2,r2,r3
  809990:	00c02074 	movhi	r3,129
  809994:	18fe9b04 	addi	r3,r3,-1428
  809998:	38c03b26 	beq	r7,r3,809a88 <_free_r+0x278>
  80999c:	2a000317 	ldw	r8,12(r5)
  8099a0:	11400054 	ori	r5,r2,1
  8099a4:	3087883a 	add	r3,r6,r2
  8099a8:	3a000315 	stw	r8,12(r7)
  8099ac:	41c00215 	stw	r7,8(r8)
  8099b0:	31400115 	stw	r5,4(r6)
  8099b4:	18800015 	stw	r2,0(r3)
  8099b8:	003fbd06 	br	8098b0 <__alt_mem_onchip_mem+0xff8018b0>
  8099bc:	39c0004c 	andi	r7,r7,1
  8099c0:	10c5883a 	add	r2,r2,r3
  8099c4:	3800071e 	bne	r7,zero,8099e4 <_free_r+0x1d4>
  8099c8:	81fffe17 	ldw	r7,-8(r16)
  8099cc:	31cdc83a 	sub	r6,r6,r7
  8099d0:	30c00317 	ldw	r3,12(r6)
  8099d4:	31400217 	ldw	r5,8(r6)
  8099d8:	11c5883a 	add	r2,r2,r7
  8099dc:	28c00315 	stw	r3,12(r5)
  8099e0:	19400215 	stw	r5,8(r3)
  8099e4:	10c00054 	ori	r3,r2,1
  8099e8:	30c00115 	stw	r3,4(r6)
  8099ec:	00c02074 	movhi	r3,129
  8099f0:	18c49904 	addi	r3,r3,4708
  8099f4:	18c00017 	ldw	r3,0(r3)
  8099f8:	21800215 	stw	r6,8(r4)
  8099fc:	10ffc036 	bltu	r2,r3,809900 <__alt_mem_onchip_mem+0xff801900>
  809a00:	00802074 	movhi	r2,129
  809a04:	108bc204 	addi	r2,r2,12040
  809a08:	11400017 	ldw	r5,0(r2)
  809a0c:	8809883a 	mov	r4,r17
  809a10:	08096ec0 	call	8096ec <_malloc_trim_r>
  809a14:	003fba06 	br	809900 <__alt_mem_onchip_mem+0xff801900>
  809a18:	28c9883a 	add	r4,r5,r3
  809a1c:	21000117 	ldw	r4,4(r4)
  809a20:	2100004c 	andi	r4,r4,1
  809a24:	2000391e 	bne	r4,zero,809b0c <_free_r+0x2fc>
  809a28:	29c00217 	ldw	r7,8(r5)
  809a2c:	29000317 	ldw	r4,12(r5)
  809a30:	1885883a 	add	r2,r3,r2
  809a34:	10c00054 	ori	r3,r2,1
  809a38:	39000315 	stw	r4,12(r7)
  809a3c:	21c00215 	stw	r7,8(r4)
  809a40:	30c00115 	stw	r3,4(r6)
  809a44:	308d883a 	add	r6,r6,r2
  809a48:	30800015 	stw	r2,0(r6)
  809a4c:	003fac06 	br	809900 <__alt_mem_onchip_mem+0xff801900>
  809a50:	00c00504 	movi	r3,20
  809a54:	19401536 	bltu	r3,r5,809aac <_free_r+0x29c>
  809a58:	28c01704 	addi	r3,r5,92
  809a5c:	18c7883a 	add	r3,r3,r3
  809a60:	294016c4 	addi	r5,r5,91
  809a64:	003fb406 	br	809938 <__alt_mem_onchip_mem+0xff801938>
  809a68:	280bd0ba 	srai	r5,r5,2
  809a6c:	00c00044 	movi	r3,1
  809a70:	38800117 	ldw	r2,4(r7)
  809a74:	194a983a 	sll	r5,r3,r5
  809a78:	2007883a 	mov	r3,r4
  809a7c:	2884b03a 	or	r2,r5,r2
  809a80:	38800115 	stw	r2,4(r7)
  809a84:	003fbb06 	br	809974 <__alt_mem_onchip_mem+0xff801974>
  809a88:	21800515 	stw	r6,20(r4)
  809a8c:	21800415 	stw	r6,16(r4)
  809a90:	10c00054 	ori	r3,r2,1
  809a94:	31c00315 	stw	r7,12(r6)
  809a98:	31c00215 	stw	r7,8(r6)
  809a9c:	30c00115 	stw	r3,4(r6)
  809aa0:	308d883a 	add	r6,r6,r2
  809aa4:	30800015 	stw	r2,0(r6)
  809aa8:	003f9506 	br	809900 <__alt_mem_onchip_mem+0xff801900>
  809aac:	00c01504 	movi	r3,84
  809ab0:	19400536 	bltu	r3,r5,809ac8 <_free_r+0x2b8>
  809ab4:	100ad33a 	srli	r5,r2,12
  809ab8:	28c01bc4 	addi	r3,r5,111
  809abc:	18c7883a 	add	r3,r3,r3
  809ac0:	29401b84 	addi	r5,r5,110
  809ac4:	003f9c06 	br	809938 <__alt_mem_onchip_mem+0xff801938>
  809ac8:	00c05504 	movi	r3,340
  809acc:	19400536 	bltu	r3,r5,809ae4 <_free_r+0x2d4>
  809ad0:	100ad3fa 	srli	r5,r2,15
  809ad4:	28c01e04 	addi	r3,r5,120
  809ad8:	18c7883a 	add	r3,r3,r3
  809adc:	29401dc4 	addi	r5,r5,119
  809ae0:	003f9506 	br	809938 <__alt_mem_onchip_mem+0xff801938>
  809ae4:	00c15504 	movi	r3,1364
  809ae8:	19400536 	bltu	r3,r5,809b00 <_free_r+0x2f0>
  809aec:	100ad4ba 	srli	r5,r2,18
  809af0:	28c01f44 	addi	r3,r5,125
  809af4:	18c7883a 	add	r3,r3,r3
  809af8:	29401f04 	addi	r5,r5,124
  809afc:	003f8e06 	br	809938 <__alt_mem_onchip_mem+0xff801938>
  809b00:	00c03f84 	movi	r3,254
  809b04:	01401f84 	movi	r5,126
  809b08:	003f8b06 	br	809938 <__alt_mem_onchip_mem+0xff801938>
  809b0c:	10c00054 	ori	r3,r2,1
  809b10:	30c00115 	stw	r3,4(r6)
  809b14:	308d883a 	add	r6,r6,r2
  809b18:	30800015 	stw	r2,0(r6)
  809b1c:	003f7806 	br	809900 <__alt_mem_onchip_mem+0xff801900>

00809b20 <__sfvwrite_r>:
  809b20:	30800217 	ldw	r2,8(r6)
  809b24:	10006726 	beq	r2,zero,809cc4 <__sfvwrite_r+0x1a4>
  809b28:	28c0030b 	ldhu	r3,12(r5)
  809b2c:	defff404 	addi	sp,sp,-48
  809b30:	dd400715 	stw	r21,28(sp)
  809b34:	dd000615 	stw	r20,24(sp)
  809b38:	dc000215 	stw	r16,8(sp)
  809b3c:	dfc00b15 	stw	ra,44(sp)
  809b40:	df000a15 	stw	fp,40(sp)
  809b44:	ddc00915 	stw	r23,36(sp)
  809b48:	dd800815 	stw	r22,32(sp)
  809b4c:	dcc00515 	stw	r19,20(sp)
  809b50:	dc800415 	stw	r18,16(sp)
  809b54:	dc400315 	stw	r17,12(sp)
  809b58:	1880020c 	andi	r2,r3,8
  809b5c:	2821883a 	mov	r16,r5
  809b60:	202b883a 	mov	r21,r4
  809b64:	3029883a 	mov	r20,r6
  809b68:	10002726 	beq	r2,zero,809c08 <__sfvwrite_r+0xe8>
  809b6c:	28800417 	ldw	r2,16(r5)
  809b70:	10002526 	beq	r2,zero,809c08 <__sfvwrite_r+0xe8>
  809b74:	1880008c 	andi	r2,r3,2
  809b78:	a4400017 	ldw	r17,0(r20)
  809b7c:	10002a26 	beq	r2,zero,809c28 <__sfvwrite_r+0x108>
  809b80:	05a00034 	movhi	r22,32768
  809b84:	0027883a 	mov	r19,zero
  809b88:	0025883a 	mov	r18,zero
  809b8c:	b5bf0004 	addi	r22,r22,-1024
  809b90:	980d883a 	mov	r6,r19
  809b94:	a809883a 	mov	r4,r21
  809b98:	90004626 	beq	r18,zero,809cb4 <__sfvwrite_r+0x194>
  809b9c:	900f883a 	mov	r7,r18
  809ba0:	b480022e 	bgeu	r22,r18,809bac <__sfvwrite_r+0x8c>
  809ba4:	01e00034 	movhi	r7,32768
  809ba8:	39ff0004 	addi	r7,r7,-1024
  809bac:	80800917 	ldw	r2,36(r16)
  809bb0:	81400717 	ldw	r5,28(r16)
  809bb4:	103ee83a 	callr	r2
  809bb8:	0080570e 	bge	zero,r2,809d18 <__sfvwrite_r+0x1f8>
  809bbc:	a0c00217 	ldw	r3,8(r20)
  809bc0:	98a7883a 	add	r19,r19,r2
  809bc4:	90a5c83a 	sub	r18,r18,r2
  809bc8:	1885c83a 	sub	r2,r3,r2
  809bcc:	a0800215 	stw	r2,8(r20)
  809bd0:	103fef1e 	bne	r2,zero,809b90 <__alt_mem_onchip_mem+0xff801b90>
  809bd4:	0005883a 	mov	r2,zero
  809bd8:	dfc00b17 	ldw	ra,44(sp)
  809bdc:	df000a17 	ldw	fp,40(sp)
  809be0:	ddc00917 	ldw	r23,36(sp)
  809be4:	dd800817 	ldw	r22,32(sp)
  809be8:	dd400717 	ldw	r21,28(sp)
  809bec:	dd000617 	ldw	r20,24(sp)
  809bf0:	dcc00517 	ldw	r19,20(sp)
  809bf4:	dc800417 	ldw	r18,16(sp)
  809bf8:	dc400317 	ldw	r17,12(sp)
  809bfc:	dc000217 	ldw	r16,8(sp)
  809c00:	dec00c04 	addi	sp,sp,48
  809c04:	f800283a 	ret
  809c08:	800b883a 	mov	r5,r16
  809c0c:	a809883a 	mov	r4,r21
  809c10:	080ab640 	call	80ab64 <__swsetup_r>
  809c14:	1000eb1e 	bne	r2,zero,809fc4 <__sfvwrite_r+0x4a4>
  809c18:	80c0030b 	ldhu	r3,12(r16)
  809c1c:	a4400017 	ldw	r17,0(r20)
  809c20:	1880008c 	andi	r2,r3,2
  809c24:	103fd61e 	bne	r2,zero,809b80 <__alt_mem_onchip_mem+0xff801b80>
  809c28:	1880004c 	andi	r2,r3,1
  809c2c:	10003f1e 	bne	r2,zero,809d2c <__sfvwrite_r+0x20c>
  809c30:	0039883a 	mov	fp,zero
  809c34:	0025883a 	mov	r18,zero
  809c38:	90001a26 	beq	r18,zero,809ca4 <__sfvwrite_r+0x184>
  809c3c:	1880800c 	andi	r2,r3,512
  809c40:	84c00217 	ldw	r19,8(r16)
  809c44:	10002126 	beq	r2,zero,809ccc <__sfvwrite_r+0x1ac>
  809c48:	982f883a 	mov	r23,r19
  809c4c:	94c09336 	bltu	r18,r19,809e9c <__sfvwrite_r+0x37c>
  809c50:	1881200c 	andi	r2,r3,1152
  809c54:	10009e1e 	bne	r2,zero,809ed0 <__sfvwrite_r+0x3b0>
  809c58:	81000017 	ldw	r4,0(r16)
  809c5c:	b80d883a 	mov	r6,r23
  809c60:	e00b883a 	mov	r5,fp
  809c64:	080a4440 	call	80a444 <memmove>
  809c68:	80c00217 	ldw	r3,8(r16)
  809c6c:	81000017 	ldw	r4,0(r16)
  809c70:	9005883a 	mov	r2,r18
  809c74:	1ce7c83a 	sub	r19,r3,r19
  809c78:	25cf883a 	add	r7,r4,r23
  809c7c:	84c00215 	stw	r19,8(r16)
  809c80:	81c00015 	stw	r7,0(r16)
  809c84:	a0c00217 	ldw	r3,8(r20)
  809c88:	e0b9883a 	add	fp,fp,r2
  809c8c:	90a5c83a 	sub	r18,r18,r2
  809c90:	18a7c83a 	sub	r19,r3,r2
  809c94:	a4c00215 	stw	r19,8(r20)
  809c98:	983fce26 	beq	r19,zero,809bd4 <__alt_mem_onchip_mem+0xff801bd4>
  809c9c:	80c0030b 	ldhu	r3,12(r16)
  809ca0:	903fe61e 	bne	r18,zero,809c3c <__alt_mem_onchip_mem+0xff801c3c>
  809ca4:	8f000017 	ldw	fp,0(r17)
  809ca8:	8c800117 	ldw	r18,4(r17)
  809cac:	8c400204 	addi	r17,r17,8
  809cb0:	003fe106 	br	809c38 <__alt_mem_onchip_mem+0xff801c38>
  809cb4:	8cc00017 	ldw	r19,0(r17)
  809cb8:	8c800117 	ldw	r18,4(r17)
  809cbc:	8c400204 	addi	r17,r17,8
  809cc0:	003fb306 	br	809b90 <__alt_mem_onchip_mem+0xff801b90>
  809cc4:	0005883a 	mov	r2,zero
  809cc8:	f800283a 	ret
  809ccc:	81000017 	ldw	r4,0(r16)
  809cd0:	80800417 	ldw	r2,16(r16)
  809cd4:	11005736 	bltu	r2,r4,809e34 <__sfvwrite_r+0x314>
  809cd8:	85c00517 	ldw	r23,20(r16)
  809cdc:	95c05536 	bltu	r18,r23,809e34 <__sfvwrite_r+0x314>
  809ce0:	00a00034 	movhi	r2,32768
  809ce4:	10bfffc4 	addi	r2,r2,-1
  809ce8:	9009883a 	mov	r4,r18
  809cec:	1480012e 	bgeu	r2,r18,809cf4 <__sfvwrite_r+0x1d4>
  809cf0:	1009883a 	mov	r4,r2
  809cf4:	b80b883a 	mov	r5,r23
  809cf8:	080adbc0 	call	80adbc <__divsi3>
  809cfc:	15cf383a 	mul	r7,r2,r23
  809d00:	81400717 	ldw	r5,28(r16)
  809d04:	80800917 	ldw	r2,36(r16)
  809d08:	e00d883a 	mov	r6,fp
  809d0c:	a809883a 	mov	r4,r21
  809d10:	103ee83a 	callr	r2
  809d14:	00bfdb16 	blt	zero,r2,809c84 <__alt_mem_onchip_mem+0xff801c84>
  809d18:	8080030b 	ldhu	r2,12(r16)
  809d1c:	10801014 	ori	r2,r2,64
  809d20:	8080030d 	sth	r2,12(r16)
  809d24:	00bfffc4 	movi	r2,-1
  809d28:	003fab06 	br	809bd8 <__alt_mem_onchip_mem+0xff801bd8>
  809d2c:	0027883a 	mov	r19,zero
  809d30:	0011883a 	mov	r8,zero
  809d34:	0039883a 	mov	fp,zero
  809d38:	0025883a 	mov	r18,zero
  809d3c:	90001f26 	beq	r18,zero,809dbc <__sfvwrite_r+0x29c>
  809d40:	40005a26 	beq	r8,zero,809eac <__sfvwrite_r+0x38c>
  809d44:	982d883a 	mov	r22,r19
  809d48:	94c0012e 	bgeu	r18,r19,809d50 <__sfvwrite_r+0x230>
  809d4c:	902d883a 	mov	r22,r18
  809d50:	81000017 	ldw	r4,0(r16)
  809d54:	80800417 	ldw	r2,16(r16)
  809d58:	b02f883a 	mov	r23,r22
  809d5c:	81c00517 	ldw	r7,20(r16)
  809d60:	1100032e 	bgeu	r2,r4,809d70 <__sfvwrite_r+0x250>
  809d64:	80c00217 	ldw	r3,8(r16)
  809d68:	38c7883a 	add	r3,r7,r3
  809d6c:	1d801816 	blt	r3,r22,809dd0 <__sfvwrite_r+0x2b0>
  809d70:	b1c03e16 	blt	r22,r7,809e6c <__sfvwrite_r+0x34c>
  809d74:	80800917 	ldw	r2,36(r16)
  809d78:	81400717 	ldw	r5,28(r16)
  809d7c:	e00d883a 	mov	r6,fp
  809d80:	da000115 	stw	r8,4(sp)
  809d84:	a809883a 	mov	r4,r21
  809d88:	103ee83a 	callr	r2
  809d8c:	102f883a 	mov	r23,r2
  809d90:	da000117 	ldw	r8,4(sp)
  809d94:	00bfe00e 	bge	zero,r2,809d18 <__alt_mem_onchip_mem+0xff801d18>
  809d98:	9de7c83a 	sub	r19,r19,r23
  809d9c:	98001f26 	beq	r19,zero,809e1c <__sfvwrite_r+0x2fc>
  809da0:	a0800217 	ldw	r2,8(r20)
  809da4:	e5f9883a 	add	fp,fp,r23
  809da8:	95e5c83a 	sub	r18,r18,r23
  809dac:	15efc83a 	sub	r23,r2,r23
  809db0:	a5c00215 	stw	r23,8(r20)
  809db4:	b83f8726 	beq	r23,zero,809bd4 <__alt_mem_onchip_mem+0xff801bd4>
  809db8:	903fe11e 	bne	r18,zero,809d40 <__alt_mem_onchip_mem+0xff801d40>
  809dbc:	8f000017 	ldw	fp,0(r17)
  809dc0:	8c800117 	ldw	r18,4(r17)
  809dc4:	0011883a 	mov	r8,zero
  809dc8:	8c400204 	addi	r17,r17,8
  809dcc:	003fdb06 	br	809d3c <__alt_mem_onchip_mem+0xff801d3c>
  809dd0:	180d883a 	mov	r6,r3
  809dd4:	e00b883a 	mov	r5,fp
  809dd8:	da000115 	stw	r8,4(sp)
  809ddc:	d8c00015 	stw	r3,0(sp)
  809de0:	080a4440 	call	80a444 <memmove>
  809de4:	d8c00017 	ldw	r3,0(sp)
  809de8:	80800017 	ldw	r2,0(r16)
  809dec:	800b883a 	mov	r5,r16
  809df0:	a809883a 	mov	r4,r21
  809df4:	10c5883a 	add	r2,r2,r3
  809df8:	80800015 	stw	r2,0(r16)
  809dfc:	d8c00015 	stw	r3,0(sp)
  809e00:	08092140 	call	809214 <_fflush_r>
  809e04:	d8c00017 	ldw	r3,0(sp)
  809e08:	da000117 	ldw	r8,4(sp)
  809e0c:	103fc21e 	bne	r2,zero,809d18 <__alt_mem_onchip_mem+0xff801d18>
  809e10:	182f883a 	mov	r23,r3
  809e14:	9de7c83a 	sub	r19,r19,r23
  809e18:	983fe11e 	bne	r19,zero,809da0 <__alt_mem_onchip_mem+0xff801da0>
  809e1c:	800b883a 	mov	r5,r16
  809e20:	a809883a 	mov	r4,r21
  809e24:	08092140 	call	809214 <_fflush_r>
  809e28:	103fbb1e 	bne	r2,zero,809d18 <__alt_mem_onchip_mem+0xff801d18>
  809e2c:	0011883a 	mov	r8,zero
  809e30:	003fdb06 	br	809da0 <__alt_mem_onchip_mem+0xff801da0>
  809e34:	94c0012e 	bgeu	r18,r19,809e3c <__sfvwrite_r+0x31c>
  809e38:	9027883a 	mov	r19,r18
  809e3c:	980d883a 	mov	r6,r19
  809e40:	e00b883a 	mov	r5,fp
  809e44:	080a4440 	call	80a444 <memmove>
  809e48:	80800217 	ldw	r2,8(r16)
  809e4c:	80c00017 	ldw	r3,0(r16)
  809e50:	14c5c83a 	sub	r2,r2,r19
  809e54:	1cc7883a 	add	r3,r3,r19
  809e58:	80800215 	stw	r2,8(r16)
  809e5c:	80c00015 	stw	r3,0(r16)
  809e60:	10004326 	beq	r2,zero,809f70 <__sfvwrite_r+0x450>
  809e64:	9805883a 	mov	r2,r19
  809e68:	003f8606 	br	809c84 <__alt_mem_onchip_mem+0xff801c84>
  809e6c:	b00d883a 	mov	r6,r22
  809e70:	e00b883a 	mov	r5,fp
  809e74:	da000115 	stw	r8,4(sp)
  809e78:	080a4440 	call	80a444 <memmove>
  809e7c:	80800217 	ldw	r2,8(r16)
  809e80:	80c00017 	ldw	r3,0(r16)
  809e84:	da000117 	ldw	r8,4(sp)
  809e88:	1585c83a 	sub	r2,r2,r22
  809e8c:	1dad883a 	add	r22,r3,r22
  809e90:	80800215 	stw	r2,8(r16)
  809e94:	85800015 	stw	r22,0(r16)
  809e98:	003fbf06 	br	809d98 <__alt_mem_onchip_mem+0xff801d98>
  809e9c:	81000017 	ldw	r4,0(r16)
  809ea0:	9027883a 	mov	r19,r18
  809ea4:	902f883a 	mov	r23,r18
  809ea8:	003f6c06 	br	809c5c <__alt_mem_onchip_mem+0xff801c5c>
  809eac:	900d883a 	mov	r6,r18
  809eb0:	01400284 	movi	r5,10
  809eb4:	e009883a 	mov	r4,fp
  809eb8:	080a2180 	call	80a218 <memchr>
  809ebc:	10003e26 	beq	r2,zero,809fb8 <__sfvwrite_r+0x498>
  809ec0:	10800044 	addi	r2,r2,1
  809ec4:	1727c83a 	sub	r19,r2,fp
  809ec8:	02000044 	movi	r8,1
  809ecc:	003f9d06 	br	809d44 <__alt_mem_onchip_mem+0xff801d44>
  809ed0:	80800517 	ldw	r2,20(r16)
  809ed4:	81400417 	ldw	r5,16(r16)
  809ed8:	81c00017 	ldw	r7,0(r16)
  809edc:	10a7883a 	add	r19,r2,r2
  809ee0:	9885883a 	add	r2,r19,r2
  809ee4:	1026d7fa 	srli	r19,r2,31
  809ee8:	396dc83a 	sub	r22,r7,r5
  809eec:	b1000044 	addi	r4,r22,1
  809ef0:	9885883a 	add	r2,r19,r2
  809ef4:	1027d07a 	srai	r19,r2,1
  809ef8:	2485883a 	add	r2,r4,r18
  809efc:	980d883a 	mov	r6,r19
  809f00:	9880022e 	bgeu	r19,r2,809f0c <__sfvwrite_r+0x3ec>
  809f04:	1027883a 	mov	r19,r2
  809f08:	100d883a 	mov	r6,r2
  809f0c:	18c1000c 	andi	r3,r3,1024
  809f10:	18001c26 	beq	r3,zero,809f84 <__sfvwrite_r+0x464>
  809f14:	300b883a 	mov	r5,r6
  809f18:	a809883a 	mov	r4,r21
  809f1c:	08080c40 	call	8080c4 <_malloc_r>
  809f20:	102f883a 	mov	r23,r2
  809f24:	10002926 	beq	r2,zero,809fcc <__sfvwrite_r+0x4ac>
  809f28:	81400417 	ldw	r5,16(r16)
  809f2c:	b00d883a 	mov	r6,r22
  809f30:	1009883a 	mov	r4,r2
  809f34:	080a2fc0 	call	80a2fc <memcpy>
  809f38:	8080030b 	ldhu	r2,12(r16)
  809f3c:	00fedfc4 	movi	r3,-1153
  809f40:	10c4703a 	and	r2,r2,r3
  809f44:	10802014 	ori	r2,r2,128
  809f48:	8080030d 	sth	r2,12(r16)
  809f4c:	bd89883a 	add	r4,r23,r22
  809f50:	9d8fc83a 	sub	r7,r19,r22
  809f54:	85c00415 	stw	r23,16(r16)
  809f58:	84c00515 	stw	r19,20(r16)
  809f5c:	81000015 	stw	r4,0(r16)
  809f60:	9027883a 	mov	r19,r18
  809f64:	81c00215 	stw	r7,8(r16)
  809f68:	902f883a 	mov	r23,r18
  809f6c:	003f3b06 	br	809c5c <__alt_mem_onchip_mem+0xff801c5c>
  809f70:	800b883a 	mov	r5,r16
  809f74:	a809883a 	mov	r4,r21
  809f78:	08092140 	call	809214 <_fflush_r>
  809f7c:	103fb926 	beq	r2,zero,809e64 <__alt_mem_onchip_mem+0xff801e64>
  809f80:	003f6506 	br	809d18 <__alt_mem_onchip_mem+0xff801d18>
  809f84:	a809883a 	mov	r4,r21
  809f88:	080a6000 	call	80a600 <_realloc_r>
  809f8c:	102f883a 	mov	r23,r2
  809f90:	103fee1e 	bne	r2,zero,809f4c <__alt_mem_onchip_mem+0xff801f4c>
  809f94:	81400417 	ldw	r5,16(r16)
  809f98:	a809883a 	mov	r4,r21
  809f9c:	08098100 	call	809810 <_free_r>
  809fa0:	8080030b 	ldhu	r2,12(r16)
  809fa4:	00ffdfc4 	movi	r3,-129
  809fa8:	1884703a 	and	r2,r3,r2
  809fac:	00c00304 	movi	r3,12
  809fb0:	a8c00015 	stw	r3,0(r21)
  809fb4:	003f5906 	br	809d1c <__alt_mem_onchip_mem+0xff801d1c>
  809fb8:	94c00044 	addi	r19,r18,1
  809fbc:	02000044 	movi	r8,1
  809fc0:	003f6006 	br	809d44 <__alt_mem_onchip_mem+0xff801d44>
  809fc4:	00bfffc4 	movi	r2,-1
  809fc8:	003f0306 	br	809bd8 <__alt_mem_onchip_mem+0xff801bd8>
  809fcc:	00800304 	movi	r2,12
  809fd0:	a8800015 	stw	r2,0(r21)
  809fd4:	8080030b 	ldhu	r2,12(r16)
  809fd8:	003f5006 	br	809d1c <__alt_mem_onchip_mem+0xff801d1c>

00809fdc <_fwalk>:
  809fdc:	defff704 	addi	sp,sp,-36
  809fe0:	dd000415 	stw	r20,16(sp)
  809fe4:	dfc00815 	stw	ra,32(sp)
  809fe8:	ddc00715 	stw	r23,28(sp)
  809fec:	dd800615 	stw	r22,24(sp)
  809ff0:	dd400515 	stw	r21,20(sp)
  809ff4:	dcc00315 	stw	r19,12(sp)
  809ff8:	dc800215 	stw	r18,8(sp)
  809ffc:	dc400115 	stw	r17,4(sp)
  80a000:	dc000015 	stw	r16,0(sp)
  80a004:	2500b804 	addi	r20,r4,736
  80a008:	a0002326 	beq	r20,zero,80a098 <_fwalk+0xbc>
  80a00c:	282b883a 	mov	r21,r5
  80a010:	002f883a 	mov	r23,zero
  80a014:	05800044 	movi	r22,1
  80a018:	04ffffc4 	movi	r19,-1
  80a01c:	a4400117 	ldw	r17,4(r20)
  80a020:	a4800217 	ldw	r18,8(r20)
  80a024:	8c7fffc4 	addi	r17,r17,-1
  80a028:	88000d16 	blt	r17,zero,80a060 <_fwalk+0x84>
  80a02c:	94000304 	addi	r16,r18,12
  80a030:	94800384 	addi	r18,r18,14
  80a034:	8080000b 	ldhu	r2,0(r16)
  80a038:	8c7fffc4 	addi	r17,r17,-1
  80a03c:	813ffd04 	addi	r4,r16,-12
  80a040:	b080042e 	bgeu	r22,r2,80a054 <_fwalk+0x78>
  80a044:	9080000f 	ldh	r2,0(r18)
  80a048:	14c00226 	beq	r2,r19,80a054 <_fwalk+0x78>
  80a04c:	a83ee83a 	callr	r21
  80a050:	b8aeb03a 	or	r23,r23,r2
  80a054:	84001a04 	addi	r16,r16,104
  80a058:	94801a04 	addi	r18,r18,104
  80a05c:	8cfff51e 	bne	r17,r19,80a034 <__alt_mem_onchip_mem+0xff802034>
  80a060:	a5000017 	ldw	r20,0(r20)
  80a064:	a03fed1e 	bne	r20,zero,80a01c <__alt_mem_onchip_mem+0xff80201c>
  80a068:	b805883a 	mov	r2,r23
  80a06c:	dfc00817 	ldw	ra,32(sp)
  80a070:	ddc00717 	ldw	r23,28(sp)
  80a074:	dd800617 	ldw	r22,24(sp)
  80a078:	dd400517 	ldw	r21,20(sp)
  80a07c:	dd000417 	ldw	r20,16(sp)
  80a080:	dcc00317 	ldw	r19,12(sp)
  80a084:	dc800217 	ldw	r18,8(sp)
  80a088:	dc400117 	ldw	r17,4(sp)
  80a08c:	dc000017 	ldw	r16,0(sp)
  80a090:	dec00904 	addi	sp,sp,36
  80a094:	f800283a 	ret
  80a098:	002f883a 	mov	r23,zero
  80a09c:	003ff206 	br	80a068 <__alt_mem_onchip_mem+0xff802068>

0080a0a0 <_fwalk_reent>:
  80a0a0:	defff704 	addi	sp,sp,-36
  80a0a4:	dd000415 	stw	r20,16(sp)
  80a0a8:	dfc00815 	stw	ra,32(sp)
  80a0ac:	ddc00715 	stw	r23,28(sp)
  80a0b0:	dd800615 	stw	r22,24(sp)
  80a0b4:	dd400515 	stw	r21,20(sp)
  80a0b8:	dcc00315 	stw	r19,12(sp)
  80a0bc:	dc800215 	stw	r18,8(sp)
  80a0c0:	dc400115 	stw	r17,4(sp)
  80a0c4:	dc000015 	stw	r16,0(sp)
  80a0c8:	2500b804 	addi	r20,r4,736
  80a0cc:	a0002326 	beq	r20,zero,80a15c <_fwalk_reent+0xbc>
  80a0d0:	282b883a 	mov	r21,r5
  80a0d4:	2027883a 	mov	r19,r4
  80a0d8:	002f883a 	mov	r23,zero
  80a0dc:	05800044 	movi	r22,1
  80a0e0:	04bfffc4 	movi	r18,-1
  80a0e4:	a4400117 	ldw	r17,4(r20)
  80a0e8:	a4000217 	ldw	r16,8(r20)
  80a0ec:	8c7fffc4 	addi	r17,r17,-1
  80a0f0:	88000c16 	blt	r17,zero,80a124 <_fwalk_reent+0x84>
  80a0f4:	84000304 	addi	r16,r16,12
  80a0f8:	8080000b 	ldhu	r2,0(r16)
  80a0fc:	8c7fffc4 	addi	r17,r17,-1
  80a100:	817ffd04 	addi	r5,r16,-12
  80a104:	b080052e 	bgeu	r22,r2,80a11c <_fwalk_reent+0x7c>
  80a108:	8080008f 	ldh	r2,2(r16)
  80a10c:	9809883a 	mov	r4,r19
  80a110:	14800226 	beq	r2,r18,80a11c <_fwalk_reent+0x7c>
  80a114:	a83ee83a 	callr	r21
  80a118:	b8aeb03a 	or	r23,r23,r2
  80a11c:	84001a04 	addi	r16,r16,104
  80a120:	8cbff51e 	bne	r17,r18,80a0f8 <__alt_mem_onchip_mem+0xff8020f8>
  80a124:	a5000017 	ldw	r20,0(r20)
  80a128:	a03fee1e 	bne	r20,zero,80a0e4 <__alt_mem_onchip_mem+0xff8020e4>
  80a12c:	b805883a 	mov	r2,r23
  80a130:	dfc00817 	ldw	ra,32(sp)
  80a134:	ddc00717 	ldw	r23,28(sp)
  80a138:	dd800617 	ldw	r22,24(sp)
  80a13c:	dd400517 	ldw	r21,20(sp)
  80a140:	dd000417 	ldw	r20,16(sp)
  80a144:	dcc00317 	ldw	r19,12(sp)
  80a148:	dc800217 	ldw	r18,8(sp)
  80a14c:	dc400117 	ldw	r17,4(sp)
  80a150:	dc000017 	ldw	r16,0(sp)
  80a154:	dec00904 	addi	sp,sp,36
  80a158:	f800283a 	ret
  80a15c:	002f883a 	mov	r23,zero
  80a160:	003ff206 	br	80a12c <__alt_mem_onchip_mem+0xff80212c>

0080a164 <_isatty_r>:
  80a164:	defffd04 	addi	sp,sp,-12
  80a168:	dc000015 	stw	r16,0(sp)
  80a16c:	04002074 	movhi	r16,129
  80a170:	dc400115 	stw	r17,4(sp)
  80a174:	840bbf04 	addi	r16,r16,12028
  80a178:	2023883a 	mov	r17,r4
  80a17c:	2809883a 	mov	r4,r5
  80a180:	dfc00215 	stw	ra,8(sp)
  80a184:	80000015 	stw	zero,0(r16)
  80a188:	080b47c0 	call	80b47c <isatty>
  80a18c:	00ffffc4 	movi	r3,-1
  80a190:	10c00526 	beq	r2,r3,80a1a8 <_isatty_r+0x44>
  80a194:	dfc00217 	ldw	ra,8(sp)
  80a198:	dc400117 	ldw	r17,4(sp)
  80a19c:	dc000017 	ldw	r16,0(sp)
  80a1a0:	dec00304 	addi	sp,sp,12
  80a1a4:	f800283a 	ret
  80a1a8:	80c00017 	ldw	r3,0(r16)
  80a1ac:	183ff926 	beq	r3,zero,80a194 <__alt_mem_onchip_mem+0xff802194>
  80a1b0:	88c00015 	stw	r3,0(r17)
  80a1b4:	003ff706 	br	80a194 <__alt_mem_onchip_mem+0xff802194>

0080a1b8 <_lseek_r>:
  80a1b8:	defffd04 	addi	sp,sp,-12
  80a1bc:	2805883a 	mov	r2,r5
  80a1c0:	dc000015 	stw	r16,0(sp)
  80a1c4:	04002074 	movhi	r16,129
  80a1c8:	dc400115 	stw	r17,4(sp)
  80a1cc:	300b883a 	mov	r5,r6
  80a1d0:	840bbf04 	addi	r16,r16,12028
  80a1d4:	2023883a 	mov	r17,r4
  80a1d8:	380d883a 	mov	r6,r7
  80a1dc:	1009883a 	mov	r4,r2
  80a1e0:	dfc00215 	stw	ra,8(sp)
  80a1e4:	80000015 	stw	zero,0(r16)
  80a1e8:	080b6480 	call	80b648 <lseek>
  80a1ec:	00ffffc4 	movi	r3,-1
  80a1f0:	10c00526 	beq	r2,r3,80a208 <_lseek_r+0x50>
  80a1f4:	dfc00217 	ldw	ra,8(sp)
  80a1f8:	dc400117 	ldw	r17,4(sp)
  80a1fc:	dc000017 	ldw	r16,0(sp)
  80a200:	dec00304 	addi	sp,sp,12
  80a204:	f800283a 	ret
  80a208:	80c00017 	ldw	r3,0(r16)
  80a20c:	183ff926 	beq	r3,zero,80a1f4 <__alt_mem_onchip_mem+0xff8021f4>
  80a210:	88c00015 	stw	r3,0(r17)
  80a214:	003ff706 	br	80a1f4 <__alt_mem_onchip_mem+0xff8021f4>

0080a218 <memchr>:
  80a218:	208000cc 	andi	r2,r4,3
  80a21c:	280f883a 	mov	r7,r5
  80a220:	10003426 	beq	r2,zero,80a2f4 <memchr+0xdc>
  80a224:	30bfffc4 	addi	r2,r6,-1
  80a228:	30001a26 	beq	r6,zero,80a294 <memchr+0x7c>
  80a22c:	20c00003 	ldbu	r3,0(r4)
  80a230:	29803fcc 	andi	r6,r5,255
  80a234:	30c0051e 	bne	r6,r3,80a24c <memchr+0x34>
  80a238:	00001806 	br	80a29c <memchr+0x84>
  80a23c:	10001526 	beq	r2,zero,80a294 <memchr+0x7c>
  80a240:	20c00003 	ldbu	r3,0(r4)
  80a244:	10bfffc4 	addi	r2,r2,-1
  80a248:	30c01426 	beq	r6,r3,80a29c <memchr+0x84>
  80a24c:	21000044 	addi	r4,r4,1
  80a250:	20c000cc 	andi	r3,r4,3
  80a254:	183ff91e 	bne	r3,zero,80a23c <__alt_mem_onchip_mem+0xff80223c>
  80a258:	020000c4 	movi	r8,3
  80a25c:	40801136 	bltu	r8,r2,80a2a4 <memchr+0x8c>
  80a260:	10000c26 	beq	r2,zero,80a294 <memchr+0x7c>
  80a264:	20c00003 	ldbu	r3,0(r4)
  80a268:	29403fcc 	andi	r5,r5,255
  80a26c:	28c00b26 	beq	r5,r3,80a29c <memchr+0x84>
  80a270:	20c00044 	addi	r3,r4,1
  80a274:	39803fcc 	andi	r6,r7,255
  80a278:	2089883a 	add	r4,r4,r2
  80a27c:	00000306 	br	80a28c <memchr+0x74>
  80a280:	18c00044 	addi	r3,r3,1
  80a284:	197fffc3 	ldbu	r5,-1(r3)
  80a288:	31400526 	beq	r6,r5,80a2a0 <memchr+0x88>
  80a28c:	1805883a 	mov	r2,r3
  80a290:	20fffb1e 	bne	r4,r3,80a280 <__alt_mem_onchip_mem+0xff802280>
  80a294:	0005883a 	mov	r2,zero
  80a298:	f800283a 	ret
  80a29c:	2005883a 	mov	r2,r4
  80a2a0:	f800283a 	ret
  80a2a4:	28c03fcc 	andi	r3,r5,255
  80a2a8:	1812923a 	slli	r9,r3,8
  80a2ac:	02ffbff4 	movhi	r11,65279
  80a2b0:	02a02074 	movhi	r10,32897
  80a2b4:	48d2b03a 	or	r9,r9,r3
  80a2b8:	4806943a 	slli	r3,r9,16
  80a2bc:	5affbfc4 	addi	r11,r11,-257
  80a2c0:	52a02004 	addi	r10,r10,-32640
  80a2c4:	48d2b03a 	or	r9,r9,r3
  80a2c8:	20c00017 	ldw	r3,0(r4)
  80a2cc:	48c6f03a 	xor	r3,r9,r3
  80a2d0:	1acd883a 	add	r6,r3,r11
  80a2d4:	00c6303a 	nor	r3,zero,r3
  80a2d8:	30c6703a 	and	r3,r6,r3
  80a2dc:	1a86703a 	and	r3,r3,r10
  80a2e0:	183fe01e 	bne	r3,zero,80a264 <__alt_mem_onchip_mem+0xff802264>
  80a2e4:	10bfff04 	addi	r2,r2,-4
  80a2e8:	21000104 	addi	r4,r4,4
  80a2ec:	40bff636 	bltu	r8,r2,80a2c8 <__alt_mem_onchip_mem+0xff8022c8>
  80a2f0:	003fdb06 	br	80a260 <__alt_mem_onchip_mem+0xff802260>
  80a2f4:	3005883a 	mov	r2,r6
  80a2f8:	003fd706 	br	80a258 <__alt_mem_onchip_mem+0xff802258>

0080a2fc <memcpy>:
  80a2fc:	defffd04 	addi	sp,sp,-12
  80a300:	dfc00215 	stw	ra,8(sp)
  80a304:	dc400115 	stw	r17,4(sp)
  80a308:	dc000015 	stw	r16,0(sp)
  80a30c:	00c003c4 	movi	r3,15
  80a310:	2005883a 	mov	r2,r4
  80a314:	1980452e 	bgeu	r3,r6,80a42c <memcpy+0x130>
  80a318:	2906b03a 	or	r3,r5,r4
  80a31c:	18c000cc 	andi	r3,r3,3
  80a320:	1800441e 	bne	r3,zero,80a434 <memcpy+0x138>
  80a324:	347ffc04 	addi	r17,r6,-16
  80a328:	8822d13a 	srli	r17,r17,4
  80a32c:	28c00104 	addi	r3,r5,4
  80a330:	23400104 	addi	r13,r4,4
  80a334:	8820913a 	slli	r16,r17,4
  80a338:	2b000204 	addi	r12,r5,8
  80a33c:	22c00204 	addi	r11,r4,8
  80a340:	84000504 	addi	r16,r16,20
  80a344:	2a800304 	addi	r10,r5,12
  80a348:	22400304 	addi	r9,r4,12
  80a34c:	2c21883a 	add	r16,r5,r16
  80a350:	2811883a 	mov	r8,r5
  80a354:	200f883a 	mov	r7,r4
  80a358:	41000017 	ldw	r4,0(r8)
  80a35c:	1fc00017 	ldw	ra,0(r3)
  80a360:	63c00017 	ldw	r15,0(r12)
  80a364:	39000015 	stw	r4,0(r7)
  80a368:	53800017 	ldw	r14,0(r10)
  80a36c:	6fc00015 	stw	ra,0(r13)
  80a370:	5bc00015 	stw	r15,0(r11)
  80a374:	4b800015 	stw	r14,0(r9)
  80a378:	18c00404 	addi	r3,r3,16
  80a37c:	39c00404 	addi	r7,r7,16
  80a380:	42000404 	addi	r8,r8,16
  80a384:	6b400404 	addi	r13,r13,16
  80a388:	63000404 	addi	r12,r12,16
  80a38c:	5ac00404 	addi	r11,r11,16
  80a390:	52800404 	addi	r10,r10,16
  80a394:	4a400404 	addi	r9,r9,16
  80a398:	1c3fef1e 	bne	r3,r16,80a358 <__alt_mem_onchip_mem+0xff802358>
  80a39c:	89c00044 	addi	r7,r17,1
  80a3a0:	380e913a 	slli	r7,r7,4
  80a3a4:	310003cc 	andi	r4,r6,15
  80a3a8:	02c000c4 	movi	r11,3
  80a3ac:	11c7883a 	add	r3,r2,r7
  80a3b0:	29cb883a 	add	r5,r5,r7
  80a3b4:	5900212e 	bgeu	r11,r4,80a43c <memcpy+0x140>
  80a3b8:	1813883a 	mov	r9,r3
  80a3bc:	2811883a 	mov	r8,r5
  80a3c0:	200f883a 	mov	r7,r4
  80a3c4:	42800017 	ldw	r10,0(r8)
  80a3c8:	4a400104 	addi	r9,r9,4
  80a3cc:	39ffff04 	addi	r7,r7,-4
  80a3d0:	4abfff15 	stw	r10,-4(r9)
  80a3d4:	42000104 	addi	r8,r8,4
  80a3d8:	59fffa36 	bltu	r11,r7,80a3c4 <__alt_mem_onchip_mem+0xff8023c4>
  80a3dc:	213fff04 	addi	r4,r4,-4
  80a3e0:	2008d0ba 	srli	r4,r4,2
  80a3e4:	318000cc 	andi	r6,r6,3
  80a3e8:	21000044 	addi	r4,r4,1
  80a3ec:	2109883a 	add	r4,r4,r4
  80a3f0:	2109883a 	add	r4,r4,r4
  80a3f4:	1907883a 	add	r3,r3,r4
  80a3f8:	290b883a 	add	r5,r5,r4
  80a3fc:	30000626 	beq	r6,zero,80a418 <memcpy+0x11c>
  80a400:	198d883a 	add	r6,r3,r6
  80a404:	29c00003 	ldbu	r7,0(r5)
  80a408:	18c00044 	addi	r3,r3,1
  80a40c:	29400044 	addi	r5,r5,1
  80a410:	19ffffc5 	stb	r7,-1(r3)
  80a414:	19bffb1e 	bne	r3,r6,80a404 <__alt_mem_onchip_mem+0xff802404>
  80a418:	dfc00217 	ldw	ra,8(sp)
  80a41c:	dc400117 	ldw	r17,4(sp)
  80a420:	dc000017 	ldw	r16,0(sp)
  80a424:	dec00304 	addi	sp,sp,12
  80a428:	f800283a 	ret
  80a42c:	2007883a 	mov	r3,r4
  80a430:	003ff206 	br	80a3fc <__alt_mem_onchip_mem+0xff8023fc>
  80a434:	2007883a 	mov	r3,r4
  80a438:	003ff106 	br	80a400 <__alt_mem_onchip_mem+0xff802400>
  80a43c:	200d883a 	mov	r6,r4
  80a440:	003fee06 	br	80a3fc <__alt_mem_onchip_mem+0xff8023fc>

0080a444 <memmove>:
  80a444:	2005883a 	mov	r2,r4
  80a448:	29000b2e 	bgeu	r5,r4,80a478 <memmove+0x34>
  80a44c:	298f883a 	add	r7,r5,r6
  80a450:	21c0092e 	bgeu	r4,r7,80a478 <memmove+0x34>
  80a454:	2187883a 	add	r3,r4,r6
  80a458:	198bc83a 	sub	r5,r3,r6
  80a45c:	30004826 	beq	r6,zero,80a580 <memmove+0x13c>
  80a460:	39ffffc4 	addi	r7,r7,-1
  80a464:	39000003 	ldbu	r4,0(r7)
  80a468:	18ffffc4 	addi	r3,r3,-1
  80a46c:	19000005 	stb	r4,0(r3)
  80a470:	28fffb1e 	bne	r5,r3,80a460 <__alt_mem_onchip_mem+0xff802460>
  80a474:	f800283a 	ret
  80a478:	00c003c4 	movi	r3,15
  80a47c:	1980412e 	bgeu	r3,r6,80a584 <memmove+0x140>
  80a480:	2886b03a 	or	r3,r5,r2
  80a484:	18c000cc 	andi	r3,r3,3
  80a488:	1800401e 	bne	r3,zero,80a58c <memmove+0x148>
  80a48c:	33fffc04 	addi	r15,r6,-16
  80a490:	781ed13a 	srli	r15,r15,4
  80a494:	28c00104 	addi	r3,r5,4
  80a498:	13400104 	addi	r13,r2,4
  80a49c:	781c913a 	slli	r14,r15,4
  80a4a0:	2b000204 	addi	r12,r5,8
  80a4a4:	12c00204 	addi	r11,r2,8
  80a4a8:	73800504 	addi	r14,r14,20
  80a4ac:	2a800304 	addi	r10,r5,12
  80a4b0:	12400304 	addi	r9,r2,12
  80a4b4:	2b9d883a 	add	r14,r5,r14
  80a4b8:	2811883a 	mov	r8,r5
  80a4bc:	100f883a 	mov	r7,r2
  80a4c0:	41000017 	ldw	r4,0(r8)
  80a4c4:	39c00404 	addi	r7,r7,16
  80a4c8:	18c00404 	addi	r3,r3,16
  80a4cc:	393ffc15 	stw	r4,-16(r7)
  80a4d0:	193ffc17 	ldw	r4,-16(r3)
  80a4d4:	6b400404 	addi	r13,r13,16
  80a4d8:	5ac00404 	addi	r11,r11,16
  80a4dc:	693ffc15 	stw	r4,-16(r13)
  80a4e0:	61000017 	ldw	r4,0(r12)
  80a4e4:	4a400404 	addi	r9,r9,16
  80a4e8:	42000404 	addi	r8,r8,16
  80a4ec:	593ffc15 	stw	r4,-16(r11)
  80a4f0:	51000017 	ldw	r4,0(r10)
  80a4f4:	63000404 	addi	r12,r12,16
  80a4f8:	52800404 	addi	r10,r10,16
  80a4fc:	493ffc15 	stw	r4,-16(r9)
  80a500:	1bbfef1e 	bne	r3,r14,80a4c0 <__alt_mem_onchip_mem+0xff8024c0>
  80a504:	79000044 	addi	r4,r15,1
  80a508:	2008913a 	slli	r4,r4,4
  80a50c:	328003cc 	andi	r10,r6,15
  80a510:	02c000c4 	movi	r11,3
  80a514:	1107883a 	add	r3,r2,r4
  80a518:	290b883a 	add	r5,r5,r4
  80a51c:	5a801e2e 	bgeu	r11,r10,80a598 <memmove+0x154>
  80a520:	1813883a 	mov	r9,r3
  80a524:	2811883a 	mov	r8,r5
  80a528:	500f883a 	mov	r7,r10
  80a52c:	41000017 	ldw	r4,0(r8)
  80a530:	4a400104 	addi	r9,r9,4
  80a534:	39ffff04 	addi	r7,r7,-4
  80a538:	493fff15 	stw	r4,-4(r9)
  80a53c:	42000104 	addi	r8,r8,4
  80a540:	59fffa36 	bltu	r11,r7,80a52c <__alt_mem_onchip_mem+0xff80252c>
  80a544:	513fff04 	addi	r4,r10,-4
  80a548:	2008d0ba 	srli	r4,r4,2
  80a54c:	318000cc 	andi	r6,r6,3
  80a550:	21000044 	addi	r4,r4,1
  80a554:	2109883a 	add	r4,r4,r4
  80a558:	2109883a 	add	r4,r4,r4
  80a55c:	1907883a 	add	r3,r3,r4
  80a560:	290b883a 	add	r5,r5,r4
  80a564:	30000b26 	beq	r6,zero,80a594 <memmove+0x150>
  80a568:	198d883a 	add	r6,r3,r6
  80a56c:	29c00003 	ldbu	r7,0(r5)
  80a570:	18c00044 	addi	r3,r3,1
  80a574:	29400044 	addi	r5,r5,1
  80a578:	19ffffc5 	stb	r7,-1(r3)
  80a57c:	19bffb1e 	bne	r3,r6,80a56c <__alt_mem_onchip_mem+0xff80256c>
  80a580:	f800283a 	ret
  80a584:	1007883a 	mov	r3,r2
  80a588:	003ff606 	br	80a564 <__alt_mem_onchip_mem+0xff802564>
  80a58c:	1007883a 	mov	r3,r2
  80a590:	003ff506 	br	80a568 <__alt_mem_onchip_mem+0xff802568>
  80a594:	f800283a 	ret
  80a598:	500d883a 	mov	r6,r10
  80a59c:	003ff106 	br	80a564 <__alt_mem_onchip_mem+0xff802564>

0080a5a0 <_read_r>:
  80a5a0:	defffd04 	addi	sp,sp,-12
  80a5a4:	2805883a 	mov	r2,r5
  80a5a8:	dc000015 	stw	r16,0(sp)
  80a5ac:	04002074 	movhi	r16,129
  80a5b0:	dc400115 	stw	r17,4(sp)
  80a5b4:	300b883a 	mov	r5,r6
  80a5b8:	840bbf04 	addi	r16,r16,12028
  80a5bc:	2023883a 	mov	r17,r4
  80a5c0:	380d883a 	mov	r6,r7
  80a5c4:	1009883a 	mov	r4,r2
  80a5c8:	dfc00215 	stw	ra,8(sp)
  80a5cc:	80000015 	stw	zero,0(r16)
  80a5d0:	080ba700 	call	80ba70 <read>
  80a5d4:	00ffffc4 	movi	r3,-1
  80a5d8:	10c00526 	beq	r2,r3,80a5f0 <_read_r+0x50>
  80a5dc:	dfc00217 	ldw	ra,8(sp)
  80a5e0:	dc400117 	ldw	r17,4(sp)
  80a5e4:	dc000017 	ldw	r16,0(sp)
  80a5e8:	dec00304 	addi	sp,sp,12
  80a5ec:	f800283a 	ret
  80a5f0:	80c00017 	ldw	r3,0(r16)
  80a5f4:	183ff926 	beq	r3,zero,80a5dc <__alt_mem_onchip_mem+0xff8025dc>
  80a5f8:	88c00015 	stw	r3,0(r17)
  80a5fc:	003ff706 	br	80a5dc <__alt_mem_onchip_mem+0xff8025dc>

0080a600 <_realloc_r>:
  80a600:	defff604 	addi	sp,sp,-40
  80a604:	dc800215 	stw	r18,8(sp)
  80a608:	dfc00915 	stw	ra,36(sp)
  80a60c:	df000815 	stw	fp,32(sp)
  80a610:	ddc00715 	stw	r23,28(sp)
  80a614:	dd800615 	stw	r22,24(sp)
  80a618:	dd400515 	stw	r21,20(sp)
  80a61c:	dd000415 	stw	r20,16(sp)
  80a620:	dcc00315 	stw	r19,12(sp)
  80a624:	dc400115 	stw	r17,4(sp)
  80a628:	dc000015 	stw	r16,0(sp)
  80a62c:	3025883a 	mov	r18,r6
  80a630:	2800b726 	beq	r5,zero,80a910 <_realloc_r+0x310>
  80a634:	282b883a 	mov	r21,r5
  80a638:	2029883a 	mov	r20,r4
  80a63c:	080b7980 	call	80b798 <__malloc_lock>
  80a640:	a8bfff17 	ldw	r2,-4(r21)
  80a644:	043fff04 	movi	r16,-4
  80a648:	90c002c4 	addi	r3,r18,11
  80a64c:	01000584 	movi	r4,22
  80a650:	acfffe04 	addi	r19,r21,-8
  80a654:	1420703a 	and	r16,r2,r16
  80a658:	20c0332e 	bgeu	r4,r3,80a728 <_realloc_r+0x128>
  80a65c:	047ffe04 	movi	r17,-8
  80a660:	1c62703a 	and	r17,r3,r17
  80a664:	8807883a 	mov	r3,r17
  80a668:	88005816 	blt	r17,zero,80a7cc <_realloc_r+0x1cc>
  80a66c:	8c805736 	bltu	r17,r18,80a7cc <_realloc_r+0x1cc>
  80a670:	80c0300e 	bge	r16,r3,80a734 <_realloc_r+0x134>
  80a674:	07002074 	movhi	fp,129
  80a678:	e73e9904 	addi	fp,fp,-1436
  80a67c:	e1c00217 	ldw	r7,8(fp)
  80a680:	9c09883a 	add	r4,r19,r16
  80a684:	22000117 	ldw	r8,4(r4)
  80a688:	21c06326 	beq	r4,r7,80a818 <_realloc_r+0x218>
  80a68c:	017fff84 	movi	r5,-2
  80a690:	414a703a 	and	r5,r8,r5
  80a694:	214b883a 	add	r5,r4,r5
  80a698:	29800117 	ldw	r6,4(r5)
  80a69c:	3180004c 	andi	r6,r6,1
  80a6a0:	30003f26 	beq	r6,zero,80a7a0 <_realloc_r+0x1a0>
  80a6a4:	1080004c 	andi	r2,r2,1
  80a6a8:	10008326 	beq	r2,zero,80a8b8 <_realloc_r+0x2b8>
  80a6ac:	900b883a 	mov	r5,r18
  80a6b0:	a009883a 	mov	r4,r20
  80a6b4:	08080c40 	call	8080c4 <_malloc_r>
  80a6b8:	1025883a 	mov	r18,r2
  80a6bc:	10011e26 	beq	r2,zero,80ab38 <_realloc_r+0x538>
  80a6c0:	a93fff17 	ldw	r4,-4(r21)
  80a6c4:	10fffe04 	addi	r3,r2,-8
  80a6c8:	00bfff84 	movi	r2,-2
  80a6cc:	2084703a 	and	r2,r4,r2
  80a6d0:	9885883a 	add	r2,r19,r2
  80a6d4:	1880ee26 	beq	r3,r2,80aa90 <_realloc_r+0x490>
  80a6d8:	81bfff04 	addi	r6,r16,-4
  80a6dc:	00800904 	movi	r2,36
  80a6e0:	1180b836 	bltu	r2,r6,80a9c4 <_realloc_r+0x3c4>
  80a6e4:	00c004c4 	movi	r3,19
  80a6e8:	19809636 	bltu	r3,r6,80a944 <_realloc_r+0x344>
  80a6ec:	9005883a 	mov	r2,r18
  80a6f0:	a807883a 	mov	r3,r21
  80a6f4:	19000017 	ldw	r4,0(r3)
  80a6f8:	11000015 	stw	r4,0(r2)
  80a6fc:	19000117 	ldw	r4,4(r3)
  80a700:	11000115 	stw	r4,4(r2)
  80a704:	18c00217 	ldw	r3,8(r3)
  80a708:	10c00215 	stw	r3,8(r2)
  80a70c:	a80b883a 	mov	r5,r21
  80a710:	a009883a 	mov	r4,r20
  80a714:	08098100 	call	809810 <_free_r>
  80a718:	a009883a 	mov	r4,r20
  80a71c:	080b7bc0 	call	80b7bc <__malloc_unlock>
  80a720:	9005883a 	mov	r2,r18
  80a724:	00001206 	br	80a770 <_realloc_r+0x170>
  80a728:	00c00404 	movi	r3,16
  80a72c:	1823883a 	mov	r17,r3
  80a730:	003fce06 	br	80a66c <__alt_mem_onchip_mem+0xff80266c>
  80a734:	a825883a 	mov	r18,r21
  80a738:	8445c83a 	sub	r2,r16,r17
  80a73c:	00c003c4 	movi	r3,15
  80a740:	18802636 	bltu	r3,r2,80a7dc <_realloc_r+0x1dc>
  80a744:	99800117 	ldw	r6,4(r19)
  80a748:	9c07883a 	add	r3,r19,r16
  80a74c:	3180004c 	andi	r6,r6,1
  80a750:	3420b03a 	or	r16,r6,r16
  80a754:	9c000115 	stw	r16,4(r19)
  80a758:	18800117 	ldw	r2,4(r3)
  80a75c:	10800054 	ori	r2,r2,1
  80a760:	18800115 	stw	r2,4(r3)
  80a764:	a009883a 	mov	r4,r20
  80a768:	080b7bc0 	call	80b7bc <__malloc_unlock>
  80a76c:	9005883a 	mov	r2,r18
  80a770:	dfc00917 	ldw	ra,36(sp)
  80a774:	df000817 	ldw	fp,32(sp)
  80a778:	ddc00717 	ldw	r23,28(sp)
  80a77c:	dd800617 	ldw	r22,24(sp)
  80a780:	dd400517 	ldw	r21,20(sp)
  80a784:	dd000417 	ldw	r20,16(sp)
  80a788:	dcc00317 	ldw	r19,12(sp)
  80a78c:	dc800217 	ldw	r18,8(sp)
  80a790:	dc400117 	ldw	r17,4(sp)
  80a794:	dc000017 	ldw	r16,0(sp)
  80a798:	dec00a04 	addi	sp,sp,40
  80a79c:	f800283a 	ret
  80a7a0:	017fff04 	movi	r5,-4
  80a7a4:	414a703a 	and	r5,r8,r5
  80a7a8:	814d883a 	add	r6,r16,r5
  80a7ac:	30c01f16 	blt	r6,r3,80a82c <_realloc_r+0x22c>
  80a7b0:	20800317 	ldw	r2,12(r4)
  80a7b4:	20c00217 	ldw	r3,8(r4)
  80a7b8:	a825883a 	mov	r18,r21
  80a7bc:	3021883a 	mov	r16,r6
  80a7c0:	18800315 	stw	r2,12(r3)
  80a7c4:	10c00215 	stw	r3,8(r2)
  80a7c8:	003fdb06 	br	80a738 <__alt_mem_onchip_mem+0xff802738>
  80a7cc:	00800304 	movi	r2,12
  80a7d0:	a0800015 	stw	r2,0(r20)
  80a7d4:	0005883a 	mov	r2,zero
  80a7d8:	003fe506 	br	80a770 <__alt_mem_onchip_mem+0xff802770>
  80a7dc:	98c00117 	ldw	r3,4(r19)
  80a7e0:	9c4b883a 	add	r5,r19,r17
  80a7e4:	11000054 	ori	r4,r2,1
  80a7e8:	18c0004c 	andi	r3,r3,1
  80a7ec:	1c62b03a 	or	r17,r3,r17
  80a7f0:	9c400115 	stw	r17,4(r19)
  80a7f4:	29000115 	stw	r4,4(r5)
  80a7f8:	2885883a 	add	r2,r5,r2
  80a7fc:	10c00117 	ldw	r3,4(r2)
  80a800:	29400204 	addi	r5,r5,8
  80a804:	a009883a 	mov	r4,r20
  80a808:	18c00054 	ori	r3,r3,1
  80a80c:	10c00115 	stw	r3,4(r2)
  80a810:	08098100 	call	809810 <_free_r>
  80a814:	003fd306 	br	80a764 <__alt_mem_onchip_mem+0xff802764>
  80a818:	017fff04 	movi	r5,-4
  80a81c:	414a703a 	and	r5,r8,r5
  80a820:	89800404 	addi	r6,r17,16
  80a824:	8151883a 	add	r8,r16,r5
  80a828:	4180590e 	bge	r8,r6,80a990 <_realloc_r+0x390>
  80a82c:	1080004c 	andi	r2,r2,1
  80a830:	103f9e1e 	bne	r2,zero,80a6ac <__alt_mem_onchip_mem+0xff8026ac>
  80a834:	adbffe17 	ldw	r22,-8(r21)
  80a838:	00bfff04 	movi	r2,-4
  80a83c:	9dadc83a 	sub	r22,r19,r22
  80a840:	b1800117 	ldw	r6,4(r22)
  80a844:	3084703a 	and	r2,r6,r2
  80a848:	20002026 	beq	r4,zero,80a8cc <_realloc_r+0x2cc>
  80a84c:	80af883a 	add	r23,r16,r2
  80a850:	b96f883a 	add	r23,r23,r5
  80a854:	21c05f26 	beq	r4,r7,80a9d4 <_realloc_r+0x3d4>
  80a858:	b8c01c16 	blt	r23,r3,80a8cc <_realloc_r+0x2cc>
  80a85c:	20800317 	ldw	r2,12(r4)
  80a860:	20c00217 	ldw	r3,8(r4)
  80a864:	81bfff04 	addi	r6,r16,-4
  80a868:	01000904 	movi	r4,36
  80a86c:	18800315 	stw	r2,12(r3)
  80a870:	10c00215 	stw	r3,8(r2)
  80a874:	b0c00217 	ldw	r3,8(r22)
  80a878:	b0800317 	ldw	r2,12(r22)
  80a87c:	b4800204 	addi	r18,r22,8
  80a880:	18800315 	stw	r2,12(r3)
  80a884:	10c00215 	stw	r3,8(r2)
  80a888:	21801b36 	bltu	r4,r6,80a8f8 <_realloc_r+0x2f8>
  80a88c:	008004c4 	movi	r2,19
  80a890:	1180352e 	bgeu	r2,r6,80a968 <_realloc_r+0x368>
  80a894:	a8800017 	ldw	r2,0(r21)
  80a898:	b0800215 	stw	r2,8(r22)
  80a89c:	a8800117 	ldw	r2,4(r21)
  80a8a0:	b0800315 	stw	r2,12(r22)
  80a8a4:	008006c4 	movi	r2,27
  80a8a8:	11807f36 	bltu	r2,r6,80aaa8 <_realloc_r+0x4a8>
  80a8ac:	b0800404 	addi	r2,r22,16
  80a8b0:	ad400204 	addi	r21,r21,8
  80a8b4:	00002d06 	br	80a96c <_realloc_r+0x36c>
  80a8b8:	adbffe17 	ldw	r22,-8(r21)
  80a8bc:	00bfff04 	movi	r2,-4
  80a8c0:	9dadc83a 	sub	r22,r19,r22
  80a8c4:	b1000117 	ldw	r4,4(r22)
  80a8c8:	2084703a 	and	r2,r4,r2
  80a8cc:	b03f7726 	beq	r22,zero,80a6ac <__alt_mem_onchip_mem+0xff8026ac>
  80a8d0:	80af883a 	add	r23,r16,r2
  80a8d4:	b8ff7516 	blt	r23,r3,80a6ac <__alt_mem_onchip_mem+0xff8026ac>
  80a8d8:	b0800317 	ldw	r2,12(r22)
  80a8dc:	b0c00217 	ldw	r3,8(r22)
  80a8e0:	81bfff04 	addi	r6,r16,-4
  80a8e4:	01000904 	movi	r4,36
  80a8e8:	18800315 	stw	r2,12(r3)
  80a8ec:	10c00215 	stw	r3,8(r2)
  80a8f0:	b4800204 	addi	r18,r22,8
  80a8f4:	21bfe52e 	bgeu	r4,r6,80a88c <__alt_mem_onchip_mem+0xff80288c>
  80a8f8:	a80b883a 	mov	r5,r21
  80a8fc:	9009883a 	mov	r4,r18
  80a900:	080a4440 	call	80a444 <memmove>
  80a904:	b821883a 	mov	r16,r23
  80a908:	b027883a 	mov	r19,r22
  80a90c:	003f8a06 	br	80a738 <__alt_mem_onchip_mem+0xff802738>
  80a910:	300b883a 	mov	r5,r6
  80a914:	dfc00917 	ldw	ra,36(sp)
  80a918:	df000817 	ldw	fp,32(sp)
  80a91c:	ddc00717 	ldw	r23,28(sp)
  80a920:	dd800617 	ldw	r22,24(sp)
  80a924:	dd400517 	ldw	r21,20(sp)
  80a928:	dd000417 	ldw	r20,16(sp)
  80a92c:	dcc00317 	ldw	r19,12(sp)
  80a930:	dc800217 	ldw	r18,8(sp)
  80a934:	dc400117 	ldw	r17,4(sp)
  80a938:	dc000017 	ldw	r16,0(sp)
  80a93c:	dec00a04 	addi	sp,sp,40
  80a940:	08080c41 	jmpi	8080c4 <_malloc_r>
  80a944:	a8c00017 	ldw	r3,0(r21)
  80a948:	90c00015 	stw	r3,0(r18)
  80a94c:	a8c00117 	ldw	r3,4(r21)
  80a950:	90c00115 	stw	r3,4(r18)
  80a954:	00c006c4 	movi	r3,27
  80a958:	19804536 	bltu	r3,r6,80aa70 <_realloc_r+0x470>
  80a95c:	90800204 	addi	r2,r18,8
  80a960:	a8c00204 	addi	r3,r21,8
  80a964:	003f6306 	br	80a6f4 <__alt_mem_onchip_mem+0xff8026f4>
  80a968:	9005883a 	mov	r2,r18
  80a96c:	a8c00017 	ldw	r3,0(r21)
  80a970:	b821883a 	mov	r16,r23
  80a974:	b027883a 	mov	r19,r22
  80a978:	10c00015 	stw	r3,0(r2)
  80a97c:	a8c00117 	ldw	r3,4(r21)
  80a980:	10c00115 	stw	r3,4(r2)
  80a984:	a8c00217 	ldw	r3,8(r21)
  80a988:	10c00215 	stw	r3,8(r2)
  80a98c:	003f6a06 	br	80a738 <__alt_mem_onchip_mem+0xff802738>
  80a990:	9c67883a 	add	r19,r19,r17
  80a994:	4445c83a 	sub	r2,r8,r17
  80a998:	e4c00215 	stw	r19,8(fp)
  80a99c:	10800054 	ori	r2,r2,1
  80a9a0:	98800115 	stw	r2,4(r19)
  80a9a4:	a8bfff17 	ldw	r2,-4(r21)
  80a9a8:	a009883a 	mov	r4,r20
  80a9ac:	1080004c 	andi	r2,r2,1
  80a9b0:	1462b03a 	or	r17,r2,r17
  80a9b4:	ac7fff15 	stw	r17,-4(r21)
  80a9b8:	080b7bc0 	call	80b7bc <__malloc_unlock>
  80a9bc:	a805883a 	mov	r2,r21
  80a9c0:	003f6b06 	br	80a770 <__alt_mem_onchip_mem+0xff802770>
  80a9c4:	a80b883a 	mov	r5,r21
  80a9c8:	9009883a 	mov	r4,r18
  80a9cc:	080a4440 	call	80a444 <memmove>
  80a9d0:	003f4e06 	br	80a70c <__alt_mem_onchip_mem+0xff80270c>
  80a9d4:	89000404 	addi	r4,r17,16
  80a9d8:	b93fbc16 	blt	r23,r4,80a8cc <__alt_mem_onchip_mem+0xff8028cc>
  80a9dc:	b0800317 	ldw	r2,12(r22)
  80a9e0:	b0c00217 	ldw	r3,8(r22)
  80a9e4:	81bfff04 	addi	r6,r16,-4
  80a9e8:	01000904 	movi	r4,36
  80a9ec:	18800315 	stw	r2,12(r3)
  80a9f0:	10c00215 	stw	r3,8(r2)
  80a9f4:	b4800204 	addi	r18,r22,8
  80a9f8:	21804336 	bltu	r4,r6,80ab08 <_realloc_r+0x508>
  80a9fc:	008004c4 	movi	r2,19
  80aa00:	11803f2e 	bgeu	r2,r6,80ab00 <_realloc_r+0x500>
  80aa04:	a8800017 	ldw	r2,0(r21)
  80aa08:	b0800215 	stw	r2,8(r22)
  80aa0c:	a8800117 	ldw	r2,4(r21)
  80aa10:	b0800315 	stw	r2,12(r22)
  80aa14:	008006c4 	movi	r2,27
  80aa18:	11803f36 	bltu	r2,r6,80ab18 <_realloc_r+0x518>
  80aa1c:	b0800404 	addi	r2,r22,16
  80aa20:	ad400204 	addi	r21,r21,8
  80aa24:	a8c00017 	ldw	r3,0(r21)
  80aa28:	10c00015 	stw	r3,0(r2)
  80aa2c:	a8c00117 	ldw	r3,4(r21)
  80aa30:	10c00115 	stw	r3,4(r2)
  80aa34:	a8c00217 	ldw	r3,8(r21)
  80aa38:	10c00215 	stw	r3,8(r2)
  80aa3c:	b447883a 	add	r3,r22,r17
  80aa40:	bc45c83a 	sub	r2,r23,r17
  80aa44:	e0c00215 	stw	r3,8(fp)
  80aa48:	10800054 	ori	r2,r2,1
  80aa4c:	18800115 	stw	r2,4(r3)
  80aa50:	b0800117 	ldw	r2,4(r22)
  80aa54:	a009883a 	mov	r4,r20
  80aa58:	1080004c 	andi	r2,r2,1
  80aa5c:	1462b03a 	or	r17,r2,r17
  80aa60:	b4400115 	stw	r17,4(r22)
  80aa64:	080b7bc0 	call	80b7bc <__malloc_unlock>
  80aa68:	9005883a 	mov	r2,r18
  80aa6c:	003f4006 	br	80a770 <__alt_mem_onchip_mem+0xff802770>
  80aa70:	a8c00217 	ldw	r3,8(r21)
  80aa74:	90c00215 	stw	r3,8(r18)
  80aa78:	a8c00317 	ldw	r3,12(r21)
  80aa7c:	90c00315 	stw	r3,12(r18)
  80aa80:	30801126 	beq	r6,r2,80aac8 <_realloc_r+0x4c8>
  80aa84:	90800404 	addi	r2,r18,16
  80aa88:	a8c00404 	addi	r3,r21,16
  80aa8c:	003f1906 	br	80a6f4 <__alt_mem_onchip_mem+0xff8026f4>
  80aa90:	90ffff17 	ldw	r3,-4(r18)
  80aa94:	00bfff04 	movi	r2,-4
  80aa98:	a825883a 	mov	r18,r21
  80aa9c:	1884703a 	and	r2,r3,r2
  80aaa0:	80a1883a 	add	r16,r16,r2
  80aaa4:	003f2406 	br	80a738 <__alt_mem_onchip_mem+0xff802738>
  80aaa8:	a8800217 	ldw	r2,8(r21)
  80aaac:	b0800415 	stw	r2,16(r22)
  80aab0:	a8800317 	ldw	r2,12(r21)
  80aab4:	b0800515 	stw	r2,20(r22)
  80aab8:	31000a26 	beq	r6,r4,80aae4 <_realloc_r+0x4e4>
  80aabc:	b0800604 	addi	r2,r22,24
  80aac0:	ad400404 	addi	r21,r21,16
  80aac4:	003fa906 	br	80a96c <__alt_mem_onchip_mem+0xff80296c>
  80aac8:	a9000417 	ldw	r4,16(r21)
  80aacc:	90800604 	addi	r2,r18,24
  80aad0:	a8c00604 	addi	r3,r21,24
  80aad4:	91000415 	stw	r4,16(r18)
  80aad8:	a9000517 	ldw	r4,20(r21)
  80aadc:	91000515 	stw	r4,20(r18)
  80aae0:	003f0406 	br	80a6f4 <__alt_mem_onchip_mem+0xff8026f4>
  80aae4:	a8c00417 	ldw	r3,16(r21)
  80aae8:	ad400604 	addi	r21,r21,24
  80aaec:	b0800804 	addi	r2,r22,32
  80aaf0:	b0c00615 	stw	r3,24(r22)
  80aaf4:	a8ffff17 	ldw	r3,-4(r21)
  80aaf8:	b0c00715 	stw	r3,28(r22)
  80aafc:	003f9b06 	br	80a96c <__alt_mem_onchip_mem+0xff80296c>
  80ab00:	9005883a 	mov	r2,r18
  80ab04:	003fc706 	br	80aa24 <__alt_mem_onchip_mem+0xff802a24>
  80ab08:	a80b883a 	mov	r5,r21
  80ab0c:	9009883a 	mov	r4,r18
  80ab10:	080a4440 	call	80a444 <memmove>
  80ab14:	003fc906 	br	80aa3c <__alt_mem_onchip_mem+0xff802a3c>
  80ab18:	a8800217 	ldw	r2,8(r21)
  80ab1c:	b0800415 	stw	r2,16(r22)
  80ab20:	a8800317 	ldw	r2,12(r21)
  80ab24:	b0800515 	stw	r2,20(r22)
  80ab28:	31000726 	beq	r6,r4,80ab48 <_realloc_r+0x548>
  80ab2c:	b0800604 	addi	r2,r22,24
  80ab30:	ad400404 	addi	r21,r21,16
  80ab34:	003fbb06 	br	80aa24 <__alt_mem_onchip_mem+0xff802a24>
  80ab38:	a009883a 	mov	r4,r20
  80ab3c:	080b7bc0 	call	80b7bc <__malloc_unlock>
  80ab40:	0005883a 	mov	r2,zero
  80ab44:	003f0a06 	br	80a770 <__alt_mem_onchip_mem+0xff802770>
  80ab48:	a8c00417 	ldw	r3,16(r21)
  80ab4c:	ad400604 	addi	r21,r21,24
  80ab50:	b0800804 	addi	r2,r22,32
  80ab54:	b0c00615 	stw	r3,24(r22)
  80ab58:	a8ffff17 	ldw	r3,-4(r21)
  80ab5c:	b0c00715 	stw	r3,28(r22)
  80ab60:	003fb006 	br	80aa24 <__alt_mem_onchip_mem+0xff802a24>

0080ab64 <__swsetup_r>:
  80ab64:	00802074 	movhi	r2,129
  80ab68:	defffd04 	addi	sp,sp,-12
  80ab6c:	10849704 	addi	r2,r2,4700
  80ab70:	dc400115 	stw	r17,4(sp)
  80ab74:	2023883a 	mov	r17,r4
  80ab78:	11000017 	ldw	r4,0(r2)
  80ab7c:	dc000015 	stw	r16,0(sp)
  80ab80:	dfc00215 	stw	ra,8(sp)
  80ab84:	2821883a 	mov	r16,r5
  80ab88:	20000226 	beq	r4,zero,80ab94 <__swsetup_r+0x30>
  80ab8c:	20800e17 	ldw	r2,56(r4)
  80ab90:	10003126 	beq	r2,zero,80ac58 <__swsetup_r+0xf4>
  80ab94:	8080030b 	ldhu	r2,12(r16)
  80ab98:	10c0020c 	andi	r3,r2,8
  80ab9c:	1009883a 	mov	r4,r2
  80aba0:	18000f26 	beq	r3,zero,80abe0 <__swsetup_r+0x7c>
  80aba4:	80c00417 	ldw	r3,16(r16)
  80aba8:	18001526 	beq	r3,zero,80ac00 <__swsetup_r+0x9c>
  80abac:	1100004c 	andi	r4,r2,1
  80abb0:	20001c1e 	bne	r4,zero,80ac24 <__swsetup_r+0xc0>
  80abb4:	1080008c 	andi	r2,r2,2
  80abb8:	1000291e 	bne	r2,zero,80ac60 <__swsetup_r+0xfc>
  80abbc:	80800517 	ldw	r2,20(r16)
  80abc0:	80800215 	stw	r2,8(r16)
  80abc4:	18001c26 	beq	r3,zero,80ac38 <__swsetup_r+0xd4>
  80abc8:	0005883a 	mov	r2,zero
  80abcc:	dfc00217 	ldw	ra,8(sp)
  80abd0:	dc400117 	ldw	r17,4(sp)
  80abd4:	dc000017 	ldw	r16,0(sp)
  80abd8:	dec00304 	addi	sp,sp,12
  80abdc:	f800283a 	ret
  80abe0:	2080040c 	andi	r2,r4,16
  80abe4:	10002e26 	beq	r2,zero,80aca0 <__swsetup_r+0x13c>
  80abe8:	2080010c 	andi	r2,r4,4
  80abec:	10001e1e 	bne	r2,zero,80ac68 <__swsetup_r+0x104>
  80abf0:	80c00417 	ldw	r3,16(r16)
  80abf4:	20800214 	ori	r2,r4,8
  80abf8:	8080030d 	sth	r2,12(r16)
  80abfc:	183feb1e 	bne	r3,zero,80abac <__alt_mem_onchip_mem+0xff802bac>
  80ac00:	1100a00c 	andi	r4,r2,640
  80ac04:	01408004 	movi	r5,512
  80ac08:	217fe826 	beq	r4,r5,80abac <__alt_mem_onchip_mem+0xff802bac>
  80ac0c:	800b883a 	mov	r5,r16
  80ac10:	8809883a 	mov	r4,r17
  80ac14:	0807f080 	call	807f08 <__smakebuf_r>
  80ac18:	8080030b 	ldhu	r2,12(r16)
  80ac1c:	80c00417 	ldw	r3,16(r16)
  80ac20:	003fe206 	br	80abac <__alt_mem_onchip_mem+0xff802bac>
  80ac24:	80800517 	ldw	r2,20(r16)
  80ac28:	80000215 	stw	zero,8(r16)
  80ac2c:	0085c83a 	sub	r2,zero,r2
  80ac30:	80800615 	stw	r2,24(r16)
  80ac34:	183fe41e 	bne	r3,zero,80abc8 <__alt_mem_onchip_mem+0xff802bc8>
  80ac38:	80c0030b 	ldhu	r3,12(r16)
  80ac3c:	0005883a 	mov	r2,zero
  80ac40:	1900200c 	andi	r4,r3,128
  80ac44:	203fe126 	beq	r4,zero,80abcc <__alt_mem_onchip_mem+0xff802bcc>
  80ac48:	18c01014 	ori	r3,r3,64
  80ac4c:	80c0030d 	sth	r3,12(r16)
  80ac50:	00bfffc4 	movi	r2,-1
  80ac54:	003fdd06 	br	80abcc <__alt_mem_onchip_mem+0xff802bcc>
  80ac58:	08095f00 	call	8095f0 <__sinit>
  80ac5c:	003fcd06 	br	80ab94 <__alt_mem_onchip_mem+0xff802b94>
  80ac60:	0005883a 	mov	r2,zero
  80ac64:	003fd606 	br	80abc0 <__alt_mem_onchip_mem+0xff802bc0>
  80ac68:	81400c17 	ldw	r5,48(r16)
  80ac6c:	28000626 	beq	r5,zero,80ac88 <__swsetup_r+0x124>
  80ac70:	80801004 	addi	r2,r16,64
  80ac74:	28800326 	beq	r5,r2,80ac84 <__swsetup_r+0x120>
  80ac78:	8809883a 	mov	r4,r17
  80ac7c:	08098100 	call	809810 <_free_r>
  80ac80:	8100030b 	ldhu	r4,12(r16)
  80ac84:	80000c15 	stw	zero,48(r16)
  80ac88:	80c00417 	ldw	r3,16(r16)
  80ac8c:	00bff6c4 	movi	r2,-37
  80ac90:	1108703a 	and	r4,r2,r4
  80ac94:	80000115 	stw	zero,4(r16)
  80ac98:	80c00015 	stw	r3,0(r16)
  80ac9c:	003fd506 	br	80abf4 <__alt_mem_onchip_mem+0xff802bf4>
  80aca0:	00800244 	movi	r2,9
  80aca4:	88800015 	stw	r2,0(r17)
  80aca8:	20801014 	ori	r2,r4,64
  80acac:	8080030d 	sth	r2,12(r16)
  80acb0:	00bfffc4 	movi	r2,-1
  80acb4:	003fc506 	br	80abcc <__alt_mem_onchip_mem+0xff802bcc>

0080acb8 <_fclose_r>:
  80acb8:	28003926 	beq	r5,zero,80ada0 <_fclose_r+0xe8>
  80acbc:	defffc04 	addi	sp,sp,-16
  80acc0:	dc400115 	stw	r17,4(sp)
  80acc4:	dc000015 	stw	r16,0(sp)
  80acc8:	dfc00315 	stw	ra,12(sp)
  80accc:	dc800215 	stw	r18,8(sp)
  80acd0:	2023883a 	mov	r17,r4
  80acd4:	2821883a 	mov	r16,r5
  80acd8:	20000226 	beq	r4,zero,80ace4 <_fclose_r+0x2c>
  80acdc:	20800e17 	ldw	r2,56(r4)
  80ace0:	10002726 	beq	r2,zero,80ad80 <_fclose_r+0xc8>
  80ace4:	8080030f 	ldh	r2,12(r16)
  80ace8:	1000071e 	bne	r2,zero,80ad08 <_fclose_r+0x50>
  80acec:	0005883a 	mov	r2,zero
  80acf0:	dfc00317 	ldw	ra,12(sp)
  80acf4:	dc800217 	ldw	r18,8(sp)
  80acf8:	dc400117 	ldw	r17,4(sp)
  80acfc:	dc000017 	ldw	r16,0(sp)
  80ad00:	dec00404 	addi	sp,sp,16
  80ad04:	f800283a 	ret
  80ad08:	800b883a 	mov	r5,r16
  80ad0c:	8809883a 	mov	r4,r17
  80ad10:	0808ff80 	call	808ff8 <__sflush_r>
  80ad14:	1025883a 	mov	r18,r2
  80ad18:	80800b17 	ldw	r2,44(r16)
  80ad1c:	10000426 	beq	r2,zero,80ad30 <_fclose_r+0x78>
  80ad20:	81400717 	ldw	r5,28(r16)
  80ad24:	8809883a 	mov	r4,r17
  80ad28:	103ee83a 	callr	r2
  80ad2c:	10001616 	blt	r2,zero,80ad88 <_fclose_r+0xd0>
  80ad30:	8080030b 	ldhu	r2,12(r16)
  80ad34:	1080200c 	andi	r2,r2,128
  80ad38:	1000151e 	bne	r2,zero,80ad90 <_fclose_r+0xd8>
  80ad3c:	81400c17 	ldw	r5,48(r16)
  80ad40:	28000526 	beq	r5,zero,80ad58 <_fclose_r+0xa0>
  80ad44:	80801004 	addi	r2,r16,64
  80ad48:	28800226 	beq	r5,r2,80ad54 <_fclose_r+0x9c>
  80ad4c:	8809883a 	mov	r4,r17
  80ad50:	08098100 	call	809810 <_free_r>
  80ad54:	80000c15 	stw	zero,48(r16)
  80ad58:	81401117 	ldw	r5,68(r16)
  80ad5c:	28000326 	beq	r5,zero,80ad6c <_fclose_r+0xb4>
  80ad60:	8809883a 	mov	r4,r17
  80ad64:	08098100 	call	809810 <_free_r>
  80ad68:	80001115 	stw	zero,68(r16)
  80ad6c:	08096000 	call	809600 <__sfp_lock_acquire>
  80ad70:	8000030d 	sth	zero,12(r16)
  80ad74:	08096040 	call	809604 <__sfp_lock_release>
  80ad78:	9005883a 	mov	r2,r18
  80ad7c:	003fdc06 	br	80acf0 <__alt_mem_onchip_mem+0xff802cf0>
  80ad80:	08095f00 	call	8095f0 <__sinit>
  80ad84:	003fd706 	br	80ace4 <__alt_mem_onchip_mem+0xff802ce4>
  80ad88:	04bfffc4 	movi	r18,-1
  80ad8c:	003fe806 	br	80ad30 <__alt_mem_onchip_mem+0xff802d30>
  80ad90:	81400417 	ldw	r5,16(r16)
  80ad94:	8809883a 	mov	r4,r17
  80ad98:	08098100 	call	809810 <_free_r>
  80ad9c:	003fe706 	br	80ad3c <__alt_mem_onchip_mem+0xff802d3c>
  80ada0:	0005883a 	mov	r2,zero
  80ada4:	f800283a 	ret

0080ada8 <fclose>:
  80ada8:	00802074 	movhi	r2,129
  80adac:	10849704 	addi	r2,r2,4700
  80adb0:	200b883a 	mov	r5,r4
  80adb4:	11000017 	ldw	r4,0(r2)
  80adb8:	080acb81 	jmpi	80acb8 <_fclose_r>

0080adbc <__divsi3>:
  80adbc:	20001b16 	blt	r4,zero,80ae2c <__divsi3+0x70>
  80adc0:	000f883a 	mov	r7,zero
  80adc4:	28001616 	blt	r5,zero,80ae20 <__divsi3+0x64>
  80adc8:	200d883a 	mov	r6,r4
  80adcc:	29001a2e 	bgeu	r5,r4,80ae38 <__divsi3+0x7c>
  80add0:	00800804 	movi	r2,32
  80add4:	00c00044 	movi	r3,1
  80add8:	00000106 	br	80ade0 <__divsi3+0x24>
  80addc:	10000d26 	beq	r2,zero,80ae14 <__divsi3+0x58>
  80ade0:	294b883a 	add	r5,r5,r5
  80ade4:	10bfffc4 	addi	r2,r2,-1
  80ade8:	18c7883a 	add	r3,r3,r3
  80adec:	293ffb36 	bltu	r5,r4,80addc <__alt_mem_onchip_mem+0xff802ddc>
  80adf0:	0005883a 	mov	r2,zero
  80adf4:	18000726 	beq	r3,zero,80ae14 <__divsi3+0x58>
  80adf8:	0005883a 	mov	r2,zero
  80adfc:	31400236 	bltu	r6,r5,80ae08 <__divsi3+0x4c>
  80ae00:	314dc83a 	sub	r6,r6,r5
  80ae04:	10c4b03a 	or	r2,r2,r3
  80ae08:	1806d07a 	srli	r3,r3,1
  80ae0c:	280ad07a 	srli	r5,r5,1
  80ae10:	183ffa1e 	bne	r3,zero,80adfc <__alt_mem_onchip_mem+0xff802dfc>
  80ae14:	38000126 	beq	r7,zero,80ae1c <__divsi3+0x60>
  80ae18:	0085c83a 	sub	r2,zero,r2
  80ae1c:	f800283a 	ret
  80ae20:	014bc83a 	sub	r5,zero,r5
  80ae24:	39c0005c 	xori	r7,r7,1
  80ae28:	003fe706 	br	80adc8 <__alt_mem_onchip_mem+0xff802dc8>
  80ae2c:	0109c83a 	sub	r4,zero,r4
  80ae30:	01c00044 	movi	r7,1
  80ae34:	003fe306 	br	80adc4 <__alt_mem_onchip_mem+0xff802dc4>
  80ae38:	00c00044 	movi	r3,1
  80ae3c:	003fee06 	br	80adf8 <__alt_mem_onchip_mem+0xff802df8>

0080ae40 <__modsi3>:
  80ae40:	20001716 	blt	r4,zero,80aea0 <__modsi3+0x60>
  80ae44:	000f883a 	mov	r7,zero
  80ae48:	2005883a 	mov	r2,r4
  80ae4c:	28001216 	blt	r5,zero,80ae98 <__modsi3+0x58>
  80ae50:	2900162e 	bgeu	r5,r4,80aeac <__modsi3+0x6c>
  80ae54:	01800804 	movi	r6,32
  80ae58:	00c00044 	movi	r3,1
  80ae5c:	00000106 	br	80ae64 <__modsi3+0x24>
  80ae60:	30000a26 	beq	r6,zero,80ae8c <__modsi3+0x4c>
  80ae64:	294b883a 	add	r5,r5,r5
  80ae68:	31bfffc4 	addi	r6,r6,-1
  80ae6c:	18c7883a 	add	r3,r3,r3
  80ae70:	293ffb36 	bltu	r5,r4,80ae60 <__alt_mem_onchip_mem+0xff802e60>
  80ae74:	18000526 	beq	r3,zero,80ae8c <__modsi3+0x4c>
  80ae78:	1806d07a 	srli	r3,r3,1
  80ae7c:	11400136 	bltu	r2,r5,80ae84 <__modsi3+0x44>
  80ae80:	1145c83a 	sub	r2,r2,r5
  80ae84:	280ad07a 	srli	r5,r5,1
  80ae88:	183ffb1e 	bne	r3,zero,80ae78 <__alt_mem_onchip_mem+0xff802e78>
  80ae8c:	38000126 	beq	r7,zero,80ae94 <__modsi3+0x54>
  80ae90:	0085c83a 	sub	r2,zero,r2
  80ae94:	f800283a 	ret
  80ae98:	014bc83a 	sub	r5,zero,r5
  80ae9c:	003fec06 	br	80ae50 <__alt_mem_onchip_mem+0xff802e50>
  80aea0:	0109c83a 	sub	r4,zero,r4
  80aea4:	01c00044 	movi	r7,1
  80aea8:	003fe706 	br	80ae48 <__alt_mem_onchip_mem+0xff802e48>
  80aeac:	00c00044 	movi	r3,1
  80aeb0:	003ff106 	br	80ae78 <__alt_mem_onchip_mem+0xff802e78>

0080aeb4 <__udivsi3>:
  80aeb4:	200d883a 	mov	r6,r4
  80aeb8:	2900152e 	bgeu	r5,r4,80af10 <__udivsi3+0x5c>
  80aebc:	28001416 	blt	r5,zero,80af10 <__udivsi3+0x5c>
  80aec0:	00800804 	movi	r2,32
  80aec4:	00c00044 	movi	r3,1
  80aec8:	00000206 	br	80aed4 <__udivsi3+0x20>
  80aecc:	10000e26 	beq	r2,zero,80af08 <__udivsi3+0x54>
  80aed0:	28000516 	blt	r5,zero,80aee8 <__udivsi3+0x34>
  80aed4:	294b883a 	add	r5,r5,r5
  80aed8:	10bfffc4 	addi	r2,r2,-1
  80aedc:	18c7883a 	add	r3,r3,r3
  80aee0:	293ffa36 	bltu	r5,r4,80aecc <__alt_mem_onchip_mem+0xff802ecc>
  80aee4:	18000826 	beq	r3,zero,80af08 <__udivsi3+0x54>
  80aee8:	0005883a 	mov	r2,zero
  80aeec:	31400236 	bltu	r6,r5,80aef8 <__udivsi3+0x44>
  80aef0:	314dc83a 	sub	r6,r6,r5
  80aef4:	10c4b03a 	or	r2,r2,r3
  80aef8:	1806d07a 	srli	r3,r3,1
  80aefc:	280ad07a 	srli	r5,r5,1
  80af00:	183ffa1e 	bne	r3,zero,80aeec <__alt_mem_onchip_mem+0xff802eec>
  80af04:	f800283a 	ret
  80af08:	0005883a 	mov	r2,zero
  80af0c:	f800283a 	ret
  80af10:	00c00044 	movi	r3,1
  80af14:	003ff406 	br	80aee8 <__alt_mem_onchip_mem+0xff802ee8>

0080af18 <__umodsi3>:
  80af18:	2005883a 	mov	r2,r4
  80af1c:	2900122e 	bgeu	r5,r4,80af68 <__umodsi3+0x50>
  80af20:	28001116 	blt	r5,zero,80af68 <__umodsi3+0x50>
  80af24:	01800804 	movi	r6,32
  80af28:	00c00044 	movi	r3,1
  80af2c:	00000206 	br	80af38 <__umodsi3+0x20>
  80af30:	30000c26 	beq	r6,zero,80af64 <__umodsi3+0x4c>
  80af34:	28000516 	blt	r5,zero,80af4c <__umodsi3+0x34>
  80af38:	294b883a 	add	r5,r5,r5
  80af3c:	31bfffc4 	addi	r6,r6,-1
  80af40:	18c7883a 	add	r3,r3,r3
  80af44:	293ffa36 	bltu	r5,r4,80af30 <__alt_mem_onchip_mem+0xff802f30>
  80af48:	18000626 	beq	r3,zero,80af64 <__umodsi3+0x4c>
  80af4c:	1806d07a 	srli	r3,r3,1
  80af50:	11400136 	bltu	r2,r5,80af58 <__umodsi3+0x40>
  80af54:	1145c83a 	sub	r2,r2,r5
  80af58:	280ad07a 	srli	r5,r5,1
  80af5c:	183ffb1e 	bne	r3,zero,80af4c <__alt_mem_onchip_mem+0xff802f4c>
  80af60:	f800283a 	ret
  80af64:	f800283a 	ret
  80af68:	00c00044 	movi	r3,1
  80af6c:	003ff706 	br	80af4c <__alt_mem_onchip_mem+0xff802f4c>

0080af70 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80af70:	defff504 	addi	sp,sp,-44
  80af74:	df000a15 	stw	fp,40(sp)
  80af78:	df000a04 	addi	fp,sp,40
  80af7c:	e13ffc15 	stw	r4,-16(fp)
  80af80:	e17ffd15 	stw	r5,-12(fp)
  80af84:	e1bffe15 	stw	r6,-8(fp)
  80af88:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80af8c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80af90:	d0a73117 	ldw	r2,-25404(gp)
  
  if (alt_ticks_per_second ())
  80af94:	10003c26 	beq	r2,zero,80b088 <alt_alarm_start+0x118>
  {
    if (alarm)
  80af98:	e0bffc17 	ldw	r2,-16(fp)
  80af9c:	10003826 	beq	r2,zero,80b080 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80afa0:	e0bffc17 	ldw	r2,-16(fp)
  80afa4:	e0fffe17 	ldw	r3,-8(fp)
  80afa8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80afac:	e0bffc17 	ldw	r2,-16(fp)
  80afb0:	e0ffff17 	ldw	r3,-4(fp)
  80afb4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80afb8:	0005303a 	rdctl	r2,status
  80afbc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80afc0:	e0fff917 	ldw	r3,-28(fp)
  80afc4:	00bfff84 	movi	r2,-2
  80afc8:	1884703a 	and	r2,r3,r2
  80afcc:	1001703a 	wrctl	status,r2
  
  return context;
  80afd0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80afd4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80afd8:	d0a73217 	ldw	r2,-25400(gp)
      
      current_nticks = alt_nticks();
  80afdc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80afe0:	e0fffd17 	ldw	r3,-12(fp)
  80afe4:	e0bff617 	ldw	r2,-40(fp)
  80afe8:	1885883a 	add	r2,r3,r2
  80afec:	10c00044 	addi	r3,r2,1
  80aff0:	e0bffc17 	ldw	r2,-16(fp)
  80aff4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80aff8:	e0bffc17 	ldw	r2,-16(fp)
  80affc:	10c00217 	ldw	r3,8(r2)
  80b000:	e0bff617 	ldw	r2,-40(fp)
  80b004:	1880042e 	bgeu	r3,r2,80b018 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80b008:	e0bffc17 	ldw	r2,-16(fp)
  80b00c:	00c00044 	movi	r3,1
  80b010:	10c00405 	stb	r3,16(r2)
  80b014:	00000206 	br	80b020 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80b018:	e0bffc17 	ldw	r2,-16(fp)
  80b01c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80b020:	e0bffc17 	ldw	r2,-16(fp)
  80b024:	d0e00c04 	addi	r3,gp,-32720
  80b028:	e0fffa15 	stw	r3,-24(fp)
  80b02c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80b030:	e0bffb17 	ldw	r2,-20(fp)
  80b034:	e0fffa17 	ldw	r3,-24(fp)
  80b038:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80b03c:	e0bffa17 	ldw	r2,-24(fp)
  80b040:	10c00017 	ldw	r3,0(r2)
  80b044:	e0bffb17 	ldw	r2,-20(fp)
  80b048:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80b04c:	e0bffa17 	ldw	r2,-24(fp)
  80b050:	10800017 	ldw	r2,0(r2)
  80b054:	e0fffb17 	ldw	r3,-20(fp)
  80b058:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80b05c:	e0bffa17 	ldw	r2,-24(fp)
  80b060:	e0fffb17 	ldw	r3,-20(fp)
  80b064:	10c00015 	stw	r3,0(r2)
  80b068:	e0bff817 	ldw	r2,-32(fp)
  80b06c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b070:	e0bff717 	ldw	r2,-36(fp)
  80b074:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80b078:	0005883a 	mov	r2,zero
  80b07c:	00000306 	br	80b08c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80b080:	00bffa84 	movi	r2,-22
  80b084:	00000106 	br	80b08c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80b088:	00bfde84 	movi	r2,-134
  }
}
  80b08c:	e037883a 	mov	sp,fp
  80b090:	df000017 	ldw	fp,0(sp)
  80b094:	dec00104 	addi	sp,sp,4
  80b098:	f800283a 	ret

0080b09c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b09c:	defffe04 	addi	sp,sp,-8
  80b0a0:	dfc00115 	stw	ra,4(sp)
  80b0a4:	df000015 	stw	fp,0(sp)
  80b0a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80b0ac:	d0a00917 	ldw	r2,-32732(gp)
  80b0b0:	10000326 	beq	r2,zero,80b0c0 <alt_get_errno+0x24>
  80b0b4:	d0a00917 	ldw	r2,-32732(gp)
  80b0b8:	103ee83a 	callr	r2
  80b0bc:	00000106 	br	80b0c4 <alt_get_errno+0x28>
  80b0c0:	d0a72904 	addi	r2,gp,-25436
}
  80b0c4:	e037883a 	mov	sp,fp
  80b0c8:	dfc00117 	ldw	ra,4(sp)
  80b0cc:	df000017 	ldw	fp,0(sp)
  80b0d0:	dec00204 	addi	sp,sp,8
  80b0d4:	f800283a 	ret

0080b0d8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80b0d8:	defffb04 	addi	sp,sp,-20
  80b0dc:	dfc00415 	stw	ra,16(sp)
  80b0e0:	df000315 	stw	fp,12(sp)
  80b0e4:	df000304 	addi	fp,sp,12
  80b0e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80b0ec:	e0bfff17 	ldw	r2,-4(fp)
  80b0f0:	10000616 	blt	r2,zero,80b10c <close+0x34>
  80b0f4:	e0bfff17 	ldw	r2,-4(fp)
  80b0f8:	10c00324 	muli	r3,r2,12
  80b0fc:	00802074 	movhi	r2,129
  80b100:	10bfa504 	addi	r2,r2,-364
  80b104:	1885883a 	add	r2,r3,r2
  80b108:	00000106 	br	80b110 <close+0x38>
  80b10c:	0005883a 	mov	r2,zero
  80b110:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80b114:	e0bffd17 	ldw	r2,-12(fp)
  80b118:	10001926 	beq	r2,zero,80b180 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80b11c:	e0bffd17 	ldw	r2,-12(fp)
  80b120:	10800017 	ldw	r2,0(r2)
  80b124:	10800417 	ldw	r2,16(r2)
  80b128:	10000626 	beq	r2,zero,80b144 <close+0x6c>
  80b12c:	e0bffd17 	ldw	r2,-12(fp)
  80b130:	10800017 	ldw	r2,0(r2)
  80b134:	10800417 	ldw	r2,16(r2)
  80b138:	e13ffd17 	ldw	r4,-12(fp)
  80b13c:	103ee83a 	callr	r2
  80b140:	00000106 	br	80b148 <close+0x70>
  80b144:	0005883a 	mov	r2,zero
  80b148:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80b14c:	e13fff17 	ldw	r4,-4(fp)
  80b150:	080bb6c0 	call	80bb6c <alt_release_fd>
    if (rval < 0)
  80b154:	e0bffe17 	ldw	r2,-8(fp)
  80b158:	1000070e 	bge	r2,zero,80b178 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80b15c:	080b09c0 	call	80b09c <alt_get_errno>
  80b160:	1007883a 	mov	r3,r2
  80b164:	e0bffe17 	ldw	r2,-8(fp)
  80b168:	0085c83a 	sub	r2,zero,r2
  80b16c:	18800015 	stw	r2,0(r3)
      return -1;
  80b170:	00bfffc4 	movi	r2,-1
  80b174:	00000706 	br	80b194 <close+0xbc>
    }
    return 0;
  80b178:	0005883a 	mov	r2,zero
  80b17c:	00000506 	br	80b194 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80b180:	080b09c0 	call	80b09c <alt_get_errno>
  80b184:	1007883a 	mov	r3,r2
  80b188:	00801444 	movi	r2,81
  80b18c:	18800015 	stw	r2,0(r3)
    return -1;
  80b190:	00bfffc4 	movi	r2,-1
  }
}
  80b194:	e037883a 	mov	sp,fp
  80b198:	dfc00117 	ldw	ra,4(sp)
  80b19c:	df000017 	ldw	fp,0(sp)
  80b1a0:	dec00204 	addi	sp,sp,8
  80b1a4:	f800283a 	ret

0080b1a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80b1a8:	defffc04 	addi	sp,sp,-16
  80b1ac:	df000315 	stw	fp,12(sp)
  80b1b0:	df000304 	addi	fp,sp,12
  80b1b4:	e13ffd15 	stw	r4,-12(fp)
  80b1b8:	e17ffe15 	stw	r5,-8(fp)
  80b1bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80b1c0:	e0bfff17 	ldw	r2,-4(fp)
}
  80b1c4:	e037883a 	mov	sp,fp
  80b1c8:	df000017 	ldw	fp,0(sp)
  80b1cc:	dec00104 	addi	sp,sp,4
  80b1d0:	f800283a 	ret

0080b1d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b1d4:	defffe04 	addi	sp,sp,-8
  80b1d8:	dfc00115 	stw	ra,4(sp)
  80b1dc:	df000015 	stw	fp,0(sp)
  80b1e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80b1e4:	d0a00917 	ldw	r2,-32732(gp)
  80b1e8:	10000326 	beq	r2,zero,80b1f8 <alt_get_errno+0x24>
  80b1ec:	d0a00917 	ldw	r2,-32732(gp)
  80b1f0:	103ee83a 	callr	r2
  80b1f4:	00000106 	br	80b1fc <alt_get_errno+0x28>
  80b1f8:	d0a72904 	addi	r2,gp,-25436
}
  80b1fc:	e037883a 	mov	sp,fp
  80b200:	dfc00117 	ldw	ra,4(sp)
  80b204:	df000017 	ldw	fp,0(sp)
  80b208:	dec00204 	addi	sp,sp,8
  80b20c:	f800283a 	ret

0080b210 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80b210:	defffb04 	addi	sp,sp,-20
  80b214:	dfc00415 	stw	ra,16(sp)
  80b218:	df000315 	stw	fp,12(sp)
  80b21c:	df000304 	addi	fp,sp,12
  80b220:	e13ffe15 	stw	r4,-8(fp)
  80b224:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b228:	e0bffe17 	ldw	r2,-8(fp)
  80b22c:	10000616 	blt	r2,zero,80b248 <fstat+0x38>
  80b230:	e0bffe17 	ldw	r2,-8(fp)
  80b234:	10c00324 	muli	r3,r2,12
  80b238:	00802074 	movhi	r2,129
  80b23c:	10bfa504 	addi	r2,r2,-364
  80b240:	1885883a 	add	r2,r3,r2
  80b244:	00000106 	br	80b24c <fstat+0x3c>
  80b248:	0005883a 	mov	r2,zero
  80b24c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80b250:	e0bffd17 	ldw	r2,-12(fp)
  80b254:	10001026 	beq	r2,zero,80b298 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80b258:	e0bffd17 	ldw	r2,-12(fp)
  80b25c:	10800017 	ldw	r2,0(r2)
  80b260:	10800817 	ldw	r2,32(r2)
  80b264:	10000726 	beq	r2,zero,80b284 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80b268:	e0bffd17 	ldw	r2,-12(fp)
  80b26c:	10800017 	ldw	r2,0(r2)
  80b270:	10800817 	ldw	r2,32(r2)
  80b274:	e17fff17 	ldw	r5,-4(fp)
  80b278:	e13ffd17 	ldw	r4,-12(fp)
  80b27c:	103ee83a 	callr	r2
  80b280:	00000a06 	br	80b2ac <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80b284:	e0bfff17 	ldw	r2,-4(fp)
  80b288:	00c80004 	movi	r3,8192
  80b28c:	10c00115 	stw	r3,4(r2)
      return 0;
  80b290:	0005883a 	mov	r2,zero
  80b294:	00000506 	br	80b2ac <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80b298:	080b1d40 	call	80b1d4 <alt_get_errno>
  80b29c:	1007883a 	mov	r3,r2
  80b2a0:	00801444 	movi	r2,81
  80b2a4:	18800015 	stw	r2,0(r3)
    return -1;
  80b2a8:	00bfffc4 	movi	r2,-1
  }
}
  80b2ac:	e037883a 	mov	sp,fp
  80b2b0:	dfc00117 	ldw	ra,4(sp)
  80b2b4:	df000017 	ldw	fp,0(sp)
  80b2b8:	dec00204 	addi	sp,sp,8
  80b2bc:	f800283a 	ret

0080b2c0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80b2c0:	defff004 	addi	sp,sp,-64
  80b2c4:	df000f15 	stw	fp,60(sp)
  80b2c8:	df000f04 	addi	fp,sp,60
  80b2cc:	e13ffd15 	stw	r4,-12(fp)
  80b2d0:	e17ffe15 	stw	r5,-8(fp)
  80b2d4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80b2d8:	00bffa84 	movi	r2,-22
  80b2dc:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80b2e0:	e0bffd17 	ldw	r2,-12(fp)
  80b2e4:	10800828 	cmpgeui	r2,r2,32
  80b2e8:	1000501e 	bne	r2,zero,80b42c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b2ec:	0005303a 	rdctl	r2,status
  80b2f0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b2f4:	e0fff617 	ldw	r3,-40(fp)
  80b2f8:	00bfff84 	movi	r2,-2
  80b2fc:	1884703a 	and	r2,r3,r2
  80b300:	1001703a 	wrctl	status,r2
  
  return context;
  80b304:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80b308:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  80b30c:	00802074 	movhi	r2,129
  80b310:	108bd404 	addi	r2,r2,12112
  80b314:	e0fffd17 	ldw	r3,-12(fp)
  80b318:	180690fa 	slli	r3,r3,3
  80b31c:	10c5883a 	add	r2,r2,r3
  80b320:	e0ffff17 	ldw	r3,-4(fp)
  80b324:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80b328:	00802074 	movhi	r2,129
  80b32c:	108bd404 	addi	r2,r2,12112
  80b330:	e0fffd17 	ldw	r3,-12(fp)
  80b334:	180690fa 	slli	r3,r3,3
  80b338:	10c5883a 	add	r2,r2,r3
  80b33c:	10800104 	addi	r2,r2,4
  80b340:	e0fffe17 	ldw	r3,-8(fp)
  80b344:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80b348:	e0bfff17 	ldw	r2,-4(fp)
  80b34c:	10001926 	beq	r2,zero,80b3b4 <alt_irq_register+0xf4>
  80b350:	e0bffd17 	ldw	r2,-12(fp)
  80b354:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b358:	0005303a 	rdctl	r2,status
  80b35c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b360:	e0fff717 	ldw	r3,-36(fp)
  80b364:	00bfff84 	movi	r2,-2
  80b368:	1884703a 	and	r2,r3,r2
  80b36c:	1001703a 	wrctl	status,r2
  
  return context;
  80b370:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80b374:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80b378:	00c00044 	movi	r3,1
  80b37c:	e0bff217 	ldw	r2,-56(fp)
  80b380:	1884983a 	sll	r2,r3,r2
  80b384:	1007883a 	mov	r3,r2
  80b388:	d0a72d17 	ldw	r2,-25420(gp)
  80b38c:	1884b03a 	or	r2,r3,r2
  80b390:	d0a72d15 	stw	r2,-25420(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80b394:	d0a72d17 	ldw	r2,-25420(gp)
  80b398:	100170fa 	wrctl	ienable,r2
  80b39c:	e0bff817 	ldw	r2,-32(fp)
  80b3a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b3a4:	e0bff917 	ldw	r2,-28(fp)
  80b3a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80b3ac:	0005883a 	mov	r2,zero
  80b3b0:	00001906 	br	80b418 <alt_irq_register+0x158>
  80b3b4:	e0bffd17 	ldw	r2,-12(fp)
  80b3b8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b3bc:	0005303a 	rdctl	r2,status
  80b3c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b3c4:	e0fffa17 	ldw	r3,-24(fp)
  80b3c8:	00bfff84 	movi	r2,-2
  80b3cc:	1884703a 	and	r2,r3,r2
  80b3d0:	1001703a 	wrctl	status,r2
  
  return context;
  80b3d4:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80b3d8:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  80b3dc:	00c00044 	movi	r3,1
  80b3e0:	e0bff417 	ldw	r2,-48(fp)
  80b3e4:	1884983a 	sll	r2,r3,r2
  80b3e8:	0084303a 	nor	r2,zero,r2
  80b3ec:	1007883a 	mov	r3,r2
  80b3f0:	d0a72d17 	ldw	r2,-25420(gp)
  80b3f4:	1884703a 	and	r2,r3,r2
  80b3f8:	d0a72d15 	stw	r2,-25420(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80b3fc:	d0a72d17 	ldw	r2,-25420(gp)
  80b400:	100170fa 	wrctl	ienable,r2
  80b404:	e0bffb17 	ldw	r2,-20(fp)
  80b408:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b40c:	e0bffc17 	ldw	r2,-16(fp)
  80b410:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80b414:	0005883a 	mov	r2,zero
  80b418:	e0bff115 	stw	r2,-60(fp)
  80b41c:	e0bff317 	ldw	r2,-52(fp)
  80b420:	e0bff515 	stw	r2,-44(fp)
  80b424:	e0bff517 	ldw	r2,-44(fp)
  80b428:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80b42c:	e0bff117 	ldw	r2,-60(fp)
}
  80b430:	e037883a 	mov	sp,fp
  80b434:	df000017 	ldw	fp,0(sp)
  80b438:	dec00104 	addi	sp,sp,4
  80b43c:	f800283a 	ret

0080b440 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b440:	defffe04 	addi	sp,sp,-8
  80b444:	dfc00115 	stw	ra,4(sp)
  80b448:	df000015 	stw	fp,0(sp)
  80b44c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80b450:	d0a00917 	ldw	r2,-32732(gp)
  80b454:	10000326 	beq	r2,zero,80b464 <alt_get_errno+0x24>
  80b458:	d0a00917 	ldw	r2,-32732(gp)
  80b45c:	103ee83a 	callr	r2
  80b460:	00000106 	br	80b468 <alt_get_errno+0x28>
  80b464:	d0a72904 	addi	r2,gp,-25436
}
  80b468:	e037883a 	mov	sp,fp
  80b46c:	dfc00117 	ldw	ra,4(sp)
  80b470:	df000017 	ldw	fp,0(sp)
  80b474:	dec00204 	addi	sp,sp,8
  80b478:	f800283a 	ret

0080b47c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80b47c:	deffed04 	addi	sp,sp,-76
  80b480:	dfc01215 	stw	ra,72(sp)
  80b484:	df001115 	stw	fp,68(sp)
  80b488:	df001104 	addi	fp,sp,68
  80b48c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b490:	e0bfff17 	ldw	r2,-4(fp)
  80b494:	10000616 	blt	r2,zero,80b4b0 <isatty+0x34>
  80b498:	e0bfff17 	ldw	r2,-4(fp)
  80b49c:	10c00324 	muli	r3,r2,12
  80b4a0:	00802074 	movhi	r2,129
  80b4a4:	10bfa504 	addi	r2,r2,-364
  80b4a8:	1885883a 	add	r2,r3,r2
  80b4ac:	00000106 	br	80b4b4 <isatty+0x38>
  80b4b0:	0005883a 	mov	r2,zero
  80b4b4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80b4b8:	e0bfef17 	ldw	r2,-68(fp)
  80b4bc:	10000e26 	beq	r2,zero,80b4f8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80b4c0:	e0bfef17 	ldw	r2,-68(fp)
  80b4c4:	10800017 	ldw	r2,0(r2)
  80b4c8:	10800817 	ldw	r2,32(r2)
  80b4cc:	1000021e 	bne	r2,zero,80b4d8 <isatty+0x5c>
    {
      return 1;
  80b4d0:	00800044 	movi	r2,1
  80b4d4:	00000d06 	br	80b50c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80b4d8:	e0bff004 	addi	r2,fp,-64
  80b4dc:	100b883a 	mov	r5,r2
  80b4e0:	e13fff17 	ldw	r4,-4(fp)
  80b4e4:	080b2100 	call	80b210 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80b4e8:	e0bff117 	ldw	r2,-60(fp)
  80b4ec:	10880020 	cmpeqi	r2,r2,8192
  80b4f0:	10803fcc 	andi	r2,r2,255
  80b4f4:	00000506 	br	80b50c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80b4f8:	080b4400 	call	80b440 <alt_get_errno>
  80b4fc:	1007883a 	mov	r3,r2
  80b500:	00801444 	movi	r2,81
  80b504:	18800015 	stw	r2,0(r3)
    return 0;
  80b508:	0005883a 	mov	r2,zero
  }
}
  80b50c:	e037883a 	mov	sp,fp
  80b510:	dfc00117 	ldw	ra,4(sp)
  80b514:	df000017 	ldw	fp,0(sp)
  80b518:	dec00204 	addi	sp,sp,8
  80b51c:	f800283a 	ret

0080b520 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80b520:	defffc04 	addi	sp,sp,-16
  80b524:	df000315 	stw	fp,12(sp)
  80b528:	df000304 	addi	fp,sp,12
  80b52c:	e13ffd15 	stw	r4,-12(fp)
  80b530:	e17ffe15 	stw	r5,-8(fp)
  80b534:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80b538:	e0fffe17 	ldw	r3,-8(fp)
  80b53c:	e0bffd17 	ldw	r2,-12(fp)
  80b540:	18800c26 	beq	r3,r2,80b574 <alt_load_section+0x54>
  {
    while( to != end )
  80b544:	00000806 	br	80b568 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80b548:	e0bffe17 	ldw	r2,-8(fp)
  80b54c:	10c00104 	addi	r3,r2,4
  80b550:	e0fffe15 	stw	r3,-8(fp)
  80b554:	e0fffd17 	ldw	r3,-12(fp)
  80b558:	19000104 	addi	r4,r3,4
  80b55c:	e13ffd15 	stw	r4,-12(fp)
  80b560:	18c00017 	ldw	r3,0(r3)
  80b564:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80b568:	e0fffe17 	ldw	r3,-8(fp)
  80b56c:	e0bfff17 	ldw	r2,-4(fp)
  80b570:	18bff51e 	bne	r3,r2,80b548 <__alt_mem_onchip_mem+0xff803548>
    {
      *to++ = *from++;
    }
  }
}
  80b574:	0001883a 	nop
  80b578:	e037883a 	mov	sp,fp
  80b57c:	df000017 	ldw	fp,0(sp)
  80b580:	dec00104 	addi	sp,sp,4
  80b584:	f800283a 	ret

0080b588 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80b588:	defffe04 	addi	sp,sp,-8
  80b58c:	dfc00115 	stw	ra,4(sp)
  80b590:	df000015 	stw	fp,0(sp)
  80b594:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80b598:	01802074 	movhi	r6,129
  80b59c:	3184a604 	addi	r6,r6,4760
  80b5a0:	01402074 	movhi	r5,129
  80b5a4:	297d9004 	addi	r5,r5,-2496
  80b5a8:	01002074 	movhi	r4,129
  80b5ac:	2104a604 	addi	r4,r4,4760
  80b5b0:	080b5200 	call	80b520 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80b5b4:	01802034 	movhi	r6,128
  80b5b8:	31809104 	addi	r6,r6,580
  80b5bc:	01402034 	movhi	r5,128
  80b5c0:	29400804 	addi	r5,r5,32
  80b5c4:	01002034 	movhi	r4,128
  80b5c8:	21000804 	addi	r4,r4,32
  80b5cc:	080b5200 	call	80b520 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80b5d0:	01802074 	movhi	r6,129
  80b5d4:	31bd9004 	addi	r6,r6,-2496
  80b5d8:	01402074 	movhi	r5,129
  80b5dc:	297c8404 	addi	r5,r5,-3568
  80b5e0:	01002074 	movhi	r4,129
  80b5e4:	213c8404 	addi	r4,r4,-3568
  80b5e8:	080b5200 	call	80b520 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80b5ec:	080e36c0 	call	80e36c <alt_dcache_flush_all>
  alt_icache_flush_all();
  80b5f0:	080e7900 	call	80e790 <alt_icache_flush_all>
}
  80b5f4:	0001883a 	nop
  80b5f8:	e037883a 	mov	sp,fp
  80b5fc:	dfc00117 	ldw	ra,4(sp)
  80b600:	df000017 	ldw	fp,0(sp)
  80b604:	dec00204 	addi	sp,sp,8
  80b608:	f800283a 	ret

0080b60c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b60c:	defffe04 	addi	sp,sp,-8
  80b610:	dfc00115 	stw	ra,4(sp)
  80b614:	df000015 	stw	fp,0(sp)
  80b618:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80b61c:	d0a00917 	ldw	r2,-32732(gp)
  80b620:	10000326 	beq	r2,zero,80b630 <alt_get_errno+0x24>
  80b624:	d0a00917 	ldw	r2,-32732(gp)
  80b628:	103ee83a 	callr	r2
  80b62c:	00000106 	br	80b634 <alt_get_errno+0x28>
  80b630:	d0a72904 	addi	r2,gp,-25436
}
  80b634:	e037883a 	mov	sp,fp
  80b638:	dfc00117 	ldw	ra,4(sp)
  80b63c:	df000017 	ldw	fp,0(sp)
  80b640:	dec00204 	addi	sp,sp,8
  80b644:	f800283a 	ret

0080b648 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80b648:	defff904 	addi	sp,sp,-28
  80b64c:	dfc00615 	stw	ra,24(sp)
  80b650:	df000515 	stw	fp,20(sp)
  80b654:	df000504 	addi	fp,sp,20
  80b658:	e13ffd15 	stw	r4,-12(fp)
  80b65c:	e17ffe15 	stw	r5,-8(fp)
  80b660:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80b664:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b668:	e0bffd17 	ldw	r2,-12(fp)
  80b66c:	10000616 	blt	r2,zero,80b688 <lseek+0x40>
  80b670:	e0bffd17 	ldw	r2,-12(fp)
  80b674:	10c00324 	muli	r3,r2,12
  80b678:	00802074 	movhi	r2,129
  80b67c:	10bfa504 	addi	r2,r2,-364
  80b680:	1885883a 	add	r2,r3,r2
  80b684:	00000106 	br	80b68c <lseek+0x44>
  80b688:	0005883a 	mov	r2,zero
  80b68c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80b690:	e0bffc17 	ldw	r2,-16(fp)
  80b694:	10001026 	beq	r2,zero,80b6d8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80b698:	e0bffc17 	ldw	r2,-16(fp)
  80b69c:	10800017 	ldw	r2,0(r2)
  80b6a0:	10800717 	ldw	r2,28(r2)
  80b6a4:	10000926 	beq	r2,zero,80b6cc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80b6a8:	e0bffc17 	ldw	r2,-16(fp)
  80b6ac:	10800017 	ldw	r2,0(r2)
  80b6b0:	10800717 	ldw	r2,28(r2)
  80b6b4:	e1bfff17 	ldw	r6,-4(fp)
  80b6b8:	e17ffe17 	ldw	r5,-8(fp)
  80b6bc:	e13ffc17 	ldw	r4,-16(fp)
  80b6c0:	103ee83a 	callr	r2
  80b6c4:	e0bffb15 	stw	r2,-20(fp)
  80b6c8:	00000506 	br	80b6e0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80b6cc:	00bfde84 	movi	r2,-134
  80b6d0:	e0bffb15 	stw	r2,-20(fp)
  80b6d4:	00000206 	br	80b6e0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80b6d8:	00bfebc4 	movi	r2,-81
  80b6dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80b6e0:	e0bffb17 	ldw	r2,-20(fp)
  80b6e4:	1000070e 	bge	r2,zero,80b704 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80b6e8:	080b60c0 	call	80b60c <alt_get_errno>
  80b6ec:	1007883a 	mov	r3,r2
  80b6f0:	e0bffb17 	ldw	r2,-20(fp)
  80b6f4:	0085c83a 	sub	r2,zero,r2
  80b6f8:	18800015 	stw	r2,0(r3)
    rc = -1;
  80b6fc:	00bfffc4 	movi	r2,-1
  80b700:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80b704:	e0bffb17 	ldw	r2,-20(fp)
}
  80b708:	e037883a 	mov	sp,fp
  80b70c:	dfc00117 	ldw	ra,4(sp)
  80b710:	df000017 	ldw	fp,0(sp)
  80b714:	dec00204 	addi	sp,sp,8
  80b718:	f800283a 	ret

0080b71c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80b71c:	defffd04 	addi	sp,sp,-12
  80b720:	dfc00215 	stw	ra,8(sp)
  80b724:	df000115 	stw	fp,4(sp)
  80b728:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80b72c:	0009883a 	mov	r4,zero
  80b730:	080bf8c0 	call	80bf8c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80b734:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80b738:	080bfc40 	call	80bfc4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80b73c:	01802074 	movhi	r6,129
  80b740:	31bce204 	addi	r6,r6,-3192
  80b744:	01402074 	movhi	r5,129
  80b748:	297ce204 	addi	r5,r5,-3192
  80b74c:	01002074 	movhi	r4,129
  80b750:	213ce204 	addi	r4,r4,-3192
  80b754:	080eb280 	call	80eb28 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80b758:	080e4940 	call	80e494 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80b75c:	01002074 	movhi	r4,129
  80b760:	21393d04 	addi	r4,r4,-6924
  80b764:	080ee7c0 	call	80ee7c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80b768:	d0a72e17 	ldw	r2,-25416(gp)
  80b76c:	d0e72f17 	ldw	r3,-25412(gp)
  80b770:	d1273017 	ldw	r4,-25408(gp)
  80b774:	200d883a 	mov	r6,r4
  80b778:	180b883a 	mov	r5,r3
  80b77c:	1009883a 	mov	r4,r2
  80b780:	080075c0 	call	80075c <main>
  80b784:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80b788:	01000044 	movi	r4,1
  80b78c:	080b0d80 	call	80b0d8 <close>
  exit (result);
  80b790:	e13fff17 	ldw	r4,-4(fp)
  80b794:	080ee900 	call	80ee90 <exit>

0080b798 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80b798:	defffe04 	addi	sp,sp,-8
  80b79c:	df000115 	stw	fp,4(sp)
  80b7a0:	df000104 	addi	fp,sp,4
  80b7a4:	e13fff15 	stw	r4,-4(fp)
}
  80b7a8:	0001883a 	nop
  80b7ac:	e037883a 	mov	sp,fp
  80b7b0:	df000017 	ldw	fp,0(sp)
  80b7b4:	dec00104 	addi	sp,sp,4
  80b7b8:	f800283a 	ret

0080b7bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80b7bc:	defffe04 	addi	sp,sp,-8
  80b7c0:	df000115 	stw	fp,4(sp)
  80b7c4:	df000104 	addi	fp,sp,4
  80b7c8:	e13fff15 	stw	r4,-4(fp)
}
  80b7cc:	0001883a 	nop
  80b7d0:	e037883a 	mov	sp,fp
  80b7d4:	df000017 	ldw	fp,0(sp)
  80b7d8:	dec00104 	addi	sp,sp,4
  80b7dc:	f800283a 	ret

0080b7e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b7e0:	defffe04 	addi	sp,sp,-8
  80b7e4:	dfc00115 	stw	ra,4(sp)
  80b7e8:	df000015 	stw	fp,0(sp)
  80b7ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80b7f0:	d0a00917 	ldw	r2,-32732(gp)
  80b7f4:	10000326 	beq	r2,zero,80b804 <alt_get_errno+0x24>
  80b7f8:	d0a00917 	ldw	r2,-32732(gp)
  80b7fc:	103ee83a 	callr	r2
  80b800:	00000106 	br	80b808 <alt_get_errno+0x28>
  80b804:	d0a72904 	addi	r2,gp,-25436
}
  80b808:	e037883a 	mov	sp,fp
  80b80c:	dfc00117 	ldw	ra,4(sp)
  80b810:	df000017 	ldw	fp,0(sp)
  80b814:	dec00204 	addi	sp,sp,8
  80b818:	f800283a 	ret

0080b81c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80b81c:	defffd04 	addi	sp,sp,-12
  80b820:	df000215 	stw	fp,8(sp)
  80b824:	df000204 	addi	fp,sp,8
  80b828:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80b82c:	e0bfff17 	ldw	r2,-4(fp)
  80b830:	10800217 	ldw	r2,8(r2)
  80b834:	10d00034 	orhi	r3,r2,16384
  80b838:	e0bfff17 	ldw	r2,-4(fp)
  80b83c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80b840:	e03ffe15 	stw	zero,-8(fp)
  80b844:	00001d06 	br	80b8bc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80b848:	00802074 	movhi	r2,129
  80b84c:	10bfa504 	addi	r2,r2,-364
  80b850:	e0fffe17 	ldw	r3,-8(fp)
  80b854:	18c00324 	muli	r3,r3,12
  80b858:	10c5883a 	add	r2,r2,r3
  80b85c:	10c00017 	ldw	r3,0(r2)
  80b860:	e0bfff17 	ldw	r2,-4(fp)
  80b864:	10800017 	ldw	r2,0(r2)
  80b868:	1880111e 	bne	r3,r2,80b8b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80b86c:	00802074 	movhi	r2,129
  80b870:	10bfa504 	addi	r2,r2,-364
  80b874:	e0fffe17 	ldw	r3,-8(fp)
  80b878:	18c00324 	muli	r3,r3,12
  80b87c:	10c5883a 	add	r2,r2,r3
  80b880:	10800204 	addi	r2,r2,8
  80b884:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80b888:	1000090e 	bge	r2,zero,80b8b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80b88c:	e0bffe17 	ldw	r2,-8(fp)
  80b890:	10c00324 	muli	r3,r2,12
  80b894:	00802074 	movhi	r2,129
  80b898:	10bfa504 	addi	r2,r2,-364
  80b89c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80b8a0:	e0bfff17 	ldw	r2,-4(fp)
  80b8a4:	18800226 	beq	r3,r2,80b8b0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80b8a8:	00bffcc4 	movi	r2,-13
  80b8ac:	00000806 	br	80b8d0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80b8b0:	e0bffe17 	ldw	r2,-8(fp)
  80b8b4:	10800044 	addi	r2,r2,1
  80b8b8:	e0bffe15 	stw	r2,-8(fp)
  80b8bc:	d0a00817 	ldw	r2,-32736(gp)
  80b8c0:	1007883a 	mov	r3,r2
  80b8c4:	e0bffe17 	ldw	r2,-8(fp)
  80b8c8:	18bfdf2e 	bgeu	r3,r2,80b848 <__alt_mem_onchip_mem+0xff803848>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80b8cc:	0005883a 	mov	r2,zero
}
  80b8d0:	e037883a 	mov	sp,fp
  80b8d4:	df000017 	ldw	fp,0(sp)
  80b8d8:	dec00104 	addi	sp,sp,4
  80b8dc:	f800283a 	ret

0080b8e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80b8e0:	defff604 	addi	sp,sp,-40
  80b8e4:	dfc00915 	stw	ra,36(sp)
  80b8e8:	df000815 	stw	fp,32(sp)
  80b8ec:	df000804 	addi	fp,sp,32
  80b8f0:	e13ffd15 	stw	r4,-12(fp)
  80b8f4:	e17ffe15 	stw	r5,-8(fp)
  80b8f8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80b8fc:	00bfffc4 	movi	r2,-1
  80b900:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80b904:	00bffb44 	movi	r2,-19
  80b908:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80b90c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80b910:	d1600604 	addi	r5,gp,-32744
  80b914:	e13ffd17 	ldw	r4,-12(fp)
  80b918:	080e5540 	call	80e554 <alt_find_dev>
  80b91c:	e0bff815 	stw	r2,-32(fp)
  80b920:	e0bff817 	ldw	r2,-32(fp)
  80b924:	1000051e 	bne	r2,zero,80b93c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80b928:	e13ffd17 	ldw	r4,-12(fp)
  80b92c:	080e5e40 	call	80e5e4 <alt_find_file>
  80b930:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80b934:	00800044 	movi	r2,1
  80b938:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80b93c:	e0bff817 	ldw	r2,-32(fp)
  80b940:	10002926 	beq	r2,zero,80b9e8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80b944:	e13ff817 	ldw	r4,-32(fp)
  80b948:	080e6ec0 	call	80e6ec <alt_get_fd>
  80b94c:	e0bff915 	stw	r2,-28(fp)
  80b950:	e0bff917 	ldw	r2,-28(fp)
  80b954:	1000030e 	bge	r2,zero,80b964 <open+0x84>
    {
      status = index;
  80b958:	e0bff917 	ldw	r2,-28(fp)
  80b95c:	e0bffa15 	stw	r2,-24(fp)
  80b960:	00002306 	br	80b9f0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80b964:	e0bff917 	ldw	r2,-28(fp)
  80b968:	10c00324 	muli	r3,r2,12
  80b96c:	00802074 	movhi	r2,129
  80b970:	10bfa504 	addi	r2,r2,-364
  80b974:	1885883a 	add	r2,r3,r2
  80b978:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80b97c:	e0fffe17 	ldw	r3,-8(fp)
  80b980:	00900034 	movhi	r2,16384
  80b984:	10bfffc4 	addi	r2,r2,-1
  80b988:	1886703a 	and	r3,r3,r2
  80b98c:	e0bffc17 	ldw	r2,-16(fp)
  80b990:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80b994:	e0bffb17 	ldw	r2,-20(fp)
  80b998:	1000051e 	bne	r2,zero,80b9b0 <open+0xd0>
  80b99c:	e13ffc17 	ldw	r4,-16(fp)
  80b9a0:	080b81c0 	call	80b81c <alt_file_locked>
  80b9a4:	e0bffa15 	stw	r2,-24(fp)
  80b9a8:	e0bffa17 	ldw	r2,-24(fp)
  80b9ac:	10001016 	blt	r2,zero,80b9f0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80b9b0:	e0bff817 	ldw	r2,-32(fp)
  80b9b4:	10800317 	ldw	r2,12(r2)
  80b9b8:	10000826 	beq	r2,zero,80b9dc <open+0xfc>
  80b9bc:	e0bff817 	ldw	r2,-32(fp)
  80b9c0:	10800317 	ldw	r2,12(r2)
  80b9c4:	e1ffff17 	ldw	r7,-4(fp)
  80b9c8:	e1bffe17 	ldw	r6,-8(fp)
  80b9cc:	e17ffd17 	ldw	r5,-12(fp)
  80b9d0:	e13ffc17 	ldw	r4,-16(fp)
  80b9d4:	103ee83a 	callr	r2
  80b9d8:	00000106 	br	80b9e0 <open+0x100>
  80b9dc:	0005883a 	mov	r2,zero
  80b9e0:	e0bffa15 	stw	r2,-24(fp)
  80b9e4:	00000206 	br	80b9f0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80b9e8:	00bffb44 	movi	r2,-19
  80b9ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80b9f0:	e0bffa17 	ldw	r2,-24(fp)
  80b9f4:	1000090e 	bge	r2,zero,80ba1c <open+0x13c>
  {
    alt_release_fd (index);  
  80b9f8:	e13ff917 	ldw	r4,-28(fp)
  80b9fc:	080bb6c0 	call	80bb6c <alt_release_fd>
    ALT_ERRNO = -status;
  80ba00:	080b7e00 	call	80b7e0 <alt_get_errno>
  80ba04:	1007883a 	mov	r3,r2
  80ba08:	e0bffa17 	ldw	r2,-24(fp)
  80ba0c:	0085c83a 	sub	r2,zero,r2
  80ba10:	18800015 	stw	r2,0(r3)
    return -1;
  80ba14:	00bfffc4 	movi	r2,-1
  80ba18:	00000106 	br	80ba20 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80ba1c:	e0bff917 	ldw	r2,-28(fp)
}
  80ba20:	e037883a 	mov	sp,fp
  80ba24:	dfc00117 	ldw	ra,4(sp)
  80ba28:	df000017 	ldw	fp,0(sp)
  80ba2c:	dec00204 	addi	sp,sp,8
  80ba30:	f800283a 	ret

0080ba34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ba34:	defffe04 	addi	sp,sp,-8
  80ba38:	dfc00115 	stw	ra,4(sp)
  80ba3c:	df000015 	stw	fp,0(sp)
  80ba40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ba44:	d0a00917 	ldw	r2,-32732(gp)
  80ba48:	10000326 	beq	r2,zero,80ba58 <alt_get_errno+0x24>
  80ba4c:	d0a00917 	ldw	r2,-32732(gp)
  80ba50:	103ee83a 	callr	r2
  80ba54:	00000106 	br	80ba5c <alt_get_errno+0x28>
  80ba58:	d0a72904 	addi	r2,gp,-25436
}
  80ba5c:	e037883a 	mov	sp,fp
  80ba60:	dfc00117 	ldw	ra,4(sp)
  80ba64:	df000017 	ldw	fp,0(sp)
  80ba68:	dec00204 	addi	sp,sp,8
  80ba6c:	f800283a 	ret

0080ba70 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80ba70:	defff904 	addi	sp,sp,-28
  80ba74:	dfc00615 	stw	ra,24(sp)
  80ba78:	df000515 	stw	fp,20(sp)
  80ba7c:	df000504 	addi	fp,sp,20
  80ba80:	e13ffd15 	stw	r4,-12(fp)
  80ba84:	e17ffe15 	stw	r5,-8(fp)
  80ba88:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ba8c:	e0bffd17 	ldw	r2,-12(fp)
  80ba90:	10000616 	blt	r2,zero,80baac <read+0x3c>
  80ba94:	e0bffd17 	ldw	r2,-12(fp)
  80ba98:	10c00324 	muli	r3,r2,12
  80ba9c:	00802074 	movhi	r2,129
  80baa0:	10bfa504 	addi	r2,r2,-364
  80baa4:	1885883a 	add	r2,r3,r2
  80baa8:	00000106 	br	80bab0 <read+0x40>
  80baac:	0005883a 	mov	r2,zero
  80bab0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80bab4:	e0bffb17 	ldw	r2,-20(fp)
  80bab8:	10002226 	beq	r2,zero,80bb44 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80babc:	e0bffb17 	ldw	r2,-20(fp)
  80bac0:	10800217 	ldw	r2,8(r2)
  80bac4:	108000cc 	andi	r2,r2,3
  80bac8:	10800060 	cmpeqi	r2,r2,1
  80bacc:	1000181e 	bne	r2,zero,80bb30 <read+0xc0>
        (fd->dev->read))
  80bad0:	e0bffb17 	ldw	r2,-20(fp)
  80bad4:	10800017 	ldw	r2,0(r2)
  80bad8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80badc:	10001426 	beq	r2,zero,80bb30 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80bae0:	e0bffb17 	ldw	r2,-20(fp)
  80bae4:	10800017 	ldw	r2,0(r2)
  80bae8:	10800517 	ldw	r2,20(r2)
  80baec:	e0ffff17 	ldw	r3,-4(fp)
  80baf0:	180d883a 	mov	r6,r3
  80baf4:	e17ffe17 	ldw	r5,-8(fp)
  80baf8:	e13ffb17 	ldw	r4,-20(fp)
  80bafc:	103ee83a 	callr	r2
  80bb00:	e0bffc15 	stw	r2,-16(fp)
  80bb04:	e0bffc17 	ldw	r2,-16(fp)
  80bb08:	1000070e 	bge	r2,zero,80bb28 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80bb0c:	080ba340 	call	80ba34 <alt_get_errno>
  80bb10:	1007883a 	mov	r3,r2
  80bb14:	e0bffc17 	ldw	r2,-16(fp)
  80bb18:	0085c83a 	sub	r2,zero,r2
  80bb1c:	18800015 	stw	r2,0(r3)
          return -1;
  80bb20:	00bfffc4 	movi	r2,-1
  80bb24:	00000c06 	br	80bb58 <read+0xe8>
        }
        return rval;
  80bb28:	e0bffc17 	ldw	r2,-16(fp)
  80bb2c:	00000a06 	br	80bb58 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80bb30:	080ba340 	call	80ba34 <alt_get_errno>
  80bb34:	1007883a 	mov	r3,r2
  80bb38:	00800344 	movi	r2,13
  80bb3c:	18800015 	stw	r2,0(r3)
  80bb40:	00000406 	br	80bb54 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80bb44:	080ba340 	call	80ba34 <alt_get_errno>
  80bb48:	1007883a 	mov	r3,r2
  80bb4c:	00801444 	movi	r2,81
  80bb50:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80bb54:	00bfffc4 	movi	r2,-1
}
  80bb58:	e037883a 	mov	sp,fp
  80bb5c:	dfc00117 	ldw	ra,4(sp)
  80bb60:	df000017 	ldw	fp,0(sp)
  80bb64:	dec00204 	addi	sp,sp,8
  80bb68:	f800283a 	ret

0080bb6c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80bb6c:	defffe04 	addi	sp,sp,-8
  80bb70:	df000115 	stw	fp,4(sp)
  80bb74:	df000104 	addi	fp,sp,4
  80bb78:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80bb7c:	e0bfff17 	ldw	r2,-4(fp)
  80bb80:	108000d0 	cmplti	r2,r2,3
  80bb84:	10000d1e 	bne	r2,zero,80bbbc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80bb88:	00802074 	movhi	r2,129
  80bb8c:	10bfa504 	addi	r2,r2,-364
  80bb90:	e0ffff17 	ldw	r3,-4(fp)
  80bb94:	18c00324 	muli	r3,r3,12
  80bb98:	10c5883a 	add	r2,r2,r3
  80bb9c:	10800204 	addi	r2,r2,8
  80bba0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80bba4:	00802074 	movhi	r2,129
  80bba8:	10bfa504 	addi	r2,r2,-364
  80bbac:	e0ffff17 	ldw	r3,-4(fp)
  80bbb0:	18c00324 	muli	r3,r3,12
  80bbb4:	10c5883a 	add	r2,r2,r3
  80bbb8:	10000015 	stw	zero,0(r2)
  }
}
  80bbbc:	0001883a 	nop
  80bbc0:	e037883a 	mov	sp,fp
  80bbc4:	df000017 	ldw	fp,0(sp)
  80bbc8:	dec00104 	addi	sp,sp,4
  80bbcc:	f800283a 	ret

0080bbd0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80bbd0:	defff904 	addi	sp,sp,-28
  80bbd4:	df000615 	stw	fp,24(sp)
  80bbd8:	df000604 	addi	fp,sp,24
  80bbdc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bbe0:	0005303a 	rdctl	r2,status
  80bbe4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bbe8:	e0fffe17 	ldw	r3,-8(fp)
  80bbec:	00bfff84 	movi	r2,-2
  80bbf0:	1884703a 	and	r2,r3,r2
  80bbf4:	1001703a 	wrctl	status,r2
  
  return context;
  80bbf8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80bbfc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80bc00:	d0a00b17 	ldw	r2,-32724(gp)
  80bc04:	10c000c4 	addi	r3,r2,3
  80bc08:	00bfff04 	movi	r2,-4
  80bc0c:	1884703a 	and	r2,r3,r2
  80bc10:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80bc14:	d0e00b17 	ldw	r3,-32724(gp)
  80bc18:	e0bfff17 	ldw	r2,-4(fp)
  80bc1c:	1887883a 	add	r3,r3,r2
  80bc20:	00804034 	movhi	r2,256
  80bc24:	10800004 	addi	r2,r2,0
  80bc28:	10c0062e 	bgeu	r2,r3,80bc44 <sbrk+0x74>
  80bc2c:	e0bffb17 	ldw	r2,-20(fp)
  80bc30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bc34:	e0bffa17 	ldw	r2,-24(fp)
  80bc38:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80bc3c:	00bfffc4 	movi	r2,-1
  80bc40:	00000b06 	br	80bc70 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80bc44:	d0a00b17 	ldw	r2,-32724(gp)
  80bc48:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80bc4c:	d0e00b17 	ldw	r3,-32724(gp)
  80bc50:	e0bfff17 	ldw	r2,-4(fp)
  80bc54:	1885883a 	add	r2,r3,r2
  80bc58:	d0a00b15 	stw	r2,-32724(gp)
  80bc5c:	e0bffb17 	ldw	r2,-20(fp)
  80bc60:	e0bffc15 	stw	r2,-16(fp)
  80bc64:	e0bffc17 	ldw	r2,-16(fp)
  80bc68:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80bc6c:	e0bffd17 	ldw	r2,-12(fp)
} 
  80bc70:	e037883a 	mov	sp,fp
  80bc74:	df000017 	ldw	fp,0(sp)
  80bc78:	dec00104 	addi	sp,sp,4
  80bc7c:	f800283a 	ret

0080bc80 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80bc80:	defffa04 	addi	sp,sp,-24
  80bc84:	df000515 	stw	fp,20(sp)
  80bc88:	df000504 	addi	fp,sp,20
  80bc8c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bc90:	0005303a 	rdctl	r2,status
  80bc94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bc98:	e0fffc17 	ldw	r3,-16(fp)
  80bc9c:	00bfff84 	movi	r2,-2
  80bca0:	1884703a 	and	r2,r3,r2
  80bca4:	1001703a 	wrctl	status,r2
  
  return context;
  80bca8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80bcac:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80bcb0:	e0bfff17 	ldw	r2,-4(fp)
  80bcb4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80bcb8:	e0bffd17 	ldw	r2,-12(fp)
  80bcbc:	10800017 	ldw	r2,0(r2)
  80bcc0:	e0fffd17 	ldw	r3,-12(fp)
  80bcc4:	18c00117 	ldw	r3,4(r3)
  80bcc8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80bccc:	e0bffd17 	ldw	r2,-12(fp)
  80bcd0:	10800117 	ldw	r2,4(r2)
  80bcd4:	e0fffd17 	ldw	r3,-12(fp)
  80bcd8:	18c00017 	ldw	r3,0(r3)
  80bcdc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80bce0:	e0bffd17 	ldw	r2,-12(fp)
  80bce4:	e0fffd17 	ldw	r3,-12(fp)
  80bce8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80bcec:	e0bffd17 	ldw	r2,-12(fp)
  80bcf0:	e0fffd17 	ldw	r3,-12(fp)
  80bcf4:	10c00015 	stw	r3,0(r2)
  80bcf8:	e0bffb17 	ldw	r2,-20(fp)
  80bcfc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bd00:	e0bffe17 	ldw	r2,-8(fp)
  80bd04:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80bd08:	0001883a 	nop
  80bd0c:	e037883a 	mov	sp,fp
  80bd10:	df000017 	ldw	fp,0(sp)
  80bd14:	dec00104 	addi	sp,sp,4
  80bd18:	f800283a 	ret

0080bd1c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80bd1c:	defffb04 	addi	sp,sp,-20
  80bd20:	dfc00415 	stw	ra,16(sp)
  80bd24:	df000315 	stw	fp,12(sp)
  80bd28:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80bd2c:	d0a00c17 	ldw	r2,-32720(gp)
  80bd30:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80bd34:	d0a73217 	ldw	r2,-25400(gp)
  80bd38:	10800044 	addi	r2,r2,1
  80bd3c:	d0a73215 	stw	r2,-25400(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80bd40:	00002e06 	br	80bdfc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80bd44:	e0bffd17 	ldw	r2,-12(fp)
  80bd48:	10800017 	ldw	r2,0(r2)
  80bd4c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80bd50:	e0bffd17 	ldw	r2,-12(fp)
  80bd54:	10800403 	ldbu	r2,16(r2)
  80bd58:	10803fcc 	andi	r2,r2,255
  80bd5c:	10000426 	beq	r2,zero,80bd70 <alt_tick+0x54>
  80bd60:	d0a73217 	ldw	r2,-25400(gp)
  80bd64:	1000021e 	bne	r2,zero,80bd70 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80bd68:	e0bffd17 	ldw	r2,-12(fp)
  80bd6c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80bd70:	e0bffd17 	ldw	r2,-12(fp)
  80bd74:	10800217 	ldw	r2,8(r2)
  80bd78:	d0e73217 	ldw	r3,-25400(gp)
  80bd7c:	18801d36 	bltu	r3,r2,80bdf4 <alt_tick+0xd8>
  80bd80:	e0bffd17 	ldw	r2,-12(fp)
  80bd84:	10800403 	ldbu	r2,16(r2)
  80bd88:	10803fcc 	andi	r2,r2,255
  80bd8c:	1000191e 	bne	r2,zero,80bdf4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80bd90:	e0bffd17 	ldw	r2,-12(fp)
  80bd94:	10800317 	ldw	r2,12(r2)
  80bd98:	e0fffd17 	ldw	r3,-12(fp)
  80bd9c:	18c00517 	ldw	r3,20(r3)
  80bda0:	1809883a 	mov	r4,r3
  80bda4:	103ee83a 	callr	r2
  80bda8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80bdac:	e0bfff17 	ldw	r2,-4(fp)
  80bdb0:	1000031e 	bne	r2,zero,80bdc0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80bdb4:	e13ffd17 	ldw	r4,-12(fp)
  80bdb8:	080bc800 	call	80bc80 <alt_alarm_stop>
  80bdbc:	00000d06 	br	80bdf4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80bdc0:	e0bffd17 	ldw	r2,-12(fp)
  80bdc4:	10c00217 	ldw	r3,8(r2)
  80bdc8:	e0bfff17 	ldw	r2,-4(fp)
  80bdcc:	1887883a 	add	r3,r3,r2
  80bdd0:	e0bffd17 	ldw	r2,-12(fp)
  80bdd4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80bdd8:	e0bffd17 	ldw	r2,-12(fp)
  80bddc:	10c00217 	ldw	r3,8(r2)
  80bde0:	d0a73217 	ldw	r2,-25400(gp)
  80bde4:	1880032e 	bgeu	r3,r2,80bdf4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80bde8:	e0bffd17 	ldw	r2,-12(fp)
  80bdec:	00c00044 	movi	r3,1
  80bdf0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80bdf4:	e0bffe17 	ldw	r2,-8(fp)
  80bdf8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80bdfc:	e0fffd17 	ldw	r3,-12(fp)
  80be00:	d0a00c04 	addi	r2,gp,-32720
  80be04:	18bfcf1e 	bne	r3,r2,80bd44 <__alt_mem_onchip_mem+0xff803d44>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80be08:	0001883a 	nop
}
  80be0c:	0001883a 	nop
  80be10:	e037883a 	mov	sp,fp
  80be14:	dfc00117 	ldw	ra,4(sp)
  80be18:	df000017 	ldw	fp,0(sp)
  80be1c:	dec00204 	addi	sp,sp,8
  80be20:	f800283a 	ret

0080be24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80be24:	defffe04 	addi	sp,sp,-8
  80be28:	dfc00115 	stw	ra,4(sp)
  80be2c:	df000015 	stw	fp,0(sp)
  80be30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80be34:	d0a00917 	ldw	r2,-32732(gp)
  80be38:	10000326 	beq	r2,zero,80be48 <alt_get_errno+0x24>
  80be3c:	d0a00917 	ldw	r2,-32732(gp)
  80be40:	103ee83a 	callr	r2
  80be44:	00000106 	br	80be4c <alt_get_errno+0x28>
  80be48:	d0a72904 	addi	r2,gp,-25436
}
  80be4c:	e037883a 	mov	sp,fp
  80be50:	dfc00117 	ldw	ra,4(sp)
  80be54:	df000017 	ldw	fp,0(sp)
  80be58:	dec00204 	addi	sp,sp,8
  80be5c:	f800283a 	ret

0080be60 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80be60:	defff904 	addi	sp,sp,-28
  80be64:	dfc00615 	stw	ra,24(sp)
  80be68:	df000515 	stw	fp,20(sp)
  80be6c:	df000504 	addi	fp,sp,20
  80be70:	e13ffd15 	stw	r4,-12(fp)
  80be74:	e17ffe15 	stw	r5,-8(fp)
  80be78:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80be7c:	e0bffd17 	ldw	r2,-12(fp)
  80be80:	10000616 	blt	r2,zero,80be9c <write+0x3c>
  80be84:	e0bffd17 	ldw	r2,-12(fp)
  80be88:	10c00324 	muli	r3,r2,12
  80be8c:	00802074 	movhi	r2,129
  80be90:	10bfa504 	addi	r2,r2,-364
  80be94:	1885883a 	add	r2,r3,r2
  80be98:	00000106 	br	80bea0 <write+0x40>
  80be9c:	0005883a 	mov	r2,zero
  80bea0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80bea4:	e0bffb17 	ldw	r2,-20(fp)
  80bea8:	10002126 	beq	r2,zero,80bf30 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80beac:	e0bffb17 	ldw	r2,-20(fp)
  80beb0:	10800217 	ldw	r2,8(r2)
  80beb4:	108000cc 	andi	r2,r2,3
  80beb8:	10001826 	beq	r2,zero,80bf1c <write+0xbc>
  80bebc:	e0bffb17 	ldw	r2,-20(fp)
  80bec0:	10800017 	ldw	r2,0(r2)
  80bec4:	10800617 	ldw	r2,24(r2)
  80bec8:	10001426 	beq	r2,zero,80bf1c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80becc:	e0bffb17 	ldw	r2,-20(fp)
  80bed0:	10800017 	ldw	r2,0(r2)
  80bed4:	10800617 	ldw	r2,24(r2)
  80bed8:	e0ffff17 	ldw	r3,-4(fp)
  80bedc:	180d883a 	mov	r6,r3
  80bee0:	e17ffe17 	ldw	r5,-8(fp)
  80bee4:	e13ffb17 	ldw	r4,-20(fp)
  80bee8:	103ee83a 	callr	r2
  80beec:	e0bffc15 	stw	r2,-16(fp)
  80bef0:	e0bffc17 	ldw	r2,-16(fp)
  80bef4:	1000070e 	bge	r2,zero,80bf14 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80bef8:	080be240 	call	80be24 <alt_get_errno>
  80befc:	1007883a 	mov	r3,r2
  80bf00:	e0bffc17 	ldw	r2,-16(fp)
  80bf04:	0085c83a 	sub	r2,zero,r2
  80bf08:	18800015 	stw	r2,0(r3)
        return -1;
  80bf0c:	00bfffc4 	movi	r2,-1
  80bf10:	00000c06 	br	80bf44 <write+0xe4>
      }
      return rval;
  80bf14:	e0bffc17 	ldw	r2,-16(fp)
  80bf18:	00000a06 	br	80bf44 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80bf1c:	080be240 	call	80be24 <alt_get_errno>
  80bf20:	1007883a 	mov	r3,r2
  80bf24:	00800344 	movi	r2,13
  80bf28:	18800015 	stw	r2,0(r3)
  80bf2c:	00000406 	br	80bf40 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80bf30:	080be240 	call	80be24 <alt_get_errno>
  80bf34:	1007883a 	mov	r3,r2
  80bf38:	00801444 	movi	r2,81
  80bf3c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80bf40:	00bfffc4 	movi	r2,-1
}
  80bf44:	e037883a 	mov	sp,fp
  80bf48:	dfc00117 	ldw	ra,4(sp)
  80bf4c:	df000017 	ldw	fp,0(sp)
  80bf50:	dec00204 	addi	sp,sp,8
  80bf54:	f800283a 	ret

0080bf58 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80bf58:	defffd04 	addi	sp,sp,-12
  80bf5c:	dfc00215 	stw	ra,8(sp)
  80bf60:	df000115 	stw	fp,4(sp)
  80bf64:	df000104 	addi	fp,sp,4
  80bf68:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80bf6c:	d1600604 	addi	r5,gp,-32744
  80bf70:	e13fff17 	ldw	r4,-4(fp)
  80bf74:	080e3f00 	call	80e3f0 <alt_dev_llist_insert>
}
  80bf78:	e037883a 	mov	sp,fp
  80bf7c:	dfc00117 	ldw	ra,4(sp)
  80bf80:	df000017 	ldw	fp,0(sp)
  80bf84:	dec00204 	addi	sp,sp,8
  80bf88:	f800283a 	ret

0080bf8c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80bf8c:	defffd04 	addi	sp,sp,-12
  80bf90:	dfc00215 	stw	ra,8(sp)
  80bf94:	df000115 	stw	fp,4(sp)
  80bf98:	df000104 	addi	fp,sp,4
  80bf9c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80bfa0:	080ebd40 	call	80ebd4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80bfa4:	00800044 	movi	r2,1
  80bfa8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80bfac:	0001883a 	nop
  80bfb0:	e037883a 	mov	sp,fp
  80bfb4:	dfc00117 	ldw	ra,4(sp)
  80bfb8:	df000017 	ldw	fp,0(sp)
  80bfbc:	dec00204 	addi	sp,sp,8
  80bfc0:	f800283a 	ret

0080bfc4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80bfc4:	defffe04 	addi	sp,sp,-8
  80bfc8:	dfc00115 	stw	ra,4(sp)
  80bfcc:	df000015 	stw	fp,0(sp)
  80bfd0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80bfd4:	01c0fa04 	movi	r7,1000
  80bfd8:	01800084 	movi	r6,2
  80bfdc:	000b883a 	mov	r5,zero
  80bfe0:	01004074 	movhi	r4,257
  80bfe4:	21040804 	addi	r4,r4,4128
  80bfe8:	080da180 	call	80da18 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80bfec:	01800044 	movi	r6,1
  80bff0:	000b883a 	mov	r5,zero
  80bff4:	01002074 	movhi	r4,129
  80bff8:	21000f04 	addi	r4,r4,60
  80bffc:	080c1c00 	call	80c1c0 <altera_avalon_jtag_uart_init>
  80c000:	01002074 	movhi	r4,129
  80c004:	21000504 	addi	r4,r4,20
  80c008:	080bf580 	call	80bf58 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80c00c:	01002074 	movhi	r4,129
  80c010:	21042704 	addi	r4,r4,4252
  80c014:	080d80c0 	call	80d80c <altera_avalon_lcd_16207_init>
  80c018:	01002074 	movhi	r4,129
  80c01c:	21041d04 	addi	r4,r4,4212
  80c020:	080bf580 	call	80bf58 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80c024:	000d883a 	mov	r6,zero
  80c028:	000b883a 	mov	r5,zero
  80c02c:	01002074 	movhi	r4,129
  80c030:	21046f04 	addi	r4,r4,4540
  80c034:	080dba40 	call	80dba4 <altera_avalon_uart_init>
  80c038:	01002074 	movhi	r4,129
  80c03c:	21046504 	addi	r4,r4,4500
  80c040:	080bf580 	call	80bf58 <alt_dev_reg>
}
  80c044:	0001883a 	nop
  80c048:	e037883a 	mov	sp,fp
  80c04c:	dfc00117 	ldw	ra,4(sp)
  80c050:	df000017 	ldw	fp,0(sp)
  80c054:	dec00204 	addi	sp,sp,8
  80c058:	f800283a 	ret

0080c05c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80c05c:	defffa04 	addi	sp,sp,-24
  80c060:	dfc00515 	stw	ra,20(sp)
  80c064:	df000415 	stw	fp,16(sp)
  80c068:	df000404 	addi	fp,sp,16
  80c06c:	e13ffd15 	stw	r4,-12(fp)
  80c070:	e17ffe15 	stw	r5,-8(fp)
  80c074:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80c078:	e0bffd17 	ldw	r2,-12(fp)
  80c07c:	10800017 	ldw	r2,0(r2)
  80c080:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80c084:	e0bffc17 	ldw	r2,-16(fp)
  80c088:	10c00a04 	addi	r3,r2,40
  80c08c:	e0bffd17 	ldw	r2,-12(fp)
  80c090:	10800217 	ldw	r2,8(r2)
  80c094:	100f883a 	mov	r7,r2
  80c098:	e1bfff17 	ldw	r6,-4(fp)
  80c09c:	e17ffe17 	ldw	r5,-8(fp)
  80c0a0:	1809883a 	mov	r4,r3
  80c0a4:	080c6840 	call	80c684 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80c0a8:	e037883a 	mov	sp,fp
  80c0ac:	dfc00117 	ldw	ra,4(sp)
  80c0b0:	df000017 	ldw	fp,0(sp)
  80c0b4:	dec00204 	addi	sp,sp,8
  80c0b8:	f800283a 	ret

0080c0bc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80c0bc:	defffa04 	addi	sp,sp,-24
  80c0c0:	dfc00515 	stw	ra,20(sp)
  80c0c4:	df000415 	stw	fp,16(sp)
  80c0c8:	df000404 	addi	fp,sp,16
  80c0cc:	e13ffd15 	stw	r4,-12(fp)
  80c0d0:	e17ffe15 	stw	r5,-8(fp)
  80c0d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80c0d8:	e0bffd17 	ldw	r2,-12(fp)
  80c0dc:	10800017 	ldw	r2,0(r2)
  80c0e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80c0e4:	e0bffc17 	ldw	r2,-16(fp)
  80c0e8:	10c00a04 	addi	r3,r2,40
  80c0ec:	e0bffd17 	ldw	r2,-12(fp)
  80c0f0:	10800217 	ldw	r2,8(r2)
  80c0f4:	100f883a 	mov	r7,r2
  80c0f8:	e1bfff17 	ldw	r6,-4(fp)
  80c0fc:	e17ffe17 	ldw	r5,-8(fp)
  80c100:	1809883a 	mov	r4,r3
  80c104:	080c8a00 	call	80c8a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80c108:	e037883a 	mov	sp,fp
  80c10c:	dfc00117 	ldw	ra,4(sp)
  80c110:	df000017 	ldw	fp,0(sp)
  80c114:	dec00204 	addi	sp,sp,8
  80c118:	f800283a 	ret

0080c11c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80c11c:	defffc04 	addi	sp,sp,-16
  80c120:	dfc00315 	stw	ra,12(sp)
  80c124:	df000215 	stw	fp,8(sp)
  80c128:	df000204 	addi	fp,sp,8
  80c12c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80c130:	e0bfff17 	ldw	r2,-4(fp)
  80c134:	10800017 	ldw	r2,0(r2)
  80c138:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80c13c:	e0bffe17 	ldw	r2,-8(fp)
  80c140:	10c00a04 	addi	r3,r2,40
  80c144:	e0bfff17 	ldw	r2,-4(fp)
  80c148:	10800217 	ldw	r2,8(r2)
  80c14c:	100b883a 	mov	r5,r2
  80c150:	1809883a 	mov	r4,r3
  80c154:	080c52c0 	call	80c52c <altera_avalon_jtag_uart_close>
}
  80c158:	e037883a 	mov	sp,fp
  80c15c:	dfc00117 	ldw	ra,4(sp)
  80c160:	df000017 	ldw	fp,0(sp)
  80c164:	dec00204 	addi	sp,sp,8
  80c168:	f800283a 	ret

0080c16c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80c16c:	defffa04 	addi	sp,sp,-24
  80c170:	dfc00515 	stw	ra,20(sp)
  80c174:	df000415 	stw	fp,16(sp)
  80c178:	df000404 	addi	fp,sp,16
  80c17c:	e13ffd15 	stw	r4,-12(fp)
  80c180:	e17ffe15 	stw	r5,-8(fp)
  80c184:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80c188:	e0bffd17 	ldw	r2,-12(fp)
  80c18c:	10800017 	ldw	r2,0(r2)
  80c190:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80c194:	e0bffc17 	ldw	r2,-16(fp)
  80c198:	10800a04 	addi	r2,r2,40
  80c19c:	e1bfff17 	ldw	r6,-4(fp)
  80c1a0:	e17ffe17 	ldw	r5,-8(fp)
  80c1a4:	1009883a 	mov	r4,r2
  80c1a8:	080c5940 	call	80c594 <altera_avalon_jtag_uart_ioctl>
}
  80c1ac:	e037883a 	mov	sp,fp
  80c1b0:	dfc00117 	ldw	ra,4(sp)
  80c1b4:	df000017 	ldw	fp,0(sp)
  80c1b8:	dec00204 	addi	sp,sp,8
  80c1bc:	f800283a 	ret

0080c1c0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80c1c0:	defffa04 	addi	sp,sp,-24
  80c1c4:	dfc00515 	stw	ra,20(sp)
  80c1c8:	df000415 	stw	fp,16(sp)
  80c1cc:	df000404 	addi	fp,sp,16
  80c1d0:	e13ffd15 	stw	r4,-12(fp)
  80c1d4:	e17ffe15 	stw	r5,-8(fp)
  80c1d8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c1dc:	e0bffd17 	ldw	r2,-12(fp)
  80c1e0:	00c00044 	movi	r3,1
  80c1e4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80c1e8:	e0bffd17 	ldw	r2,-12(fp)
  80c1ec:	10800017 	ldw	r2,0(r2)
  80c1f0:	10800104 	addi	r2,r2,4
  80c1f4:	1007883a 	mov	r3,r2
  80c1f8:	e0bffd17 	ldw	r2,-12(fp)
  80c1fc:	10800817 	ldw	r2,32(r2)
  80c200:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80c204:	e0bffe17 	ldw	r2,-8(fp)
  80c208:	e0ffff17 	ldw	r3,-4(fp)
  80c20c:	d8000015 	stw	zero,0(sp)
  80c210:	e1fffd17 	ldw	r7,-12(fp)
  80c214:	01802074 	movhi	r6,129
  80c218:	31b0a004 	addi	r6,r6,-15744
  80c21c:	180b883a 	mov	r5,r3
  80c220:	1009883a 	mov	r4,r2
  80c224:	080e7c40 	call	80e7c4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80c228:	e0bffd17 	ldw	r2,-12(fp)
  80c22c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80c230:	e0bffd17 	ldw	r2,-12(fp)
  80c234:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80c238:	d0e73117 	ldw	r3,-25404(gp)
  80c23c:	e1fffd17 	ldw	r7,-12(fp)
  80c240:	01802074 	movhi	r6,129
  80c244:	31b12304 	addi	r6,r6,-15220
  80c248:	180b883a 	mov	r5,r3
  80c24c:	1009883a 	mov	r4,r2
  80c250:	080af700 	call	80af70 <alt_alarm_start>
  80c254:	1000040e 	bge	r2,zero,80c268 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80c258:	e0fffd17 	ldw	r3,-12(fp)
  80c25c:	00a00034 	movhi	r2,32768
  80c260:	10bfffc4 	addi	r2,r2,-1
  80c264:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80c268:	0001883a 	nop
  80c26c:	e037883a 	mov	sp,fp
  80c270:	dfc00117 	ldw	ra,4(sp)
  80c274:	df000017 	ldw	fp,0(sp)
  80c278:	dec00204 	addi	sp,sp,8
  80c27c:	f800283a 	ret

0080c280 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80c280:	defff804 	addi	sp,sp,-32
  80c284:	df000715 	stw	fp,28(sp)
  80c288:	df000704 	addi	fp,sp,28
  80c28c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80c290:	e0bfff17 	ldw	r2,-4(fp)
  80c294:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80c298:	e0bffb17 	ldw	r2,-20(fp)
  80c29c:	10800017 	ldw	r2,0(r2)
  80c2a0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c2a4:	e0bffc17 	ldw	r2,-16(fp)
  80c2a8:	10800104 	addi	r2,r2,4
  80c2ac:	10800037 	ldwio	r2,0(r2)
  80c2b0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80c2b4:	e0bffd17 	ldw	r2,-12(fp)
  80c2b8:	1080c00c 	andi	r2,r2,768
  80c2bc:	10006d26 	beq	r2,zero,80c474 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80c2c0:	e0bffd17 	ldw	r2,-12(fp)
  80c2c4:	1080400c 	andi	r2,r2,256
  80c2c8:	10003526 	beq	r2,zero,80c3a0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80c2cc:	00800074 	movhi	r2,1
  80c2d0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c2d4:	e0bffb17 	ldw	r2,-20(fp)
  80c2d8:	10800a17 	ldw	r2,40(r2)
  80c2dc:	10800044 	addi	r2,r2,1
  80c2e0:	1081ffcc 	andi	r2,r2,2047
  80c2e4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80c2e8:	e0bffb17 	ldw	r2,-20(fp)
  80c2ec:	10c00b17 	ldw	r3,44(r2)
  80c2f0:	e0bffe17 	ldw	r2,-8(fp)
  80c2f4:	18801526 	beq	r3,r2,80c34c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80c2f8:	e0bffc17 	ldw	r2,-16(fp)
  80c2fc:	10800037 	ldwio	r2,0(r2)
  80c300:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80c304:	e0bff917 	ldw	r2,-28(fp)
  80c308:	10a0000c 	andi	r2,r2,32768
  80c30c:	10001126 	beq	r2,zero,80c354 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80c310:	e0bffb17 	ldw	r2,-20(fp)
  80c314:	10800a17 	ldw	r2,40(r2)
  80c318:	e0fff917 	ldw	r3,-28(fp)
  80c31c:	1809883a 	mov	r4,r3
  80c320:	e0fffb17 	ldw	r3,-20(fp)
  80c324:	1885883a 	add	r2,r3,r2
  80c328:	10800e04 	addi	r2,r2,56
  80c32c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c330:	e0bffb17 	ldw	r2,-20(fp)
  80c334:	10800a17 	ldw	r2,40(r2)
  80c338:	10800044 	addi	r2,r2,1
  80c33c:	10c1ffcc 	andi	r3,r2,2047
  80c340:	e0bffb17 	ldw	r2,-20(fp)
  80c344:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80c348:	003fe206 	br	80c2d4 <__alt_mem_onchip_mem+0xff8042d4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80c34c:	0001883a 	nop
  80c350:	00000106 	br	80c358 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80c354:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80c358:	e0bff917 	ldw	r2,-28(fp)
  80c35c:	10bfffec 	andhi	r2,r2,65535
  80c360:	10000f26 	beq	r2,zero,80c3a0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c364:	e0bffb17 	ldw	r2,-20(fp)
  80c368:	10c00817 	ldw	r3,32(r2)
  80c36c:	00bfff84 	movi	r2,-2
  80c370:	1886703a 	and	r3,r3,r2
  80c374:	e0bffb17 	ldw	r2,-20(fp)
  80c378:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80c37c:	e0bffc17 	ldw	r2,-16(fp)
  80c380:	10800104 	addi	r2,r2,4
  80c384:	1007883a 	mov	r3,r2
  80c388:	e0bffb17 	ldw	r2,-20(fp)
  80c38c:	10800817 	ldw	r2,32(r2)
  80c390:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c394:	e0bffc17 	ldw	r2,-16(fp)
  80c398:	10800104 	addi	r2,r2,4
  80c39c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80c3a0:	e0bffd17 	ldw	r2,-12(fp)
  80c3a4:	1080800c 	andi	r2,r2,512
  80c3a8:	103fbe26 	beq	r2,zero,80c2a4 <__alt_mem_onchip_mem+0xff8042a4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80c3ac:	e0bffd17 	ldw	r2,-12(fp)
  80c3b0:	1004d43a 	srli	r2,r2,16
  80c3b4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80c3b8:	00001406 	br	80c40c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80c3bc:	e0bffc17 	ldw	r2,-16(fp)
  80c3c0:	e0fffb17 	ldw	r3,-20(fp)
  80c3c4:	18c00d17 	ldw	r3,52(r3)
  80c3c8:	e13ffb17 	ldw	r4,-20(fp)
  80c3cc:	20c7883a 	add	r3,r4,r3
  80c3d0:	18c20e04 	addi	r3,r3,2104
  80c3d4:	18c00003 	ldbu	r3,0(r3)
  80c3d8:	18c03fcc 	andi	r3,r3,255
  80c3dc:	18c0201c 	xori	r3,r3,128
  80c3e0:	18ffe004 	addi	r3,r3,-128
  80c3e4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c3e8:	e0bffb17 	ldw	r2,-20(fp)
  80c3ec:	10800d17 	ldw	r2,52(r2)
  80c3f0:	10800044 	addi	r2,r2,1
  80c3f4:	10c1ffcc 	andi	r3,r2,2047
  80c3f8:	e0bffb17 	ldw	r2,-20(fp)
  80c3fc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80c400:	e0bffa17 	ldw	r2,-24(fp)
  80c404:	10bfffc4 	addi	r2,r2,-1
  80c408:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80c40c:	e0bffa17 	ldw	r2,-24(fp)
  80c410:	10000526 	beq	r2,zero,80c428 <altera_avalon_jtag_uart_irq+0x1a8>
  80c414:	e0bffb17 	ldw	r2,-20(fp)
  80c418:	10c00d17 	ldw	r3,52(r2)
  80c41c:	e0bffb17 	ldw	r2,-20(fp)
  80c420:	10800c17 	ldw	r2,48(r2)
  80c424:	18bfe51e 	bne	r3,r2,80c3bc <__alt_mem_onchip_mem+0xff8043bc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80c428:	e0bffa17 	ldw	r2,-24(fp)
  80c42c:	103f9d26 	beq	r2,zero,80c2a4 <__alt_mem_onchip_mem+0xff8042a4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80c430:	e0bffb17 	ldw	r2,-20(fp)
  80c434:	10c00817 	ldw	r3,32(r2)
  80c438:	00bfff44 	movi	r2,-3
  80c43c:	1886703a 	and	r3,r3,r2
  80c440:	e0bffb17 	ldw	r2,-20(fp)
  80c444:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c448:	e0bffb17 	ldw	r2,-20(fp)
  80c44c:	10800017 	ldw	r2,0(r2)
  80c450:	10800104 	addi	r2,r2,4
  80c454:	1007883a 	mov	r3,r2
  80c458:	e0bffb17 	ldw	r2,-20(fp)
  80c45c:	10800817 	ldw	r2,32(r2)
  80c460:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c464:	e0bffc17 	ldw	r2,-16(fp)
  80c468:	10800104 	addi	r2,r2,4
  80c46c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80c470:	003f8c06 	br	80c2a4 <__alt_mem_onchip_mem+0xff8042a4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80c474:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80c478:	0001883a 	nop
  80c47c:	e037883a 	mov	sp,fp
  80c480:	df000017 	ldw	fp,0(sp)
  80c484:	dec00104 	addi	sp,sp,4
  80c488:	f800283a 	ret

0080c48c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80c48c:	defff804 	addi	sp,sp,-32
  80c490:	df000715 	stw	fp,28(sp)
  80c494:	df000704 	addi	fp,sp,28
  80c498:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80c49c:	e0bffb17 	ldw	r2,-20(fp)
  80c4a0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80c4a4:	e0bff917 	ldw	r2,-28(fp)
  80c4a8:	10800017 	ldw	r2,0(r2)
  80c4ac:	10800104 	addi	r2,r2,4
  80c4b0:	10800037 	ldwio	r2,0(r2)
  80c4b4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80c4b8:	e0bffa17 	ldw	r2,-24(fp)
  80c4bc:	1081000c 	andi	r2,r2,1024
  80c4c0:	10000b26 	beq	r2,zero,80c4f0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80c4c4:	e0bff917 	ldw	r2,-28(fp)
  80c4c8:	10800017 	ldw	r2,0(r2)
  80c4cc:	10800104 	addi	r2,r2,4
  80c4d0:	1007883a 	mov	r3,r2
  80c4d4:	e0bff917 	ldw	r2,-28(fp)
  80c4d8:	10800817 	ldw	r2,32(r2)
  80c4dc:	10810014 	ori	r2,r2,1024
  80c4e0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80c4e4:	e0bff917 	ldw	r2,-28(fp)
  80c4e8:	10000915 	stw	zero,36(r2)
  80c4ec:	00000a06 	br	80c518 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80c4f0:	e0bff917 	ldw	r2,-28(fp)
  80c4f4:	10c00917 	ldw	r3,36(r2)
  80c4f8:	00a00034 	movhi	r2,32768
  80c4fc:	10bfff04 	addi	r2,r2,-4
  80c500:	10c00536 	bltu	r2,r3,80c518 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80c504:	e0bff917 	ldw	r2,-28(fp)
  80c508:	10800917 	ldw	r2,36(r2)
  80c50c:	10c00044 	addi	r3,r2,1
  80c510:	e0bff917 	ldw	r2,-28(fp)
  80c514:	10c00915 	stw	r3,36(r2)
  80c518:	d0a73117 	ldw	r2,-25404(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80c51c:	e037883a 	mov	sp,fp
  80c520:	df000017 	ldw	fp,0(sp)
  80c524:	dec00104 	addi	sp,sp,4
  80c528:	f800283a 	ret

0080c52c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80c52c:	defffd04 	addi	sp,sp,-12
  80c530:	df000215 	stw	fp,8(sp)
  80c534:	df000204 	addi	fp,sp,8
  80c538:	e13ffe15 	stw	r4,-8(fp)
  80c53c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c540:	00000506 	br	80c558 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80c544:	e0bfff17 	ldw	r2,-4(fp)
  80c548:	1090000c 	andi	r2,r2,16384
  80c54c:	10000226 	beq	r2,zero,80c558 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80c550:	00bffd44 	movi	r2,-11
  80c554:	00000b06 	br	80c584 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c558:	e0bffe17 	ldw	r2,-8(fp)
  80c55c:	10c00d17 	ldw	r3,52(r2)
  80c560:	e0bffe17 	ldw	r2,-8(fp)
  80c564:	10800c17 	ldw	r2,48(r2)
  80c568:	18800526 	beq	r3,r2,80c580 <altera_avalon_jtag_uart_close+0x54>
  80c56c:	e0bffe17 	ldw	r2,-8(fp)
  80c570:	10c00917 	ldw	r3,36(r2)
  80c574:	e0bffe17 	ldw	r2,-8(fp)
  80c578:	10800117 	ldw	r2,4(r2)
  80c57c:	18bff136 	bltu	r3,r2,80c544 <__alt_mem_onchip_mem+0xff804544>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80c580:	0005883a 	mov	r2,zero
}
  80c584:	e037883a 	mov	sp,fp
  80c588:	df000017 	ldw	fp,0(sp)
  80c58c:	dec00104 	addi	sp,sp,4
  80c590:	f800283a 	ret

0080c594 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80c594:	defffa04 	addi	sp,sp,-24
  80c598:	df000515 	stw	fp,20(sp)
  80c59c:	df000504 	addi	fp,sp,20
  80c5a0:	e13ffd15 	stw	r4,-12(fp)
  80c5a4:	e17ffe15 	stw	r5,-8(fp)
  80c5a8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80c5ac:	00bff9c4 	movi	r2,-25
  80c5b0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80c5b4:	e0bffe17 	ldw	r2,-8(fp)
  80c5b8:	10da8060 	cmpeqi	r3,r2,27137
  80c5bc:	1800031e 	bne	r3,zero,80c5cc <altera_avalon_jtag_uart_ioctl+0x38>
  80c5c0:	109a80a0 	cmpeqi	r2,r2,27138
  80c5c4:	1000181e 	bne	r2,zero,80c628 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80c5c8:	00002906 	br	80c670 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80c5cc:	e0bffd17 	ldw	r2,-12(fp)
  80c5d0:	10c00117 	ldw	r3,4(r2)
  80c5d4:	00a00034 	movhi	r2,32768
  80c5d8:	10bfffc4 	addi	r2,r2,-1
  80c5dc:	18802126 	beq	r3,r2,80c664 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80c5e0:	e0bfff17 	ldw	r2,-4(fp)
  80c5e4:	10800017 	ldw	r2,0(r2)
  80c5e8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80c5ec:	e0bffc17 	ldw	r2,-16(fp)
  80c5f0:	10800090 	cmplti	r2,r2,2
  80c5f4:	1000061e 	bne	r2,zero,80c610 <altera_avalon_jtag_uart_ioctl+0x7c>
  80c5f8:	e0fffc17 	ldw	r3,-16(fp)
  80c5fc:	00a00034 	movhi	r2,32768
  80c600:	10bfffc4 	addi	r2,r2,-1
  80c604:	18800226 	beq	r3,r2,80c610 <altera_avalon_jtag_uart_ioctl+0x7c>
  80c608:	e0bffc17 	ldw	r2,-16(fp)
  80c60c:	00000206 	br	80c618 <altera_avalon_jtag_uart_ioctl+0x84>
  80c610:	00a00034 	movhi	r2,32768
  80c614:	10bfff84 	addi	r2,r2,-2
  80c618:	e0fffd17 	ldw	r3,-12(fp)
  80c61c:	18800115 	stw	r2,4(r3)
      rc = 0;
  80c620:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80c624:	00000f06 	br	80c664 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80c628:	e0bffd17 	ldw	r2,-12(fp)
  80c62c:	10c00117 	ldw	r3,4(r2)
  80c630:	00a00034 	movhi	r2,32768
  80c634:	10bfffc4 	addi	r2,r2,-1
  80c638:	18800c26 	beq	r3,r2,80c66c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80c63c:	e0bffd17 	ldw	r2,-12(fp)
  80c640:	10c00917 	ldw	r3,36(r2)
  80c644:	e0bffd17 	ldw	r2,-12(fp)
  80c648:	10800117 	ldw	r2,4(r2)
  80c64c:	1885803a 	cmpltu	r2,r3,r2
  80c650:	10c03fcc 	andi	r3,r2,255
  80c654:	e0bfff17 	ldw	r2,-4(fp)
  80c658:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80c65c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80c660:	00000206 	br	80c66c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80c664:	0001883a 	nop
  80c668:	00000106 	br	80c670 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80c66c:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80c670:	e0bffb17 	ldw	r2,-20(fp)
}
  80c674:	e037883a 	mov	sp,fp
  80c678:	df000017 	ldw	fp,0(sp)
  80c67c:	dec00104 	addi	sp,sp,4
  80c680:	f800283a 	ret

0080c684 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80c684:	defff304 	addi	sp,sp,-52
  80c688:	dfc00c15 	stw	ra,48(sp)
  80c68c:	df000b15 	stw	fp,44(sp)
  80c690:	df000b04 	addi	fp,sp,44
  80c694:	e13ffc15 	stw	r4,-16(fp)
  80c698:	e17ffd15 	stw	r5,-12(fp)
  80c69c:	e1bffe15 	stw	r6,-8(fp)
  80c6a0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80c6a4:	e0bffd17 	ldw	r2,-12(fp)
  80c6a8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c6ac:	00004706 	br	80c7cc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80c6b0:	e0bffc17 	ldw	r2,-16(fp)
  80c6b4:	10800a17 	ldw	r2,40(r2)
  80c6b8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80c6bc:	e0bffc17 	ldw	r2,-16(fp)
  80c6c0:	10800b17 	ldw	r2,44(r2)
  80c6c4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80c6c8:	e0fff717 	ldw	r3,-36(fp)
  80c6cc:	e0bff817 	ldw	r2,-32(fp)
  80c6d0:	18800536 	bltu	r3,r2,80c6e8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80c6d4:	e0fff717 	ldw	r3,-36(fp)
  80c6d8:	e0bff817 	ldw	r2,-32(fp)
  80c6dc:	1885c83a 	sub	r2,r3,r2
  80c6e0:	e0bff615 	stw	r2,-40(fp)
  80c6e4:	00000406 	br	80c6f8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80c6e8:	00c20004 	movi	r3,2048
  80c6ec:	e0bff817 	ldw	r2,-32(fp)
  80c6f0:	1885c83a 	sub	r2,r3,r2
  80c6f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80c6f8:	e0bff617 	ldw	r2,-40(fp)
  80c6fc:	10001e26 	beq	r2,zero,80c778 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80c700:	e0fffe17 	ldw	r3,-8(fp)
  80c704:	e0bff617 	ldw	r2,-40(fp)
  80c708:	1880022e 	bgeu	r3,r2,80c714 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80c70c:	e0bffe17 	ldw	r2,-8(fp)
  80c710:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80c714:	e0bffc17 	ldw	r2,-16(fp)
  80c718:	10c00e04 	addi	r3,r2,56
  80c71c:	e0bff817 	ldw	r2,-32(fp)
  80c720:	1885883a 	add	r2,r3,r2
  80c724:	e1bff617 	ldw	r6,-40(fp)
  80c728:	100b883a 	mov	r5,r2
  80c72c:	e13ff517 	ldw	r4,-44(fp)
  80c730:	080a2fc0 	call	80a2fc <memcpy>
      ptr   += n;
  80c734:	e0fff517 	ldw	r3,-44(fp)
  80c738:	e0bff617 	ldw	r2,-40(fp)
  80c73c:	1885883a 	add	r2,r3,r2
  80c740:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80c744:	e0fffe17 	ldw	r3,-8(fp)
  80c748:	e0bff617 	ldw	r2,-40(fp)
  80c74c:	1885c83a 	sub	r2,r3,r2
  80c750:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c754:	e0fff817 	ldw	r3,-32(fp)
  80c758:	e0bff617 	ldw	r2,-40(fp)
  80c75c:	1885883a 	add	r2,r3,r2
  80c760:	10c1ffcc 	andi	r3,r2,2047
  80c764:	e0bffc17 	ldw	r2,-16(fp)
  80c768:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80c76c:	e0bffe17 	ldw	r2,-8(fp)
  80c770:	00bfcf16 	blt	zero,r2,80c6b0 <__alt_mem_onchip_mem+0xff8046b0>
  80c774:	00000106 	br	80c77c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80c778:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80c77c:	e0fff517 	ldw	r3,-44(fp)
  80c780:	e0bffd17 	ldw	r2,-12(fp)
  80c784:	1880141e 	bne	r3,r2,80c7d8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80c788:	e0bfff17 	ldw	r2,-4(fp)
  80c78c:	1090000c 	andi	r2,r2,16384
  80c790:	1000131e 	bne	r2,zero,80c7e0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80c794:	0001883a 	nop
  80c798:	e0bffc17 	ldw	r2,-16(fp)
  80c79c:	10c00a17 	ldw	r3,40(r2)
  80c7a0:	e0bff717 	ldw	r2,-36(fp)
  80c7a4:	1880051e 	bne	r3,r2,80c7bc <altera_avalon_jtag_uart_read+0x138>
  80c7a8:	e0bffc17 	ldw	r2,-16(fp)
  80c7ac:	10c00917 	ldw	r3,36(r2)
  80c7b0:	e0bffc17 	ldw	r2,-16(fp)
  80c7b4:	10800117 	ldw	r2,4(r2)
  80c7b8:	18bff736 	bltu	r3,r2,80c798 <__alt_mem_onchip_mem+0xff804798>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80c7bc:	e0bffc17 	ldw	r2,-16(fp)
  80c7c0:	10c00a17 	ldw	r3,40(r2)
  80c7c4:	e0bff717 	ldw	r2,-36(fp)
  80c7c8:	18800726 	beq	r3,r2,80c7e8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c7cc:	e0bffe17 	ldw	r2,-8(fp)
  80c7d0:	00bfb716 	blt	zero,r2,80c6b0 <__alt_mem_onchip_mem+0xff8046b0>
  80c7d4:	00000506 	br	80c7ec <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80c7d8:	0001883a 	nop
  80c7dc:	00000306 	br	80c7ec <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80c7e0:	0001883a 	nop
  80c7e4:	00000106 	br	80c7ec <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80c7e8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80c7ec:	e0fff517 	ldw	r3,-44(fp)
  80c7f0:	e0bffd17 	ldw	r2,-12(fp)
  80c7f4:	18801826 	beq	r3,r2,80c858 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c7f8:	0005303a 	rdctl	r2,status
  80c7fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c800:	e0fffb17 	ldw	r3,-20(fp)
  80c804:	00bfff84 	movi	r2,-2
  80c808:	1884703a 	and	r2,r3,r2
  80c80c:	1001703a 	wrctl	status,r2
  
  return context;
  80c810:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80c814:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c818:	e0bffc17 	ldw	r2,-16(fp)
  80c81c:	10800817 	ldw	r2,32(r2)
  80c820:	10c00054 	ori	r3,r2,1
  80c824:	e0bffc17 	ldw	r2,-16(fp)
  80c828:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c82c:	e0bffc17 	ldw	r2,-16(fp)
  80c830:	10800017 	ldw	r2,0(r2)
  80c834:	10800104 	addi	r2,r2,4
  80c838:	1007883a 	mov	r3,r2
  80c83c:	e0bffc17 	ldw	r2,-16(fp)
  80c840:	10800817 	ldw	r2,32(r2)
  80c844:	18800035 	stwio	r2,0(r3)
  80c848:	e0bffa17 	ldw	r2,-24(fp)
  80c84c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c850:	e0bff917 	ldw	r2,-28(fp)
  80c854:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80c858:	e0fff517 	ldw	r3,-44(fp)
  80c85c:	e0bffd17 	ldw	r2,-12(fp)
  80c860:	18800426 	beq	r3,r2,80c874 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80c864:	e0fff517 	ldw	r3,-44(fp)
  80c868:	e0bffd17 	ldw	r2,-12(fp)
  80c86c:	1885c83a 	sub	r2,r3,r2
  80c870:	00000606 	br	80c88c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80c874:	e0bfff17 	ldw	r2,-4(fp)
  80c878:	1090000c 	andi	r2,r2,16384
  80c87c:	10000226 	beq	r2,zero,80c888 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80c880:	00bffd44 	movi	r2,-11
  80c884:	00000106 	br	80c88c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80c888:	00bffec4 	movi	r2,-5
}
  80c88c:	e037883a 	mov	sp,fp
  80c890:	dfc00117 	ldw	ra,4(sp)
  80c894:	df000017 	ldw	fp,0(sp)
  80c898:	dec00204 	addi	sp,sp,8
  80c89c:	f800283a 	ret

0080c8a0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80c8a0:	defff304 	addi	sp,sp,-52
  80c8a4:	dfc00c15 	stw	ra,48(sp)
  80c8a8:	df000b15 	stw	fp,44(sp)
  80c8ac:	df000b04 	addi	fp,sp,44
  80c8b0:	e13ffc15 	stw	r4,-16(fp)
  80c8b4:	e17ffd15 	stw	r5,-12(fp)
  80c8b8:	e1bffe15 	stw	r6,-8(fp)
  80c8bc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80c8c0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80c8c4:	e0bffd17 	ldw	r2,-12(fp)
  80c8c8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c8cc:	00003706 	br	80c9ac <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80c8d0:	e0bffc17 	ldw	r2,-16(fp)
  80c8d4:	10800c17 	ldw	r2,48(r2)
  80c8d8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80c8dc:	e0bffc17 	ldw	r2,-16(fp)
  80c8e0:	10800d17 	ldw	r2,52(r2)
  80c8e4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80c8e8:	e0fff917 	ldw	r3,-28(fp)
  80c8ec:	e0bff517 	ldw	r2,-44(fp)
  80c8f0:	1880062e 	bgeu	r3,r2,80c90c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80c8f4:	e0fff517 	ldw	r3,-44(fp)
  80c8f8:	e0bff917 	ldw	r2,-28(fp)
  80c8fc:	1885c83a 	sub	r2,r3,r2
  80c900:	10bfffc4 	addi	r2,r2,-1
  80c904:	e0bff615 	stw	r2,-40(fp)
  80c908:	00000b06 	br	80c938 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80c90c:	e0bff517 	ldw	r2,-44(fp)
  80c910:	10000526 	beq	r2,zero,80c928 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80c914:	00c20004 	movi	r3,2048
  80c918:	e0bff917 	ldw	r2,-28(fp)
  80c91c:	1885c83a 	sub	r2,r3,r2
  80c920:	e0bff615 	stw	r2,-40(fp)
  80c924:	00000406 	br	80c938 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80c928:	00c1ffc4 	movi	r3,2047
  80c92c:	e0bff917 	ldw	r2,-28(fp)
  80c930:	1885c83a 	sub	r2,r3,r2
  80c934:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80c938:	e0bff617 	ldw	r2,-40(fp)
  80c93c:	10001e26 	beq	r2,zero,80c9b8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80c940:	e0fffe17 	ldw	r3,-8(fp)
  80c944:	e0bff617 	ldw	r2,-40(fp)
  80c948:	1880022e 	bgeu	r3,r2,80c954 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80c94c:	e0bffe17 	ldw	r2,-8(fp)
  80c950:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80c954:	e0bffc17 	ldw	r2,-16(fp)
  80c958:	10c20e04 	addi	r3,r2,2104
  80c95c:	e0bff917 	ldw	r2,-28(fp)
  80c960:	1885883a 	add	r2,r3,r2
  80c964:	e1bff617 	ldw	r6,-40(fp)
  80c968:	e17ffd17 	ldw	r5,-12(fp)
  80c96c:	1009883a 	mov	r4,r2
  80c970:	080a2fc0 	call	80a2fc <memcpy>
      ptr   += n;
  80c974:	e0fffd17 	ldw	r3,-12(fp)
  80c978:	e0bff617 	ldw	r2,-40(fp)
  80c97c:	1885883a 	add	r2,r3,r2
  80c980:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80c984:	e0fffe17 	ldw	r3,-8(fp)
  80c988:	e0bff617 	ldw	r2,-40(fp)
  80c98c:	1885c83a 	sub	r2,r3,r2
  80c990:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c994:	e0fff917 	ldw	r3,-28(fp)
  80c998:	e0bff617 	ldw	r2,-40(fp)
  80c99c:	1885883a 	add	r2,r3,r2
  80c9a0:	10c1ffcc 	andi	r3,r2,2047
  80c9a4:	e0bffc17 	ldw	r2,-16(fp)
  80c9a8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c9ac:	e0bffe17 	ldw	r2,-8(fp)
  80c9b0:	00bfc716 	blt	zero,r2,80c8d0 <__alt_mem_onchip_mem+0xff8048d0>
  80c9b4:	00000106 	br	80c9bc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80c9b8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c9bc:	0005303a 	rdctl	r2,status
  80c9c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c9c4:	e0fffb17 	ldw	r3,-20(fp)
  80c9c8:	00bfff84 	movi	r2,-2
  80c9cc:	1884703a 	and	r2,r3,r2
  80c9d0:	1001703a 	wrctl	status,r2
  
  return context;
  80c9d4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80c9d8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80c9dc:	e0bffc17 	ldw	r2,-16(fp)
  80c9e0:	10800817 	ldw	r2,32(r2)
  80c9e4:	10c00094 	ori	r3,r2,2
  80c9e8:	e0bffc17 	ldw	r2,-16(fp)
  80c9ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c9f0:	e0bffc17 	ldw	r2,-16(fp)
  80c9f4:	10800017 	ldw	r2,0(r2)
  80c9f8:	10800104 	addi	r2,r2,4
  80c9fc:	1007883a 	mov	r3,r2
  80ca00:	e0bffc17 	ldw	r2,-16(fp)
  80ca04:	10800817 	ldw	r2,32(r2)
  80ca08:	18800035 	stwio	r2,0(r3)
  80ca0c:	e0bffa17 	ldw	r2,-24(fp)
  80ca10:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ca14:	e0bff817 	ldw	r2,-32(fp)
  80ca18:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80ca1c:	e0bffe17 	ldw	r2,-8(fp)
  80ca20:	0080100e 	bge	zero,r2,80ca64 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80ca24:	e0bfff17 	ldw	r2,-4(fp)
  80ca28:	1090000c 	andi	r2,r2,16384
  80ca2c:	1000101e 	bne	r2,zero,80ca70 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80ca30:	0001883a 	nop
  80ca34:	e0bffc17 	ldw	r2,-16(fp)
  80ca38:	10c00d17 	ldw	r3,52(r2)
  80ca3c:	e0bff517 	ldw	r2,-44(fp)
  80ca40:	1880051e 	bne	r3,r2,80ca58 <altera_avalon_jtag_uart_write+0x1b8>
  80ca44:	e0bffc17 	ldw	r2,-16(fp)
  80ca48:	10c00917 	ldw	r3,36(r2)
  80ca4c:	e0bffc17 	ldw	r2,-16(fp)
  80ca50:	10800117 	ldw	r2,4(r2)
  80ca54:	18bff736 	bltu	r3,r2,80ca34 <__alt_mem_onchip_mem+0xff804a34>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80ca58:	e0bffc17 	ldw	r2,-16(fp)
  80ca5c:	10800917 	ldw	r2,36(r2)
  80ca60:	1000051e 	bne	r2,zero,80ca78 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80ca64:	e0bffe17 	ldw	r2,-8(fp)
  80ca68:	00bfd016 	blt	zero,r2,80c9ac <__alt_mem_onchip_mem+0xff8049ac>
  80ca6c:	00000306 	br	80ca7c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80ca70:	0001883a 	nop
  80ca74:	00000106 	br	80ca7c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80ca78:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80ca7c:	e0fffd17 	ldw	r3,-12(fp)
  80ca80:	e0bff717 	ldw	r2,-36(fp)
  80ca84:	18800426 	beq	r3,r2,80ca98 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80ca88:	e0fffd17 	ldw	r3,-12(fp)
  80ca8c:	e0bff717 	ldw	r2,-36(fp)
  80ca90:	1885c83a 	sub	r2,r3,r2
  80ca94:	00000606 	br	80cab0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80ca98:	e0bfff17 	ldw	r2,-4(fp)
  80ca9c:	1090000c 	andi	r2,r2,16384
  80caa0:	10000226 	beq	r2,zero,80caac <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80caa4:	00bffd44 	movi	r2,-11
  80caa8:	00000106 	br	80cab0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80caac:	00bffec4 	movi	r2,-5
}
  80cab0:	e037883a 	mov	sp,fp
  80cab4:	dfc00117 	ldw	ra,4(sp)
  80cab8:	df000017 	ldw	fp,0(sp)
  80cabc:	dec00204 	addi	sp,sp,8
  80cac0:	f800283a 	ret

0080cac4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80cac4:	defffa04 	addi	sp,sp,-24
  80cac8:	dfc00515 	stw	ra,20(sp)
  80cacc:	df000415 	stw	fp,16(sp)
  80cad0:	df000404 	addi	fp,sp,16
  80cad4:	e13ffe15 	stw	r4,-8(fp)
  80cad8:	2805883a 	mov	r2,r5
  80cadc:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80cae0:	e0bffe17 	ldw	r2,-8(fp)
  80cae4:	10800017 	ldw	r2,0(r2)
  80cae8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80caec:	008003f4 	movhi	r2,15
  80caf0:	10909004 	addi	r2,r2,16960
  80caf4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80caf8:	e0bffe17 	ldw	r2,-8(fp)
  80cafc:	10800803 	ldbu	r2,32(r2)
  80cb00:	10803fcc 	andi	r2,r2,255
  80cb04:	1080201c 	xori	r2,r2,128
  80cb08:	10bfe004 	addi	r2,r2,-128
  80cb0c:	1000151e 	bne	r2,zero,80cb64 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80cb10:	00000906 	br	80cb38 <lcd_write_command+0x74>
    if (--i == 0)
  80cb14:	e0bffc17 	ldw	r2,-16(fp)
  80cb18:	10bfffc4 	addi	r2,r2,-1
  80cb1c:	e0bffc15 	stw	r2,-16(fp)
  80cb20:	e0bffc17 	ldw	r2,-16(fp)
  80cb24:	1000041e 	bne	r2,zero,80cb38 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  80cb28:	e0bffe17 	ldw	r2,-8(fp)
  80cb2c:	00c00044 	movi	r3,1
  80cb30:	10c00805 	stb	r3,32(r2)
      return;
  80cb34:	00000c06 	br	80cb68 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80cb38:	e0bffd17 	ldw	r2,-12(fp)
  80cb3c:	10800104 	addi	r2,r2,4
  80cb40:	10800037 	ldwio	r2,0(r2)
  80cb44:	1080200c 	andi	r2,r2,128
  80cb48:	103ff21e 	bne	r2,zero,80cb14 <__alt_mem_onchip_mem+0xff804b14>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80cb4c:	01001904 	movi	r4,100
  80cb50:	080eba40 	call	80eba4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80cb54:	e0bffd17 	ldw	r2,-12(fp)
  80cb58:	e0ffff03 	ldbu	r3,-4(fp)
  80cb5c:	10c00035 	stwio	r3,0(r2)
  80cb60:	00000106 	br	80cb68 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80cb64:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  80cb68:	e037883a 	mov	sp,fp
  80cb6c:	dfc00117 	ldw	ra,4(sp)
  80cb70:	df000017 	ldw	fp,0(sp)
  80cb74:	dec00204 	addi	sp,sp,8
  80cb78:	f800283a 	ret

0080cb7c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80cb7c:	defffa04 	addi	sp,sp,-24
  80cb80:	dfc00515 	stw	ra,20(sp)
  80cb84:	df000415 	stw	fp,16(sp)
  80cb88:	df000404 	addi	fp,sp,16
  80cb8c:	e13ffe15 	stw	r4,-8(fp)
  80cb90:	2805883a 	mov	r2,r5
  80cb94:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80cb98:	e0bffe17 	ldw	r2,-8(fp)
  80cb9c:	10800017 	ldw	r2,0(r2)
  80cba0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80cba4:	008003f4 	movhi	r2,15
  80cba8:	10909004 	addi	r2,r2,16960
  80cbac:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80cbb0:	e0bffe17 	ldw	r2,-8(fp)
  80cbb4:	10800803 	ldbu	r2,32(r2)
  80cbb8:	10803fcc 	andi	r2,r2,255
  80cbbc:	1080201c 	xori	r2,r2,128
  80cbc0:	10bfe004 	addi	r2,r2,-128
  80cbc4:	10001d1e 	bne	r2,zero,80cc3c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80cbc8:	00000906 	br	80cbf0 <lcd_write_data+0x74>
    if (--i == 0)
  80cbcc:	e0bffc17 	ldw	r2,-16(fp)
  80cbd0:	10bfffc4 	addi	r2,r2,-1
  80cbd4:	e0bffc15 	stw	r2,-16(fp)
  80cbd8:	e0bffc17 	ldw	r2,-16(fp)
  80cbdc:	1000041e 	bne	r2,zero,80cbf0 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  80cbe0:	e0bffe17 	ldw	r2,-8(fp)
  80cbe4:	00c00044 	movi	r3,1
  80cbe8:	10c00805 	stb	r3,32(r2)
      return;
  80cbec:	00001406 	br	80cc40 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80cbf0:	e0bffd17 	ldw	r2,-12(fp)
  80cbf4:	10800104 	addi	r2,r2,4
  80cbf8:	10800037 	ldwio	r2,0(r2)
  80cbfc:	1080200c 	andi	r2,r2,128
  80cc00:	103ff21e 	bne	r2,zero,80cbcc <__alt_mem_onchip_mem+0xff804bcc>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80cc04:	01001904 	movi	r4,100
  80cc08:	080eba40 	call	80eba4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80cc0c:	e0bffd17 	ldw	r2,-12(fp)
  80cc10:	10800204 	addi	r2,r2,8
  80cc14:	1007883a 	mov	r3,r2
  80cc18:	e0bfff03 	ldbu	r2,-4(fp)
  80cc1c:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80cc20:	e0bffe17 	ldw	r2,-8(fp)
  80cc24:	108008c3 	ldbu	r2,35(r2)
  80cc28:	10800044 	addi	r2,r2,1
  80cc2c:	1007883a 	mov	r3,r2
  80cc30:	e0bffe17 	ldw	r2,-8(fp)
  80cc34:	10c008c5 	stb	r3,35(r2)
  80cc38:	00000106 	br	80cc40 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80cc3c:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  80cc40:	e037883a 	mov	sp,fp
  80cc44:	dfc00117 	ldw	ra,4(sp)
  80cc48:	df000017 	ldw	fp,0(sp)
  80cc4c:	dec00204 	addi	sp,sp,8
  80cc50:	f800283a 	ret

0080cc54 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80cc54:	defffc04 	addi	sp,sp,-16
  80cc58:	dfc00315 	stw	ra,12(sp)
  80cc5c:	df000215 	stw	fp,8(sp)
  80cc60:	df000204 	addi	fp,sp,8
  80cc64:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80cc68:	01400044 	movi	r5,1
  80cc6c:	e13fff17 	ldw	r4,-4(fp)
  80cc70:	080cac40 	call	80cac4 <lcd_write_command>

  sp->x = 0;
  80cc74:	e0bfff17 	ldw	r2,-4(fp)
  80cc78:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80cc7c:	e0bfff17 	ldw	r2,-4(fp)
  80cc80:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80cc84:	e0bfff17 	ldw	r2,-4(fp)
  80cc88:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cc8c:	e03ffe15 	stw	zero,-8(fp)
  80cc90:	00001b06 	br	80cd00 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80cc94:	e0bffe17 	ldw	r2,-8(fp)
  80cc98:	108018e4 	muli	r2,r2,99
  80cc9c:	10801004 	addi	r2,r2,64
  80cca0:	e0ffff17 	ldw	r3,-4(fp)
  80cca4:	1885883a 	add	r2,r3,r2
  80cca8:	01801444 	movi	r6,81
  80ccac:	01400804 	movi	r5,32
  80ccb0:	1009883a 	mov	r4,r2
  80ccb4:	08088d00 	call	8088d0 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80ccb8:	e0bffe17 	ldw	r2,-8(fp)
  80ccbc:	108018e4 	muli	r2,r2,99
  80ccc0:	10800c04 	addi	r2,r2,48
  80ccc4:	e0ffff17 	ldw	r3,-4(fp)
  80ccc8:	1885883a 	add	r2,r3,r2
  80cccc:	01800404 	movi	r6,16
  80ccd0:	01400804 	movi	r5,32
  80ccd4:	1009883a 	mov	r4,r2
  80ccd8:	08088d00 	call	8088d0 <memset>
    sp->line[y].width = 0;
  80ccdc:	e0ffff17 	ldw	r3,-4(fp)
  80cce0:	e0bffe17 	ldw	r2,-8(fp)
  80cce4:	108018e4 	muli	r2,r2,99
  80cce8:	1885883a 	add	r2,r3,r2
  80ccec:	10802444 	addi	r2,r2,145
  80ccf0:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80ccf4:	e0bffe17 	ldw	r2,-8(fp)
  80ccf8:	10800044 	addi	r2,r2,1
  80ccfc:	e0bffe15 	stw	r2,-8(fp)
  80cd00:	e0bffe17 	ldw	r2,-8(fp)
  80cd04:	10800090 	cmplti	r2,r2,2
  80cd08:	103fe21e 	bne	r2,zero,80cc94 <__alt_mem_onchip_mem+0xff804c94>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80cd0c:	0001883a 	nop
  80cd10:	e037883a 	mov	sp,fp
  80cd14:	dfc00117 	ldw	ra,4(sp)
  80cd18:	df000017 	ldw	fp,0(sp)
  80cd1c:	dec00204 	addi	sp,sp,8
  80cd20:	f800283a 	ret

0080cd24 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80cd24:	defff704 	addi	sp,sp,-36
  80cd28:	dfc00815 	stw	ra,32(sp)
  80cd2c:	df000715 	stw	fp,28(sp)
  80cd30:	df000704 	addi	fp,sp,28
  80cd34:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80cd38:	e0bfff17 	ldw	r2,-4(fp)
  80cd3c:	10800943 	ldbu	r2,37(r2)
  80cd40:	10803fcc 	andi	r2,r2,255
  80cd44:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cd48:	e03ff915 	stw	zero,-28(fp)
  80cd4c:	00006706 	br	80ceec <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80cd50:	e0ffff17 	ldw	r3,-4(fp)
  80cd54:	e0bff917 	ldw	r2,-28(fp)
  80cd58:	108018e4 	muli	r2,r2,99
  80cd5c:	1885883a 	add	r2,r3,r2
  80cd60:	10802444 	addi	r2,r2,145
  80cd64:	10800003 	ldbu	r2,0(r2)
  80cd68:	10803fcc 	andi	r2,r2,255
  80cd6c:	1080201c 	xori	r2,r2,128
  80cd70:	10bfe004 	addi	r2,r2,-128
  80cd74:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80cd78:	e0ffff17 	ldw	r3,-4(fp)
  80cd7c:	e0bff917 	ldw	r2,-28(fp)
  80cd80:	108018e4 	muli	r2,r2,99
  80cd84:	1885883a 	add	r2,r3,r2
  80cd88:	10802484 	addi	r2,r2,146
  80cd8c:	10800003 	ldbu	r2,0(r2)
  80cd90:	10c03fcc 	andi	r3,r2,255
  80cd94:	e0bffc17 	ldw	r2,-16(fp)
  80cd98:	1885383a 	mul	r2,r3,r2
  80cd9c:	1005d23a 	srai	r2,r2,8
  80cda0:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80cda4:	e0fffb17 	ldw	r3,-20(fp)
  80cda8:	e0bffd17 	ldw	r2,-12(fp)
  80cdac:	18800116 	blt	r3,r2,80cdb4 <lcd_repaint_screen+0x90>
      offset = 0;
  80cdb0:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80cdb4:	e03ffa15 	stw	zero,-24(fp)
  80cdb8:	00004606 	br	80ced4 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80cdbc:	e0fffa17 	ldw	r3,-24(fp)
  80cdc0:	e0bffb17 	ldw	r2,-20(fp)
  80cdc4:	1885883a 	add	r2,r3,r2
  80cdc8:	e17ffd17 	ldw	r5,-12(fp)
  80cdcc:	1009883a 	mov	r4,r2
  80cdd0:	080ae400 	call	80ae40 <__modsi3>
  80cdd4:	1009883a 	mov	r4,r2
  80cdd8:	e0ffff17 	ldw	r3,-4(fp)
  80cddc:	e0bff917 	ldw	r2,-28(fp)
  80cde0:	108018e4 	muli	r2,r2,99
  80cde4:	1885883a 	add	r2,r3,r2
  80cde8:	1105883a 	add	r2,r2,r4
  80cdec:	10801004 	addi	r2,r2,64
  80cdf0:	10800003 	ldbu	r2,0(r2)
  80cdf4:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80cdf8:	e0ffff17 	ldw	r3,-4(fp)
  80cdfc:	e0bff917 	ldw	r2,-28(fp)
  80ce00:	108018e4 	muli	r2,r2,99
  80ce04:	1887883a 	add	r3,r3,r2
  80ce08:	e0bffa17 	ldw	r2,-24(fp)
  80ce0c:	1885883a 	add	r2,r3,r2
  80ce10:	10800c04 	addi	r2,r2,48
  80ce14:	10800003 	ldbu	r2,0(r2)
  80ce18:	10c03fcc 	andi	r3,r2,255
  80ce1c:	18c0201c 	xori	r3,r3,128
  80ce20:	18ffe004 	addi	r3,r3,-128
  80ce24:	e0bffe07 	ldb	r2,-8(fp)
  80ce28:	18802726 	beq	r3,r2,80cec8 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80ce2c:	e0fff917 	ldw	r3,-28(fp)
  80ce30:	d0a00e04 	addi	r2,gp,-32712
  80ce34:	1885883a 	add	r2,r3,r2
  80ce38:	10800003 	ldbu	r2,0(r2)
  80ce3c:	1007883a 	mov	r3,r2
  80ce40:	e0bffa17 	ldw	r2,-24(fp)
  80ce44:	1885883a 	add	r2,r3,r2
  80ce48:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80ce4c:	e0fffe43 	ldbu	r3,-7(fp)
  80ce50:	e0bfff17 	ldw	r2,-4(fp)
  80ce54:	108008c3 	ldbu	r2,35(r2)
  80ce58:	10803fcc 	andi	r2,r2,255
  80ce5c:	1080201c 	xori	r2,r2,128
  80ce60:	10bfe004 	addi	r2,r2,-128
  80ce64:	18800a26 	beq	r3,r2,80ce90 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80ce68:	e0fffe43 	ldbu	r3,-7(fp)
  80ce6c:	00bfe004 	movi	r2,-128
  80ce70:	1884b03a 	or	r2,r3,r2
  80ce74:	10803fcc 	andi	r2,r2,255
  80ce78:	100b883a 	mov	r5,r2
  80ce7c:	e13fff17 	ldw	r4,-4(fp)
  80ce80:	080cac40 	call	80cac4 <lcd_write_command>
          sp->address = address;
  80ce84:	e0fffe43 	ldbu	r3,-7(fp)
  80ce88:	e0bfff17 	ldw	r2,-4(fp)
  80ce8c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80ce90:	e0bffe03 	ldbu	r2,-8(fp)
  80ce94:	10803fcc 	andi	r2,r2,255
  80ce98:	100b883a 	mov	r5,r2
  80ce9c:	e13fff17 	ldw	r4,-4(fp)
  80cea0:	080cb7c0 	call	80cb7c <lcd_write_data>
        sp->line[y].visible[x] = c;
  80cea4:	e0ffff17 	ldw	r3,-4(fp)
  80cea8:	e0bff917 	ldw	r2,-28(fp)
  80ceac:	108018e4 	muli	r2,r2,99
  80ceb0:	1887883a 	add	r3,r3,r2
  80ceb4:	e0bffa17 	ldw	r2,-24(fp)
  80ceb8:	1885883a 	add	r2,r3,r2
  80cebc:	10800c04 	addi	r2,r2,48
  80cec0:	e0fffe03 	ldbu	r3,-8(fp)
  80cec4:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80cec8:	e0bffa17 	ldw	r2,-24(fp)
  80cecc:	10800044 	addi	r2,r2,1
  80ced0:	e0bffa15 	stw	r2,-24(fp)
  80ced4:	e0bffa17 	ldw	r2,-24(fp)
  80ced8:	10800410 	cmplti	r2,r2,16
  80cedc:	103fb71e 	bne	r2,zero,80cdbc <__alt_mem_onchip_mem+0xff804dbc>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cee0:	e0bff917 	ldw	r2,-28(fp)
  80cee4:	10800044 	addi	r2,r2,1
  80cee8:	e0bff915 	stw	r2,-28(fp)
  80ceec:	e0bff917 	ldw	r2,-28(fp)
  80cef0:	10800090 	cmplti	r2,r2,2
  80cef4:	103f961e 	bne	r2,zero,80cd50 <__alt_mem_onchip_mem+0xff804d50>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80cef8:	0001883a 	nop
  80cefc:	e037883a 	mov	sp,fp
  80cf00:	dfc00117 	ldw	ra,4(sp)
  80cf04:	df000017 	ldw	fp,0(sp)
  80cf08:	dec00204 	addi	sp,sp,8
  80cf0c:	f800283a 	ret

0080cf10 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80cf10:	defffc04 	addi	sp,sp,-16
  80cf14:	dfc00315 	stw	ra,12(sp)
  80cf18:	df000215 	stw	fp,8(sp)
  80cf1c:	df000204 	addi	fp,sp,8
  80cf20:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cf24:	e03ffe15 	stw	zero,-8(fp)
  80cf28:	00001d06 	br	80cfa0 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80cf2c:	e0bffe17 	ldw	r2,-8(fp)
  80cf30:	00800f16 	blt	zero,r2,80cf70 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80cf34:	e0bffe17 	ldw	r2,-8(fp)
  80cf38:	108018e4 	muli	r2,r2,99
  80cf3c:	10801004 	addi	r2,r2,64
  80cf40:	e0ffff17 	ldw	r3,-4(fp)
  80cf44:	1889883a 	add	r4,r3,r2
  80cf48:	e0bffe17 	ldw	r2,-8(fp)
  80cf4c:	10800044 	addi	r2,r2,1
  80cf50:	108018e4 	muli	r2,r2,99
  80cf54:	10801004 	addi	r2,r2,64
  80cf58:	e0ffff17 	ldw	r3,-4(fp)
  80cf5c:	1885883a 	add	r2,r3,r2
  80cf60:	01801404 	movi	r6,80
  80cf64:	100b883a 	mov	r5,r2
  80cf68:	080a2fc0 	call	80a2fc <memcpy>
  80cf6c:	00000906 	br	80cf94 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80cf70:	e0bffe17 	ldw	r2,-8(fp)
  80cf74:	108018e4 	muli	r2,r2,99
  80cf78:	10801004 	addi	r2,r2,64
  80cf7c:	e0ffff17 	ldw	r3,-4(fp)
  80cf80:	1885883a 	add	r2,r3,r2
  80cf84:	01801404 	movi	r6,80
  80cf88:	01400804 	movi	r5,32
  80cf8c:	1009883a 	mov	r4,r2
  80cf90:	08088d00 	call	8088d0 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cf94:	e0bffe17 	ldw	r2,-8(fp)
  80cf98:	10800044 	addi	r2,r2,1
  80cf9c:	e0bffe15 	stw	r2,-8(fp)
  80cfa0:	e0bffe17 	ldw	r2,-8(fp)
  80cfa4:	10800090 	cmplti	r2,r2,2
  80cfa8:	103fe01e 	bne	r2,zero,80cf2c <__alt_mem_onchip_mem+0xff804f2c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80cfac:	e0bfff17 	ldw	r2,-4(fp)
  80cfb0:	10800883 	ldbu	r2,34(r2)
  80cfb4:	10bfffc4 	addi	r2,r2,-1
  80cfb8:	1007883a 	mov	r3,r2
  80cfbc:	e0bfff17 	ldw	r2,-4(fp)
  80cfc0:	10c00885 	stb	r3,34(r2)
}
  80cfc4:	0001883a 	nop
  80cfc8:	e037883a 	mov	sp,fp
  80cfcc:	dfc00117 	ldw	ra,4(sp)
  80cfd0:	df000017 	ldw	fp,0(sp)
  80cfd4:	dec00204 	addi	sp,sp,8
  80cfd8:	f800283a 	ret

0080cfdc <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80cfdc:	defff904 	addi	sp,sp,-28
  80cfe0:	dfc00615 	stw	ra,24(sp)
  80cfe4:	df000515 	stw	fp,20(sp)
  80cfe8:	df000504 	addi	fp,sp,20
  80cfec:	e13ffe15 	stw	r4,-8(fp)
  80cff0:	2805883a 	mov	r2,r5
  80cff4:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80cff8:	e03ffb15 	stw	zero,-20(fp)
  80cffc:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  80d000:	e0bffe17 	ldw	r2,-8(fp)
  80d004:	10800a03 	ldbu	r2,40(r2)
  80d008:	10803fcc 	andi	r2,r2,255
  80d00c:	1080201c 	xori	r2,r2,128
  80d010:	10bfe004 	addi	r2,r2,-128
  80d014:	108016d8 	cmpnei	r2,r2,91
  80d018:	1000411e 	bne	r2,zero,80d120 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  80d01c:	e0bffe17 	ldw	r2,-8(fp)
  80d020:	10800a04 	addi	r2,r2,40
  80d024:	10800044 	addi	r2,r2,1
  80d028:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80d02c:	00000c06 	br	80d060 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80d030:	e0bffb17 	ldw	r2,-20(fp)
  80d034:	10c002a4 	muli	r3,r2,10
  80d038:	e0bffd17 	ldw	r2,-12(fp)
  80d03c:	11000044 	addi	r4,r2,1
  80d040:	e13ffd15 	stw	r4,-12(fp)
  80d044:	10800003 	ldbu	r2,0(r2)
  80d048:	10803fcc 	andi	r2,r2,255
  80d04c:	1080201c 	xori	r2,r2,128
  80d050:	10bfe004 	addi	r2,r2,-128
  80d054:	10bff404 	addi	r2,r2,-48
  80d058:	1885883a 	add	r2,r3,r2
  80d05c:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80d060:	d0e00f17 	ldw	r3,-32708(gp)
  80d064:	e0bffd17 	ldw	r2,-12(fp)
  80d068:	10800003 	ldbu	r2,0(r2)
  80d06c:	10803fcc 	andi	r2,r2,255
  80d070:	1080201c 	xori	r2,r2,128
  80d074:	10bfe004 	addi	r2,r2,-128
  80d078:	10800044 	addi	r2,r2,1
  80d07c:	1885883a 	add	r2,r3,r2
  80d080:	10800003 	ldbu	r2,0(r2)
  80d084:	10803fcc 	andi	r2,r2,255
  80d088:	1080010c 	andi	r2,r2,4
  80d08c:	103fe81e 	bne	r2,zero,80d030 <__alt_mem_onchip_mem+0xff805030>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80d090:	e0bffd17 	ldw	r2,-12(fp)
  80d094:	10800003 	ldbu	r2,0(r2)
  80d098:	10803fcc 	andi	r2,r2,255
  80d09c:	1080201c 	xori	r2,r2,128
  80d0a0:	10bfe004 	addi	r2,r2,-128
  80d0a4:	10800ed8 	cmpnei	r2,r2,59
  80d0a8:	10001f1e 	bne	r2,zero,80d128 <lcd_handle_escape+0x14c>
    {
      ptr++;
  80d0ac:	e0bffd17 	ldw	r2,-12(fp)
  80d0b0:	10800044 	addi	r2,r2,1
  80d0b4:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80d0b8:	00000c06 	br	80d0ec <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80d0bc:	e0bffc17 	ldw	r2,-16(fp)
  80d0c0:	10c002a4 	muli	r3,r2,10
  80d0c4:	e0bffd17 	ldw	r2,-12(fp)
  80d0c8:	11000044 	addi	r4,r2,1
  80d0cc:	e13ffd15 	stw	r4,-12(fp)
  80d0d0:	10800003 	ldbu	r2,0(r2)
  80d0d4:	10803fcc 	andi	r2,r2,255
  80d0d8:	1080201c 	xori	r2,r2,128
  80d0dc:	10bfe004 	addi	r2,r2,-128
  80d0e0:	10bff404 	addi	r2,r2,-48
  80d0e4:	1885883a 	add	r2,r3,r2
  80d0e8:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80d0ec:	d0e00f17 	ldw	r3,-32708(gp)
  80d0f0:	e0bffd17 	ldw	r2,-12(fp)
  80d0f4:	10800003 	ldbu	r2,0(r2)
  80d0f8:	10803fcc 	andi	r2,r2,255
  80d0fc:	1080201c 	xori	r2,r2,128
  80d100:	10bfe004 	addi	r2,r2,-128
  80d104:	10800044 	addi	r2,r2,1
  80d108:	1885883a 	add	r2,r3,r2
  80d10c:	10800003 	ldbu	r2,0(r2)
  80d110:	10803fcc 	andi	r2,r2,255
  80d114:	1080010c 	andi	r2,r2,4
  80d118:	103fe81e 	bne	r2,zero,80d0bc <__alt_mem_onchip_mem+0xff8050bc>
  80d11c:	00000206 	br	80d128 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80d120:	00bfffc4 	movi	r2,-1
  80d124:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80d128:	e0bfff07 	ldb	r2,-4(fp)
  80d12c:	10c012a0 	cmpeqi	r3,r2,74
  80d130:	1800291e 	bne	r3,zero,80d1d8 <lcd_handle_escape+0x1fc>
  80d134:	10c012c8 	cmpgei	r3,r2,75
  80d138:	1800031e 	bne	r3,zero,80d148 <lcd_handle_escape+0x16c>
  80d13c:	10801220 	cmpeqi	r2,r2,72
  80d140:	1000061e 	bne	r2,zero,80d15c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80d144:	00004a06 	br	80d270 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  80d148:	10c012e0 	cmpeqi	r3,r2,75
  80d14c:	1800281e 	bne	r3,zero,80d1f0 <lcd_handle_escape+0x214>
  80d150:	108019a0 	cmpeqi	r2,r2,102
  80d154:	1000011e 	bne	r2,zero,80d15c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80d158:	00004506 	br	80d270 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80d15c:	e0bffc17 	ldw	r2,-16(fp)
  80d160:	0080050e 	bge	zero,r2,80d178 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  80d164:	e0bffc17 	ldw	r2,-16(fp)
  80d168:	10bfffc4 	addi	r2,r2,-1
  80d16c:	1007883a 	mov	r3,r2
  80d170:	e0bffe17 	ldw	r2,-8(fp)
  80d174:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80d178:	e0bffb17 	ldw	r2,-20(fp)
  80d17c:	0080370e 	bge	zero,r2,80d25c <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  80d180:	e0bffb17 	ldw	r2,-20(fp)
  80d184:	10bfffc4 	addi	r2,r2,-1
  80d188:	1007883a 	mov	r3,r2
  80d18c:	e0bffe17 	ldw	r2,-8(fp)
  80d190:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80d194:	e0bffe17 	ldw	r2,-8(fp)
  80d198:	10800883 	ldbu	r2,34(r2)
  80d19c:	10803fcc 	andi	r2,r2,255
  80d1a0:	10800170 	cmpltui	r2,r2,5
  80d1a4:	1000061e 	bne	r2,zero,80d1c0 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  80d1a8:	e0bffe17 	ldw	r2,-8(fp)
  80d1ac:	00c00104 	movi	r3,4
  80d1b0:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  80d1b4:	00000206 	br	80d1c0 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  80d1b8:	e13ffe17 	ldw	r4,-8(fp)
  80d1bc:	080cf100 	call	80cf10 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80d1c0:	e0bffe17 	ldw	r2,-8(fp)
  80d1c4:	10800883 	ldbu	r2,34(r2)
  80d1c8:	10803fcc 	andi	r2,r2,255
  80d1cc:	108000e8 	cmpgeui	r2,r2,3
  80d1d0:	103ff91e 	bne	r2,zero,80d1b8 <__alt_mem_onchip_mem+0xff8051b8>
        lcd_scroll_up(sp);
    }
    break;
  80d1d4:	00002106 	br	80d25c <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80d1d8:	e0bffb17 	ldw	r2,-20(fp)
  80d1dc:	10800098 	cmpnei	r2,r2,2
  80d1e0:	1000201e 	bne	r2,zero,80d264 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  80d1e4:	e13ffe17 	ldw	r4,-8(fp)
  80d1e8:	080cc540 	call	80cc54 <lcd_clear_screen>
    break;
  80d1ec:	00001d06 	br	80d264 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80d1f0:	e0bffb17 	ldw	r2,-20(fp)
  80d1f4:	00801d16 	blt	zero,r2,80d26c <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80d1f8:	e0bffe17 	ldw	r2,-8(fp)
  80d1fc:	10800843 	ldbu	r2,33(r2)
  80d200:	10803fcc 	andi	r2,r2,255
  80d204:	10801428 	cmpgeui	r2,r2,80
  80d208:	1000181e 	bne	r2,zero,80d26c <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80d20c:	e0bffe17 	ldw	r2,-8(fp)
  80d210:	10800883 	ldbu	r2,34(r2)
  80d214:	10803fcc 	andi	r2,r2,255
  80d218:	108018e4 	muli	r2,r2,99
  80d21c:	10801004 	addi	r2,r2,64
  80d220:	e0fffe17 	ldw	r3,-8(fp)
  80d224:	1887883a 	add	r3,r3,r2
  80d228:	e0bffe17 	ldw	r2,-8(fp)
  80d22c:	10800843 	ldbu	r2,33(r2)
  80d230:	10803fcc 	andi	r2,r2,255
  80d234:	1889883a 	add	r4,r3,r2
  80d238:	e0bffe17 	ldw	r2,-8(fp)
  80d23c:	10800843 	ldbu	r2,33(r2)
  80d240:	10803fcc 	andi	r2,r2,255
  80d244:	00c01404 	movi	r3,80
  80d248:	1885c83a 	sub	r2,r3,r2
  80d24c:	100d883a 	mov	r6,r2
  80d250:	01400804 	movi	r5,32
  80d254:	08088d00 	call	8088d0 <memset>
    }
    break;
  80d258:	00000406 	br	80d26c <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  80d25c:	0001883a 	nop
  80d260:	00000306 	br	80d270 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  80d264:	0001883a 	nop
  80d268:	00000106 	br	80d270 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  80d26c:	0001883a 	nop
  }
}
  80d270:	0001883a 	nop
  80d274:	e037883a 	mov	sp,fp
  80d278:	dfc00117 	ldw	ra,4(sp)
  80d27c:	df000017 	ldw	fp,0(sp)
  80d280:	dec00204 	addi	sp,sp,8
  80d284:	f800283a 	ret

0080d288 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80d288:	defff304 	addi	sp,sp,-52
  80d28c:	dfc00c15 	stw	ra,48(sp)
  80d290:	df000b15 	stw	fp,44(sp)
  80d294:	df000b04 	addi	fp,sp,44
  80d298:	e13ffc15 	stw	r4,-16(fp)
  80d29c:	e17ffd15 	stw	r5,-12(fp)
  80d2a0:	e1bffe15 	stw	r6,-8(fp)
  80d2a4:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80d2a8:	e0bffe17 	ldw	r2,-8(fp)
  80d2ac:	e0fffd17 	ldw	r3,-12(fp)
  80d2b0:	1885883a 	add	r2,r3,r2
  80d2b4:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80d2b8:	e0bffc17 	ldw	r2,-16(fp)
  80d2bc:	00c00044 	movi	r3,1
  80d2c0:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  80d2c4:	00009906 	br	80d52c <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  80d2c8:	e0bffd17 	ldw	r2,-12(fp)
  80d2cc:	10800003 	ldbu	r2,0(r2)
  80d2d0:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  80d2d4:	e0bffc17 	ldw	r2,-16(fp)
  80d2d8:	10800903 	ldbu	r2,36(r2)
  80d2dc:	10803fcc 	andi	r2,r2,255
  80d2e0:	1080201c 	xori	r2,r2,128
  80d2e4:	10bfe004 	addi	r2,r2,-128
  80d2e8:	10003716 	blt	r2,zero,80d3c8 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  80d2ec:	e0bffc17 	ldw	r2,-16(fp)
  80d2f0:	10800903 	ldbu	r2,36(r2)
  80d2f4:	10803fcc 	andi	r2,r2,255
  80d2f8:	1080201c 	xori	r2,r2,128
  80d2fc:	10bfe004 	addi	r2,r2,-128
  80d300:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80d304:	e0bffa17 	ldw	r2,-24(fp)
  80d308:	1000031e 	bne	r2,zero,80d318 <altera_avalon_lcd_16207_write+0x90>
  80d30c:	e0bff907 	ldb	r2,-28(fp)
  80d310:	108016d8 	cmpnei	r2,r2,91
  80d314:	10000d1e 	bne	r2,zero,80d34c <altera_avalon_lcd_16207_write+0xc4>
  80d318:	e0bffa17 	ldw	r2,-24(fp)
  80d31c:	10001826 	beq	r2,zero,80d380 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  80d320:	d0e00f17 	ldw	r3,-32708(gp)
  80d324:	e0bff907 	ldb	r2,-28(fp)
  80d328:	10800044 	addi	r2,r2,1
  80d32c:	1885883a 	add	r2,r3,r2
  80d330:	10800003 	ldbu	r2,0(r2)
  80d334:	10803fcc 	andi	r2,r2,255
  80d338:	1080010c 	andi	r2,r2,4
  80d33c:	1000101e 	bne	r2,zero,80d380 <altera_avalon_lcd_16207_write+0xf8>
  80d340:	e0bff907 	ldb	r2,-28(fp)
  80d344:	10800ee0 	cmpeqi	r2,r2,59
  80d348:	10000d1e 	bne	r2,zero,80d380 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  80d34c:	e0fffc17 	ldw	r3,-16(fp)
  80d350:	e0bffa17 	ldw	r2,-24(fp)
  80d354:	1885883a 	add	r2,r3,r2
  80d358:	10800a04 	addi	r2,r2,40
  80d35c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80d360:	e0bff907 	ldb	r2,-28(fp)
  80d364:	100b883a 	mov	r5,r2
  80d368:	e13ffc17 	ldw	r4,-16(fp)
  80d36c:	080cfdc0 	call	80cfdc <lcd_handle_escape>

        sp->esccount = -1;
  80d370:	e0bffc17 	ldw	r2,-16(fp)
  80d374:	00ffffc4 	movi	r3,-1
  80d378:	10c00905 	stb	r3,36(r2)
  80d37c:	00006806 	br	80d520 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80d380:	e0bffc17 	ldw	r2,-16(fp)
  80d384:	10800903 	ldbu	r2,36(r2)
  80d388:	10803fcc 	andi	r2,r2,255
  80d38c:	108001e8 	cmpgeui	r2,r2,7
  80d390:	1000631e 	bne	r2,zero,80d520 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  80d394:	e0fffc17 	ldw	r3,-16(fp)
  80d398:	e0bffa17 	ldw	r2,-24(fp)
  80d39c:	1885883a 	add	r2,r3,r2
  80d3a0:	10800a04 	addi	r2,r2,40
  80d3a4:	e0fff903 	ldbu	r3,-28(fp)
  80d3a8:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  80d3ac:	e0bffc17 	ldw	r2,-16(fp)
  80d3b0:	10800903 	ldbu	r2,36(r2)
  80d3b4:	10800044 	addi	r2,r2,1
  80d3b8:	1007883a 	mov	r3,r2
  80d3bc:	e0bffc17 	ldw	r2,-16(fp)
  80d3c0:	10c00905 	stb	r3,36(r2)
  80d3c4:	00005606 	br	80d520 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  80d3c8:	e0bff907 	ldb	r2,-28(fp)
  80d3cc:	108006d8 	cmpnei	r2,r2,27
  80d3d0:	1000031e 	bne	r2,zero,80d3e0 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  80d3d4:	e0bffc17 	ldw	r2,-16(fp)
  80d3d8:	10000905 	stb	zero,36(r2)
  80d3dc:	00005006 	br	80d520 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  80d3e0:	e0bff907 	ldb	r2,-28(fp)
  80d3e4:	10800358 	cmpnei	r2,r2,13
  80d3e8:	1000031e 	bne	r2,zero,80d3f8 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  80d3ec:	e0bffc17 	ldw	r2,-16(fp)
  80d3f0:	10000845 	stb	zero,33(r2)
  80d3f4:	00004a06 	br	80d520 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  80d3f8:	e0bff907 	ldb	r2,-28(fp)
  80d3fc:	10800298 	cmpnei	r2,r2,10
  80d400:	1000101e 	bne	r2,zero,80d444 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  80d404:	e0bffc17 	ldw	r2,-16(fp)
  80d408:	10000845 	stb	zero,33(r2)
      sp->y++;
  80d40c:	e0bffc17 	ldw	r2,-16(fp)
  80d410:	10800883 	ldbu	r2,34(r2)
  80d414:	10800044 	addi	r2,r2,1
  80d418:	1007883a 	mov	r3,r2
  80d41c:	e0bffc17 	ldw	r2,-16(fp)
  80d420:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80d424:	e0bffc17 	ldw	r2,-16(fp)
  80d428:	10800883 	ldbu	r2,34(r2)
  80d42c:	10803fcc 	andi	r2,r2,255
  80d430:	108000f0 	cmpltui	r2,r2,3
  80d434:	10003a1e 	bne	r2,zero,80d520 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  80d438:	e13ffc17 	ldw	r4,-16(fp)
  80d43c:	080cf100 	call	80cf10 <lcd_scroll_up>
  80d440:	00003706 	br	80d520 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  80d444:	e0bff907 	ldb	r2,-28(fp)
  80d448:	10800218 	cmpnei	r2,r2,8
  80d44c:	10000b1e 	bne	r2,zero,80d47c <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  80d450:	e0bffc17 	ldw	r2,-16(fp)
  80d454:	10800843 	ldbu	r2,33(r2)
  80d458:	10803fcc 	andi	r2,r2,255
  80d45c:	10003026 	beq	r2,zero,80d520 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  80d460:	e0bffc17 	ldw	r2,-16(fp)
  80d464:	10800843 	ldbu	r2,33(r2)
  80d468:	10bfffc4 	addi	r2,r2,-1
  80d46c:	1007883a 	mov	r3,r2
  80d470:	e0bffc17 	ldw	r2,-16(fp)
  80d474:	10c00845 	stb	r3,33(r2)
  80d478:	00002906 	br	80d520 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  80d47c:	d0e00f17 	ldw	r3,-32708(gp)
  80d480:	e0bff907 	ldb	r2,-28(fp)
  80d484:	10800044 	addi	r2,r2,1
  80d488:	1885883a 	add	r2,r3,r2
  80d48c:	10800003 	ldbu	r2,0(r2)
  80d490:	10803fcc 	andi	r2,r2,255
  80d494:	1080201c 	xori	r2,r2,128
  80d498:	10bfe004 	addi	r2,r2,-128
  80d49c:	108025cc 	andi	r2,r2,151
  80d4a0:	10001f26 	beq	r2,zero,80d520 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80d4a4:	e0bffc17 	ldw	r2,-16(fp)
  80d4a8:	10800883 	ldbu	r2,34(r2)
  80d4ac:	10803fcc 	andi	r2,r2,255
  80d4b0:	108000b0 	cmpltui	r2,r2,2
  80d4b4:	1000021e 	bne	r2,zero,80d4c0 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  80d4b8:	e13ffc17 	ldw	r4,-16(fp)
  80d4bc:	080cf100 	call	80cf10 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80d4c0:	e0bffc17 	ldw	r2,-16(fp)
  80d4c4:	10800843 	ldbu	r2,33(r2)
  80d4c8:	10803fcc 	andi	r2,r2,255
  80d4cc:	10801428 	cmpgeui	r2,r2,80
  80d4d0:	10000d1e 	bne	r2,zero,80d508 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  80d4d4:	e0bffc17 	ldw	r2,-16(fp)
  80d4d8:	10800883 	ldbu	r2,34(r2)
  80d4dc:	10c03fcc 	andi	r3,r2,255
  80d4e0:	e0bffc17 	ldw	r2,-16(fp)
  80d4e4:	10800843 	ldbu	r2,33(r2)
  80d4e8:	10803fcc 	andi	r2,r2,255
  80d4ec:	e13ffc17 	ldw	r4,-16(fp)
  80d4f0:	18c018e4 	muli	r3,r3,99
  80d4f4:	20c7883a 	add	r3,r4,r3
  80d4f8:	1885883a 	add	r2,r3,r2
  80d4fc:	10801004 	addi	r2,r2,64
  80d500:	e0fff903 	ldbu	r3,-28(fp)
  80d504:	10c00005 	stb	r3,0(r2)

      sp->x++;
  80d508:	e0bffc17 	ldw	r2,-16(fp)
  80d50c:	10800843 	ldbu	r2,33(r2)
  80d510:	10800044 	addi	r2,r2,1
  80d514:	1007883a 	mov	r3,r2
  80d518:	e0bffc17 	ldw	r2,-16(fp)
  80d51c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80d520:	e0bffd17 	ldw	r2,-12(fp)
  80d524:	10800044 	addi	r2,r2,1
  80d528:	e0bffd15 	stw	r2,-12(fp)
  80d52c:	e0fffd17 	ldw	r3,-12(fp)
  80d530:	e0bff817 	ldw	r2,-32(fp)
  80d534:	18bf6436 	bltu	r3,r2,80d2c8 <__alt_mem_onchip_mem+0xff8052c8>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80d538:	00800404 	movi	r2,16
  80d53c:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d540:	e03ff515 	stw	zero,-44(fp)
  80d544:	00003706 	br	80d624 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80d548:	00801404 	movi	r2,80
  80d54c:	e0bff715 	stw	r2,-36(fp)
  80d550:	00001106 	br	80d598 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  80d554:	e0bff717 	ldw	r2,-36(fp)
  80d558:	10bfffc4 	addi	r2,r2,-1
  80d55c:	e13ffc17 	ldw	r4,-16(fp)
  80d560:	e0fff517 	ldw	r3,-44(fp)
  80d564:	18c018e4 	muli	r3,r3,99
  80d568:	20c7883a 	add	r3,r4,r3
  80d56c:	1885883a 	add	r2,r3,r2
  80d570:	10801004 	addi	r2,r2,64
  80d574:	10800003 	ldbu	r2,0(r2)
  80d578:	10803fcc 	andi	r2,r2,255
  80d57c:	1080201c 	xori	r2,r2,128
  80d580:	10bfe004 	addi	r2,r2,-128
  80d584:	10800820 	cmpeqi	r2,r2,32
  80d588:	10000626 	beq	r2,zero,80d5a4 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80d58c:	e0bff717 	ldw	r2,-36(fp)
  80d590:	10bfffc4 	addi	r2,r2,-1
  80d594:	e0bff715 	stw	r2,-36(fp)
  80d598:	e0bff717 	ldw	r2,-36(fp)
  80d59c:	00bfed16 	blt	zero,r2,80d554 <__alt_mem_onchip_mem+0xff805554>
  80d5a0:	00000106 	br	80d5a8 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  80d5a4:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80d5a8:	e0bff717 	ldw	r2,-36(fp)
  80d5ac:	10800448 	cmpgei	r2,r2,17
  80d5b0:	1000031e 	bne	r2,zero,80d5c0 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  80d5b4:	00800404 	movi	r2,16
  80d5b8:	e0bff715 	stw	r2,-36(fp)
  80d5bc:	00000306 	br	80d5cc <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  80d5c0:	e0bff717 	ldw	r2,-36(fp)
  80d5c4:	10800044 	addi	r2,r2,1
  80d5c8:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  80d5cc:	e0bff717 	ldw	r2,-36(fp)
  80d5d0:	1009883a 	mov	r4,r2
  80d5d4:	e0fffc17 	ldw	r3,-16(fp)
  80d5d8:	e0bff517 	ldw	r2,-44(fp)
  80d5dc:	108018e4 	muli	r2,r2,99
  80d5e0:	1885883a 	add	r2,r3,r2
  80d5e4:	10802444 	addi	r2,r2,145
  80d5e8:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  80d5ec:	e0fff617 	ldw	r3,-40(fp)
  80d5f0:	e0bff717 	ldw	r2,-36(fp)
  80d5f4:	1880020e 	bge	r3,r2,80d600 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  80d5f8:	e0bff717 	ldw	r2,-36(fp)
  80d5fc:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80d600:	e0fffc17 	ldw	r3,-16(fp)
  80d604:	e0bff517 	ldw	r2,-44(fp)
  80d608:	108018e4 	muli	r2,r2,99
  80d60c:	1885883a 	add	r2,r3,r2
  80d610:	10802484 	addi	r2,r2,146
  80d614:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d618:	e0bff517 	ldw	r2,-44(fp)
  80d61c:	10800044 	addi	r2,r2,1
  80d620:	e0bff515 	stw	r2,-44(fp)
  80d624:	e0bff517 	ldw	r2,-44(fp)
  80d628:	10800090 	cmplti	r2,r2,2
  80d62c:	103fc61e 	bne	r2,zero,80d548 <__alt_mem_onchip_mem+0xff805548>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80d630:	e0bff617 	ldw	r2,-40(fp)
  80d634:	10800448 	cmpgei	r2,r2,17
  80d638:	1000031e 	bne	r2,zero,80d648 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  80d63c:	e0bffc17 	ldw	r2,-16(fp)
  80d640:	10000985 	stb	zero,38(r2)
  80d644:	00002e06 	br	80d700 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  80d648:	e0bff617 	ldw	r2,-40(fp)
  80d64c:	1085883a 	add	r2,r2,r2
  80d650:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  80d654:	e0bff617 	ldw	r2,-40(fp)
  80d658:	1007883a 	mov	r3,r2
  80d65c:	e0bffc17 	ldw	r2,-16(fp)
  80d660:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d664:	e03ff515 	stw	zero,-44(fp)
  80d668:	00002206 	br	80d6f4 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80d66c:	e0fffc17 	ldw	r3,-16(fp)
  80d670:	e0bff517 	ldw	r2,-44(fp)
  80d674:	108018e4 	muli	r2,r2,99
  80d678:	1885883a 	add	r2,r3,r2
  80d67c:	10802444 	addi	r2,r2,145
  80d680:	10800003 	ldbu	r2,0(r2)
  80d684:	10803fcc 	andi	r2,r2,255
  80d688:	1080201c 	xori	r2,r2,128
  80d68c:	10bfe004 	addi	r2,r2,-128
  80d690:	10800450 	cmplti	r2,r2,17
  80d694:	1000141e 	bne	r2,zero,80d6e8 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80d698:	e0fffc17 	ldw	r3,-16(fp)
  80d69c:	e0bff517 	ldw	r2,-44(fp)
  80d6a0:	108018e4 	muli	r2,r2,99
  80d6a4:	1885883a 	add	r2,r3,r2
  80d6a8:	10802444 	addi	r2,r2,145
  80d6ac:	10800003 	ldbu	r2,0(r2)
  80d6b0:	10803fcc 	andi	r2,r2,255
  80d6b4:	1080201c 	xori	r2,r2,128
  80d6b8:	10bfe004 	addi	r2,r2,-128
  80d6bc:	1004923a 	slli	r2,r2,8
  80d6c0:	e17ff617 	ldw	r5,-40(fp)
  80d6c4:	1009883a 	mov	r4,r2
  80d6c8:	080adbc0 	call	80adbc <__divsi3>
  80d6cc:	1009883a 	mov	r4,r2
  80d6d0:	e0fffc17 	ldw	r3,-16(fp)
  80d6d4:	e0bff517 	ldw	r2,-44(fp)
  80d6d8:	108018e4 	muli	r2,r2,99
  80d6dc:	1885883a 	add	r2,r3,r2
  80d6e0:	10802484 	addi	r2,r2,146
  80d6e4:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d6e8:	e0bff517 	ldw	r2,-44(fp)
  80d6ec:	10800044 	addi	r2,r2,1
  80d6f0:	e0bff515 	stw	r2,-44(fp)
  80d6f4:	e0bff517 	ldw	r2,-44(fp)
  80d6f8:	10800090 	cmplti	r2,r2,2
  80d6fc:	103fdb1e 	bne	r2,zero,80d66c <__alt_mem_onchip_mem+0xff80566c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80d700:	e0bffc17 	ldw	r2,-16(fp)
  80d704:	10800943 	ldbu	r2,37(r2)
  80d708:	10803fcc 	andi	r2,r2,255
  80d70c:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  80d710:	e13ffc17 	ldw	r4,-16(fp)
  80d714:	080cd240 	call	80cd24 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80d718:	e0bffc17 	ldw	r2,-16(fp)
  80d71c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80d720:	e0bffc17 	ldw	r2,-16(fp)
  80d724:	10800943 	ldbu	r2,37(r2)
  80d728:	10c03fcc 	andi	r3,r2,255
  80d72c:	e0bffb17 	ldw	r2,-20(fp)
  80d730:	18800426 	beq	r3,r2,80d744 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80d734:	e0bffc17 	ldw	r2,-16(fp)
  80d738:	00c00044 	movi	r3,1
  80d73c:	10c009c5 	stb	r3,39(r2)
  }
  80d740:	003fef06 	br	80d700 <__alt_mem_onchip_mem+0xff805700>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  80d744:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80d748:	e0bffe17 	ldw	r2,-8(fp)
}
  80d74c:	e037883a 	mov	sp,fp
  80d750:	dfc00117 	ldw	ra,4(sp)
  80d754:	df000017 	ldw	fp,0(sp)
  80d758:	dec00204 	addi	sp,sp,8
  80d75c:	f800283a 	ret

0080d760 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80d760:	defffc04 	addi	sp,sp,-16
  80d764:	dfc00315 	stw	ra,12(sp)
  80d768:	df000215 	stw	fp,8(sp)
  80d76c:	df000204 	addi	fp,sp,8
  80d770:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80d774:	e0bfff17 	ldw	r2,-4(fp)
  80d778:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80d77c:	e0bffe17 	ldw	r2,-8(fp)
  80d780:	10800943 	ldbu	r2,37(r2)
  80d784:	10803fcc 	andi	r2,r2,255
  80d788:	10c00044 	addi	r3,r2,1
  80d78c:	e0bffe17 	ldw	r2,-8(fp)
  80d790:	10800983 	ldbu	r2,38(r2)
  80d794:	10803fcc 	andi	r2,r2,255
  80d798:	18800316 	blt	r3,r2,80d7a8 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  80d79c:	e0bffe17 	ldw	r2,-8(fp)
  80d7a0:	10000945 	stb	zero,37(r2)
  80d7a4:	00000606 	br	80d7c0 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80d7a8:	e0bffe17 	ldw	r2,-8(fp)
  80d7ac:	10800943 	ldbu	r2,37(r2)
  80d7b0:	10800044 	addi	r2,r2,1
  80d7b4:	1007883a 	mov	r3,r2
  80d7b8:	e0bffe17 	ldw	r2,-8(fp)
  80d7bc:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80d7c0:	e0bffe17 	ldw	r2,-8(fp)
  80d7c4:	10800983 	ldbu	r2,38(r2)
  80d7c8:	10803fcc 	andi	r2,r2,255
  80d7cc:	10000826 	beq	r2,zero,80d7f0 <alt_lcd_16207_timeout+0x90>
  80d7d0:	e0bffe17 	ldw	r2,-8(fp)
  80d7d4:	108009c3 	ldbu	r2,39(r2)
  80d7d8:	10803fcc 	andi	r2,r2,255
  80d7dc:	1080201c 	xori	r2,r2,128
  80d7e0:	10bfe004 	addi	r2,r2,-128
  80d7e4:	1000021e 	bne	r2,zero,80d7f0 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  80d7e8:	e13ffe17 	ldw	r4,-8(fp)
  80d7ec:	080cd240 	call	80cd24 <lcd_repaint_screen>

  return sp->period;
  80d7f0:	e0bffe17 	ldw	r2,-8(fp)
  80d7f4:	10800717 	ldw	r2,28(r2)
}
  80d7f8:	e037883a 	mov	sp,fp
  80d7fc:	dfc00117 	ldw	ra,4(sp)
  80d800:	df000017 	ldw	fp,0(sp)
  80d804:	dec00204 	addi	sp,sp,8
  80d808:	f800283a 	ret

0080d80c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80d80c:	defffc04 	addi	sp,sp,-16
  80d810:	dfc00315 	stw	ra,12(sp)
  80d814:	df000215 	stw	fp,8(sp)
  80d818:	df000204 	addi	fp,sp,8
  80d81c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80d820:	e0bfff17 	ldw	r2,-4(fp)
  80d824:	10800017 	ldw	r2,0(r2)
  80d828:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80d82c:	e0bfff17 	ldw	r2,-4(fp)
  80d830:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80d834:	010ea604 	movi	r4,15000
  80d838:	080eba40 	call	80eba4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80d83c:	e0bffe17 	ldw	r2,-8(fp)
  80d840:	00c00c04 	movi	r3,48
  80d844:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80d848:	01040104 	movi	r4,4100
  80d84c:	080eba40 	call	80eba4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80d850:	e0bffe17 	ldw	r2,-8(fp)
  80d854:	00c00c04 	movi	r3,48
  80d858:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80d85c:	0100fa04 	movi	r4,1000
  80d860:	080eba40 	call	80eba4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80d864:	e0bffe17 	ldw	r2,-8(fp)
  80d868:	00c00c04 	movi	r3,48
  80d86c:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80d870:	01400e04 	movi	r5,56
  80d874:	e13fff17 	ldw	r4,-4(fp)
  80d878:	080cac40 	call	80cac4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80d87c:	01400204 	movi	r5,8
  80d880:	e13fff17 	ldw	r4,-4(fp)
  80d884:	080cac40 	call	80cac4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80d888:	e13fff17 	ldw	r4,-4(fp)
  80d88c:	080cc540 	call	80cc54 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80d890:	01400184 	movi	r5,6
  80d894:	e13fff17 	ldw	r4,-4(fp)
  80d898:	080cac40 	call	80cac4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80d89c:	01400304 	movi	r5,12
  80d8a0:	e13fff17 	ldw	r4,-4(fp)
  80d8a4:	080cac40 	call	80cac4 <lcd_write_command>

  sp->esccount = -1;
  80d8a8:	e0bfff17 	ldw	r2,-4(fp)
  80d8ac:	00ffffc4 	movi	r3,-1
  80d8b0:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  80d8b4:	e0bfff17 	ldw	r2,-4(fp)
  80d8b8:	10800a04 	addi	r2,r2,40
  80d8bc:	01800204 	movi	r6,8
  80d8c0:	000b883a 	mov	r5,zero
  80d8c4:	1009883a 	mov	r4,r2
  80d8c8:	08088d00 	call	8088d0 <memset>

  sp->scrollpos = 0;
  80d8cc:	e0bfff17 	ldw	r2,-4(fp)
  80d8d0:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80d8d4:	e0bfff17 	ldw	r2,-4(fp)
  80d8d8:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80d8dc:	e0bfff17 	ldw	r2,-4(fp)
  80d8e0:	100009c5 	stb	zero,39(r2)
  80d8e4:	d0a73117 	ldw	r2,-25404(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80d8e8:	01400284 	movi	r5,10
  80d8ec:	1009883a 	mov	r4,r2
  80d8f0:	080aeb40 	call	80aeb4 <__udivsi3>
  80d8f4:	1007883a 	mov	r3,r2
  80d8f8:	e0bfff17 	ldw	r2,-4(fp)
  80d8fc:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80d900:	e0bfff17 	ldw	r2,-4(fp)
  80d904:	10c00104 	addi	r3,r2,4
  80d908:	e0bfff17 	ldw	r2,-4(fp)
  80d90c:	10800717 	ldw	r2,28(r2)
  80d910:	e1ffff17 	ldw	r7,-4(fp)
  80d914:	01802074 	movhi	r6,129
  80d918:	31b5d804 	addi	r6,r6,-10400
  80d91c:	100b883a 	mov	r5,r2
  80d920:	1809883a 	mov	r4,r3
  80d924:	080af700 	call	80af70 <alt_alarm_start>
}
  80d928:	0001883a 	nop
  80d92c:	e037883a 	mov	sp,fp
  80d930:	dfc00117 	ldw	ra,4(sp)
  80d934:	df000017 	ldw	fp,0(sp)
  80d938:	dec00204 	addi	sp,sp,8
  80d93c:	f800283a 	ret

0080d940 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80d940:	defffa04 	addi	sp,sp,-24
  80d944:	dfc00515 	stw	ra,20(sp)
  80d948:	df000415 	stw	fp,16(sp)
  80d94c:	df000404 	addi	fp,sp,16
  80d950:	e13ffd15 	stw	r4,-12(fp)
  80d954:	e17ffe15 	stw	r5,-8(fp)
  80d958:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80d95c:	e0bffd17 	ldw	r2,-12(fp)
  80d960:	10800017 	ldw	r2,0(r2)
  80d964:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80d968:	e0bffc17 	ldw	r2,-16(fp)
  80d96c:	10c00a04 	addi	r3,r2,40
  80d970:	e0bffd17 	ldw	r2,-12(fp)
  80d974:	10800217 	ldw	r2,8(r2)
  80d978:	100f883a 	mov	r7,r2
  80d97c:	e1bfff17 	ldw	r6,-4(fp)
  80d980:	e17ffe17 	ldw	r5,-8(fp)
  80d984:	1809883a 	mov	r4,r3
  80d988:	080d2880 	call	80d288 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80d98c:	e037883a 	mov	sp,fp
  80d990:	dfc00117 	ldw	ra,4(sp)
  80d994:	df000017 	ldw	fp,0(sp)
  80d998:	dec00204 	addi	sp,sp,8
  80d99c:	f800283a 	ret

0080d9a0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80d9a0:	defffa04 	addi	sp,sp,-24
  80d9a4:	dfc00515 	stw	ra,20(sp)
  80d9a8:	df000415 	stw	fp,16(sp)
  80d9ac:	df000404 	addi	fp,sp,16
  80d9b0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80d9b4:	0007883a 	mov	r3,zero
  80d9b8:	e0bfff17 	ldw	r2,-4(fp)
  80d9bc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80d9c0:	e0bfff17 	ldw	r2,-4(fp)
  80d9c4:	10800104 	addi	r2,r2,4
  80d9c8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d9cc:	0005303a 	rdctl	r2,status
  80d9d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d9d4:	e0fffd17 	ldw	r3,-12(fp)
  80d9d8:	00bfff84 	movi	r2,-2
  80d9dc:	1884703a 	and	r2,r3,r2
  80d9e0:	1001703a 	wrctl	status,r2
  
  return context;
  80d9e4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80d9e8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80d9ec:	080bd1c0 	call	80bd1c <alt_tick>
  80d9f0:	e0bffc17 	ldw	r2,-16(fp)
  80d9f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d9f8:	e0bffe17 	ldw	r2,-8(fp)
  80d9fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80da00:	0001883a 	nop
  80da04:	e037883a 	mov	sp,fp
  80da08:	dfc00117 	ldw	ra,4(sp)
  80da0c:	df000017 	ldw	fp,0(sp)
  80da10:	dec00204 	addi	sp,sp,8
  80da14:	f800283a 	ret

0080da18 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80da18:	defff804 	addi	sp,sp,-32
  80da1c:	dfc00715 	stw	ra,28(sp)
  80da20:	df000615 	stw	fp,24(sp)
  80da24:	df000604 	addi	fp,sp,24
  80da28:	e13ffc15 	stw	r4,-16(fp)
  80da2c:	e17ffd15 	stw	r5,-12(fp)
  80da30:	e1bffe15 	stw	r6,-8(fp)
  80da34:	e1ffff15 	stw	r7,-4(fp)
  80da38:	e0bfff17 	ldw	r2,-4(fp)
  80da3c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80da40:	d0a73117 	ldw	r2,-25404(gp)
  80da44:	1000021e 	bne	r2,zero,80da50 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80da48:	e0bffb17 	ldw	r2,-20(fp)
  80da4c:	d0a73115 	stw	r2,-25404(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80da50:	e0bffc17 	ldw	r2,-16(fp)
  80da54:	10800104 	addi	r2,r2,4
  80da58:	00c001c4 	movi	r3,7
  80da5c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80da60:	d8000015 	stw	zero,0(sp)
  80da64:	e1fffc17 	ldw	r7,-16(fp)
  80da68:	01802074 	movhi	r6,129
  80da6c:	31b66804 	addi	r6,r6,-9824
  80da70:	e17ffe17 	ldw	r5,-8(fp)
  80da74:	e13ffd17 	ldw	r4,-12(fp)
  80da78:	080e7c40 	call	80e7c4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80da7c:	0001883a 	nop
  80da80:	e037883a 	mov	sp,fp
  80da84:	dfc00117 	ldw	ra,4(sp)
  80da88:	df000017 	ldw	fp,0(sp)
  80da8c:	dec00204 	addi	sp,sp,8
  80da90:	f800283a 	ret

0080da94 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80da94:	defffa04 	addi	sp,sp,-24
  80da98:	dfc00515 	stw	ra,20(sp)
  80da9c:	df000415 	stw	fp,16(sp)
  80daa0:	df000404 	addi	fp,sp,16
  80daa4:	e13ffd15 	stw	r4,-12(fp)
  80daa8:	e17ffe15 	stw	r5,-8(fp)
  80daac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80dab0:	e0bffd17 	ldw	r2,-12(fp)
  80dab4:	10800017 	ldw	r2,0(r2)
  80dab8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80dabc:	e0bffc17 	ldw	r2,-16(fp)
  80dac0:	10c00a04 	addi	r3,r2,40
  80dac4:	e0bffd17 	ldw	r2,-12(fp)
  80dac8:	10800217 	ldw	r2,8(r2)
  80dacc:	100f883a 	mov	r7,r2
  80dad0:	e1bfff17 	ldw	r6,-4(fp)
  80dad4:	e17ffe17 	ldw	r5,-8(fp)
  80dad8:	1809883a 	mov	r4,r3
  80dadc:	080dfa80 	call	80dfa8 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80dae0:	e037883a 	mov	sp,fp
  80dae4:	dfc00117 	ldw	ra,4(sp)
  80dae8:	df000017 	ldw	fp,0(sp)
  80daec:	dec00204 	addi	sp,sp,8
  80daf0:	f800283a 	ret

0080daf4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80daf4:	defffa04 	addi	sp,sp,-24
  80daf8:	dfc00515 	stw	ra,20(sp)
  80dafc:	df000415 	stw	fp,16(sp)
  80db00:	df000404 	addi	fp,sp,16
  80db04:	e13ffd15 	stw	r4,-12(fp)
  80db08:	e17ffe15 	stw	r5,-8(fp)
  80db0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80db10:	e0bffd17 	ldw	r2,-12(fp)
  80db14:	10800017 	ldw	r2,0(r2)
  80db18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80db1c:	e0bffc17 	ldw	r2,-16(fp)
  80db20:	10c00a04 	addi	r3,r2,40
  80db24:	e0bffd17 	ldw	r2,-12(fp)
  80db28:	10800217 	ldw	r2,8(r2)
  80db2c:	100f883a 	mov	r7,r2
  80db30:	e1bfff17 	ldw	r6,-4(fp)
  80db34:	e17ffe17 	ldw	r5,-8(fp)
  80db38:	1809883a 	mov	r4,r3
  80db3c:	080e1c00 	call	80e1c0 <altera_avalon_uart_write>
      fd->fd_flags);
}
  80db40:	e037883a 	mov	sp,fp
  80db44:	dfc00117 	ldw	ra,4(sp)
  80db48:	df000017 	ldw	fp,0(sp)
  80db4c:	dec00204 	addi	sp,sp,8
  80db50:	f800283a 	ret

0080db54 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80db54:	defffc04 	addi	sp,sp,-16
  80db58:	dfc00315 	stw	ra,12(sp)
  80db5c:	df000215 	stw	fp,8(sp)
  80db60:	df000204 	addi	fp,sp,8
  80db64:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80db68:	e0bfff17 	ldw	r2,-4(fp)
  80db6c:	10800017 	ldw	r2,0(r2)
  80db70:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80db74:	e0bffe17 	ldw	r2,-8(fp)
  80db78:	10c00a04 	addi	r3,r2,40
  80db7c:	e0bfff17 	ldw	r2,-4(fp)
  80db80:	10800217 	ldw	r2,8(r2)
  80db84:	100b883a 	mov	r5,r2
  80db88:	1809883a 	mov	r4,r3
  80db8c:	080df180 	call	80df18 <altera_avalon_uart_close>
}
  80db90:	e037883a 	mov	sp,fp
  80db94:	dfc00117 	ldw	ra,4(sp)
  80db98:	df000017 	ldw	fp,0(sp)
  80db9c:	dec00204 	addi	sp,sp,8
  80dba0:	f800283a 	ret

0080dba4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80dba4:	defff804 	addi	sp,sp,-32
  80dba8:	dfc00715 	stw	ra,28(sp)
  80dbac:	df000615 	stw	fp,24(sp)
  80dbb0:	df000604 	addi	fp,sp,24
  80dbb4:	e13ffd15 	stw	r4,-12(fp)
  80dbb8:	e17ffe15 	stw	r5,-8(fp)
  80dbbc:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  80dbc0:	e0bffd17 	ldw	r2,-12(fp)
  80dbc4:	10800017 	ldw	r2,0(r2)
  80dbc8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80dbcc:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80dbd0:	1000041e 	bne	r2,zero,80dbe4 <altera_avalon_uart_init+0x40>
  80dbd4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80dbd8:	1000021e 	bne	r2,zero,80dbe4 <altera_avalon_uart_init+0x40>
  80dbdc:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80dbe0:	10000226 	beq	r2,zero,80dbec <altera_avalon_uart_init+0x48>
  80dbe4:	00800044 	movi	r2,1
  80dbe8:	00000106 	br	80dbf0 <altera_avalon_uart_init+0x4c>
  80dbec:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80dbf0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80dbf4:	e0bffc17 	ldw	r2,-16(fp)
  80dbf8:	10000f1e 	bne	r2,zero,80dc38 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80dbfc:	e0bffd17 	ldw	r2,-12(fp)
  80dc00:	00c32004 	movi	r3,3200
  80dc04:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80dc08:	e0bffb17 	ldw	r2,-20(fp)
  80dc0c:	10800304 	addi	r2,r2,12
  80dc10:	e0fffd17 	ldw	r3,-12(fp)
  80dc14:	18c00117 	ldw	r3,4(r3)
  80dc18:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80dc1c:	d8000015 	stw	zero,0(sp)
  80dc20:	e1fffd17 	ldw	r7,-12(fp)
  80dc24:	01802074 	movhi	r6,129
  80dc28:	31b71404 	addi	r6,r6,-9136
  80dc2c:	e17fff17 	ldw	r5,-4(fp)
  80dc30:	e13ffe17 	ldw	r4,-8(fp)
  80dc34:	080e7c40 	call	80e7c4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80dc38:	0001883a 	nop
  80dc3c:	e037883a 	mov	sp,fp
  80dc40:	dfc00117 	ldw	ra,4(sp)
  80dc44:	df000017 	ldw	fp,0(sp)
  80dc48:	dec00204 	addi	sp,sp,8
  80dc4c:	f800283a 	ret

0080dc50 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80dc50:	defffa04 	addi	sp,sp,-24
  80dc54:	dfc00515 	stw	ra,20(sp)
  80dc58:	df000415 	stw	fp,16(sp)
  80dc5c:	df000404 	addi	fp,sp,16
  80dc60:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80dc64:	e0bfff17 	ldw	r2,-4(fp)
  80dc68:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  80dc6c:	e0bffc17 	ldw	r2,-16(fp)
  80dc70:	10800017 	ldw	r2,0(r2)
  80dc74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80dc78:	e0bffd17 	ldw	r2,-12(fp)
  80dc7c:	10800204 	addi	r2,r2,8
  80dc80:	10800037 	ldwio	r2,0(r2)
  80dc84:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80dc88:	e0bffd17 	ldw	r2,-12(fp)
  80dc8c:	10800204 	addi	r2,r2,8
  80dc90:	0007883a 	mov	r3,zero
  80dc94:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80dc98:	e0bffd17 	ldw	r2,-12(fp)
  80dc9c:	10800204 	addi	r2,r2,8
  80dca0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80dca4:	e0bffe17 	ldw	r2,-8(fp)
  80dca8:	1080200c 	andi	r2,r2,128
  80dcac:	10000326 	beq	r2,zero,80dcbc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80dcb0:	e17ffe17 	ldw	r5,-8(fp)
  80dcb4:	e13ffc17 	ldw	r4,-16(fp)
  80dcb8:	080dcec0 	call	80dcec <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80dcbc:	e0bffe17 	ldw	r2,-8(fp)
  80dcc0:	1081100c 	andi	r2,r2,1088
  80dcc4:	10000326 	beq	r2,zero,80dcd4 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80dcc8:	e17ffe17 	ldw	r5,-8(fp)
  80dccc:	e13ffc17 	ldw	r4,-16(fp)
  80dcd0:	080ddd00 	call	80ddd0 <altera_avalon_uart_txirq>
  }
  

}
  80dcd4:	0001883a 	nop
  80dcd8:	e037883a 	mov	sp,fp
  80dcdc:	dfc00117 	ldw	ra,4(sp)
  80dce0:	df000017 	ldw	fp,0(sp)
  80dce4:	dec00204 	addi	sp,sp,8
  80dce8:	f800283a 	ret

0080dcec <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80dcec:	defffc04 	addi	sp,sp,-16
  80dcf0:	df000315 	stw	fp,12(sp)
  80dcf4:	df000304 	addi	fp,sp,12
  80dcf8:	e13ffe15 	stw	r4,-8(fp)
  80dcfc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80dd00:	e0bfff17 	ldw	r2,-4(fp)
  80dd04:	108000cc 	andi	r2,r2,3
  80dd08:	10002c1e 	bne	r2,zero,80ddbc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80dd0c:	e0bffe17 	ldw	r2,-8(fp)
  80dd10:	10800317 	ldw	r2,12(r2)
  80dd14:	e0bffe17 	ldw	r2,-8(fp)
  80dd18:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80dd1c:	e0bffe17 	ldw	r2,-8(fp)
  80dd20:	10800317 	ldw	r2,12(r2)
  80dd24:	10800044 	addi	r2,r2,1
  80dd28:	10800fcc 	andi	r2,r2,63
  80dd2c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80dd30:	e0bffe17 	ldw	r2,-8(fp)
  80dd34:	10800317 	ldw	r2,12(r2)
  80dd38:	e0fffe17 	ldw	r3,-8(fp)
  80dd3c:	18c00017 	ldw	r3,0(r3)
  80dd40:	18c00037 	ldwio	r3,0(r3)
  80dd44:	1809883a 	mov	r4,r3
  80dd48:	e0fffe17 	ldw	r3,-8(fp)
  80dd4c:	1885883a 	add	r2,r3,r2
  80dd50:	10800704 	addi	r2,r2,28
  80dd54:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  80dd58:	e0bffe17 	ldw	r2,-8(fp)
  80dd5c:	e0fffd17 	ldw	r3,-12(fp)
  80dd60:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80dd64:	e0bffe17 	ldw	r2,-8(fp)
  80dd68:	10800317 	ldw	r2,12(r2)
  80dd6c:	10800044 	addi	r2,r2,1
  80dd70:	10800fcc 	andi	r2,r2,63
  80dd74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80dd78:	e0bffe17 	ldw	r2,-8(fp)
  80dd7c:	10c00217 	ldw	r3,8(r2)
  80dd80:	e0bffd17 	ldw	r2,-12(fp)
  80dd84:	18800e1e 	bne	r3,r2,80ddc0 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80dd88:	e0bffe17 	ldw	r2,-8(fp)
  80dd8c:	10c00117 	ldw	r3,4(r2)
  80dd90:	00bfdfc4 	movi	r2,-129
  80dd94:	1886703a 	and	r3,r3,r2
  80dd98:	e0bffe17 	ldw	r2,-8(fp)
  80dd9c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80dda0:	e0bffe17 	ldw	r2,-8(fp)
  80dda4:	10800017 	ldw	r2,0(r2)
  80dda8:	10800304 	addi	r2,r2,12
  80ddac:	e0fffe17 	ldw	r3,-8(fp)
  80ddb0:	18c00117 	ldw	r3,4(r3)
  80ddb4:	10c00035 	stwio	r3,0(r2)
  80ddb8:	00000106 	br	80ddc0 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  80ddbc:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  80ddc0:	e037883a 	mov	sp,fp
  80ddc4:	df000017 	ldw	fp,0(sp)
  80ddc8:	dec00104 	addi	sp,sp,4
  80ddcc:	f800283a 	ret

0080ddd0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80ddd0:	defffb04 	addi	sp,sp,-20
  80ddd4:	df000415 	stw	fp,16(sp)
  80ddd8:	df000404 	addi	fp,sp,16
  80dddc:	e13ffc15 	stw	r4,-16(fp)
  80dde0:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80dde4:	e0bffc17 	ldw	r2,-16(fp)
  80dde8:	10c00417 	ldw	r3,16(r2)
  80ddec:	e0bffc17 	ldw	r2,-16(fp)
  80ddf0:	10800517 	ldw	r2,20(r2)
  80ddf4:	18803226 	beq	r3,r2,80dec0 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80ddf8:	e0bffc17 	ldw	r2,-16(fp)
  80ddfc:	10800617 	ldw	r2,24(r2)
  80de00:	1080008c 	andi	r2,r2,2
  80de04:	10000326 	beq	r2,zero,80de14 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80de08:	e0bffd17 	ldw	r2,-12(fp)
  80de0c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80de10:	10001d26 	beq	r2,zero,80de88 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80de14:	e0bffc17 	ldw	r2,-16(fp)
  80de18:	10800417 	ldw	r2,16(r2)
  80de1c:	e0bffc17 	ldw	r2,-16(fp)
  80de20:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80de24:	e0bffc17 	ldw	r2,-16(fp)
  80de28:	10800017 	ldw	r2,0(r2)
  80de2c:	10800104 	addi	r2,r2,4
  80de30:	e0fffc17 	ldw	r3,-16(fp)
  80de34:	18c00417 	ldw	r3,16(r3)
  80de38:	e13ffc17 	ldw	r4,-16(fp)
  80de3c:	20c7883a 	add	r3,r4,r3
  80de40:	18c01704 	addi	r3,r3,92
  80de44:	18c00003 	ldbu	r3,0(r3)
  80de48:	18c03fcc 	andi	r3,r3,255
  80de4c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80de50:	e0bffc17 	ldw	r2,-16(fp)
  80de54:	10800417 	ldw	r2,16(r2)
  80de58:	10800044 	addi	r2,r2,1
  80de5c:	e0fffc17 	ldw	r3,-16(fp)
  80de60:	18800415 	stw	r2,16(r3)
  80de64:	10c00fcc 	andi	r3,r2,63
  80de68:	e0bffc17 	ldw	r2,-16(fp)
  80de6c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80de70:	e0bffc17 	ldw	r2,-16(fp)
  80de74:	10800117 	ldw	r2,4(r2)
  80de78:	10c01014 	ori	r3,r2,64
  80de7c:	e0bffc17 	ldw	r2,-16(fp)
  80de80:	10c00115 	stw	r3,4(r2)
  80de84:	00000e06 	br	80dec0 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80de88:	e0bffc17 	ldw	r2,-16(fp)
  80de8c:	10800017 	ldw	r2,0(r2)
  80de90:	10800204 	addi	r2,r2,8
  80de94:	10800037 	ldwio	r2,0(r2)
  80de98:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80de9c:	e0bffd17 	ldw	r2,-12(fp)
  80dea0:	1082000c 	andi	r2,r2,2048
  80dea4:	1000061e 	bne	r2,zero,80dec0 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80dea8:	e0bffc17 	ldw	r2,-16(fp)
  80deac:	10c00117 	ldw	r3,4(r2)
  80deb0:	00bfefc4 	movi	r2,-65
  80deb4:	1886703a 	and	r3,r3,r2
  80deb8:	e0bffc17 	ldw	r2,-16(fp)
  80debc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80dec0:	e0bffc17 	ldw	r2,-16(fp)
  80dec4:	10c00417 	ldw	r3,16(r2)
  80dec8:	e0bffc17 	ldw	r2,-16(fp)
  80decc:	10800517 	ldw	r2,20(r2)
  80ded0:	1880061e 	bne	r3,r2,80deec <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80ded4:	e0bffc17 	ldw	r2,-16(fp)
  80ded8:	10c00117 	ldw	r3,4(r2)
  80dedc:	00beefc4 	movi	r2,-1089
  80dee0:	1886703a 	and	r3,r3,r2
  80dee4:	e0bffc17 	ldw	r2,-16(fp)
  80dee8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80deec:	e0bffc17 	ldw	r2,-16(fp)
  80def0:	10800017 	ldw	r2,0(r2)
  80def4:	10800304 	addi	r2,r2,12
  80def8:	e0fffc17 	ldw	r3,-16(fp)
  80defc:	18c00117 	ldw	r3,4(r3)
  80df00:	10c00035 	stwio	r3,0(r2)
}
  80df04:	0001883a 	nop
  80df08:	e037883a 	mov	sp,fp
  80df0c:	df000017 	ldw	fp,0(sp)
  80df10:	dec00104 	addi	sp,sp,4
  80df14:	f800283a 	ret

0080df18 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80df18:	defffd04 	addi	sp,sp,-12
  80df1c:	df000215 	stw	fp,8(sp)
  80df20:	df000204 	addi	fp,sp,8
  80df24:	e13ffe15 	stw	r4,-8(fp)
  80df28:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80df2c:	00000506 	br	80df44 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80df30:	e0bfff17 	ldw	r2,-4(fp)
  80df34:	1090000c 	andi	r2,r2,16384
  80df38:	10000226 	beq	r2,zero,80df44 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80df3c:	00bffd44 	movi	r2,-11
  80df40:	00000606 	br	80df5c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80df44:	e0bffe17 	ldw	r2,-8(fp)
  80df48:	10c00417 	ldw	r3,16(r2)
  80df4c:	e0bffe17 	ldw	r2,-8(fp)
  80df50:	10800517 	ldw	r2,20(r2)
  80df54:	18bff61e 	bne	r3,r2,80df30 <__alt_mem_onchip_mem+0xff805f30>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80df58:	0005883a 	mov	r2,zero
}
  80df5c:	e037883a 	mov	sp,fp
  80df60:	df000017 	ldw	fp,0(sp)
  80df64:	dec00104 	addi	sp,sp,4
  80df68:	f800283a 	ret

0080df6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80df6c:	defffe04 	addi	sp,sp,-8
  80df70:	dfc00115 	stw	ra,4(sp)
  80df74:	df000015 	stw	fp,0(sp)
  80df78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80df7c:	d0a00917 	ldw	r2,-32732(gp)
  80df80:	10000326 	beq	r2,zero,80df90 <alt_get_errno+0x24>
  80df84:	d0a00917 	ldw	r2,-32732(gp)
  80df88:	103ee83a 	callr	r2
  80df8c:	00000106 	br	80df94 <alt_get_errno+0x28>
  80df90:	d0a72904 	addi	r2,gp,-25436
}
  80df94:	e037883a 	mov	sp,fp
  80df98:	dfc00117 	ldw	ra,4(sp)
  80df9c:	df000017 	ldw	fp,0(sp)
  80dfa0:	dec00204 	addi	sp,sp,8
  80dfa4:	f800283a 	ret

0080dfa8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80dfa8:	defff204 	addi	sp,sp,-56
  80dfac:	dfc00d15 	stw	ra,52(sp)
  80dfb0:	df000c15 	stw	fp,48(sp)
  80dfb4:	df000c04 	addi	fp,sp,48
  80dfb8:	e13ffc15 	stw	r4,-16(fp)
  80dfbc:	e17ffd15 	stw	r5,-12(fp)
  80dfc0:	e1bffe15 	stw	r6,-8(fp)
  80dfc4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  80dfc8:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  80dfcc:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80dfd0:	e0bfff17 	ldw	r2,-4(fp)
  80dfd4:	1090000c 	andi	r2,r2,16384
  80dfd8:	1005003a 	cmpeq	r2,r2,zero
  80dfdc:	10803fcc 	andi	r2,r2,255
  80dfe0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80dfe4:	00001306 	br	80e034 <altera_avalon_uart_read+0x8c>
    {
      count++;
  80dfe8:	e0bff517 	ldw	r2,-44(fp)
  80dfec:	10800044 	addi	r2,r2,1
  80dff0:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80dff4:	e0bffd17 	ldw	r2,-12(fp)
  80dff8:	10c00044 	addi	r3,r2,1
  80dffc:	e0fffd15 	stw	r3,-12(fp)
  80e000:	e0fffc17 	ldw	r3,-16(fp)
  80e004:	18c00217 	ldw	r3,8(r3)
  80e008:	e13ffc17 	ldw	r4,-16(fp)
  80e00c:	20c7883a 	add	r3,r4,r3
  80e010:	18c00704 	addi	r3,r3,28
  80e014:	18c00003 	ldbu	r3,0(r3)
  80e018:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  80e01c:	e0bffc17 	ldw	r2,-16(fp)
  80e020:	10800217 	ldw	r2,8(r2)
  80e024:	10800044 	addi	r2,r2,1
  80e028:	10c00fcc 	andi	r3,r2,63
  80e02c:	e0bffc17 	ldw	r2,-16(fp)
  80e030:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80e034:	e0fff517 	ldw	r3,-44(fp)
  80e038:	e0bffe17 	ldw	r2,-8(fp)
  80e03c:	1880050e 	bge	r3,r2,80e054 <altera_avalon_uart_read+0xac>
  80e040:	e0bffc17 	ldw	r2,-16(fp)
  80e044:	10c00217 	ldw	r3,8(r2)
  80e048:	e0bffc17 	ldw	r2,-16(fp)
  80e04c:	10800317 	ldw	r2,12(r2)
  80e050:	18bfe51e 	bne	r3,r2,80dfe8 <__alt_mem_onchip_mem+0xff805fe8>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80e054:	e0bff517 	ldw	r2,-44(fp)
  80e058:	1000251e 	bne	r2,zero,80e0f0 <altera_avalon_uart_read+0x148>
  80e05c:	e0bffc17 	ldw	r2,-16(fp)
  80e060:	10c00217 	ldw	r3,8(r2)
  80e064:	e0bffc17 	ldw	r2,-16(fp)
  80e068:	10800317 	ldw	r2,12(r2)
  80e06c:	1880201e 	bne	r3,r2,80e0f0 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  80e070:	e0bff617 	ldw	r2,-40(fp)
  80e074:	1000071e 	bne	r2,zero,80e094 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80e078:	080df6c0 	call	80df6c <alt_get_errno>
  80e07c:	1007883a 	mov	r3,r2
  80e080:	008002c4 	movi	r2,11
  80e084:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  80e088:	00800044 	movi	r2,1
  80e08c:	e0bff405 	stb	r2,-48(fp)
        break;
  80e090:	00001b06 	br	80e100 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e094:	0005303a 	rdctl	r2,status
  80e098:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e09c:	e0fff917 	ldw	r3,-28(fp)
  80e0a0:	00bfff84 	movi	r2,-2
  80e0a4:	1884703a 	and	r2,r3,r2
  80e0a8:	1001703a 	wrctl	status,r2
  
  return context;
  80e0ac:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80e0b0:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80e0b4:	e0bffc17 	ldw	r2,-16(fp)
  80e0b8:	10800117 	ldw	r2,4(r2)
  80e0bc:	10c02014 	ori	r3,r2,128
  80e0c0:	e0bffc17 	ldw	r2,-16(fp)
  80e0c4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80e0c8:	e0bffc17 	ldw	r2,-16(fp)
  80e0cc:	10800017 	ldw	r2,0(r2)
  80e0d0:	10800304 	addi	r2,r2,12
  80e0d4:	e0fffc17 	ldw	r3,-16(fp)
  80e0d8:	18c00117 	ldw	r3,4(r3)
  80e0dc:	10c00035 	stwio	r3,0(r2)
  80e0e0:	e0bff817 	ldw	r2,-32(fp)
  80e0e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e0e8:	e0bffa17 	ldw	r2,-24(fp)
  80e0ec:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80e0f0:	e0bff517 	ldw	r2,-44(fp)
  80e0f4:	1000021e 	bne	r2,zero,80e100 <altera_avalon_uart_read+0x158>
  80e0f8:	e0bffe17 	ldw	r2,-8(fp)
  80e0fc:	103fcd1e 	bne	r2,zero,80e034 <__alt_mem_onchip_mem+0xff806034>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e100:	0005303a 	rdctl	r2,status
  80e104:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e108:	e0fffb17 	ldw	r3,-20(fp)
  80e10c:	00bfff84 	movi	r2,-2
  80e110:	1884703a 	and	r2,r3,r2
  80e114:	1001703a 	wrctl	status,r2
  
  return context;
  80e118:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80e11c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80e120:	e0bffc17 	ldw	r2,-16(fp)
  80e124:	10800117 	ldw	r2,4(r2)
  80e128:	10c02014 	ori	r3,r2,128
  80e12c:	e0bffc17 	ldw	r2,-16(fp)
  80e130:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80e134:	e0bffc17 	ldw	r2,-16(fp)
  80e138:	10800017 	ldw	r2,0(r2)
  80e13c:	10800304 	addi	r2,r2,12
  80e140:	e0fffc17 	ldw	r3,-16(fp)
  80e144:	18c00117 	ldw	r3,4(r3)
  80e148:	10c00035 	stwio	r3,0(r2)
  80e14c:	e0bff817 	ldw	r2,-32(fp)
  80e150:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e154:	e0bff717 	ldw	r2,-36(fp)
  80e158:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80e15c:	e0bff403 	ldbu	r2,-48(fp)
  80e160:	10000226 	beq	r2,zero,80e16c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  80e164:	00bffd44 	movi	r2,-11
  80e168:	00000106 	br	80e170 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  80e16c:	e0bff517 	ldw	r2,-44(fp)
  }
}
  80e170:	e037883a 	mov	sp,fp
  80e174:	dfc00117 	ldw	ra,4(sp)
  80e178:	df000017 	ldw	fp,0(sp)
  80e17c:	dec00204 	addi	sp,sp,8
  80e180:	f800283a 	ret

0080e184 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e184:	defffe04 	addi	sp,sp,-8
  80e188:	dfc00115 	stw	ra,4(sp)
  80e18c:	df000015 	stw	fp,0(sp)
  80e190:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e194:	d0a00917 	ldw	r2,-32732(gp)
  80e198:	10000326 	beq	r2,zero,80e1a8 <alt_get_errno+0x24>
  80e19c:	d0a00917 	ldw	r2,-32732(gp)
  80e1a0:	103ee83a 	callr	r2
  80e1a4:	00000106 	br	80e1ac <alt_get_errno+0x28>
  80e1a8:	d0a72904 	addi	r2,gp,-25436
}
  80e1ac:	e037883a 	mov	sp,fp
  80e1b0:	dfc00117 	ldw	ra,4(sp)
  80e1b4:	df000017 	ldw	fp,0(sp)
  80e1b8:	dec00204 	addi	sp,sp,8
  80e1bc:	f800283a 	ret

0080e1c0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80e1c0:	defff204 	addi	sp,sp,-56
  80e1c4:	dfc00d15 	stw	ra,52(sp)
  80e1c8:	df000c15 	stw	fp,48(sp)
  80e1cc:	df000c04 	addi	fp,sp,48
  80e1d0:	e13ffc15 	stw	r4,-16(fp)
  80e1d4:	e17ffd15 	stw	r5,-12(fp)
  80e1d8:	e1bffe15 	stw	r6,-8(fp)
  80e1dc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80e1e0:	e0bffe17 	ldw	r2,-8(fp)
  80e1e4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80e1e8:	e0bfff17 	ldw	r2,-4(fp)
  80e1ec:	1090000c 	andi	r2,r2,16384
  80e1f0:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80e1f4:	00003c06 	br	80e2e8 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80e1f8:	e0bffc17 	ldw	r2,-16(fp)
  80e1fc:	10800517 	ldw	r2,20(r2)
  80e200:	10800044 	addi	r2,r2,1
  80e204:	10800fcc 	andi	r2,r2,63
  80e208:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80e20c:	e0bffc17 	ldw	r2,-16(fp)
  80e210:	10c00417 	ldw	r3,16(r2)
  80e214:	e0bff717 	ldw	r2,-36(fp)
  80e218:	1880221e 	bne	r3,r2,80e2a4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  80e21c:	e0bff517 	ldw	r2,-44(fp)
  80e220:	10000526 	beq	r2,zero,80e238 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80e224:	080e1840 	call	80e184 <alt_get_errno>
  80e228:	1007883a 	mov	r3,r2
  80e22c:	008002c4 	movi	r2,11
  80e230:	18800015 	stw	r2,0(r3)
        break;
  80e234:	00002e06 	br	80e2f0 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e238:	0005303a 	rdctl	r2,status
  80e23c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e240:	e0fff917 	ldw	r3,-28(fp)
  80e244:	00bfff84 	movi	r2,-2
  80e248:	1884703a 	and	r2,r3,r2
  80e24c:	1001703a 	wrctl	status,r2
  
  return context;
  80e250:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80e254:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80e258:	e0bffc17 	ldw	r2,-16(fp)
  80e25c:	10800117 	ldw	r2,4(r2)
  80e260:	10c11014 	ori	r3,r2,1088
  80e264:	e0bffc17 	ldw	r2,-16(fp)
  80e268:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80e26c:	e0bffc17 	ldw	r2,-16(fp)
  80e270:	10800017 	ldw	r2,0(r2)
  80e274:	10800304 	addi	r2,r2,12
  80e278:	e0fffc17 	ldw	r3,-16(fp)
  80e27c:	18c00117 	ldw	r3,4(r3)
  80e280:	10c00035 	stwio	r3,0(r2)
  80e284:	e0bff817 	ldw	r2,-32(fp)
  80e288:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e28c:	e0bff617 	ldw	r2,-40(fp)
  80e290:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80e294:	e0bffc17 	ldw	r2,-16(fp)
  80e298:	10c00417 	ldw	r3,16(r2)
  80e29c:	e0bff717 	ldw	r2,-36(fp)
  80e2a0:	18bffc26 	beq	r3,r2,80e294 <__alt_mem_onchip_mem+0xff806294>
      }
    }

    count--;
  80e2a4:	e0bff417 	ldw	r2,-48(fp)
  80e2a8:	10bfffc4 	addi	r2,r2,-1
  80e2ac:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80e2b0:	e0bffc17 	ldw	r2,-16(fp)
  80e2b4:	10c00517 	ldw	r3,20(r2)
  80e2b8:	e0bffd17 	ldw	r2,-12(fp)
  80e2bc:	11000044 	addi	r4,r2,1
  80e2c0:	e13ffd15 	stw	r4,-12(fp)
  80e2c4:	10800003 	ldbu	r2,0(r2)
  80e2c8:	1009883a 	mov	r4,r2
  80e2cc:	e0bffc17 	ldw	r2,-16(fp)
  80e2d0:	10c5883a 	add	r2,r2,r3
  80e2d4:	10801704 	addi	r2,r2,92
  80e2d8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80e2dc:	e0bffc17 	ldw	r2,-16(fp)
  80e2e0:	e0fff717 	ldw	r3,-36(fp)
  80e2e4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80e2e8:	e0bff417 	ldw	r2,-48(fp)
  80e2ec:	103fc21e 	bne	r2,zero,80e1f8 <__alt_mem_onchip_mem+0xff8061f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e2f0:	0005303a 	rdctl	r2,status
  80e2f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e2f8:	e0fffb17 	ldw	r3,-20(fp)
  80e2fc:	00bfff84 	movi	r2,-2
  80e300:	1884703a 	and	r2,r3,r2
  80e304:	1001703a 	wrctl	status,r2
  
  return context;
  80e308:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80e30c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80e310:	e0bffc17 	ldw	r2,-16(fp)
  80e314:	10800117 	ldw	r2,4(r2)
  80e318:	10c11014 	ori	r3,r2,1088
  80e31c:	e0bffc17 	ldw	r2,-16(fp)
  80e320:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80e324:	e0bffc17 	ldw	r2,-16(fp)
  80e328:	10800017 	ldw	r2,0(r2)
  80e32c:	10800304 	addi	r2,r2,12
  80e330:	e0fffc17 	ldw	r3,-16(fp)
  80e334:	18c00117 	ldw	r3,4(r3)
  80e338:	10c00035 	stwio	r3,0(r2)
  80e33c:	e0bff817 	ldw	r2,-32(fp)
  80e340:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e344:	e0bffa17 	ldw	r2,-24(fp)
  80e348:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80e34c:	e0fffe17 	ldw	r3,-8(fp)
  80e350:	e0bff417 	ldw	r2,-48(fp)
  80e354:	1885c83a 	sub	r2,r3,r2
}
  80e358:	e037883a 	mov	sp,fp
  80e35c:	dfc00117 	ldw	ra,4(sp)
  80e360:	df000017 	ldw	fp,0(sp)
  80e364:	dec00204 	addi	sp,sp,8
  80e368:	f800283a 	ret

0080e36c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80e36c:	defffe04 	addi	sp,sp,-8
  80e370:	df000115 	stw	fp,4(sp)
  80e374:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80e378:	e03fff15 	stw	zero,-4(fp)
  80e37c:	00000506 	br	80e394 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80e380:	e0bfff17 	ldw	r2,-4(fp)
  80e384:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80e388:	e0bfff17 	ldw	r2,-4(fp)
  80e38c:	10800804 	addi	r2,r2,32
  80e390:	e0bfff15 	stw	r2,-4(fp)
  80e394:	e0bfff17 	ldw	r2,-4(fp)
  80e398:	10820030 	cmpltui	r2,r2,2048
  80e39c:	103ff81e 	bne	r2,zero,80e380 <__alt_mem_onchip_mem+0xff806380>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80e3a0:	0001883a 	nop
  80e3a4:	e037883a 	mov	sp,fp
  80e3a8:	df000017 	ldw	fp,0(sp)
  80e3ac:	dec00104 	addi	sp,sp,4
  80e3b0:	f800283a 	ret

0080e3b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e3b4:	defffe04 	addi	sp,sp,-8
  80e3b8:	dfc00115 	stw	ra,4(sp)
  80e3bc:	df000015 	stw	fp,0(sp)
  80e3c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e3c4:	d0a00917 	ldw	r2,-32732(gp)
  80e3c8:	10000326 	beq	r2,zero,80e3d8 <alt_get_errno+0x24>
  80e3cc:	d0a00917 	ldw	r2,-32732(gp)
  80e3d0:	103ee83a 	callr	r2
  80e3d4:	00000106 	br	80e3dc <alt_get_errno+0x28>
  80e3d8:	d0a72904 	addi	r2,gp,-25436
}
  80e3dc:	e037883a 	mov	sp,fp
  80e3e0:	dfc00117 	ldw	ra,4(sp)
  80e3e4:	df000017 	ldw	fp,0(sp)
  80e3e8:	dec00204 	addi	sp,sp,8
  80e3ec:	f800283a 	ret

0080e3f0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80e3f0:	defffa04 	addi	sp,sp,-24
  80e3f4:	dfc00515 	stw	ra,20(sp)
  80e3f8:	df000415 	stw	fp,16(sp)
  80e3fc:	df000404 	addi	fp,sp,16
  80e400:	e13ffe15 	stw	r4,-8(fp)
  80e404:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80e408:	e0bffe17 	ldw	r2,-8(fp)
  80e40c:	10000326 	beq	r2,zero,80e41c <alt_dev_llist_insert+0x2c>
  80e410:	e0bffe17 	ldw	r2,-8(fp)
  80e414:	10800217 	ldw	r2,8(r2)
  80e418:	1000061e 	bne	r2,zero,80e434 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80e41c:	080e3b40 	call	80e3b4 <alt_get_errno>
  80e420:	1007883a 	mov	r3,r2
  80e424:	00800584 	movi	r2,22
  80e428:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80e42c:	00bffa84 	movi	r2,-22
  80e430:	00001306 	br	80e480 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80e434:	e0bffe17 	ldw	r2,-8(fp)
  80e438:	e0ffff17 	ldw	r3,-4(fp)
  80e43c:	e0fffc15 	stw	r3,-16(fp)
  80e440:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80e444:	e0bffd17 	ldw	r2,-12(fp)
  80e448:	e0fffc17 	ldw	r3,-16(fp)
  80e44c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80e450:	e0bffc17 	ldw	r2,-16(fp)
  80e454:	10c00017 	ldw	r3,0(r2)
  80e458:	e0bffd17 	ldw	r2,-12(fp)
  80e45c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80e460:	e0bffc17 	ldw	r2,-16(fp)
  80e464:	10800017 	ldw	r2,0(r2)
  80e468:	e0fffd17 	ldw	r3,-12(fp)
  80e46c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80e470:	e0bffc17 	ldw	r2,-16(fp)
  80e474:	e0fffd17 	ldw	r3,-12(fp)
  80e478:	10c00015 	stw	r3,0(r2)

  return 0;  
  80e47c:	0005883a 	mov	r2,zero
}
  80e480:	e037883a 	mov	sp,fp
  80e484:	dfc00117 	ldw	ra,4(sp)
  80e488:	df000017 	ldw	fp,0(sp)
  80e48c:	dec00204 	addi	sp,sp,8
  80e490:	f800283a 	ret

0080e494 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80e494:	defffd04 	addi	sp,sp,-12
  80e498:	dfc00215 	stw	ra,8(sp)
  80e49c:	df000115 	stw	fp,4(sp)
  80e4a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80e4a4:	00802074 	movhi	r2,129
  80e4a8:	10bc8304 	addi	r2,r2,-3572
  80e4ac:	e0bfff15 	stw	r2,-4(fp)
  80e4b0:	00000606 	br	80e4cc <_do_ctors+0x38>
        (*ctor) (); 
  80e4b4:	e0bfff17 	ldw	r2,-4(fp)
  80e4b8:	10800017 	ldw	r2,0(r2)
  80e4bc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80e4c0:	e0bfff17 	ldw	r2,-4(fp)
  80e4c4:	10bfff04 	addi	r2,r2,-4
  80e4c8:	e0bfff15 	stw	r2,-4(fp)
  80e4cc:	e0ffff17 	ldw	r3,-4(fp)
  80e4d0:	00802074 	movhi	r2,129
  80e4d4:	10bc8404 	addi	r2,r2,-3568
  80e4d8:	18bff62e 	bgeu	r3,r2,80e4b4 <__alt_mem_onchip_mem+0xff8064b4>
        (*ctor) (); 
}
  80e4dc:	0001883a 	nop
  80e4e0:	e037883a 	mov	sp,fp
  80e4e4:	dfc00117 	ldw	ra,4(sp)
  80e4e8:	df000017 	ldw	fp,0(sp)
  80e4ec:	dec00204 	addi	sp,sp,8
  80e4f0:	f800283a 	ret

0080e4f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80e4f4:	defffd04 	addi	sp,sp,-12
  80e4f8:	dfc00215 	stw	ra,8(sp)
  80e4fc:	df000115 	stw	fp,4(sp)
  80e500:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80e504:	00802074 	movhi	r2,129
  80e508:	10bc8304 	addi	r2,r2,-3572
  80e50c:	e0bfff15 	stw	r2,-4(fp)
  80e510:	00000606 	br	80e52c <_do_dtors+0x38>
        (*dtor) (); 
  80e514:	e0bfff17 	ldw	r2,-4(fp)
  80e518:	10800017 	ldw	r2,0(r2)
  80e51c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80e520:	e0bfff17 	ldw	r2,-4(fp)
  80e524:	10bfff04 	addi	r2,r2,-4
  80e528:	e0bfff15 	stw	r2,-4(fp)
  80e52c:	e0ffff17 	ldw	r3,-4(fp)
  80e530:	00802074 	movhi	r2,129
  80e534:	10bc8404 	addi	r2,r2,-3568
  80e538:	18bff62e 	bgeu	r3,r2,80e514 <__alt_mem_onchip_mem+0xff806514>
        (*dtor) (); 
}
  80e53c:	0001883a 	nop
  80e540:	e037883a 	mov	sp,fp
  80e544:	dfc00117 	ldw	ra,4(sp)
  80e548:	df000017 	ldw	fp,0(sp)
  80e54c:	dec00204 	addi	sp,sp,8
  80e550:	f800283a 	ret

0080e554 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80e554:	defffa04 	addi	sp,sp,-24
  80e558:	dfc00515 	stw	ra,20(sp)
  80e55c:	df000415 	stw	fp,16(sp)
  80e560:	df000404 	addi	fp,sp,16
  80e564:	e13ffe15 	stw	r4,-8(fp)
  80e568:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80e56c:	e0bfff17 	ldw	r2,-4(fp)
  80e570:	10800017 	ldw	r2,0(r2)
  80e574:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80e578:	e13ffe17 	ldw	r4,-8(fp)
  80e57c:	0808eac0 	call	808eac <strlen>
  80e580:	10800044 	addi	r2,r2,1
  80e584:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80e588:	00000d06 	br	80e5c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80e58c:	e0bffc17 	ldw	r2,-16(fp)
  80e590:	10800217 	ldw	r2,8(r2)
  80e594:	e0fffd17 	ldw	r3,-12(fp)
  80e598:	180d883a 	mov	r6,r3
  80e59c:	e17ffe17 	ldw	r5,-8(fp)
  80e5a0:	1009883a 	mov	r4,r2
  80e5a4:	080eec80 	call	80eec8 <memcmp>
  80e5a8:	1000021e 	bne	r2,zero,80e5b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80e5ac:	e0bffc17 	ldw	r2,-16(fp)
  80e5b0:	00000706 	br	80e5d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80e5b4:	e0bffc17 	ldw	r2,-16(fp)
  80e5b8:	10800017 	ldw	r2,0(r2)
  80e5bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80e5c0:	e0fffc17 	ldw	r3,-16(fp)
  80e5c4:	e0bfff17 	ldw	r2,-4(fp)
  80e5c8:	18bff01e 	bne	r3,r2,80e58c <__alt_mem_onchip_mem+0xff80658c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80e5cc:	0005883a 	mov	r2,zero
}
  80e5d0:	e037883a 	mov	sp,fp
  80e5d4:	dfc00117 	ldw	ra,4(sp)
  80e5d8:	df000017 	ldw	fp,0(sp)
  80e5dc:	dec00204 	addi	sp,sp,8
  80e5e0:	f800283a 	ret

0080e5e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80e5e4:	defffb04 	addi	sp,sp,-20
  80e5e8:	dfc00415 	stw	ra,16(sp)
  80e5ec:	df000315 	stw	fp,12(sp)
  80e5f0:	df000304 	addi	fp,sp,12
  80e5f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80e5f8:	d0a00417 	ldw	r2,-32752(gp)
  80e5fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80e600:	00003106 	br	80e6c8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80e604:	e0bffd17 	ldw	r2,-12(fp)
  80e608:	10800217 	ldw	r2,8(r2)
  80e60c:	1009883a 	mov	r4,r2
  80e610:	0808eac0 	call	808eac <strlen>
  80e614:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80e618:	e0bffd17 	ldw	r2,-12(fp)
  80e61c:	10c00217 	ldw	r3,8(r2)
  80e620:	e0bffe17 	ldw	r2,-8(fp)
  80e624:	10bfffc4 	addi	r2,r2,-1
  80e628:	1885883a 	add	r2,r3,r2
  80e62c:	10800003 	ldbu	r2,0(r2)
  80e630:	10803fcc 	andi	r2,r2,255
  80e634:	1080201c 	xori	r2,r2,128
  80e638:	10bfe004 	addi	r2,r2,-128
  80e63c:	10800bd8 	cmpnei	r2,r2,47
  80e640:	1000031e 	bne	r2,zero,80e650 <alt_find_file+0x6c>
    {
      len -= 1;
  80e644:	e0bffe17 	ldw	r2,-8(fp)
  80e648:	10bfffc4 	addi	r2,r2,-1
  80e64c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80e650:	e0bffe17 	ldw	r2,-8(fp)
  80e654:	e0ffff17 	ldw	r3,-4(fp)
  80e658:	1885883a 	add	r2,r3,r2
  80e65c:	10800003 	ldbu	r2,0(r2)
  80e660:	10803fcc 	andi	r2,r2,255
  80e664:	1080201c 	xori	r2,r2,128
  80e668:	10bfe004 	addi	r2,r2,-128
  80e66c:	10800be0 	cmpeqi	r2,r2,47
  80e670:	1000081e 	bne	r2,zero,80e694 <alt_find_file+0xb0>
  80e674:	e0bffe17 	ldw	r2,-8(fp)
  80e678:	e0ffff17 	ldw	r3,-4(fp)
  80e67c:	1885883a 	add	r2,r3,r2
  80e680:	10800003 	ldbu	r2,0(r2)
  80e684:	10803fcc 	andi	r2,r2,255
  80e688:	1080201c 	xori	r2,r2,128
  80e68c:	10bfe004 	addi	r2,r2,-128
  80e690:	10000a1e 	bne	r2,zero,80e6bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80e694:	e0bffd17 	ldw	r2,-12(fp)
  80e698:	10800217 	ldw	r2,8(r2)
  80e69c:	e0fffe17 	ldw	r3,-8(fp)
  80e6a0:	180d883a 	mov	r6,r3
  80e6a4:	e17fff17 	ldw	r5,-4(fp)
  80e6a8:	1009883a 	mov	r4,r2
  80e6ac:	080eec80 	call	80eec8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80e6b0:	1000021e 	bne	r2,zero,80e6bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80e6b4:	e0bffd17 	ldw	r2,-12(fp)
  80e6b8:	00000706 	br	80e6d8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80e6bc:	e0bffd17 	ldw	r2,-12(fp)
  80e6c0:	10800017 	ldw	r2,0(r2)
  80e6c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80e6c8:	e0fffd17 	ldw	r3,-12(fp)
  80e6cc:	d0a00404 	addi	r2,gp,-32752
  80e6d0:	18bfcc1e 	bne	r3,r2,80e604 <__alt_mem_onchip_mem+0xff806604>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80e6d4:	0005883a 	mov	r2,zero
}
  80e6d8:	e037883a 	mov	sp,fp
  80e6dc:	dfc00117 	ldw	ra,4(sp)
  80e6e0:	df000017 	ldw	fp,0(sp)
  80e6e4:	dec00204 	addi	sp,sp,8
  80e6e8:	f800283a 	ret

0080e6ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80e6ec:	defffc04 	addi	sp,sp,-16
  80e6f0:	df000315 	stw	fp,12(sp)
  80e6f4:	df000304 	addi	fp,sp,12
  80e6f8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80e6fc:	00bffa04 	movi	r2,-24
  80e700:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80e704:	e03ffd15 	stw	zero,-12(fp)
  80e708:	00001906 	br	80e770 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  80e70c:	00802074 	movhi	r2,129
  80e710:	10bfa504 	addi	r2,r2,-364
  80e714:	e0fffd17 	ldw	r3,-12(fp)
  80e718:	18c00324 	muli	r3,r3,12
  80e71c:	10c5883a 	add	r2,r2,r3
  80e720:	10800017 	ldw	r2,0(r2)
  80e724:	10000f1e 	bne	r2,zero,80e764 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  80e728:	00802074 	movhi	r2,129
  80e72c:	10bfa504 	addi	r2,r2,-364
  80e730:	e0fffd17 	ldw	r3,-12(fp)
  80e734:	18c00324 	muli	r3,r3,12
  80e738:	10c5883a 	add	r2,r2,r3
  80e73c:	e0ffff17 	ldw	r3,-4(fp)
  80e740:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80e744:	d0e00817 	ldw	r3,-32736(gp)
  80e748:	e0bffd17 	ldw	r2,-12(fp)
  80e74c:	1880020e 	bge	r3,r2,80e758 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  80e750:	e0bffd17 	ldw	r2,-12(fp)
  80e754:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  80e758:	e0bffd17 	ldw	r2,-12(fp)
  80e75c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80e760:	00000606 	br	80e77c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80e764:	e0bffd17 	ldw	r2,-12(fp)
  80e768:	10800044 	addi	r2,r2,1
  80e76c:	e0bffd15 	stw	r2,-12(fp)
  80e770:	e0bffd17 	ldw	r2,-12(fp)
  80e774:	10800810 	cmplti	r2,r2,32
  80e778:	103fe41e 	bne	r2,zero,80e70c <__alt_mem_onchip_mem+0xff80670c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80e77c:	e0bffe17 	ldw	r2,-8(fp)
}
  80e780:	e037883a 	mov	sp,fp
  80e784:	df000017 	ldw	fp,0(sp)
  80e788:	dec00104 	addi	sp,sp,4
  80e78c:	f800283a 	ret

0080e790 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80e790:	defffe04 	addi	sp,sp,-8
  80e794:	dfc00115 	stw	ra,4(sp)
  80e798:	df000015 	stw	fp,0(sp)
  80e79c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80e7a0:	01440004 	movi	r5,4096
  80e7a4:	0009883a 	mov	r4,zero
  80e7a8:	080ed500 	call	80ed50 <alt_icache_flush>
#endif
}
  80e7ac:	0001883a 	nop
  80e7b0:	e037883a 	mov	sp,fp
  80e7b4:	dfc00117 	ldw	ra,4(sp)
  80e7b8:	df000017 	ldw	fp,0(sp)
  80e7bc:	dec00204 	addi	sp,sp,8
  80e7c0:	f800283a 	ret

0080e7c4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80e7c4:	defff904 	addi	sp,sp,-28
  80e7c8:	dfc00615 	stw	ra,24(sp)
  80e7cc:	df000515 	stw	fp,20(sp)
  80e7d0:	df000504 	addi	fp,sp,20
  80e7d4:	e13ffc15 	stw	r4,-16(fp)
  80e7d8:	e17ffd15 	stw	r5,-12(fp)
  80e7dc:	e1bffe15 	stw	r6,-8(fp)
  80e7e0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80e7e4:	e0800217 	ldw	r2,8(fp)
  80e7e8:	d8800015 	stw	r2,0(sp)
  80e7ec:	e1ffff17 	ldw	r7,-4(fp)
  80e7f0:	e1bffe17 	ldw	r6,-8(fp)
  80e7f4:	e17ffd17 	ldw	r5,-12(fp)
  80e7f8:	e13ffc17 	ldw	r4,-16(fp)
  80e7fc:	080e9740 	call	80e974 <alt_iic_isr_register>
}  
  80e800:	e037883a 	mov	sp,fp
  80e804:	dfc00117 	ldw	ra,4(sp)
  80e808:	df000017 	ldw	fp,0(sp)
  80e80c:	dec00204 	addi	sp,sp,8
  80e810:	f800283a 	ret

0080e814 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80e814:	defff904 	addi	sp,sp,-28
  80e818:	df000615 	stw	fp,24(sp)
  80e81c:	df000604 	addi	fp,sp,24
  80e820:	e13ffe15 	stw	r4,-8(fp)
  80e824:	e17fff15 	stw	r5,-4(fp)
  80e828:	e0bfff17 	ldw	r2,-4(fp)
  80e82c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e830:	0005303a 	rdctl	r2,status
  80e834:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e838:	e0fffb17 	ldw	r3,-20(fp)
  80e83c:	00bfff84 	movi	r2,-2
  80e840:	1884703a 	and	r2,r3,r2
  80e844:	1001703a 	wrctl	status,r2
  
  return context;
  80e848:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e84c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80e850:	00c00044 	movi	r3,1
  80e854:	e0bffa17 	ldw	r2,-24(fp)
  80e858:	1884983a 	sll	r2,r3,r2
  80e85c:	1007883a 	mov	r3,r2
  80e860:	d0a72d17 	ldw	r2,-25420(gp)
  80e864:	1884b03a 	or	r2,r3,r2
  80e868:	d0a72d15 	stw	r2,-25420(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e86c:	d0a72d17 	ldw	r2,-25420(gp)
  80e870:	100170fa 	wrctl	ienable,r2
  80e874:	e0bffc17 	ldw	r2,-16(fp)
  80e878:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e87c:	e0bffd17 	ldw	r2,-12(fp)
  80e880:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e884:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80e888:	0001883a 	nop
}
  80e88c:	e037883a 	mov	sp,fp
  80e890:	df000017 	ldw	fp,0(sp)
  80e894:	dec00104 	addi	sp,sp,4
  80e898:	f800283a 	ret

0080e89c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80e89c:	defff904 	addi	sp,sp,-28
  80e8a0:	df000615 	stw	fp,24(sp)
  80e8a4:	df000604 	addi	fp,sp,24
  80e8a8:	e13ffe15 	stw	r4,-8(fp)
  80e8ac:	e17fff15 	stw	r5,-4(fp)
  80e8b0:	e0bfff17 	ldw	r2,-4(fp)
  80e8b4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e8b8:	0005303a 	rdctl	r2,status
  80e8bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e8c0:	e0fffb17 	ldw	r3,-20(fp)
  80e8c4:	00bfff84 	movi	r2,-2
  80e8c8:	1884703a 	and	r2,r3,r2
  80e8cc:	1001703a 	wrctl	status,r2
  
  return context;
  80e8d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e8d4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80e8d8:	00c00044 	movi	r3,1
  80e8dc:	e0bffa17 	ldw	r2,-24(fp)
  80e8e0:	1884983a 	sll	r2,r3,r2
  80e8e4:	0084303a 	nor	r2,zero,r2
  80e8e8:	1007883a 	mov	r3,r2
  80e8ec:	d0a72d17 	ldw	r2,-25420(gp)
  80e8f0:	1884703a 	and	r2,r3,r2
  80e8f4:	d0a72d15 	stw	r2,-25420(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e8f8:	d0a72d17 	ldw	r2,-25420(gp)
  80e8fc:	100170fa 	wrctl	ienable,r2
  80e900:	e0bffc17 	ldw	r2,-16(fp)
  80e904:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e908:	e0bffd17 	ldw	r2,-12(fp)
  80e90c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e910:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80e914:	0001883a 	nop
}
  80e918:	e037883a 	mov	sp,fp
  80e91c:	df000017 	ldw	fp,0(sp)
  80e920:	dec00104 	addi	sp,sp,4
  80e924:	f800283a 	ret

0080e928 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80e928:	defffc04 	addi	sp,sp,-16
  80e92c:	df000315 	stw	fp,12(sp)
  80e930:	df000304 	addi	fp,sp,12
  80e934:	e13ffe15 	stw	r4,-8(fp)
  80e938:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80e93c:	000530fa 	rdctl	r2,ienable
  80e940:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80e944:	00c00044 	movi	r3,1
  80e948:	e0bfff17 	ldw	r2,-4(fp)
  80e94c:	1884983a 	sll	r2,r3,r2
  80e950:	1007883a 	mov	r3,r2
  80e954:	e0bffd17 	ldw	r2,-12(fp)
  80e958:	1884703a 	and	r2,r3,r2
  80e95c:	1004c03a 	cmpne	r2,r2,zero
  80e960:	10803fcc 	andi	r2,r2,255
}
  80e964:	e037883a 	mov	sp,fp
  80e968:	df000017 	ldw	fp,0(sp)
  80e96c:	dec00104 	addi	sp,sp,4
  80e970:	f800283a 	ret

0080e974 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80e974:	defff504 	addi	sp,sp,-44
  80e978:	dfc00a15 	stw	ra,40(sp)
  80e97c:	df000915 	stw	fp,36(sp)
  80e980:	df000904 	addi	fp,sp,36
  80e984:	e13ffc15 	stw	r4,-16(fp)
  80e988:	e17ffd15 	stw	r5,-12(fp)
  80e98c:	e1bffe15 	stw	r6,-8(fp)
  80e990:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80e994:	00bffa84 	movi	r2,-22
  80e998:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80e99c:	e0bffd17 	ldw	r2,-12(fp)
  80e9a0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80e9a4:	e0bff817 	ldw	r2,-32(fp)
  80e9a8:	10800808 	cmpgei	r2,r2,32
  80e9ac:	1000271e 	bne	r2,zero,80ea4c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e9b0:	0005303a 	rdctl	r2,status
  80e9b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e9b8:	e0fffb17 	ldw	r3,-20(fp)
  80e9bc:	00bfff84 	movi	r2,-2
  80e9c0:	1884703a 	and	r2,r3,r2
  80e9c4:	1001703a 	wrctl	status,r2
  
  return context;
  80e9c8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80e9cc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80e9d0:	00802074 	movhi	r2,129
  80e9d4:	108bd404 	addi	r2,r2,12112
  80e9d8:	e0fff817 	ldw	r3,-32(fp)
  80e9dc:	180690fa 	slli	r3,r3,3
  80e9e0:	10c5883a 	add	r2,r2,r3
  80e9e4:	e0fffe17 	ldw	r3,-8(fp)
  80e9e8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80e9ec:	00802074 	movhi	r2,129
  80e9f0:	108bd404 	addi	r2,r2,12112
  80e9f4:	e0fff817 	ldw	r3,-32(fp)
  80e9f8:	180690fa 	slli	r3,r3,3
  80e9fc:	10c5883a 	add	r2,r2,r3
  80ea00:	10800104 	addi	r2,r2,4
  80ea04:	e0ffff17 	ldw	r3,-4(fp)
  80ea08:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80ea0c:	e0bffe17 	ldw	r2,-8(fp)
  80ea10:	10000526 	beq	r2,zero,80ea28 <alt_iic_isr_register+0xb4>
  80ea14:	e0bff817 	ldw	r2,-32(fp)
  80ea18:	100b883a 	mov	r5,r2
  80ea1c:	e13ffc17 	ldw	r4,-16(fp)
  80ea20:	080e8140 	call	80e814 <alt_ic_irq_enable>
  80ea24:	00000406 	br	80ea38 <alt_iic_isr_register+0xc4>
  80ea28:	e0bff817 	ldw	r2,-32(fp)
  80ea2c:	100b883a 	mov	r5,r2
  80ea30:	e13ffc17 	ldw	r4,-16(fp)
  80ea34:	080e89c0 	call	80e89c <alt_ic_irq_disable>
  80ea38:	e0bff715 	stw	r2,-36(fp)
  80ea3c:	e0bffa17 	ldw	r2,-24(fp)
  80ea40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ea44:	e0bff917 	ldw	r2,-28(fp)
  80ea48:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80ea4c:	e0bff717 	ldw	r2,-36(fp)
}
  80ea50:	e037883a 	mov	sp,fp
  80ea54:	dfc00117 	ldw	ra,4(sp)
  80ea58:	df000017 	ldw	fp,0(sp)
  80ea5c:	dec00204 	addi	sp,sp,8
  80ea60:	f800283a 	ret

0080ea64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80ea64:	defff904 	addi	sp,sp,-28
  80ea68:	dfc00615 	stw	ra,24(sp)
  80ea6c:	df000515 	stw	fp,20(sp)
  80ea70:	df000504 	addi	fp,sp,20
  80ea74:	e13ffc15 	stw	r4,-16(fp)
  80ea78:	e17ffd15 	stw	r5,-12(fp)
  80ea7c:	e1bffe15 	stw	r6,-8(fp)
  80ea80:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80ea84:	e1bfff17 	ldw	r6,-4(fp)
  80ea88:	e17ffe17 	ldw	r5,-8(fp)
  80ea8c:	e13ffd17 	ldw	r4,-12(fp)
  80ea90:	080b8e00 	call	80b8e0 <open>
  80ea94:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80ea98:	e0bffb17 	ldw	r2,-20(fp)
  80ea9c:	10001c16 	blt	r2,zero,80eb10 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  80eaa0:	00802074 	movhi	r2,129
  80eaa4:	10bfa504 	addi	r2,r2,-364
  80eaa8:	e0fffb17 	ldw	r3,-20(fp)
  80eaac:	18c00324 	muli	r3,r3,12
  80eab0:	10c5883a 	add	r2,r2,r3
  80eab4:	10c00017 	ldw	r3,0(r2)
  80eab8:	e0bffc17 	ldw	r2,-16(fp)
  80eabc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80eac0:	00802074 	movhi	r2,129
  80eac4:	10bfa504 	addi	r2,r2,-364
  80eac8:	e0fffb17 	ldw	r3,-20(fp)
  80eacc:	18c00324 	muli	r3,r3,12
  80ead0:	10c5883a 	add	r2,r2,r3
  80ead4:	10800104 	addi	r2,r2,4
  80ead8:	10c00017 	ldw	r3,0(r2)
  80eadc:	e0bffc17 	ldw	r2,-16(fp)
  80eae0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80eae4:	00802074 	movhi	r2,129
  80eae8:	10bfa504 	addi	r2,r2,-364
  80eaec:	e0fffb17 	ldw	r3,-20(fp)
  80eaf0:	18c00324 	muli	r3,r3,12
  80eaf4:	10c5883a 	add	r2,r2,r3
  80eaf8:	10800204 	addi	r2,r2,8
  80eafc:	10c00017 	ldw	r3,0(r2)
  80eb00:	e0bffc17 	ldw	r2,-16(fp)
  80eb04:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80eb08:	e13ffb17 	ldw	r4,-20(fp)
  80eb0c:	080bb6c0 	call	80bb6c <alt_release_fd>
  }
} 
  80eb10:	0001883a 	nop
  80eb14:	e037883a 	mov	sp,fp
  80eb18:	dfc00117 	ldw	ra,4(sp)
  80eb1c:	df000017 	ldw	fp,0(sp)
  80eb20:	dec00204 	addi	sp,sp,8
  80eb24:	f800283a 	ret

0080eb28 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80eb28:	defffb04 	addi	sp,sp,-20
  80eb2c:	dfc00415 	stw	ra,16(sp)
  80eb30:	df000315 	stw	fp,12(sp)
  80eb34:	df000304 	addi	fp,sp,12
  80eb38:	e13ffd15 	stw	r4,-12(fp)
  80eb3c:	e17ffe15 	stw	r5,-8(fp)
  80eb40:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80eb44:	01c07fc4 	movi	r7,511
  80eb48:	01800044 	movi	r6,1
  80eb4c:	e17ffd17 	ldw	r5,-12(fp)
  80eb50:	01002074 	movhi	r4,129
  80eb54:	213fa804 	addi	r4,r4,-352
  80eb58:	080ea640 	call	80ea64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80eb5c:	01c07fc4 	movi	r7,511
  80eb60:	000d883a 	mov	r6,zero
  80eb64:	e17ffe17 	ldw	r5,-8(fp)
  80eb68:	01002074 	movhi	r4,129
  80eb6c:	213fa504 	addi	r4,r4,-364
  80eb70:	080ea640 	call	80ea64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80eb74:	01c07fc4 	movi	r7,511
  80eb78:	01800044 	movi	r6,1
  80eb7c:	e17fff17 	ldw	r5,-4(fp)
  80eb80:	01002074 	movhi	r4,129
  80eb84:	213fab04 	addi	r4,r4,-340
  80eb88:	080ea640 	call	80ea64 <alt_open_fd>
}  
  80eb8c:	0001883a 	nop
  80eb90:	e037883a 	mov	sp,fp
  80eb94:	dfc00117 	ldw	ra,4(sp)
  80eb98:	df000017 	ldw	fp,0(sp)
  80eb9c:	dec00204 	addi	sp,sp,8
  80eba0:	f800283a 	ret

0080eba4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80eba4:	defffd04 	addi	sp,sp,-12
  80eba8:	dfc00215 	stw	ra,8(sp)
  80ebac:	df000115 	stw	fp,4(sp)
  80ebb0:	df000104 	addi	fp,sp,4
  80ebb4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80ebb8:	e13fff17 	ldw	r4,-4(fp)
  80ebbc:	080ebf80 	call	80ebf8 <alt_busy_sleep>
}
  80ebc0:	e037883a 	mov	sp,fp
  80ebc4:	dfc00117 	ldw	ra,4(sp)
  80ebc8:	df000017 	ldw	fp,0(sp)
  80ebcc:	dec00204 	addi	sp,sp,8
  80ebd0:	f800283a 	ret

0080ebd4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80ebd4:	deffff04 	addi	sp,sp,-4
  80ebd8:	df000015 	stw	fp,0(sp)
  80ebdc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80ebe0:	000170fa 	wrctl	ienable,zero
}
  80ebe4:	0001883a 	nop
  80ebe8:	e037883a 	mov	sp,fp
  80ebec:	df000017 	ldw	fp,0(sp)
  80ebf0:	dec00104 	addi	sp,sp,4
  80ebf4:	f800283a 	ret

0080ebf8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80ebf8:	defffa04 	addi	sp,sp,-24
  80ebfc:	dfc00515 	stw	ra,20(sp)
  80ec00:	df000415 	stw	fp,16(sp)
  80ec04:	df000404 	addi	fp,sp,16
  80ec08:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80ec0c:	008000c4 	movi	r2,3
  80ec10:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  80ec14:	e0fffd17 	ldw	r3,-12(fp)
  80ec18:	008003f4 	movhi	r2,15
  80ec1c:	10909004 	addi	r2,r2,16960
  80ec20:	1885383a 	mul	r2,r3,r2
  80ec24:	100b883a 	mov	r5,r2
  80ec28:	0100bef4 	movhi	r4,763
  80ec2c:	213c2004 	addi	r4,r4,-3968
  80ec30:	080aeb40 	call	80aeb4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  80ec34:	100b883a 	mov	r5,r2
  80ec38:	01200034 	movhi	r4,32768
  80ec3c:	213fffc4 	addi	r4,r4,-1
  80ec40:	080aeb40 	call	80aeb4 <__udivsi3>
  80ec44:	100b883a 	mov	r5,r2
  80ec48:	e13fff17 	ldw	r4,-4(fp)
  80ec4c:	080aeb40 	call	80aeb4 <__udivsi3>
  80ec50:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80ec54:	e0bffe17 	ldw	r2,-8(fp)
  80ec58:	10002a26 	beq	r2,zero,80ed04 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  80ec5c:	e03ffc15 	stw	zero,-16(fp)
  80ec60:	00001706 	br	80ecc0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80ec64:	00a00034 	movhi	r2,32768
  80ec68:	10bfffc4 	addi	r2,r2,-1
  80ec6c:	10bfffc4 	addi	r2,r2,-1
  80ec70:	103ffe1e 	bne	r2,zero,80ec6c <__alt_mem_onchip_mem+0xff806c6c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  80ec74:	e0fffd17 	ldw	r3,-12(fp)
  80ec78:	008003f4 	movhi	r2,15
  80ec7c:	10909004 	addi	r2,r2,16960
  80ec80:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80ec84:	100b883a 	mov	r5,r2
  80ec88:	0100bef4 	movhi	r4,763
  80ec8c:	213c2004 	addi	r4,r4,-3968
  80ec90:	080aeb40 	call	80aeb4 <__udivsi3>
  80ec94:	100b883a 	mov	r5,r2
  80ec98:	01200034 	movhi	r4,32768
  80ec9c:	213fffc4 	addi	r4,r4,-1
  80eca0:	080aeb40 	call	80aeb4 <__udivsi3>
  80eca4:	1007883a 	mov	r3,r2
  80eca8:	e0bfff17 	ldw	r2,-4(fp)
  80ecac:	10c5c83a 	sub	r2,r2,r3
  80ecb0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80ecb4:	e0bffc17 	ldw	r2,-16(fp)
  80ecb8:	10800044 	addi	r2,r2,1
  80ecbc:	e0bffc15 	stw	r2,-16(fp)
  80ecc0:	e0fffc17 	ldw	r3,-16(fp)
  80ecc4:	e0bffe17 	ldw	r2,-8(fp)
  80ecc8:	18bfe616 	blt	r3,r2,80ec64 <__alt_mem_onchip_mem+0xff806c64>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80eccc:	e0fffd17 	ldw	r3,-12(fp)
  80ecd0:	008003f4 	movhi	r2,15
  80ecd4:	10909004 	addi	r2,r2,16960
  80ecd8:	1885383a 	mul	r2,r3,r2
  80ecdc:	100b883a 	mov	r5,r2
  80ece0:	0100bef4 	movhi	r4,763
  80ece4:	213c2004 	addi	r4,r4,-3968
  80ece8:	080aeb40 	call	80aeb4 <__udivsi3>
  80ecec:	1007883a 	mov	r3,r2
  80ecf0:	e0bfff17 	ldw	r2,-4(fp)
  80ecf4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80ecf8:	10bfffc4 	addi	r2,r2,-1
  80ecfc:	103ffe1e 	bne	r2,zero,80ecf8 <__alt_mem_onchip_mem+0xff806cf8>
  80ed00:	00000d06 	br	80ed38 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80ed04:	e0fffd17 	ldw	r3,-12(fp)
  80ed08:	008003f4 	movhi	r2,15
  80ed0c:	10909004 	addi	r2,r2,16960
  80ed10:	1885383a 	mul	r2,r3,r2
  80ed14:	100b883a 	mov	r5,r2
  80ed18:	0100bef4 	movhi	r4,763
  80ed1c:	213c2004 	addi	r4,r4,-3968
  80ed20:	080aeb40 	call	80aeb4 <__udivsi3>
  80ed24:	1007883a 	mov	r3,r2
  80ed28:	e0bfff17 	ldw	r2,-4(fp)
  80ed2c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80ed30:	10bfffc4 	addi	r2,r2,-1
  80ed34:	00bffe16 	blt	zero,r2,80ed30 <__alt_mem_onchip_mem+0xff806d30>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80ed38:	0005883a 	mov	r2,zero
}
  80ed3c:	e037883a 	mov	sp,fp
  80ed40:	dfc00117 	ldw	ra,4(sp)
  80ed44:	df000017 	ldw	fp,0(sp)
  80ed48:	dec00204 	addi	sp,sp,8
  80ed4c:	f800283a 	ret

0080ed50 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80ed50:	defffb04 	addi	sp,sp,-20
  80ed54:	df000415 	stw	fp,16(sp)
  80ed58:	df000404 	addi	fp,sp,16
  80ed5c:	e13ffe15 	stw	r4,-8(fp)
  80ed60:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80ed64:	e0bfff17 	ldw	r2,-4(fp)
  80ed68:	10840070 	cmpltui	r2,r2,4097
  80ed6c:	1000021e 	bne	r2,zero,80ed78 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80ed70:	00840004 	movi	r2,4096
  80ed74:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80ed78:	e0fffe17 	ldw	r3,-8(fp)
  80ed7c:	e0bfff17 	ldw	r2,-4(fp)
  80ed80:	1885883a 	add	r2,r3,r2
  80ed84:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80ed88:	e0bffe17 	ldw	r2,-8(fp)
  80ed8c:	e0bffc15 	stw	r2,-16(fp)
  80ed90:	00000506 	br	80eda8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80ed94:	e0bffc17 	ldw	r2,-16(fp)
  80ed98:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80ed9c:	e0bffc17 	ldw	r2,-16(fp)
  80eda0:	10800804 	addi	r2,r2,32
  80eda4:	e0bffc15 	stw	r2,-16(fp)
  80eda8:	e0fffc17 	ldw	r3,-16(fp)
  80edac:	e0bffd17 	ldw	r2,-12(fp)
  80edb0:	18bff836 	bltu	r3,r2,80ed94 <__alt_mem_onchip_mem+0xff806d94>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80edb4:	e0bffe17 	ldw	r2,-8(fp)
  80edb8:	108007cc 	andi	r2,r2,31
  80edbc:	10000226 	beq	r2,zero,80edc8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80edc0:	e0bffc17 	ldw	r2,-16(fp)
  80edc4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80edc8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80edcc:	0001883a 	nop
  80edd0:	e037883a 	mov	sp,fp
  80edd4:	df000017 	ldw	fp,0(sp)
  80edd8:	dec00104 	addi	sp,sp,4
  80eddc:	f800283a 	ret

0080ede0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80ede0:	defffe04 	addi	sp,sp,-8
  80ede4:	df000115 	stw	fp,4(sp)
  80ede8:	df000104 	addi	fp,sp,4
  80edec:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  80edf0:	e0bfff17 	ldw	r2,-4(fp)
  80edf4:	10bffe84 	addi	r2,r2,-6
  80edf8:	10c00428 	cmpgeui	r3,r2,16
  80edfc:	18001a1e 	bne	r3,zero,80ee68 <alt_exception_cause_generated_bad_addr+0x88>
  80ee00:	100690ba 	slli	r3,r2,2
  80ee04:	00802074 	movhi	r2,129
  80ee08:	10bb8604 	addi	r2,r2,-4584
  80ee0c:	1885883a 	add	r2,r3,r2
  80ee10:	10800017 	ldw	r2,0(r2)
  80ee14:	1000683a 	jmp	r2
  80ee18:	0080ee58 	cmpnei	r2,zero,953
  80ee1c:	0080ee58 	cmpnei	r2,zero,953
  80ee20:	0080ee68 	cmpgeui	r2,zero,953
  80ee24:	0080ee68 	cmpgeui	r2,zero,953
  80ee28:	0080ee68 	cmpgeui	r2,zero,953
  80ee2c:	0080ee58 	cmpnei	r2,zero,953
  80ee30:	0080ee60 	cmpeqi	r2,zero,953
  80ee34:	0080ee68 	cmpgeui	r2,zero,953
  80ee38:	0080ee58 	cmpnei	r2,zero,953
  80ee3c:	0080ee58 	cmpnei	r2,zero,953
  80ee40:	0080ee68 	cmpgeui	r2,zero,953
  80ee44:	0080ee58 	cmpnei	r2,zero,953
  80ee48:	0080ee60 	cmpeqi	r2,zero,953
  80ee4c:	0080ee68 	cmpgeui	r2,zero,953
  80ee50:	0080ee68 	cmpgeui	r2,zero,953
  80ee54:	0080ee58 	cmpnei	r2,zero,953
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80ee58:	00800044 	movi	r2,1
  80ee5c:	00000306 	br	80ee6c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80ee60:	0005883a 	mov	r2,zero
  80ee64:	00000106 	br	80ee6c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  80ee68:	0005883a 	mov	r2,zero
  }
}
  80ee6c:	e037883a 	mov	sp,fp
  80ee70:	df000017 	ldw	fp,0(sp)
  80ee74:	dec00104 	addi	sp,sp,4
  80ee78:	f800283a 	ret

0080ee7c <atexit>:
  80ee7c:	200b883a 	mov	r5,r4
  80ee80:	000f883a 	mov	r7,zero
  80ee84:	000d883a 	mov	r6,zero
  80ee88:	0009883a 	mov	r4,zero
  80ee8c:	080ef441 	jmpi	80ef44 <__register_exitproc>

0080ee90 <exit>:
  80ee90:	defffe04 	addi	sp,sp,-8
  80ee94:	000b883a 	mov	r5,zero
  80ee98:	dc000015 	stw	r16,0(sp)
  80ee9c:	dfc00115 	stw	ra,4(sp)
  80eea0:	2021883a 	mov	r16,r4
  80eea4:	080f05c0 	call	80f05c <__call_exitprocs>
  80eea8:	00802074 	movhi	r2,129
  80eeac:	10849604 	addi	r2,r2,4696
  80eeb0:	11000017 	ldw	r4,0(r2)
  80eeb4:	20800f17 	ldw	r2,60(r4)
  80eeb8:	10000126 	beq	r2,zero,80eec0 <exit+0x30>
  80eebc:	103ee83a 	callr	r2
  80eec0:	8009883a 	mov	r4,r16
  80eec4:	080f1dc0 	call	80f1dc <_exit>

0080eec8 <memcmp>:
  80eec8:	01c000c4 	movi	r7,3
  80eecc:	3980192e 	bgeu	r7,r6,80ef34 <memcmp+0x6c>
  80eed0:	2144b03a 	or	r2,r4,r5
  80eed4:	11c4703a 	and	r2,r2,r7
  80eed8:	10000f26 	beq	r2,zero,80ef18 <memcmp+0x50>
  80eedc:	20800003 	ldbu	r2,0(r4)
  80eee0:	28c00003 	ldbu	r3,0(r5)
  80eee4:	10c0151e 	bne	r2,r3,80ef3c <memcmp+0x74>
  80eee8:	31bfff84 	addi	r6,r6,-2
  80eeec:	01ffffc4 	movi	r7,-1
  80eef0:	00000406 	br	80ef04 <memcmp+0x3c>
  80eef4:	20800003 	ldbu	r2,0(r4)
  80eef8:	28c00003 	ldbu	r3,0(r5)
  80eefc:	31bfffc4 	addi	r6,r6,-1
  80ef00:	10c00e1e 	bne	r2,r3,80ef3c <memcmp+0x74>
  80ef04:	21000044 	addi	r4,r4,1
  80ef08:	29400044 	addi	r5,r5,1
  80ef0c:	31fff91e 	bne	r6,r7,80eef4 <__alt_mem_onchip_mem+0xff806ef4>
  80ef10:	0005883a 	mov	r2,zero
  80ef14:	f800283a 	ret
  80ef18:	20c00017 	ldw	r3,0(r4)
  80ef1c:	28800017 	ldw	r2,0(r5)
  80ef20:	18bfee1e 	bne	r3,r2,80eedc <__alt_mem_onchip_mem+0xff806edc>
  80ef24:	31bfff04 	addi	r6,r6,-4
  80ef28:	21000104 	addi	r4,r4,4
  80ef2c:	29400104 	addi	r5,r5,4
  80ef30:	39bff936 	bltu	r7,r6,80ef18 <__alt_mem_onchip_mem+0xff806f18>
  80ef34:	303fe91e 	bne	r6,zero,80eedc <__alt_mem_onchip_mem+0xff806edc>
  80ef38:	003ff506 	br	80ef10 <__alt_mem_onchip_mem+0xff806f10>
  80ef3c:	10c5c83a 	sub	r2,r2,r3
  80ef40:	f800283a 	ret

0080ef44 <__register_exitproc>:
  80ef44:	defffa04 	addi	sp,sp,-24
  80ef48:	dc000315 	stw	r16,12(sp)
  80ef4c:	04002074 	movhi	r16,129
  80ef50:	84049604 	addi	r16,r16,4696
  80ef54:	80c00017 	ldw	r3,0(r16)
  80ef58:	dc400415 	stw	r17,16(sp)
  80ef5c:	dfc00515 	stw	ra,20(sp)
  80ef60:	18805217 	ldw	r2,328(r3)
  80ef64:	2023883a 	mov	r17,r4
  80ef68:	10003726 	beq	r2,zero,80f048 <__register_exitproc+0x104>
  80ef6c:	10c00117 	ldw	r3,4(r2)
  80ef70:	010007c4 	movi	r4,31
  80ef74:	20c00e16 	blt	r4,r3,80efb0 <__register_exitproc+0x6c>
  80ef78:	1a000044 	addi	r8,r3,1
  80ef7c:	8800221e 	bne	r17,zero,80f008 <__register_exitproc+0xc4>
  80ef80:	18c00084 	addi	r3,r3,2
  80ef84:	18c7883a 	add	r3,r3,r3
  80ef88:	18c7883a 	add	r3,r3,r3
  80ef8c:	12000115 	stw	r8,4(r2)
  80ef90:	10c7883a 	add	r3,r2,r3
  80ef94:	19400015 	stw	r5,0(r3)
  80ef98:	0005883a 	mov	r2,zero
  80ef9c:	dfc00517 	ldw	ra,20(sp)
  80efa0:	dc400417 	ldw	r17,16(sp)
  80efa4:	dc000317 	ldw	r16,12(sp)
  80efa8:	dec00604 	addi	sp,sp,24
  80efac:	f800283a 	ret
  80efb0:	00800034 	movhi	r2,0
  80efb4:	10800004 	addi	r2,r2,0
  80efb8:	10002626 	beq	r2,zero,80f054 <__register_exitproc+0x110>
  80efbc:	01006404 	movi	r4,400
  80efc0:	d9400015 	stw	r5,0(sp)
  80efc4:	d9800115 	stw	r6,4(sp)
  80efc8:	d9c00215 	stw	r7,8(sp)
  80efcc:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80efd0:	d9400017 	ldw	r5,0(sp)
  80efd4:	d9800117 	ldw	r6,4(sp)
  80efd8:	d9c00217 	ldw	r7,8(sp)
  80efdc:	10001d26 	beq	r2,zero,80f054 <__register_exitproc+0x110>
  80efe0:	81000017 	ldw	r4,0(r16)
  80efe4:	10000115 	stw	zero,4(r2)
  80efe8:	02000044 	movi	r8,1
  80efec:	22405217 	ldw	r9,328(r4)
  80eff0:	0007883a 	mov	r3,zero
  80eff4:	12400015 	stw	r9,0(r2)
  80eff8:	20805215 	stw	r2,328(r4)
  80effc:	10006215 	stw	zero,392(r2)
  80f000:	10006315 	stw	zero,396(r2)
  80f004:	883fde26 	beq	r17,zero,80ef80 <__alt_mem_onchip_mem+0xff806f80>
  80f008:	18c9883a 	add	r4,r3,r3
  80f00c:	2109883a 	add	r4,r4,r4
  80f010:	1109883a 	add	r4,r2,r4
  80f014:	21802215 	stw	r6,136(r4)
  80f018:	01800044 	movi	r6,1
  80f01c:	12406217 	ldw	r9,392(r2)
  80f020:	30cc983a 	sll	r6,r6,r3
  80f024:	4992b03a 	or	r9,r9,r6
  80f028:	12406215 	stw	r9,392(r2)
  80f02c:	21c04215 	stw	r7,264(r4)
  80f030:	01000084 	movi	r4,2
  80f034:	893fd21e 	bne	r17,r4,80ef80 <__alt_mem_onchip_mem+0xff806f80>
  80f038:	11006317 	ldw	r4,396(r2)
  80f03c:	218cb03a 	or	r6,r4,r6
  80f040:	11806315 	stw	r6,396(r2)
  80f044:	003fce06 	br	80ef80 <__alt_mem_onchip_mem+0xff806f80>
  80f048:	18805304 	addi	r2,r3,332
  80f04c:	18805215 	stw	r2,328(r3)
  80f050:	003fc606 	br	80ef6c <__alt_mem_onchip_mem+0xff806f6c>
  80f054:	00bfffc4 	movi	r2,-1
  80f058:	003fd006 	br	80ef9c <__alt_mem_onchip_mem+0xff806f9c>

0080f05c <__call_exitprocs>:
  80f05c:	defff504 	addi	sp,sp,-44
  80f060:	df000915 	stw	fp,36(sp)
  80f064:	dd400615 	stw	r21,24(sp)
  80f068:	dc800315 	stw	r18,12(sp)
  80f06c:	dfc00a15 	stw	ra,40(sp)
  80f070:	ddc00815 	stw	r23,32(sp)
  80f074:	dd800715 	stw	r22,28(sp)
  80f078:	dd000515 	stw	r20,20(sp)
  80f07c:	dcc00415 	stw	r19,16(sp)
  80f080:	dc400215 	stw	r17,8(sp)
  80f084:	dc000115 	stw	r16,4(sp)
  80f088:	d9000015 	stw	r4,0(sp)
  80f08c:	2839883a 	mov	fp,r5
  80f090:	04800044 	movi	r18,1
  80f094:	057fffc4 	movi	r21,-1
  80f098:	00802074 	movhi	r2,129
  80f09c:	10849604 	addi	r2,r2,4696
  80f0a0:	12000017 	ldw	r8,0(r2)
  80f0a4:	45005217 	ldw	r20,328(r8)
  80f0a8:	44c05204 	addi	r19,r8,328
  80f0ac:	a0001c26 	beq	r20,zero,80f120 <__call_exitprocs+0xc4>
  80f0b0:	a0800117 	ldw	r2,4(r20)
  80f0b4:	15ffffc4 	addi	r23,r2,-1
  80f0b8:	b8000d16 	blt	r23,zero,80f0f0 <__call_exitprocs+0x94>
  80f0bc:	14000044 	addi	r16,r2,1
  80f0c0:	8421883a 	add	r16,r16,r16
  80f0c4:	8421883a 	add	r16,r16,r16
  80f0c8:	84402004 	addi	r17,r16,128
  80f0cc:	a463883a 	add	r17,r20,r17
  80f0d0:	a421883a 	add	r16,r20,r16
  80f0d4:	e0001e26 	beq	fp,zero,80f150 <__call_exitprocs+0xf4>
  80f0d8:	80804017 	ldw	r2,256(r16)
  80f0dc:	e0801c26 	beq	fp,r2,80f150 <__call_exitprocs+0xf4>
  80f0e0:	bdffffc4 	addi	r23,r23,-1
  80f0e4:	843fff04 	addi	r16,r16,-4
  80f0e8:	8c7fff04 	addi	r17,r17,-4
  80f0ec:	bd7ff91e 	bne	r23,r21,80f0d4 <__alt_mem_onchip_mem+0xff8070d4>
  80f0f0:	00800034 	movhi	r2,0
  80f0f4:	10800004 	addi	r2,r2,0
  80f0f8:	10000926 	beq	r2,zero,80f120 <__call_exitprocs+0xc4>
  80f0fc:	a0800117 	ldw	r2,4(r20)
  80f100:	1000301e 	bne	r2,zero,80f1c4 <__call_exitprocs+0x168>
  80f104:	a0800017 	ldw	r2,0(r20)
  80f108:	10003226 	beq	r2,zero,80f1d4 <__call_exitprocs+0x178>
  80f10c:	a009883a 	mov	r4,r20
  80f110:	98800015 	stw	r2,0(r19)
  80f114:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80f118:	9d000017 	ldw	r20,0(r19)
  80f11c:	a03fe41e 	bne	r20,zero,80f0b0 <__alt_mem_onchip_mem+0xff8070b0>
  80f120:	dfc00a17 	ldw	ra,40(sp)
  80f124:	df000917 	ldw	fp,36(sp)
  80f128:	ddc00817 	ldw	r23,32(sp)
  80f12c:	dd800717 	ldw	r22,28(sp)
  80f130:	dd400617 	ldw	r21,24(sp)
  80f134:	dd000517 	ldw	r20,20(sp)
  80f138:	dcc00417 	ldw	r19,16(sp)
  80f13c:	dc800317 	ldw	r18,12(sp)
  80f140:	dc400217 	ldw	r17,8(sp)
  80f144:	dc000117 	ldw	r16,4(sp)
  80f148:	dec00b04 	addi	sp,sp,44
  80f14c:	f800283a 	ret
  80f150:	a0800117 	ldw	r2,4(r20)
  80f154:	80c00017 	ldw	r3,0(r16)
  80f158:	10bfffc4 	addi	r2,r2,-1
  80f15c:	15c01426 	beq	r2,r23,80f1b0 <__call_exitprocs+0x154>
  80f160:	80000015 	stw	zero,0(r16)
  80f164:	183fde26 	beq	r3,zero,80f0e0 <__alt_mem_onchip_mem+0xff8070e0>
  80f168:	95c8983a 	sll	r4,r18,r23
  80f16c:	a0806217 	ldw	r2,392(r20)
  80f170:	a5800117 	ldw	r22,4(r20)
  80f174:	2084703a 	and	r2,r4,r2
  80f178:	10000b26 	beq	r2,zero,80f1a8 <__call_exitprocs+0x14c>
  80f17c:	a0806317 	ldw	r2,396(r20)
  80f180:	2088703a 	and	r4,r4,r2
  80f184:	20000c1e 	bne	r4,zero,80f1b8 <__call_exitprocs+0x15c>
  80f188:	89400017 	ldw	r5,0(r17)
  80f18c:	d9000017 	ldw	r4,0(sp)
  80f190:	183ee83a 	callr	r3
  80f194:	a0800117 	ldw	r2,4(r20)
  80f198:	15bfbf1e 	bne	r2,r22,80f098 <__alt_mem_onchip_mem+0xff807098>
  80f19c:	98800017 	ldw	r2,0(r19)
  80f1a0:	153fcf26 	beq	r2,r20,80f0e0 <__alt_mem_onchip_mem+0xff8070e0>
  80f1a4:	003fbc06 	br	80f098 <__alt_mem_onchip_mem+0xff807098>
  80f1a8:	183ee83a 	callr	r3
  80f1ac:	003ff906 	br	80f194 <__alt_mem_onchip_mem+0xff807194>
  80f1b0:	a5c00115 	stw	r23,4(r20)
  80f1b4:	003feb06 	br	80f164 <__alt_mem_onchip_mem+0xff807164>
  80f1b8:	89000017 	ldw	r4,0(r17)
  80f1bc:	183ee83a 	callr	r3
  80f1c0:	003ff406 	br	80f194 <__alt_mem_onchip_mem+0xff807194>
  80f1c4:	a0800017 	ldw	r2,0(r20)
  80f1c8:	a027883a 	mov	r19,r20
  80f1cc:	1029883a 	mov	r20,r2
  80f1d0:	003fb606 	br	80f0ac <__alt_mem_onchip_mem+0xff8070ac>
  80f1d4:	0005883a 	mov	r2,zero
  80f1d8:	003ffb06 	br	80f1c8 <__alt_mem_onchip_mem+0xff8071c8>

0080f1dc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80f1dc:	defffd04 	addi	sp,sp,-12
  80f1e0:	df000215 	stw	fp,8(sp)
  80f1e4:	df000204 	addi	fp,sp,8
  80f1e8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80f1ec:	0001883a 	nop
  80f1f0:	e0bfff17 	ldw	r2,-4(fp)
  80f1f4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80f1f8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80f1fc:	10000226 	beq	r2,zero,80f208 <_exit+0x2c>
    ALT_SIM_FAIL();
  80f200:	002af070 	cmpltui	zero,zero,43969
  80f204:	00000106 	br	80f20c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80f208:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80f20c:	003fff06 	br	80f20c <__alt_mem_onchip_mem+0xff80720c>
