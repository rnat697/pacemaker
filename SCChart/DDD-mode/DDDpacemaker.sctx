#resource "timing.h"
#hostcode-c "#include \"timing.h\""
scchart DDDpacemaker {
  
  // atrial sense atrial pace, ventricular sense and pace.
  
    // the reason why its throwing all these errors is because they are both trying to access the same variable?
    //pre()//use value from previosu tick 
    
    
    
    //to debug eitehr have a mac, or use the artifical heart from the board or use NIOSII
    // or write a C test bench in order to catch certain variables from it ,(Araon has some test stuff written up)
    
    
  
  
  input bool AS,VS
  input int AVI_counter, AEI_counter, PVARP_counter,VRP_counter, LRI_counter, URI_counter
  
  output bool AP, VP
  initial state top {
    bool AVI_start, AVI_extend, AVI_stop
    bool AEI_start, AEI_stop
    bool LRI_start, LRI_reset, LRI_stop
    bool PVARP_start, PVARP_stop
    bool VRP_start, VRP_stop
    bool URI_start, URI_stop
    bool AR, VR
    
     region AVI{
      initial state init_AVI
      if AS go to commit1

      connector state commit1
      immediate do AVI_start = true go to waitAVI

  
  

      state waitAVI
      if VS go to commit2
      if AVI_extend go to waitAVIExtend
      if AVI_counter >= `AVI_VALUE` go to commit3
      
      state waitAVIExtend
      if VS go to commit2
      if AVI_counter >= `URI_VALUE` go to commit3
      
      connector state commit2
      immediate do AVI_stop = true; VP=false go to init_AVI

      connector state commit3
      immediate do VP = true; AVI_stop = true go to init_AVI
      
    }
     region AVI_timer {
      initial state idle_AVI
      if AVI_start go to timer

      state timer
      if AVI_stop go to idle_AVI
      if AVI_counter <`URI_VALUE` do AVI_extend = true go to idle_AVI // avi timing deadline extension
    }
   
   region AEI{
     initial state init_AEI
     if VS go to comit1
     connector state comit1
     immediate do AEI_start = true go to waitAEI

    state waitAEI
    if AS go to comit2
    if AEI_counter >= `AEI_VALUE` go to comit3

    connector state comit2
    immediate do AEI_stop = true; AP=false go to init_AEI

    connector state comit3
    immediate do AP = true; AEI_stop = true go to init_AEI
   }
   
   region AEI_Timer{
     initial state idle_AEI
     if AEI_start go to timer

      state timer
      if AEI_stop go to idle_AEI
       
 
   }
   
    region PVARP{
     initial state init_PVARP
     if VS go to start_PVARP
     
     state start_PVARP
     immediate do PVARP_start = true; go to wait_PVARP
     
     state wait_PVARP
     if AS go to ignore_AS
     
     state ignore_AS
     immediate do AR = true;
     
     }
     
   region PVARP_Timer{
     initial state idle_PVARP
      if PVARP_start go to timer

      state timer
      if AVI_stop go to idle_PVARP
      if AVI_counter <`URI_VALUE` do AVI_extend = true go to idle_AVI
     }
     
   region VRP{
     initial state VRP
     
     
   }
   region VRP_Timer{
     initial state idle_VRP
     
     
   }
   
      region LRI{
     initial state LRI
     
     
   }
   
     region LRI_Timer{
     initial state idle_LRI
     
     
   }
   
      region LRI{
     initial state LRI
     
     
   }
   
         region LRI{
     initial state idle_LRI
     
     
   }
  }

}
